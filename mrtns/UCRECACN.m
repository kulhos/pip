UCRECACN	;
	;
	; **** Routine compiled from DATA-QWIK Procedure UCRECACN ****
	;
	; 09/10/2007 17:32 - chenardp
	;
	;
	; *******************************************************************
	; * IMPORTANT NOTE:                                                 *
	; * According to the rules that apply to PSL compiler upgrades,     *
	; * the generated M routine associated with this procedure must be  *
	; * checked into StarTeam and released with the procedure whenever  *
	; * changes are made to this procedure.  The M routine from the     *
	; * crtns directory should be used for this purpose.                *
	; *                                                                 *
	; * The M routine will be loaded to the mrtns directory during      *
	; * upgrades and will then be removed from that directory as part   *
	; * of the upgrade process.  Therefore, other during an upgrade,    *
	; * an mrtns version of this routine should not exist.              *
	; *                                                                 *
	; * Keep these comments as single line to ensure they exist in the  *
	; * generated M code.                                               *
	; *******************************************************************
	;
	Q  ; No entry from top
	;
	; ---------------------------------------------------------------------
upd(target,source,keys)	;
	;
	N comment N label
	;
	S comment="Record"_target_".renew("_keys_")"
	;
	S label=$$findSubr^UCGM("vRe"_target,comment)
	;
	I '$D(labels(label)) D
	.	;
	.	N collist N primkeys
	.	N i
	.	N col N from N to
	.	;
	.	N buf S buf=$$vopenBuf("(Record"_target_" vTarget)",comment)
	.	;
	.	D vaddBuff(buf,"type Record"_source_" vOid = Db.getRecord("""_source_""","_keys_")")
	.	D vaddBuff(buf,"do vTarget.setAuditFlag(1)")
	.	;
	.	S collist=$$COLLIST^DBSDD(source,1,1,1,.primkeys)
	.	F i=1:1:$S((collist=""):0,1:$L(collist,",")) D
	..		;
	..		S col=$piece(collist,",",i)
	..		;
	..		Q:((","_primkeys_",")[(","_col_",")) 
	..		Q:'$$isColumn^UCXDD(target,col) 
	..		;
	..		S from="vOid."_$$vStrLC(col,0)
	..		S to="vTarget."_$$vStrLC(col,0)
	..		;
	..		D vaddBuff(buf,"if '"_from_".isNull(), ("_from_" '= "_to_") set "_to_" = "_from)
	..		Q 
	.	;
	.	D vaddBuff(buf,"quit")
	.	;
	.	D INSERT^UCMETHOD(buf,label,"")
	.	K vobj(+$G(buf)) Q 
	;
	S return=label_"("_objectName_")"
	;
	Q 
	;
	; ---------------------------------------------------------------------
default(targttbl,rtnname,dfttable,oldcols)	;
	;
	N i
	N cmperr N col N pslcode N retval N split N targtobj
	N collist
	;
	I ($E(actual(1),1)="""") D warnGroup^UCGM("MISMATCH",".default() method argument should not be in quotes")
	S retval="^"_rtnname_"("_objectName_","_$$QSUB^%ZS(actual(1),"""")_")"
	;
	S collist=$$COLLIST^DBSDD(dfttable,1,1,1,"")
	;
	S targtobj="vTarget"
	;
	D addcode(.pslcode,"public "_rtnname_"(Record"_targttbl_" "_"vTarget"_",  // "_targttbl_" record to default data to")
	D addcode(.pslcode," Number TYPE)  // "_targttbl_" Type")
	D addcode(.pslcode,"")
	D addcode(.pslcode," // This code is generated by procedure UCRECACN when a PSL element")
	D addcode(.pslcode," // that uses the Record"_targttbl_".default() method is compiled and there")
	D addcode(.pslcode," // has been a change in the table "_dfttable_".")
	D addcode(.pslcode,"")
	D addcode(.pslcode," // This code defaults new "_targttbl_" data by copying the values in table")
	D addcode(.pslcode," // "_dfttable_" into the Record"_targttbl_" object passed in.")
	D addcode(.pslcode,"")
	;
	D addcode(.pslcode," type Record"_dfttable_" proddft = Db.getRecord("""_dfttable_""", ""TYPE=:TYPE"")")
	;
	F i=1:1:$S((collist=""):0,1:$L(collist,",")) D
	.	;
	.	S col=$piece(collist,",",i)
	.	;
	.	Q:'$$isColumn^UCXDD(targttbl,col) 
	.	;
	.	D addcode(.pslcode," set "_targtobj_"."_$$vStrLC(col,0)_" = proddft."_$$vStrLC(col,0))
	.	Q 
	;
	D addcode(.pslcode," quit")
	;
	; Save column list used for this build for checking to see if need re-build
	D addcode(.pslcode,"")
	D addcode(.pslcode,"private colsused() // Return list of columns used to build this version")
	D addcode(.pslcode," type Number X = 1 // FOR LITERAL PROBLEM")
	D addcode(.pslcode," type String ret")
	D addcode(.pslcode," set ret = """"")
	;
	D splitCode^UCGMC(collist,0,"",.split)
	F i=1:1:$order(split(""),-1) D addcode(.pslcode," set ret = ret_"_$S(split(i)'["""":""""_split(i)_"""",1:$$QADD^%ZS(split(i),"""")))
	;
	D addcode(.pslcode," quit ret")
	;
	; Call PSL compiler
	D cmpA2F^UCGM(.pslcode,rtnname,,,.commands,,.cmperr)
	;
	I $get(cmperr) D ERROR^UCGM("Error generating "_rtnname_" - review UCRECACN.PROC")
	;
	S return=retval
	;
	Q 
	;
addcode(pslcode,code)	;
	;
	N line S line=$order(pslcode(""),-1)+1
	;
	S pslcode(line)=code
	;
	Q 
	; ----------------
	;  #OPTION ResultClass 0
vopenBuf(v1,v2)	; PSL.openBuffer
	;
	;  #OPTIMIZE FUNCTIONS OFF
	N vOid
	S vOid=$order(vobj(""),-1)+1
	I $E(v1,1)'="(",'(v1="") S v1="("_v1_")"
	S vobj(vOid,-1)=v1
	S vobj(vOid,-2)=v2
	S vobj(vOid,1)=v1_" // "_v2
	Q vOid
	; ----------------
	;  #OPTION ResultClass 0
vaddBuff(object,p1)	; PSLBuffer.add
	;
	;  #OPTIMIZE FUNCTIONS OFF
	N line
	S line=$order(vobj(object,""),-1)+1
	S vobj(object,line)=" "_p1
	Q 
	; ----------------
	;  #OPTION ResultClass 0
vStrLC(vObj,v1)	; String.lowerCase
	;
	;  #OPTIMIZE FUNCTIONS OFF
	S vObj=$translate(vObj,"ABCDEFGHIJKLMNOPQRSTUVWXYZ°£•¶©™´¨ÆØ¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷ÿŸ⁄€‹›ﬁ","abcdefghijklmnopqrstuvwxyz±≥µ∂π∫ªºæø‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ¯˘˙˚¸˝˛")
	I v1 S vObj=$$vStrUC($E(vObj,1))_$E(vObj,2,1048575)
	Q vObj
	; ----------------
	;  #OPTION ResultClass 0
vStrUC(vObj)	; String.upperCase
	;
	;  #OPTIMIZE FUNCTIONS OFF
	Q $translate(vObj,"abcdefghijklmnopqrstuvwxyz±≥µ∂π∫ªºæø‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ¯˘˙˚¸˝˛","ABCDEFGHIJKLMNOPQRSTUVWXYZ°£•¶©™´¨ÆØ¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷ÿŸ⁄€‹›ﬁ")
