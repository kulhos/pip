^OBJECT("Blob")="Primitive|Primitive class for Blob column||0|0|1"
^OBJECT("Boolean")="Primitive|Primitive class for Booleans||0|0|1"
^OBJECT("ByteString")="Primitive|Primitive class for ByteStrings||0|0|1"
^OBJECT("ByteString",1,"ascii")="Number|local Number position|ascii^UCBYTSTR|ASCII code of byte at specified pos|||||1"
^OBJECT("ByteString",1,"extract")="ByteString|local Number start,local Number end|extract^UCBYTSTR|Extract a bytestring|||||1"
^OBJECT("ByteString",1,"find")="Number|local ByteString string,local Number start|find^UCBYTSTR|Find the next position of a bytestring|||||1"
^OBJECT("ByteString",1,"justify")="ByteString|local Number fieldLength|justify^UCBYTSTR|Justify a bytestring|||||1"
^OBJECT("ByteString",1,"length")="Number|local ByteString delimiter|length^UCBYTSTR|String length|||||1"
^OBJECT("ByteString",1,"piece")="ByteString|local ByteString delimiter,local Number start,local Number end|piece^UCBYTSTR|Return bytestring at delimited position|||||1"
^OBJECT("ByteString",1,"toPSLExpression")="PSLExpression||toPSLExpr^UCBYTSTR|translate literal value to PSL expression|||||1"
^OBJECT("ByteString",1,"translate")="ByteString|local ByteString lookFor,local ByteString replaceBy|translate^UCBYTSTR|Byte by byte replace|||||1"
^OBJECT("Cache")="Reference|Local Process Database Cache||0|0|0"
^OBJECT("Cache",1,"getRecord")="Record|literal String table,String KeyExpr,literal Boolean classNew|Cache^UCDB|Get RecordTABLE object from Cache"
^OBJECT("Cache",1,"isDefined")="Boolean|literal String table,String KeyExpr|CacheDef^UCDB|Check if RecordTABLE row exists using Cache"
^OBJECT("Class")="|To query the class hierarchy||0|1|0"
^OBJECT("Class",1,"isAncestor")="Boolean|String ancestorName,String descendantName|isAncestor^UCCLASS|Is Name1 an ancestor of Name2|||||1"
^OBJECT("Class",1,"isClass")="Boolean|String className|isClass^UCCLASS|Does className exist in OBJECT table|||ISVALID||1"
^OBJECT("Class",1,"isDescendant")="Boolean|String descendantName,String ancestorName|isDescendant^UCCLASS|Is Name1 a descendant of Name2|||||1"
^OBJECT("Class",1,"isValid")="Boolean|Reference instance|isValid^UCCLASS|Does className exist in OBJECT table|||ISVALID||1"
^OBJECT("Class",1,"new")="Object|literal String Class,Object initObj|classNew^UCCLASS|Create a new instance of class|||NEW"
^OBJECT("Column")="Reference|Column classes ancestor||1|1|1"
^OBJECT("Column",0,"des")="||String|Description|||des^UCCOLUMN|1"
^OBJECT("Column",0,"journal")="||String|Journal Flag|||journal^UCCOLUMN"
^OBJECT("Column",0,"key")="||Number|Key Number|||key^UCCOLUMN|1"
^OBJECT("Column",0,"len")="||Number|Length|||len^UCCOLUMN|1"
^OBJECT("Column",0,"oldVal")="||String|Old Value|||oldVal^UCCOLUMN|1"
^OBJECT("Column",0,"req")="||Boolean|Required|||req^UCCOLUMN|1"
^OBJECT("Column",0,"typ")="||String|Data Type|||typ^UCCOLUMN|1"
^OBJECT("Date")="Primitive|Primitive class for Date column||0|0|1"
^OBJECT("Date",1,"day")="String||day^UCDATE|2 digit day of month|||DATE||1"
^OBJECT("Date",1,"dayOfMonth")="Number||dayOfM^UCDATE|Numeric day of the month|||||1"
^OBJECT("Date",1,"dayOfYear")="Number||dayOfYr^UCDATE|Day of the year|||||1"
^OBJECT("Date",1,"daysInMonth")="Number||daysInMo^UCDATE|Number of days in Month|||||1"
^OBJECT("Date",1,"daysToEOY")="Number||daysToEOY^UCDATE|Days to the end of the year|||||1"
^OBJECT("Date",1,"isBusDate")="Boolean|local String Calendar|isBusDat^UCDATE|Date is a business date in calendar|||||1"
^OBJECT("Date",1,"isLeapYear")="Boolean||isLeapYr^UCDATE|Leap Year|||||1"
^OBJECT("Date",1,"month")="String||month^UCDATE|2 digit month of year|||DATE||1"
^OBJECT("Date",1,"monthOfYear")="Number||monthOfY^UCDATE|Numeric month of year|||DATE||1"
^OBJECT("Date",1,"nextBusDate")="Date|local Number numberDays,local String Calendar|nxBusDat^UCDATE|Next business date for calendar|||||1"
^OBJECT("Date",1,"nextFreqDate")="Date|local String frequency,public Number AF,local String control|nxFreDat^UCDATE|Next frequency date|||||1"
^OBJECT("Date",1,"prevBusDate")="Date|local Number numberDays,local String Calendar|prBusDat^UCDATE|Previous business date for calendar|||||1"
^OBJECT("Date",1,"toString")="String|local String DateMask|toString^UCDATE|Convert Date to String|||||1"
^OBJECT("Date",1,"year")="Number||year^UCDATE|Year (4 digit)|||||1"
^OBJECT("Db")="Object|Database||0|1|0"
^OBJECT("Db",1,"currVal")="String|literal String table,String KeyExpr|keyVal^UCDB(0)|Return highest key value|||CURRVAL"
^OBJECT("Db",1,"delete")="|literal String table,local String where,local String PSQLqualifiers|delete^UCDB|Delete records (SQL format)||SQLFAIL|DELETE"
^OBJECT("Db",1,"fastDelete")="|literal String table,String KeyExpr|fastDel^UCDB|Delete multiple records|||FASTDELETE"
^OBJECT("Db",1,"getOneRow")="String|String select,String table,String keys,String delim|get1Row^UCDB|Select one row of data from a table|||GETONEROW"
^OBJECT("Db",1,"getRecord")="Record|literal String table,String KeyExpr,literal Boolean ClassNew|getRecord^UCDB|Retrieve a recordTABLE from the database||RECNOF|GETRECORD||1"
^OBJECT("Db",1,"getSchemaColumn")="SchemaColumn|local String table, local String column|getSchCln^UCSCHEMA|Return a PSL column descriptor|||||1"
^OBJECT("Db",1,"getSchemaTable")="SchemaTable|local String table|getSchTbl^UCSCHEMA|Return a PSL table descriptor|||||1"
^OBJECT("Db",1,"insert")="|String table,String columns,String values,String PSQLqualifiers|insert^UCDB|Insert a new record (SQL format)||SQLFAIL|INSERT"
^OBJECT("Db",1,"isDefined")="Boolean|literal String from,literal String where,local Number match|isDefined^UCDB|Returns whether reference is defined|||ISDEFINED"
^OBJECT("Db",1,"isSchemaColumn")="Boolean|local String table, local String column|isSchCln^UCSCHEMA|Is table.column a valid column name?|||||1"
^OBJECT("Db",1,"isSchemaTable")="Boolean|local String table|isSchTbl^UCSCHEMA|Is table a valid table name?|||||1"
^OBJECT("Db",1,"nextKey")="String|literal String table,String KeyExpr|keyVal^UCDB(2)|Return next key value|||NEXTKEY"
^OBJECT("Db",1,"nextVal")="Number|literal String table,String KeyExpr|keyVal^UCDB(1)|Return highest key value + 1|||NEXTVAL"
^OBJECT("Db",1,"prevKey")="String|literal String table,String KeyExpr|keyVal^UCDB(3)|Return previous key value|||PREVKEY"
^OBJECT("Db",1,"prevVal")="String|literal String table,String KeyExpr|keyVal^UCDB(-1)|Return prior key value|||PREVVAL"
^OBJECT("Db",1,"select")="ResultSet|local String select,local String from,local String where,local String orderby,local String groupby,local String PSQLparams|select^UCDB|Create a Result set||SQLFAIL|SELECT"
^OBJECT("Db",1,"selectDbSet")="DbSet|literal String table,local String where,local String orderby|selectRecords^UCDB|Create a set of Records||SQLFAIL|SELECT"
^OBJECT("Db",1,"update")="|String table,String columns,String where,String PSQLqualifiers|update^UCDB|Update records (SQL format)||SQLFAIL|UPDATE"
^OBJECT("DbSet")="Reference|Selected set of Records of single table||0|1|0"
^OBJECT("DbSet",1,"getRecord")="Record|literal String table|getRecord^UCDBSET|Return current record|||GETREC"
^OBJECT("DbSet",1,"isEmpty")="Boolean||isEmpty^UCRESULT|Return boolean state of results set|||ISEMPTY"
^OBJECT("DbSet",1,"next")="Boolean||fetch^UCRESULT|Position cursor to the next row|||NEXT"
^OBJECT("Error")="Reference|Error||0|0|1"
^OBJECT("Error",0)=44
^OBJECT("Error",0,"context")="|5|String|Context|ERROR"
^OBJECT("Error",0,"description")="|4|String|Description|ERROR"
^OBJECT("Error",0,"thrownAt")="|2|String|Runtime M Location|ERROR"
^OBJECT("Error",0,"type")="|3|String|Error type (ET)|ERROR"
^OBJECT("HTML")="Reference|deprecated class|new^UCHTML|0|0|0"
^OBJECT("HTML",1,"addAttrib")="String|String element,String attributes|addAttrib^UCHTML|Add column attributes"
^OBJECT("HTML",1,"addCol")="String|ResultSet rs,String col|addCol^UCHTML|Add Column form resultset to XML documen"
^OBJECT("HTML",1,"addElement")="String|String element,String attributes|addElement^UCHTML|Add Element line to XML DTD"
^OBJECT("HTML",1,"addList")="String|literal String element,literal String columnlist,String valuelist,String delim|addList^UCHTML|Add a matching list (columns+values) XML"
^OBJECT("HTML",1,"addProp")="String|String column,String value|addProp^UCHTML|Add individual column and value to XML"
^OBJECT("HTML",1,"addRow")="String|String element,ResultSet rs|addRow^UCHTML|Add results row with tags"
^OBJECT("HTML",1,"addString")="String|String string,literal Boolean close|addString^UCHTML|Add string to XML format (clsoe or open)"
^OBJECT("HTML",1,"addTitle")="String|String title|addTitle^UCHTML|Add XML title to header"
^OBJECT("IO")="Reference|Read from and write to sequential device||0|0|0"
^OBJECT("IO",0,"charsetElemName")="1|8|String|characterset determination element name||0||0"
^OBJECT("IO",0,"charsetElemType")="1|9|String|characterset determination element type||0||0"
^OBJECT("IO",0,"charsetName")="1|7|String|characterset name||0||0"
^OBJECT("IO",0,"device")="1|6|String|Device||0||1"
^OBJECT("IO",0,"directory")="1|2|String|Directory||0"
^OBJECT("IO",0,"fileName")="1|1|String|File Name||0"
^OBJECT("IO",0,"openParams")="1|3|String|Open Parameters||0"
^OBJECT("IO",0,"recordSize")="1|5|Number|Record Size||0"
^OBJECT("IO",0,"timeout")="1|4|Number|Timeout||0"
^OBJECT("IO",1,"close")="||methodGen^UCGM(""UCIO"",0)|Close Device"
^OBJECT("IO",1,"open")="||open^UCIO0|Open IO"
^OBJECT("IO",1,"read")="String|public String ErrorType|read^UCIO0|Reads a record from device"
^OBJECT("IO",1,"write")="|local String Record,local String EOL|write^UCIO0|Write record"
^OBJECT("List")="String|List of values (possibly ordered)||0|0|1"
^OBJECT("List",1,"add")="List|local String expr,local String delimiter,local Boolean allowDuplicate,local Boolean inOrder|add^UCLIST|Add a value to a list|||||1"
^OBJECT("List",1,"contains")="Boolean|String expr,String delimiter,Boolean ignoreCase|contains^UCLIST|List contains expression|||||1"
^OBJECT("List",1,"count")="Number|local String delimiter,local Boolean noDuplicates|count^UCLIST|Number of elements in list|||||1"
^OBJECT("List",1,"elementAt")="String|local Number position,local String delimiter|elemAt^UCLIST|Return individual element of List|||||1"
^OBJECT("List",1,"position")="Number|local String expr,local String delimiter,local Boolean ignoreCase|position^UCLIST|Ordinal position in the list|||||1"
^OBJECT("List",1,"sort")="List|local String delimiter,local Boolean allowDuplicate|sort^UCLIST|Sort the elements in a list|||||1"
^OBJECT("Memo")="Primitive|Primitive class for Memo column||0|0|1"
^OBJECT("Number")="Primitive|Primitive class for Numbers||0|0|1"
^OBJECT("Number",1,"byte")="ByteString||byte^UCBYTSTR|return single byte represented by number|||||0"
^OBJECT("Number",1,"char")="String||psl2m^UCPRIM(0,0)|return character represented by number|||||0"
^OBJECT("Number",1,"fnumber")="String|local String format,local Number decimals|psl2m^UCPRIM(1,2)|Format (and round) a number|||||1"
^OBJECT("Number",1,"random")="Number||psl2m^UCPRIM(0,0)|Return pseudo-random number in [0,val-1]|||||0"
^OBJECT("Number",1,"roundCur")="String|local String crcd,local String roundOption,local Number justify|rndCRCD^UCNUMBER|Round an amount to currency|||||1"
^OBJECT("Number",1,"roundDec")="String|local Number decimal,local String roundOption,local Number justify|rndDec^UCNUMBER|Round an amount to decimal|||||1"
^OBJECT("Number",1,"toString")="String|local Number decimal,local String formatMask|toString^UCNUMBER|Format a number|||||1"
^OBJECT("Number",1,"zero")="String|local Number length,local Number decimal,local Boolean implied,local Number sign|zero^UCNUMBER|Zero fill a number|||||1"
^OBJECT("Object")="|Root class of hierarchy||0|0|0"
^OBJECT("Object",1,"data")="Number||data^UCOBJECT()|Return object exists / is array|||||1"
^OBJECT("Object",1,"exists")="Boolean||exists^UCOBJECT|Return object exists|||EXISTS"
^OBJECT("Object",1,"getClass")="String||getClass^UCOBJECT|Return object class|||GETCLASS"
^OBJECT("Object",1,"isPrimitive")="Boolean||isPrim^UCOBJECT|Class is a primitive class|||||1"
^OBJECT("Object",1,"order")="Primitive|local Number direction|psl2m^UCPRIM(0,1)|Next or previous subscript in array|||||0"
^OBJECT("Object",1,"query")="String||psl2m^UCPRIM(0,0)|Name of next node in array|||||0"
^OBJECT("PSL")="|PSL Compiler||0|1|0"
^OBJECT("PSL",0)="|getProp^UCMETHOD"
^OBJECT("PSL",0,"batchCommitCount")="||Number|Maximum number of cached RDB commits||0|getPslValue^UCMETHOD(500)|1"
^OBJECT("PSL",0,"maxCacheSize")="||Number|Maximum number of nodes in Cache||0|getPslValue^UCMETHOD(100)|1"
^OBJECT("PSL",0,"maxCharValue")="||Number|Maximum value allowed in $CHAR()||0|getPslValue^UCMETHOD(255)|1"
^OBJECT("PSL",0,"maxDataLength")="||Number|Maximum length of data in MDB||0|getPslValue^UCMETHOD(450)|1"
^OBJECT("PSL",0,"maxLineLength")="||Number|Maximum line length||0|getPslValue^UCMETHOD(1600)|1"
^OBJECT("PSL",0,"maxLitLength")="||Number|Maximum length of literal||0|getPslValue^UCMETHOD(400)|1"
^OBJECT("PSL",0,"maxNameLength")="||Number|Maximum name length||0|getPslValue^UCMETHOD(8)|1"
^OBJECT("PSL",0,"maxStringLength")="||Number|Maximum length of local string||0|getPslValue^UCMETHOD(1048575)|1"
^OBJECT("PSL",1,"actual")="String|Number sub|arrayProp^UCMETHOD|actual() array as 'property'|||||0"
^OBJECT("PSL",1,"addSetting")="void|local String section,local String ident,local Primitive value|statMet^UCMETHOD(""addPSLSetting^UCGM("",-1)|Add or modify a PSL compiler setting|||||0"
^OBJECT("PSL",1,"addSubrou")="PSLSubrou|local String Name,local List parameters,local String comment,local Boolean new|addSubr^UCMETHOD|Add a subroutine to the module|||||0"
^OBJECT("PSL",1,"cachePSLColumn")="PSLColumn|PSLColumn cache(), local String qcn, PSLTable tCache()|caPslCln^UCMETHOD|Cache and return a PSL column descriptor|||||1"
^OBJECT("PSL",1,"cachePSLTable")="PSLTable|PSLTable cache(), local String table, local Number level|caPslTbl^UCMETHOD|Cache and return a PSL table descriptor|||||1"
^OBJECT("PSL",1,"error")="|String errorText|error^UCMETHOD|Output a PSL compile-time error|||||0"
^OBJECT("PSL",1,"getDbLoad")="PSLRecordMap|local String subRou,local String var,local Number instPtr|getDbLoad^UCMETHOD|Return Record map header|||||0"
^OBJECT("PSL",1,"getLabelRecord")="PSLLabelRecord|String subrou|getLabel^UCMETHOD|Return a PSL subroutine label record|||||0"
^OBJECT("PSL",1,"getPSLColumn")="PSLColumn|local String table, local String column, SchemaTable stCache()|getPslCln^UCMETHOD|Return a PSL column descriptor|||||1"
^OBJECT("PSL",1,"getPSLTable")="PSLTable|local String table,local Number level|getPslTbl^UCMETHOD|Return a PSL table descriptor|||||1"
^OBJECT("PSL",1,"getSetting")="Primitive|local String section,local String ident|statMet^UCMETHOD(""$$getPSLSetting^UCGM("",-1)|Return a PSL compiler setting (defaults to "")|||||0"
^OBJECT("PSL",1,"hasSetting")="Boolean|local String section,local String ident|statMet^UCMETHOD(""$$hasPSLSetting^UCGM("",-1)|Does PSL compiler setting exist?|||||0"
^OBJECT("PSL",1,"insertLine")="|local String PSLCode,local Number line,local Number level|insLine^UCMETHOD|Insert a line of code|||||0"
^OBJECT("PSL",1,"isRecord")="Boolean|local String class|isRecord^UCMETHOD|Record class is ancestor of class|||||0"
^OBJECT("PSL",1,"mExpr")="String|local String psl|mExpr^UCMETHOD|Convert a PSL string to an M string|||||0"
^OBJECT("PSL",1,"newVariable")="String||newVar^UCMETHOD|Generate a new variable name|||||0"
^OBJECT("PSL",1,"openBuffer")="PSLBuffer|local List parameters,local String comment|openBuff^UCMETHOD|Open a new PSL buffer|||||0"
^OBJECT("PSL",1,"patch")="String|local String expression|patch^UCMETHOD|Replace expression with backpatch token|||||0"
^OBJECT("PSL",1,"subrouExists")="Boolean|local String name|isSubr^UCMETHOD|Subroutine exists in current module|||||0"
^OBJECT("PSL",1,"warn")="|local String warning|warn^UCMETHOD|Output a PSL compile-time warning|||||0"
^OBJECT("PSLBuffer")="Reference|PSL Subroutine to add to this unit||0|1|0"
^OBJECT("PSLBuffer",1,"add")="|local String code|addBuff^UCMETHOD|Add a line of PSL code to the buffer|||||0"
^OBJECT("PSLBuffer",1,"insert")="|local String name, local String resultClass|insMet^UCMETHOD(""INSERT^UCMETHOD("",1)|insert PSL subroutine into current code stream|||||0"
^OBJECT("PSLColumn")="Reference|PSL column descriptor||0|1|1"
^OBJECT("PSLColumn",0,"column")="|2|String|ColumnName||0||1"
^OBJECT("PSLColumn",0,"computation")="|14|String|computed expression||0||1"
^OBJECT("PSLColumn",0,"dataType")="|6|String|DATA-QWIK data type||0||1"
^OBJECT("PSLColumn",0,"delimiter")="|5|Number|ASCII code of delimiter||0||1"
^OBJECT("PSLColumn",0,"internalColumn")="|17|String|column name in internal model||0||1"
^OBJECT("PSLColumn",0,"internalTable")="|16|String|table name in internal model||0||1"
^OBJECT("PSLColumn",0,"isNullToZero")="|9|Boolean|NULL versus zero indicator||0||1"
^OBJECT("PSLColumn",0,"length")="|7|Number|maximum length||0||1"
^OBJECT("PSLColumn",0,"masterfieldType")="|15|Number|what kind of masterfield is this||0||1"
^OBJECT("PSLColumn",0,"node")="|3|String|subscript node||0||1"
^OBJECT("PSLColumn",0,"position")="|4|Number|position within node||0||1"
^OBJECT("PSLColumn",0,"precision")="|8|Number|decimal precision||0||1"
^OBJECT("PSLColumn",0,"subfieldMajor")="|11|Number|ASCII code of subfield major delimiter||0||1"
^OBJECT("PSLColumn",0,"subfieldMinor")="|12|Number|ASCII code of subfield minor delimiter||0||1"
^OBJECT("PSLColumn",0,"subfieldPosition")="|13|Number|subfield position||0||1"
^OBJECT("PSLColumn",0,"subfieldTag")="|10|String|subfield tag||0||1"
^OBJECT("PSLColumn",0,"table")="|1|String|TableName||0||1"
^OBJECT("PSLColumn",1,"getClass")="String||getPcClass^UCMETHOD|column's dataType as PSL class|||||0"
^OBJECT("PSLColumn",1,"getCurrentExpr")="PSLExpression|local PSLIdentifier rec,local Boolean bLeft|getCurExpr^UCMETHOD|expression to retrieve(0)/set(1) column|||||0"
^OBJECT("PSLColumn",1,"getCurrentLvn")="PSLExpression|local PSLIdentifier rec|getCurLvn^UCMETHOD|local variable containing column's value|||||0"
^OBJECT("PSLColumn",1,"getCurrentNode")="String|local Boolean bQuoted|getCurNode^UCMETHOD|Node containing column's value|||||0"
^OBJECT("PSLColumn",1,"getOldExpr")="PSLExpression|local PSLIdentifier rec,local Boolean bLeft|getOldExpr^UCMETHOD|expr to retrieve(0)/set(1) column.oldVal|||||0"
^OBJECT("PSLColumn",1,"getOldLvn")="String|local PSLIdentifier rec|getOldLvn^UCMETHOD|local variable containing column.oldVal|||||0"
^OBJECT("PSLColumn",1,"getOldNode")="String|local Boolean bQuoted|getOldNode^UCMETHOD|Node containing column.oldVal|||||0"
^OBJECT("PSLColumn",1,"getPurposeNode")="String||getPurNode^UCMETHOD|purpose Id of node containing the column|||||0"
^OBJECT("PSLColumn",1,"getUpdateCode")="String|local PSLIdentifier rec,local PSLExpression value,local Number mode|getUpdCode^UCMETHOD|code to update column value|||||0"
^OBJECT("PSLExpression")="String|PSL Expression||0|0|1"
^OBJECT("PSLExpression",1,"fitsLineLength")="Boolean|local Number extra|fitsLinLen^UCMETHOD|does expression + extra space fit M line length|||||0"
^OBJECT("PSLExpression",1,"isArray")="Boolean||isArr^UCMETHOD|Expression is an array|||||0"
^OBJECT("PSLExpression",1,"isLiteral")="Boolean||isLit^UCMETHOD|Expression is literal|||||0"
^OBJECT("PSLExpression",1,"isVariable")="Boolean||isVar^UCMETHOD|Expression is a variable|||||0"
^OBJECT("PSLExpression",1,"toValue")="PSLExpression||toConsta^UCMETHOD|Reduce expression to constant|||||0"
^OBJECT("PSLIdentifier")="PSLExpression|PSL Identifier/Variable||0|0|1"
^OBJECT("PSLIdentifier",0,"class")="||String|Class of identifier||0|getSym^UCMETHOD(1)"
^OBJECT("PSLIdentifier",0,"expr")="||PSLExpression|Current assignment expression||0|getSym^UCMETHOD(5)"
^OBJECT("PSLIdentifier",0,"instBlockSig")="||String|Block Signature at instantiation||0|getSym^UCMETHOD(9)"
^OBJECT("PSLIdentifier",0,"instExpr")="||PSLExpression|Current assignment/Instantiation||0|getSym^UCMETHOD(5)"
^OBJECT("PSLIdentifier",0,"instIfFrame")="|||IF frame at instantiation on line||0|getSym^UCMETHOD(7)"
^OBJECT("PSLIdentifier",0,"instIfSig")="|||IF Signature at instantiation||0|getSym^UCMETHOD(8)"
^OBJECT("PSLIdentifier",0,"instLevel")="||Number|Block level of current assignment||0|getSym^UCMETHOD(6)"
^OBJECT("PSLIdentifier",0,"instLine")="||Number|Output code line where instantiated||0|getSym^UCMETHOD(4)"
^OBJECT("PSLIdentifier",0,"noPatch")="||Boolean|Reference object can be post optimized||0|getSym^UCMETHOD(10)"
^OBJECT("PSLIdentifier",0,"scope")="||String|Scope of identifier (NEW/FORMAL/PUBLIC)||0|getSym^UCMETHOD(3)"
^OBJECT("PSLIdentifier",0,"scopeLevel")="||Number|Block level of scope||0|getLevel^UCMETHOD"
^OBJECT("PSLIdentifier",0,"scopeLine")="||Number|Output code line where scoped||0|getSym^UCMETHOD(2)"
^OBJECT("PSLIdentifier",1,"optimize")="Boolean||opti^UCMETHOD|Reference object can be post optimized|||||0"
^OBJECT("PSLLabelRecord")="Reference|Subroutine label descriptor||0|1|1"
^OBJECT("PSLLabelRecord",0)=9
^OBJECT("PSLLabelRecord",0,"accessLevel")="|2|Number|2=public, 1=private, 0=local||0"
^OBJECT("PSLLabelRecord",0,"class")="|3|String|Class name of result||0"
^OBJECT("PSLLabelRecord",0,"codeLine")="|1|Number|Generated code source line of label||0"
^OBJECT("PSLLabelRecord",0,"comment")="|6|String|Comment supplied at insertion||0"
^OBJECT("PSLLabelRecord",0,"formalList")="|5|List|Formal parameters, semi-colon separated||0"
^OBJECT("PSLLabelRecord",0,"label")="|4|String|label||0"
^OBJECT("PSLRecordMap")="|Map of RecordClass references||0|1|1"
^OBJECT("PSLRecordMap",0)=9
^OBJECT("PSLRecordMap",0,"checkStateMode")="|13|Number|Record state at instantiation||0"
^OBJECT("PSLRecordMap",0,"class")="|1|String|Identifier class||0"
^OBJECT("PSLRecordMap",0,"doStack")="|9|String|Reference at block level||0"
^OBJECT("PSLRecordMap",0,"ifLevel")="|7|Number|Reference at IF level||0"
^OBJECT("PSLRecordMap",0,"ifStack")="|8|Number|Reference at IF stack||0"
^OBJECT("PSLRecordMap",0,"instanceExpression")="|5|String|Instantiation expression||0"
^OBJECT("PSLRecordMap",0,"instanceLevel")="|6|Number|Instantiated at block level||0"
^OBJECT("PSLRecordMap",0,"instanceLine")="|4|Number|Instantiated at pointer||0"
^OBJECT("PSLRecordMap",0,"isAudit")="|12|Boolean|Save original properties value flag||0"
^OBJECT("PSLRecordMap",0,"noOptimize")="|10|Boolean|No object folding optimization||0"
^OBJECT("PSLRecordMap",0,"referenceLine")="|11|Number|Reference at pointer||0"
^OBJECT("PSLRecordMap",0,"scope")="|3|String|Indentifier scope||0"
^OBJECT("PSLRecordMap",0,"scopeLine")="|2|Number|Identifier scoped at pointer||0"
^OBJECT("PSLSubrou")="Reference|M subroutine to add to this unit||0|1|1"
^OBJECT("PSLSubrou",1,"addCode")="|local String code|addCode^UCMETHOD|Add a line of M code the buffer|||||0"
^OBJECT("PSLSubrou",1,"addExe")="|local String code|addExe^UCMETHOD|Add a line of code from exe() the buffer|||||0"
^OBJECT("PSLSubrou",1,"addLvn")="|local Number nr,local String expr|addLvn^UCMETHOD|Add a vsql() replacement for addExe() to the subroutine|||||0"
^OBJECT("PSLSubrou",1,"addTag")="|local Number nr,local String code|addTag^UCMETHOD|Add a tag(number) for addExe() to the subroutine|||||0"
^OBJECT("PSLSubrou",1,"getCode")="String|local Number line|getCode^UCMETHOD|Get M code at specified line|||||0"
^OBJECT("PSLSubrou",1,"getLine")="Number||getLine^UCMETHOD|Get highest linenumber of the subroutine|||||0"
^OBJECT("PSLSubrou",1,"getLvn")="PSLExpression|local Number lvn|getLvn^UCMETHOD|Get vsql() replacement value|||||0"
^OBJECT("PSLSubrou",1,"getLvnMax")="Number||getLvnMax^UCMETHOD|Get highest vsql() replacement number of the subroutine|||||0"
^OBJECT("PSLSubrou",1,"getTag")="String|local Number tag|getTag^UCMETHOD|Get the tag for a subscript in exe()|||||0"
^OBJECT("PSLSubrou",1,"getTagMax")="Number||getTagMax^UCMETHOD|Get highest tag number of the subroutine|||||0"
^OBJECT("PSLSubrou",1,"getTagPrefix")="String||getTagPrefix^UCMETHOD|Get the tag prefix for addExe()|||||0"
^OBJECT("PSLSubrou",1,"insCode")="|local Number line,local String Code|insCode^UCMETHOD|Insert M code at specified line|||||0"
^OBJECT("PSLSubrou",1,"setTagPrefix")="|local String prefix|setTagPrefix^UCMETHOD|Set the tag prefix for addExe()|||||0"
^OBJECT("PSLTable")="Reference|PSL table descriptor||0|1|1"
^OBJECT("PSLTable",0,"columnDelimiter")="|10|Number|ASCII code of Column delimiter||0||1"
^OBJECT("PSLTable",0,"dataTypes")="|5|String|Enumeration of data types used||0||1"
^OBJECT("PSLTable",0,"database")="|8|String|Database type (Vendor)||0||1"
^OBJECT("PSLTable",0,"existsNode")="|12|String|Record exists node reference||0||1"
^OBJECT("PSLTable",0,"filerPGM")="|6|String|Filer routine name||0||1"
^OBJECT("PSLTable",0,"global")="|2|String|M Global reference||0||1"
^OBJECT("PSLTable",0,"hasBlob")="||Boolean|Table has lob data types||0|tblHasBlob^UCMETHOD|1"
^OBJECT("PSLTable",0,"hasComputed")="|11|Boolean|Table has computed columns||0||1"
^OBJECT("PSLTable",0,"hasMasterfield")="||Boolean|Table has masterfield columns||0|tblHasMasf^UCMETHOD|1"
^OBJECT("PSLTable",0,"hasMemo")="||Boolean|Table has Memo data types||0|tblHasMemo^UCMETHOD|1"
^OBJECT("PSLTable",0,"hasNegativeNode")="||Boolean|Table has Node with negative subscript||0|tblHasNeg^UCMETHOD|1"
^OBJECT("PSLTable",0,"indexList")="|13|List|table name(s) in underlying DBMS||0||1"
^OBJECT("PSLTable",0,"internalNames")="|9|List|table name(s) in underlying DBMS||0||1"
^OBJECT("PSLTable",0,"isAutoLog")="|16|Boolean|Automatic change logging enabled||0||1"
^OBJECT("PSLTable",0,"isRdb")="||Boolean|table data is stored in RDBMS||0|tblIsRdb^UCMETHOD|1"
^OBJECT("PSLTable",0,"masterfieldList")="|14|List|List of masterfield columns||0||1"
^OBJECT("PSLTable",0,"nodeQuotedList")="|15|String|Quoted list of nodes used by table||0||1"
^OBJECT("PSLTable",0,"parentTable")="|7|String|Parent table of table||0||1"
^OBJECT("PSLTable",0,"primaryKeys")="|3|List|Table primary keys||0||1"
^OBJECT("PSLTable",0,"recordType")="|4|Number|Internal record type (1,10,11)||0||1"
^OBJECT("PSLTable",0,"table")="|1|String|TableName||0||1"
^OBJECT("PSLTable",1,"assertLevel")="PSLTable|local Number level, PSLColumn cache()|tAssert^UCMETHOD|Assert a PSLTable instance with minimum info level|||||0"
^OBJECT("PSLTable",1,"getArchivable")="Boolean||getArchivable^UCMETHOD|Is table valid to be archived|||||0"
^OBJECT("PSLTable",1,"getArchiveIncluded")="List||getArchiveIncluded^UCMETHOD|Get tables included with this when archived|||||0"
^OBJECT("PSLTable",1,"getArchiveKey")="Number|local Boolean forArch|getArchiveKey^UCMETHOD|Get archive key number|||||0"
^OBJECT("PSLTable",1,"getArchiveSubs")="List||getArchiveSubs^UCMETHOD|Get archive sub-tables|||||0"
^OBJECT("PSLTable",1,"getArchiveTable")="String||getArchiveTable^UCMETHOD|Get primary archive table|||||0"
^OBJECT("PSLTable",1,"getFilerLogic")="String|local String operation,local PSLExpression qualExp,local Boolean isPslExp|getFlrLgc^UCMETHOD|Filer logic that needs to be processed|||||0"
^OBJECT("PSLTable",1,"getLoadCode")="String|local PSLIdentifier rec,local String node,local Number mode,local Boolean exists,public String lvpm()|getLodCode^UCMETHOD|M code to load data node|||||0"
^OBJECT("PSLTable",1,"getNewCode")="String|local PSLIdentifier rec,local PSLExpression mode|getNewCode^UCMETHOD|M code instantiate new Record|||||0"
^OBJECT("PSLTable",1,"getQuery")="String||getQuery^UCMETHOD|Get table query|||||0"
^OBJECT("PSLTable",1,"getSaveCode")="String|local PSLIdentifier rec,local String node,local Number mode,local String lvpm(),local PSLColumn rdbCol()|getSavCode^UCMETHOD|M code to save data node|||||0"
^OBJECT("PSLTable",1,"getUpdateKey")="String|local PSLIdentifier rec,local String lvpm()|getUpdKey^UCMETHOD|M code to safe current key for UPDATE|||||0"
^OBJECT("PSLTable",1,"isOneNode")="Boolean||isOneNode^UCMETHOD|table uses single node in internal storage|||||0"
^OBJECT("PSLTable",1,"isParent")="Boolean||isParent^UCMETHOD|Table is parent table|||||0"
^OBJECT("Primitive")="Object|Primitive classes ancestor||1|1|1|0"
^OBJECT("Primitive",1,"get")="Primitive|Primitive default|get^UCPRIM()|The primitive's value or a default value|||||0"
^OBJECT("Primitive",1,"isNull")="Boolean|literal Boolean isIncludeEmptyQuotes|isNull^UCPRIM()|Expression is NULL|||||1"
^OBJECT("Record")="Reference|Record classes ancester|classNew^DBSDYNRA|0|0|0"
^OBJECT("Record",1,"bypassSave")="||bypassSave^UCRECORD|Database save, bypass triggers|||BYPASSSAVE"
^OBJECT("Record",1,"compare")="ResultSet|local Record object2|compare^UCRECORD|Compare and report differences|||||0"
^OBJECT("Record",1,"copy")="Record|local String colmap|copy^UCRECORD(""copy"")|Copy object|||COPY"
^OBJECT("Record",1,"fromArchive")="Boolean||fromArchive^UCRECORD|Check if record loaded from archive"
^OBJECT("Record",1,"fromArray")="|literal String Array,literal String Keys|copytf^UCRECORD(0)|Copy M array into object properties|||FROMARRAY"
^OBJECT("Record",1,"getMode")="Number||getMode^UCRECORD|Return Record Mode"
^OBJECT("Record",1,"getTable")="String||getTable^UCRECORD|Return table represented by this record"
^OBJECT("Record",1,"isChanged")="Boolean|local String column,local String useagetype|isChanged^UCRECORD|Check if the Column has Changed"
^OBJECT("Record",1,"overlay")="|String array()|overlay^UCRECORD|New record overlay fields |||defaults"
^OBJECT("Record",1,"save")="|local String Filerqualifiers|save^UCRECORD|Save a record to the database||SAVEFAIL|SAVE"
^OBJECT("Record",1,"setAuditFlag")="|literal Boolean state|setAudit^UCRECORD|Set update history flag|||SETAUDITFLAG"
^OBJECT("Record",1,"setCreateOnly")="||setCreate^UCRECORD|Allow create mode only|||SETCREATEONLY"
^OBJECT("Record",1,"setMode")="|local Number Mode|setMode^UCRECORD|Set Record Mode"
^OBJECT("Record",1,"setUpdateOnly")="||setUpdate^UCRECORD|Allow update mode only|||SETUPDATEONLY"
^OBJECT("Record",1,"toArray")="|literal String Array,literal String Keys|copytf^UCRECORD(1)|Copy object properties into M array|||TOARRAY"
^OBJECT("Record",1,"toString")="String||copy^UCRECORD(""toString"")|Copy object|||TOSTRING"
^OBJECT("RecordACN")="Record|Deposit/Loan Record Super Class||0|0|0"
^OBJECT("RecordACN",1,"renew")="|String keys|renew^UCRECACN|Loan/Deposit renewal|||RENEW"
^OBJECT("RecordCIF")="Record|CIF Record class||0|0|0"
^OBJECT("RecordCIF",1,"default")="|String key|default^UCRECCIF|New Cif account defaults form product|||defaults"
^OBJECT("RecordDEP")="RecordACN|Deposit Record Class||0|0|0"
^OBJECT("RecordDEP",1,"default")="|String keys|default^UCRECDEP|Deposit new account default method|||defaults"
^OBJECT("RecordDEP",1,"renew")="|String keys|renew^UCRECDEP|Loan/Deposit renewal|||RENEW"
^OBJECT("RecordLN")="RecordACN|Loan Record Class||0|0|0"
^OBJECT("RecordLN",1,"default")="|String keys|default^UCRECLN|Loan new account product defaults|||defaults"
^OBJECT("RecordLN",1,"renew")="|String keys|renew^UCRECLN|Loan/Deposit renewal|||RENEW"
^OBJECT("Reference")="Object|Ancestor of all reference classes||0|0|0"
^OBJECT("Reference",1,"copy")="Reference||copy^UCREF|Copy Reference class instance|||COPY||0"
^OBJECT("Reference",1,"equals")="Boolean|Reference cmp|equals^UCREF|Compare two reference objects|||EQUALS||0"
^OBJECT("Reference",1,"getPointer")="Number||getPointer^UCREF|Return pointer to reference object|||GETPOINTER||0"
^OBJECT("Reference",1,"getStoredValue")="String|local String tag|getValue^UCREF|Return a process scope value from object|||||0"
^OBJECT("Reference",1,"setStoredValue")="|local String tag,local String value|setValue^UCREF|Store a process scope value in an object|||||0"
^OBJECT("Reference",1,"toString")="String||toString^UCREF|Return string representation of object|||||0"
^OBJECT("ResultSet")="Reference|Set of Rows resulting from a query||0|1|0"
^OBJECT("ResultSet",1,"getCol")="String|local Primitive colRef|getCol^UCRESULT|Return column value from results row|||GETCOL||1"
^OBJECT("ResultSet",1,"getColProt")="Number|local Primitive colRef|getColProt^UCRESULT|Return column protection|||GETCOL||1"
^OBJECT("ResultSet",1,"getRow")="Row|local String delimiter,local List columnList|getRow^UCRESULT|Return current results row|||GETROW||1"
^OBJECT("ResultSet",1,"getRowProt")="Number||getRowProt^UCRESULT|Return row protection|||GETCOL||1"
^OBJECT("ResultSet",1,"isEmpty")="Boolean||isEmpty^UCRESULT|Return boolean state of results set|||ISEMPTY"
^OBJECT("ResultSet",1,"next")="Boolean||fetch^UCRESULT|Position cursor to the next row|||NEXT||1"
^OBJECT("Row")="Reference|Delimiter separated record|classNew^UCROW|0|0|1"
^OBJECT("Row",0)="9|getCol^UCROW"
^OBJECT("Row",1,"getColumns")="String||getProp^UCROW|Get the properties of a Row object|||||0"
^OBJECT("Row",1,"getDelimiter")="String||getDel^UCROW|Get the row delimiter|||||1"
^OBJECT("Row",1,"setColumns")="|local List Properties|setProp^UCROW|Set the properties of a Row object|||||0"
^OBJECT("Row",1,"setDelimiter")="|local String delimiter|setDel^UCROW|Set the row delimiter|||||0"
^OBJECT("Row",1,"toRecord")="|local Record identifier,local String columnMap|toRecord^UCROW|Copy a Row object to a Record object|||||0"
^OBJECT("Row",1,"toString")="String|local String colDel,local String quoChar,local String fmtDate,local String fmtTime,local String fmtBool|toString^UCROW|Convert a Row object to a String|||||1"
^OBJECT("RowSet")="Reference|Set of Rows|classNew^UCROWSET|0|0|0"
^OBJECT("RowSet",0,"columns")="-2||List|List of Types ColumnNames||0||0"
^OBJECT("RowSet",0,"delimiter")="-3||String|Column Delimiter||0||0"
^OBJECT("RowSet",1,"beforeFirst")="||befFir^UCROWSET|Position RowSet before first Row|||||0"
^OBJECT("RowSet",1,"getRow")="Row||getRow^UCROWSET|Return current row|||||0"
^OBJECT("RowSet",1,"isEmpty")="Boolean||isEmpty^UCROWSET|Return if RowSet is empty|||||0"
^OBJECT("RowSet",1,"loadFromFile")="|local String directory,local String filename,local String filetype|ldFrFile^UCROWSET|Load RowSet from file|||||0"
^OBJECT("RowSet",1,"next")="Boolean||next^UCROWSET|Position rowset at the next row|||||0"
^OBJECT("Runtime")="Object|Runtime||0|1|0"
^OBJECT("Runtime",0,"charsetEncoding")="||String|Characterset Encoding||0|chrsetEnc^UCBYTSTR|1"
^OBJECT("Runtime",0,"charsetName")="||String|Characterset name (M or UTF-8)||0|chrsetNm^UCBYTSTR|1"
^OBJECT("Runtime",1,"charset")="String||Charset^UCRUNTIM|Character set|||CHARSET"
^OBJECT("Runtime",1,"commit")="||commit^UCRUNTIM|Commit TP fence|||TCOMMIT"
^OBJECT("Runtime",1,"delErrXBAD")="|object,errcode|delxbad^UCRUNTIM|XBAD error|||MSG"
^OBJECT("Runtime",1,"delayCommit")="|literal String entryref|delayCmt^UCRUNTIM|Call subroutine with delayed commits|||"
^OBJECT("Runtime",1,"rollback")="|Startptr|rollback^UCRUNTIM|Tp Rollback to the start of a fence|||ROLLBACK"
^OBJECT("Runtime",1,"setErrMSG")="|object,msgnum,variable|msg^UCRUNTIM|Message Table Error|||MSG"
^OBJECT("Runtime",1,"setErrSTBLER")="|object,errcode|er^UCRUNTIM|Application Error|||MSG"
^OBJECT("Runtime",1,"setErrXBAD")="|object,errcode,column,curval,altval|xbad^UCRUNTIM|XBAD error|||MSG"
^OBJECT("Runtime",1,"start")="|Tranid,varlist,stat|start^UCRUNTIM|Start TP fence|||START"
^OBJECT("Schema")="|DATA-QWIK Dictionary||0|1|0"
^OBJECT("Schema",1,"createTable")="|String table,String keyexpr,String columnList,String globalName|newTable^UCGMC|Create temporary table schema|||CREATETABLE"
^OBJECT("Schema",1,"deleteTable")="|String table|delTable^UCGMC|Delete table schema|||DELETETABLE"
^OBJECT("Schema",1,"getTableName")="String|String class|getName^UCSCHEMA|Return a table name for a RecordClass|||||1"
^OBJECT("Schema",1,"getTableRecord")="SchemaTable|String table|getTable^UCSCHEMA|Return a Data-Qwik table record|||||1"
^OBJECT("SchemaColumn")="PSLColumn|Full schema column descriptor||0|1|1"
^OBJECT("SchemaColumn",0,"conversionFlag")="|32|Number|conversion flag||0||1"
^OBJECT("SchemaColumn",0,"dateUpdated")="|33|Date|date column definition was last updated||0||1"
^OBJECT("SchemaColumn",0,"default")="|18|String|default value||0||1"
^OBJECT("SchemaColumn",0,"description")="|24|String|description||0||1"
^OBJECT("SchemaColumn",0,"displaySize")="|29|Number|display size||0||1"
^OBJECT("SchemaColumn",0,"internalType")="|25|String|internal data type||0||1"
^OBJECT("SchemaColumn",0,"isRequired")="|28|Boolean|is value required?||0||1"
^OBJECT("SchemaColumn",0,"isSerial")="|31|Boolean|is column value serial?||0||1"
^OBJECT("SchemaColumn",0,"isValidForExtraction")="|36|Boolean|valid for extraction||0||1"
^OBJECT("SchemaColumn",0,"lookupTable")="|20|String|lookup table||0||1"
^OBJECT("SchemaColumn",0,"masterDictionary")="|35|String|master dictionary reference||0||1"
^OBJECT("SchemaColumn",0,"maximum")="|27|String|maximum value||0||1"
^OBJECT("SchemaColumn",0,"minimum")="|26|String|mimimum value||0||1"
^OBJECT("SchemaColumn",0,"pattern")="|21|String|ISO M pattern match||0||1"
^OBJECT("SchemaColumn",0,"postProcDataEntry")="|38|String|data entry post processor||0||1"
^OBJECT("SchemaColumn",0,"postProcExpr")="|22|String|post processor expression||0||1"
^OBJECT("SchemaColumn",0,"preProcDataEntry")="|37|String|data entry pre processor||0||1"
^OBJECT("SchemaColumn",0,"preProcExpr")="|23|String|pre processor expression||0||1"
^OBJECT("SchemaColumn",0,"reportHeader")="|30|String|report header||0||1"
^OBJECT("SchemaColumn",0,"userType")="|19|String|user data type||0||1"
^OBJECT("SchemaColumn",0,"userUpdated")="|34|String|user responsible for last update ||0||1"
^OBJECT("SchemaTable")="PSLTable|PSL Schema table descriptor||0|1|1"
^OBJECT("SchemaTable",0,"count")="|28|Number|Count of all columns||0||1"
^OBJECT("SchemaTable",0,"dateCreated")="|22|Date|Date record created property||0||1"
^OBJECT("SchemaTable",0,"dateUpdated")="|25|Date|Date record last updated property||0||1"
^OBJECT("SchemaTable",0,"defaultList")="|29|List|List of columns with default values||0||1"
^OBJECT("SchemaTable",0,"description")="|31|String|Table description||0||1"
^OBJECT("SchemaTable",0,"fileShortName")="|17|String|file short name||0||1"
^OBJECT("SchemaTable",0,"networkLocation")="|21|Number|on client (1), server (0), or both (2)||0||1"
^OBJECT("SchemaTable",0,"publishPGM")="|19|String|Update publish routine||0||1"
^OBJECT("SchemaTable",0,"requiredList")="|30|List|List of required (not null) columns||0||1"
^OBJECT("SchemaTable",0,"systemName")="|20|String|Table member of system||0||1"
^OBJECT("SchemaTable",0,"timeCreated")="|23|Time|Time record created property||0||1"
^OBJECT("SchemaTable",0,"timeUpdated")="|26|Time|Time record last updated property||0||1"
^OBJECT("SchemaTable",0,"userCreated")="|24|String|User created record column||0||1"
^OBJECT("SchemaTable",0,"userUpdated")="|27||User record last updated property||0||1"
^OBJECT("SchemaTable",0,"verifyPGM")="|18|String|Verification routine name||0||1"
^OBJECT("String")="Primitive|Primitive class for (character) Strings||0|0|1"
^OBJECT("String",1,"addQuotes")="String|local String character|qadd^UCSTRING|Add one layer of quotes|||||1"
^OBJECT("String",1,"ascii")="Number|local Number position|psl2m^UCPRIM(0,1)|ASCII code of character at specified pos|||||1"
^OBJECT("String",1,"beginsWith")="Boolean|local String string,local Boolean ignoreCase|isBegin^UCSTRING|Begins with string|||||1"
^OBJECT("String",1,"blank")="String|local Number fieldLength, local Boolean rightJustify|blank^UCSTRING|Pad a string with blanks"
^OBJECT("String",1,"byteLimitSubstring")="String|local Number start, local Number maxBytes|bytLimSub^UCBYTSTR|substring of at most maxBytes bytes|||||1"
^OBJECT("String",1,"complexUnpack")="String|local Number length,local Boolean signed,local Boolean leftnib|unpack2^UCSTRING|Complex unpack of data string|||||1"
^OBJECT("String",1,"contains")="Boolean|local String string|contains^UCSTRING|Contains a string|||||1"
^OBJECT("String",1,"endsWith")="Boolean|local String string,local Boolean ignoreCase|isEnd^UCSTRING|Ends with string|||||1"
^OBJECT("String",1,"extract")="String|local Number start,local Number end|extract^UCSTRING|Extract a string|||||1"
^OBJECT("String",1,"find")="Number|local String string,local Number start,local Boolean ignoreCase,local String quoteChar|find^UCSTRING|Find the next position of a string|||||1"
^OBJECT("String",1,"follows")="Boolean|local String string|follows^UCSTRING|Follows a string|||||1"
^OBJECT("String",1,"getSub")="String|local String label,local String delimiter1,local String delimiter2,local Number position|getSub^UCSTRING|Return a sub-delimited or labeled string|||||1"
^OBJECT("String",1,"insert")="String|local String string,local Number offSet,local String padCharacter,local Boolean displace|insert^UCSTRING|Insert a string into a string|||||1"
^OBJECT("String",1,"isInteger")="Boolean||isInt^UCSTRING|Is an integer|||||1"
^OBJECT("String",1,"isLike")="Boolean|local String likeExpr,local Boolean ignoreCase|isLike^UCSTRING|Is like (SQL like)|||||1"
^OBJECT("String",1,"isLiteral")="Boolean||isLit^UCSTRING|Is a literal value - quoted or number|||||1"
^OBJECT("String",1,"isNumber")="Boolean||isNum^UCSTRING|Is a number|||||1"
^OBJECT("String",1,"justify")="String|local Number fieldLength,local Number direction,local String padCharacter,local Boolean truncate|justify^UCSTRING|Justify and pad a string|||||1"
^OBJECT("String",1,"length")="Number|local String delimiter|length^UCSTRING|String length|||||1"
^OBJECT("String",1,"lowerCase")="String|local Boolean capitalizeFirstChar|loCase^UCBYTSTR|Convert to lower case|||||1"
^OBJECT("String",1,"piece")="String|local String delimiter,local Number start,local Number end,local String quoteChar|piece^UCSTRING|Return string at delimited position|||||1"
^OBJECT("String",1,"putSub")="String|local String insert,local String label,local String delimiter1,local String delimiter2,local Number position|putSub^UCSTRING|Insert a sub-delimited or tagged string|||||1"
^OBJECT("String",1,"replace")="String|local String expr1,local String expr2,local Number count,local Boolean ignoreCase,local String quoteChar|replace^UCSTRING|Replace occurrances of expr1 with expr2|||||1"
^OBJECT("String",1,"reverse")="String||psl2m^UCPRIM(0,0)|Reverse the character order|||||1"
^OBJECT("String",1,"stripQuotes")="String|local String quoteCharacter|qsub^UCSTRING|Strip one layer of quotes|||||1"
^OBJECT("String",1,"toByteString")="ByteString||toByteString^UCBYTSTR|Convert String to ByteString|||||1"
^OBJECT("String",1,"toDate")="Date|local String mask|toDate^UCSTRING|Convert formatted date to julien date|||||1"
^OBJECT("String",1,"toNumber")="Number|local String mask,local Boolean stripSpace|toNumber^UCSTRING|Convert String to Number|||||1"
^OBJECT("String",1,"toRow")="Row|local List elements,local String delimiter|toRow^UCSTRING|Convert a String type to a Row type|||||0"
^OBJECT("String",1,"toTime")="Time||toTime^UCSTRING|Convert formatted to internal time|||||1"
^OBJECT("String",1,"translate")="String|local String lookFor,local String replaceBy|psl2m^UCPRIM(1,2)|Character by character replace|||||1"
^OBJECT("String",1,"trim")="String|local Number Option,local String character|trim^UCSTRING|Trim characters from a String|||||1"
^OBJECT("String",1,"unpack")="String|local Number length|unpack^UCSTRING|Unpacks data string|||||1"
^OBJECT("String",1,"upperCase")="String||upCase^UCBYTSTR|Convert to upper case|||||1"
^OBJECT("Time")="Primitive|Primitive class for Time column||0|0|1"
^OBJECT("Time",1,"toString")="String|local String TimeMask|toString^UCTIME|Convert Time to String|||||1"
^OBJECT("TranSet")="Reference|Ordered set of financial transactions||0|0|0"
^OBJECT("TranSet",0,"status")="status||String|Error status|GETTRAN"
^OBJECT("TranSet",1,"copyTran")="Number|local RecordTTX ttx,String colRefs(),local Number tranSeq,local String secTran|copyTran^UCTS|Copy transaction to TranSet|||COPYTRAN"
^OBJECT("TranSet",1,"getTran")="RecordTTX|local Number Sequence|getTran^UCTS|Get transaction from TranSet|||GETTRAN"
^OBJECT("TranSet",1,"postTSet")="|PostDate,Branch,PostParam,TranArr|postTSet^UCTS|Post TranSet|||POSTTSET"
