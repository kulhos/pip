//DO NOT MODIFY  Methods of PSL Class Primitive|UCPRIM|||||||1

	/*
	ORIG: Frans S.C. Witte 
	DESC: PSL Object Class Library - Methods of Class Primitive 

	******** Revision History **********************************************
	08/16/06 - Frans S.C. Witte - CRs: 22720 / 22274
		Replaced methods(,) by pslMtd(,)

	06/01/06 - Frans S.C. Witte - CRs: 22060 / 22061
		Replaced '255' by PSL.maxLitLength, and public vars by PSL.var

	04/07/06 - Frans S.C. Witte - CRs: 20280 / 18164
		Corrected #ACCEPT to  supply all required tags

	12/23/05 - Frans S.C. Witte - CRs: 18727 / 18728
		Replaced this. by PSL. and removed #XECUTE

	11/17/04 - Frans S.C. Witte - CRs 11439 11441 / 11440 11442
		Initial version. Derived from code in M Routine UCGM.
		copied isNull from String.
	*/
	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit


	/* ****************************************************************** */
private get()	// generate code for Prmitive.get
	/* If objectName is a literal, then $GET() is a no-op, and objectName
	   can be returned. Else, psl2m(0,1) will be called to handle the
	   "standard" case.
	INPUTS:
	type public String actual()	/* actual parameters
		(1) = default if supplied

	NOTES:
	- Should check that objectName is a variable or an array
	*/

	if PSL.objectName.isLiteral() set PSL.return = PSL.objectName
	else  do psl2m(0,1)

	quit


	/* ****************************************************************** */
private init()	// initialize compiler structures to handle primitives
	/*
	INPUTS:
	
	OUTPUTS:
	. primtyp() = array of Numbers indicating how class descends from Primitive
		0 = does not descent from Primitive
		1 = descends from Primitive, but is not an immediate descendent,
		    or OBJECT.class='Primitive'
		2 = is immediate descendent (OBJECT.SUPERCLASS='Primitive')
	*/
	type public Number primtyp()
	
	type literal String PRIMITIVE="Primitive"

	type ResultSet rs = Db.select("CLASS,SUPERTYPE","OBJECT","ISPRIMITIVE = 1")
	type String pclass,supertyp

	while rs.next() do {
		set pclass = rs.getRow().class
		set supertyp = rs.getRow().supertype
		if supertyp = PRIMITIVE set primtyp(pclass) = 2
		else  set primtyp(pclass) = $$isAncestor^UCGM(PRIMITIVE, pclass)
		/* FSCW CR11441: the following line shall replace the preceeding
		   line once CR11445 has been installed.
		else  set primtyp(pclass) = Class.isAncestor(PRIMITIVE, pclass)
		*/
	}
	
	/* The Primitive class itself is also considered primitive.
	   This ensures that results of methods that have 'Primitive' as their
	   generic return type (such as Primitive.get()) will be treated as
	   primitive datatypes as well.
	*/
	set primtyp(PRIMITIVE) = 1
	
	/* Initialize type for results of certain binary operations
	*/
	set primtyp("Date","+","Number")="Date"
	set primtyp("Date","-","Number")="Date"

	set primtyp("Time","-","Number")="Time"
	set primtyp("Time","-","Number")="Time"
	
	quit
	

	/* ****************************************************************** */
private isNull()	// Method Primitive.isNull - Primitive is a null
	/* Generate code to check if a primitive is null
	INPUTS:
	type public String actual()	/* actual parameters
		(1) = literal 0 or 1			/TYP=Boolean/REQ
			Indicates whether the string consisting of
			two quotes shall be treated as null
	*/
	if PSL.actual(1).isNull() set PSL.actual(1)=0

	if PSL.actual(1).stripQuotes() set PSL.return = "(""""""""""""["_ PSL.objectName_ ")"
	else  set PSL.return = "("_ PSL.objectName_ "="""")"

	if PSL.objectName.isLiteral() set PSL.return = $$toLit^UCSTRING( PSL.return)

	quit


	/* ****************************************************************** */
private primVar( String class)	// is class implemented as primitive value?
	/*
	ARGUMENTS:
	. class = name of class
	
	INPUTS:
	. primtyp() = array with primitive descriptors as set up by init()

	RETURNS:
	. 1 if class implementation always uses straight M (primitive) variables
	. 0 if class implementation may use vobj()
	
	NOTES:
	. This function returns '0' for all Record classes, even though the
	  implementation may sometimes be optimized to use straight variables.
	*/
	type public Number primtyp()

	quit primtyp(class).exists()	


	/* ****************************************************************** */
private primDes( String class)    // is class descendent of Primitive?
	/*
	ARGUMENTS:
	. class = name of class
	
	INPUTS:
	. primtyp() = array with primitive descriptors as set up by init()

	RETURNS:
	. value assigned to primtyp(class) by subroutine init()
	. 0 if primtyp(class) not defined
	
	NOTES:
	. This function returns '1' for class Primitive, even though a class is
	  not a descendent of itself.
	*/
	type public Number primtyp()

	quit +{Number}primtyp(class).get()
	

	/* ****************************************************************** */
private primNext( String class)    // Return the next primitive class
	/*
	ARGUMENTS:
	. class = name of class
	
	INPUTS:
	. primtyp() = array with primitive descriptors as set up by init()

	RETURNS:
	. primtyp(class).order() where primtyp()=2
	
	NOTES:
	. This function "hides" the definition of "is a primitive class".
	*/
	type public Number primtyp()

	for  set class = primtyp(class).order() quit:class=""  quit:primtyp(class)=2
	quit class
	

	/* ****************************************************************** */
private psl2m(	Number minArg,	// minimum number of arguments	/REQ/MECH=VAL
		Number maxArg)	// maximum number of arguments	/REQ/MECH=VAL
	/* This subroutine generates the code to transform a method of a primitive
	   class to its M equivalent. E.g. String.ascii() to $ASCII().
	   In general an absent parameter for an intrinsic function cannot be
	   substituted by an empty string (i.e actual.isNull() will be used).
	   Furthermore M intrinsic functions only support trailing absent
	   parameters.
	   The only optimization performed by this subroutine is that if the
	   subject (ObjectName) and all supplied arguments are literals, then the
	   function will be applied at compile time, and its value will be
	   assigned to result.

	   Place a call to this method in OBEJCTMET.ROU for all primitive methods
	   that translate drectly into M intrinsic functions. E.g for String.ascii
	   the OBJECTMET.ROU entry shall contain: psl2m^UCPRIM(0,1)
	   
	   If the first argument of the M intrinsic function is not an expression
	   such as in $GET() or $DATA(), then also set OBJECTMET.VALLIT=0.
	   This will prevent the compiler from trying to optimize the function to
	   its value at compile time.
	INPUTS:
	*/
	type literal String sErrMin = "method misses required parameters: "
	type literal String sErrNul = "method does not support missing parameters: "

	type public String pslMtd(,)

	type Number ER = 0
	type Number nArg,supArg
	type Row    rwMtd = $$omGet^UCXOBJ( .pslMtd(,), PSL.mclass, PSL.method, 1).toRow("#$$omRowDef^UCXOBJ")
	type Boolean isLit = rwMtd.VALLIT
	
	/* If isLit is FORCED OFF (e.g in case of Number.random), ensure that
	   objectVar is used in constructed return value */
	if isLit set isLit = PSL.objectName.isLiteral()
	else  set PSL.objectName = PSL.objectVar

	/* check that the minimum number of arguments are supplied, and check
	   if all supplied parameters are literals */
	for nArg=1:1:minArg do {
		if PSL.actual(nArg).isNull() do PSL.error( sErrMin_ PSL.method) quit
		set isLit = isLit & PSL.actual( nArg).isLiteral()
	}
	if ER'=0 quit

	/* find the number of actual parameters that is supplied, and check if
	   all supplied parameters are literals */
	if minArg=0 set minArg = 1	// never check actual(0)
	for nArg=minArg:1:maxArg+1 quit:PSL.actual(nArg).get().isNull()  set isLit = isLit & PSL.actual(nArg).isLiteral()
	set supArg = nArg - 1

	/* no other arguments are allowed after the first missing parameter */
	for nArg=supArg+1:1:maxArg if 'PSL.actual(nArg).isNull() do PSL.error( sErrNul_ PSL.method) quit
	if ER'=0 quit

	/* construct the return value */
	set PSL.return = "$"_ PSL.method_"("_ PSL.objectName
	
	for nArg=1:1:supArg set PSL.return = PSL.return_ ","_ PSL.actual(nArg)
	set PSL.return = PSL.return_ ")"

	/* If all literal, apply at compile time */
	if isLit do {
		type String newret
		#ACCEPT PGM=FSCW; DATE=2004-11-17; CR=11439;GROUP=XECUTE
		xecute "set newret="_ PSL.return
		if newret.length() > PSL.maxLitLength quit
		if newret.isNumber() set PSL.return = +newret
		else  set PSL.return = newret.addQuotes()
	}
	quit
	

	/* ****************************************************************** */
private toVal(	String expr,	// string to convert	/REQ/MECH=VAL
		Primitive def)	// default if not lit.	/REQ/MECH=VAL
	/* If the supplied expression represents a numeric literal or string
	literal, convert it to its literal value.
	Else return the supplied default.
	If the expr is numeric, its canonical value is returned
	*/
	if expr.isNumber() quit +expr

	#ACCEPT CR=11441; PGM=FSCW; DATE=2004-11-17; GROUP=XECUTE
	if $$isStr^UCGM(expr) XECUTE "set def="_expr

	quit def
