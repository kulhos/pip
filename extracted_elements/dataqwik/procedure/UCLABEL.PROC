//DO NOT MODIFY  Label lookup utility, DD Group|UCLABEL|||||||1
public UCLABEL	// main entry: list labels of single routine
	/*
	ORIG: FSANCHEZ - 08/22/2003
	DESC: Label lookup utility, Dictionary Group (uses DBTBL33D)

	*************************************************************************
	* IMPORTANT NOTE:							*
	*	According to the rules that apply to PSL compiler upgrades,	*
	*	this DQ procedure shall compile with the version of the PSL	*
	*	compiler that has been distributed as part of the last AMR.	*
	*************************************************************************

	---- Revision History --------------------------------------------------
	01/23/07 - Frans S.C. Witte - CRs: 24902 / 24903 / 24974
		* Extension of source files modified from ".proc" to ".psl"

	07/10/06 - Frans S.C. Witte - CRs: 22719 / 20613
		* getLabels() now private
		* Unit now considered part of Dictionary group (DBTBL33D is part
		  of DQ DD).
		* Removed code that was commented out.

	06/21/06 - Frans S.C. Witte - CRs: 22060 / 22061
		* Added parameter to getLabels() to allow both "local" and
		  "full" labels.

	05/17/06 - Frans S.C. Witte - CRs: 21101 / 18164
		* Corrected the way the recordsize parameter is passed to %ZOPEN
		* Added #ACCEPT GROUP=READ where applicable

	05/08/06 - Frans S.C. Witte - CRs: 21158 / 18164
		* added /RECORD=32767 to all calls of FILE^%ZOPEN()

	03/13/06 - Frans S.C. Witte - CRs: 20280 / 18164
		* Added function $$getSrc()
		* Moved $$clsRel to UCCLASS (called by UCGM, needed before
		  UCLABEL is compiled).
		* Moved code that extracts and standardizes the subroutine and
		  function declarations to UCPSLLR.
		* Local code now uses PSLLabelRecord whenever possible.

	02/06/06 - Frans S.C. Witte - CRs: 18163 / 18164
		* Modified $$isDQsig(), $$validate(), getLabels(), added
		  $$getDQsig(), $$getDQname(), $$getDQtype() to deal with new
		  signatures.
		* Routine names are no longer truncated and converted to upper,
		  they are taken "as supplied".

	01/21/04 - Frans S.C. Witte - CRs: 15028 / 16039
		* Restriction on specification of accessibility of subroutines
		  and functions inside M routines relaxed.
		* Calls to $$isAncestor^UCGM() replaced by Class.isAncestor() and
		  Class.isDescendant().
		* chkRtn() does no longer check existance and access if one of
		  the labels is "PSL generated".
		* "Routine does not exists" and "Subroutine does not exist" is
		  now suppressed if compopts("WARN","ACCESS") is not set.
		* Code commented out before has been removed.

	01/05/05 - Frans S.C. Witte - CRs: 13403 / 13404
		* Corrected problem in subroutine comment() with '/*' in formal
		  specification.
		* Corrected error in subroutine chkRtn() when formallist contains
		  parenthesis.
		* Added coded to remove insignificant whitespace from formal
		  specification being constructed.
		* Subroutine chkRtn incorrectly reported a "subroutine does not
		  exist RTN^RTN" warning for calls to ^RTN.
		* Access type "LOCAL" is recognized if present.
		* Access type of routines is derived from comment following the
		  label.
		* Code that calls labels^DBSBCH() is now only included if the
		  value of the system keyword %VersionID greater is than 6.4.
		  The code itself has been made more robust:
		  * the check accepts all Exceptions that start with %GTM-E-LABEL
		    (i.e. %GTM-E-LABELMISSING and %GTM-E-LABELUNKNOWN)
		  * it closes the file before it re-throws the error.

	11/02/04 - Frans S.C. Witte - CRs: 11445 / 11446
		* Modified subroutine getLabels to obtain labels inserted by
		  batch generator from DBSBCH.
        	* Documented all subroutines.
		* Typed 'public' and 'private' procedures based on routine
		  search.
		* 'getpar()' renamed to 'getPar()', and variable ER no longer
		  public.
		* Fixed subroutine lables() to correctly deal with comment.
		* Fixed error in chkCalls() that prevented "subroutine does not
		  exist" warning if caller did not supply actual parameters.
		* Public variables commands() and tok removed from checkPar().
		* Removed dead code (procedure test()).
		* Removed first parameter from signature of and calls to
		  $$validate(), because this was not used.
		* Changed name of formal parameter in chkCalls() from 'calls'
		  (not used in code) to 'called' (used in code with #ACCEPT),
		  and removed #ACCEPT. Added compopts() parameter and removed
		  references to (public) commands().
		* Changed name of 'getlabels' to 'mapTrgs', because it deals
		  explicitely (and illegally) with trigger labels.
		* Added procedure comment().
		* Added possiblity to check ACCESS to called subroutine via
		  compopts("WARN","ACCESS").
		* Added public function $$isDQsig().
		* Modified subroutine getLabels to look for a .psl file first,
		  then try to derive the DQ source from the DQ signature of the
		  routine (and else use the routine itself).
		* Derived function $$clsRel() from $$related^UCGMC().
		* Removed #warn and #optimize because this procedure shall follow
		  the standards set for the environment.
		* Removed hard-code list of called routines that were not
		  checked as called routines.
		* Reordered subroutines to occur in alphabetic order.

	05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

        04/07/04 - RussellDS - CR9172
        	   Modified getLabel section to deal with code that is from a
        	   procedure, but only in the form of a .psl file, not a
        	   procedure definition.  This is the case where code is
        	   generated, such as with the filers (DBSFILB).

        	   Cleaned up unscoped variables.

	01/13/04 - CARROLLJ - CR7901
		   PSL compile fix.
	*/		   
	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************

	type String rtn,z
	type PSLLabelRecord labels()

	#ACCEPT CR=21101;DATE=2006-05-18;PGM=FSCW;GROUP=READ
	use $p read !,"Routine: ",rtn quit:rtn.isNull()

	do getLabels( rtn, .labels(), 0)

	use $p write !
	type String tag = ""
	for  set tag = labels(tag).order() quit:tag.isNull()  write !,tag,?10,$$toPSL^UCPSLLR(labels(tag))
	write !
	quit

	// ---------------------------------------------------------------------
public getLabels( local String rtn,	// routine
	public PSLLabelRecord labels(),	// label records
	local Boolean bWithRtn)		// load with or without routinename
	/* ---------------------------------------------------------------------
	Extract labels from the specified routine.
	
	This subroutine calls getSrc(rtn, .src()) and
	getLblRec^UCPSLLR(,$S(bWithRtn:rtn,1:""),0,labels()).
	
	Note that this defaults to "local" labels (i.e. without routinename).
	*/
	type String src()
	type Number res = $$getSrc( rtn, .src())

	if res<2 do getLblRec^UCPSLLR( src(), $S(bWithRtn:rtn,1:""), 0, .labels())

	quit

	// ---------------------------------------------------------------------
public getDQname( String sig)	// DQ signature		/REQ/MECH=VAL
	/* ---------------------------------------------------------------------
	Extract the element name from the DQ signature.
	
	RETURNS:
	$$ the element name (third word in DQ signature)
	*/
	quit sig.piece(" ",3)


	// ---------------------------------------------------------------------
public getDQsig( String line)	// line of M code		/REQ/MECH=VAL
	/* ---------------------------------------------------------------------
	Get the 'DATA-QWIK' signature of the line, that identifies
	a unit as a DATA-QWIK generated unit.
	
	RETURNS:
	$$ "DATA-QWIK" + the text following that if the line contains the
		DQ signature.
	   "" Otherwise
	*/
	if '$$isDQsig( line) quit ""
	quit line.extract( line.find("from DATA-QWIK")-9, line.length())


	// ---------------------------------------------------------------------
public getDQtype( String sig)	// DQ signature		/REQ/MECH=VAL
	/* ---------------------------------------------------------------------
	Extract the element type from the DQ signature.
	
	RETURNS:
	$$ the element type (second word in DQ signature)
	*/
	quit sig.piece(" ",2)

	// ---------------------------------------------------------------------
getSrc( String rtn,	// name of routine		/REQ/MECH=VAL
	String src())	// source code array		/REQ/MECH=REF:W
	/* ---------------------------------------------------------------------
	Get the PSL source code that compiled into the specified routine.

	This subroutine first tries if the file rtn_".psl" can be found.
	If so, it is supposed to contain the PSL source that was compiled to
	construct the routine.

	If the .psl file is not found, the rtn_".m" file is searched for
	an indication of the source that generated the routine.

	If the routine represents a PSL Procedure, then the labels will
	be extracted from the procedure source (table DBTBL25D).
	If the routine represents a Batch, then the labels will be
	extracted from the batch source source (TABLE DBTBL33D).

	If the routine represents a Batch, then subroutine labels^DBSBCH() will
	be called to add definitions of labels that are inserted by the Batch
	generator (i.e. that are not part of the Batch source), and that have
	public visibility. Note that labels^DBSBCH() will only be available in
	versions Profile04 and higher, whereas UCLABEL may be called in versions
	preceeding Profile04 as well. The subroutine is called as follows:
	
		do labels^DBSBCH(.labels())

	The subroutine shall add labels to the array conforming to the layout
	specified for labels() in the ARGUMENT section of this subroutine. The
	subroutine shall not remove data from the supplied array.

	See subroutine labels() for label patterns that will not be added to the
	label array.
	*/
	type literal Number conACCESS = 2
	type literal String conDELIM = $CHAR(9)
	type literal Number conFORMALS = 1

	if rtn.extract(1,3)="V01" quit 1
	if rtn.extract(1,3)="R01" quit 1

	type String file,rec
	type Number lnr,ret
	type String DQname
	type String %ZI(),%ZR()

	set %ZI(rtn) = ""
	do INT^%RSEL
	set file = %ZR(rtn).get() if file.isNull() quit 2
	
	// try ".psl" first
	set file = file_rtn_".psl"
	type Number OK = $$FILE^%ZOPEN(file,"READ",,32767)

	// if .psl file present, use it right away
	if OK do {
		#ACCEPT CR=21101;DATE=2006-05-18;PGM=FSCW;GROUP=READ
		for lnr=1:1 use file quit:$ZEOF  read src(lnr)
		close file
		set ret = 0, OK = 0	// use OK=0 to quit
	}
	else  do {	// find out the hard way ...
		set file = %ZR(rtn)_rtn.translate("%","_")_".m"
		set OK = $$FILE^%ZOPEN(file,"READ",,32767)
		set ret = 2
		if 'OK quit

		set rec = $$validate(file)
		set lnr = 0, ret = 1
		close file

		set DQname = rec.piece( "~", 2)
		set rec = rec.piece( "~", 3)
		if rec = "Procedure" do {
			type String dummy = $$getSrc^UCXDT25( DQname, src(), 1)
		}				
		else  if rec = "Batch" do {
			type ResultSet rs = Db.select("CODE","DBTBL33D","%LIBS='SYSDEV' and BCHID = :DQname")
			while rs.next() set lnr = lnr + 1, src(lnr)= rs.getRow().toString()

			#IF %VersionID>6.4
			do {
				type String lbl = ""
				type String lbls()

				/* CATCH the %GTM-E-LABELMISSING exception that
				   will occur when running against DBSBCH versions
				   that preceed Profile04. All other exceptions
				   thrown by labels^DBSBCH() are passed.
				   */
				catch ignore {
					if ignore.type '[ "%GTM-E-LABEL" do {
						throw ignore
					}
				}
				do labels^DBSBCH(.lbls())
				for  set lbl = lbls(lbl).order() quit:lbl=""  do {
					set lnr = lnr + 1, src( lnr) = lbls(lbl).piece( conDELIM, conACCESS)_" "_lbl_lbls(lbl).piece( conDELIM, conFORMALS)
					set lnr = lnr + 1, src( lnr) = " quit"
				}
			}
			#ENDIF

		}
		else  do {	// anything else, use M routine
			type String access,code
			set OK=$$FILE^%ZOPEN(file,"READ",,32767)
			use file
			for lnr=1:1 quit:$ZEOF  do {
				#ACCEPT CR=21101;DATE=2006-05-18;PGM=FSCW;GROUP=READ
				read src(lnr)
				if " "[src(lnr).translate(9.char()," ").extract() quit
				set access="public"
				if src(lnr) [ ";" do {
					set code = src(lnr).piece(";",2).trim(-1).lowerCase().piece(" ")
					if {List}"local,private,public".contains(code),code.trim().piece("(")'[" " set access=code
				}
				set src(lnr) = access_ " "_ src(lnr)
			}
			close file
		}			
	} // end if .psl else
	quit ret

	// ---------------------------------------------------------------------
public isDQsig( String line)	// line of M code		/REQ/MECH=VAL
	/* ---------------------------------------------------------------------
	Check if the supplied code line contains the signature that identifies
	a unit as a DATA-QWIK generated unit.
	
	RETURNS:
	$$ 1 If ALL of the following conditions are satisfied:
		* The line is a comment-only line
		* the line contains the text " from DATA-QWIK "
	   "" If the line is a comment-only line
	   0 Otherwise.
	*/
	if line.translate(9.char()," ")'?1." "1";".E quit 0	// not comment-only
	if line [ " from DATA-QWIK " quit 1			// DQ signature
	quit ""

	// ---------------------------------------------------------------------
validate( String file)	// name of file				/REQ/MECH=VAL
	/* ---------------------------------------------------------------------
	RETURNS:
	.$$ 1~DQname~DQtype
		if remainder of file contains a line that contains the
		DATA-QWIK signature
	    0	otherwise
	. file	At least one line is read from file. Lines are read until either
		the DATA-QWIK signature is found, or a line that does not have
		the semicolon immediately after the first linestart.

	NOTES:
	. this function may read past code lines that start with a label.
	*/

	type String rec
	type Number OK = ""

	#ACCEPT CR=21101;DATE=2006-05-18;PGM=FSCW;GROUP=READ
	for  use file quit:$ZEOF  read rec set OK = $$isDQsig(rec) if 'OK.isNull() quit
	if OK set rec = $$getDQsig( rec) quit "1~"_ $$getDQname(rec)_ "~"_ $$getDQtype(rec)

	quit 0
