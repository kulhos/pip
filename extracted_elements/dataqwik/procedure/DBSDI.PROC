//DO NOT MODIFY  General purpose data item lookup|DBSDI|||||||1
public DBSDI	
		 
	/*
	General purpose data item lookup program
	
	NOTE:  This procedure is retained for backward compatability.
	       There should generally not be any reason to use it going forward.
	       Try to remove old uses of it and do not add new ones.
		    
	INPUT:
		X - Input string
		DFID - Default file name
		DLIB - Default library name
		%LIBS - User library name
		FILES - Valid files linkages
		OLNTB - 1st line of help print

	OUTPUT:
		DI - Data item
		LIB - Data dictionary library (Actual)
		FID - Data dictionary file (Actual)
		DI(array) - Pieces 1 - 18 of the data item parameters
		DINAM - "["_DLIB_","_DFID_"] "_DI (unconverted; as entered)
		DILNM - Data item long name
		ER - Verification indicator  0=OK, 1=Failed
		RM - Return message (null or process failure reason)

	---- Revision History -------------------------------------------------
	02/16/06 - RussellDS - CR19065
		   Change reference to delimiter to use DBTBL1, not the 
		   obsoleted delimiter from DBTBL1D.
		   
		   Change direct references to DBTBL1 and DBTBL1D to use
		   SchemaTable/Column methods.
		   
		   Added XBAD section for use by DBSEXECU to allow XBAD
		   entries to be filed to an RDB, until DBSEXECU is rewritten
		   to PSL.
	
	01/10/06 - RussellDS - CR18942
		   Added functions to return STBLER and STBLXBAD messages for
		   use by DBSEXECU until it is rewritten to PSL.  Once that is
		   done, remove these.
		   
		   Added function STBLSKWD for same purpose for SQLQ.
	
	01/09/06 - RussellDS - CR18906
		   Fix bug introduced in rewrite to PSL.  Need to consider
		   LIBRARY,FID syntax.
	
	12/14/05 - RussellDS - CR18400
		   Converted to PSL.

	-----------------------------------------------------------------------
	*/
	
	type public Boolean ER
	type public String DFID, DI(), DILNM, DINAM, DLIB, FID, FILES, LIB, RM, X
	
	set (DLIB, LIB) = "SYSDEV"
	if 'DFID.exists() set DFID = ""
	if 'FILES.exists() set FILES = ""

	set ER = 0
	
	set DI = X
	set DINAM = ""
	set FID = DFID
	
	if DI.beginsWith("["), DI.isLike("%]%") do {
		
		set FID = DI.piece("]", 1).piece("[", 2)
		set DI = DI.piece("]", 2)
	}
	
	if FID.isLike("%.%") set FID = FID.piece(".", 2)
	if FID.isLike("%,%") set FID = FID.piece(",", 2)
	if FID.isNull() set FID = DFID
	
	set FID = FID.upperCase()
	set DI = DI.upperCase()
	
	quit:FID.isNull()
	quit:FID.isLike("%?%")
	quit:FID.isLike("%!%")
	
	type SchemaTable tableinfo
	
	set ER = $$getTableInfo(FID, .tableinfo)
	
	if ER do { quit

		// Invalid file name - ~p1
		set RM = $$^MSG(1337, FID)
		set (LIB, FID, DI) = ""
	}
	
	if 'FILES.isNull(), '{List}FILES.contains(FID) do { quit
		
		set ER = 1
		// Invalid file linkage - ~p1
		set RM = $$^MSG(1335,FILES)
		set (LIB, FID, DI) = ""
	}
	
	set DFID = FID
	
	quit:(DI.isNull() ! DI.isLike("%?%") ! DI.isLike("%!%"))
	
	type SchemaColumn colinfo
	
	set ER = $$getColInfo(FID, DI, .colinfo)
	
	if ER do { quit
	
		// Invalid data item - ~p1
		set RM = $$^MSG(1298, DI)
		set (LIB, FID, DI) = ""
	}
	
	set DI(1) = colinfo.node
	set DI(2) = colinfo.length
	set DI(3) = colinfo.default
	set DI(4) = colinfo.userType
	set DI(5) = colinfo.lookupTable
	set DI(6) = colinfo.pattern
	set DI(7) = colinfo.postProcExpr
	set DI(8) = colinfo.preProcExpr
	set DI(9) = colinfo.dataType
	set DI(10) = colinfo.description
	set DI(11) = colinfo.internalType
	set DI(12) = colinfo.minimum
	set DI(13) = colinfo.maximum
	set DI(14) = colinfo.precision
	set DI(15) = colinfo.isRequired
	set DI(16) = colinfo.computation
	set DI(17) = (colinfo.masterfieldType>0)
	set DI(18) = colinfo.subfieldTag_"~"_colinfo.subfieldMajor_"~"_colinfo.subfieldMinor_"~"_colinfo.subfieldPosition
	if (DI(18).replace("~").isNull()) set DI(18) = ""
	set DI(19) = colinfo.displaySize
	set DI(20) = tableinfo.columnDelimiter
	set DI(21) = colinfo.position
	set DI(22) = colinfo.reportHeader
	set DI(23) = colinfo.isSerial
	
	set DINAM = "["_DLIB_","_DFID_"]"_DI
	set DILNM = DI(10)
	
	quit


public LIB(String file,		// Table name
	   String libr)		// Library		/NOREQ
	   
	/*
	Resolve implicit reference
	
	************************************************************************
	* This subroutine is provided for backward compatability only.  No new *
	* uses should be made of it and existing uses should be rewritten to   *
	* standard PSL methods when appropriate.  Once all callers have been   *
	* changed, this code should be removed.                                *
	************************************************************************
	*/
	
	type Boolean ER
	type String return
	
	if libr.get().isNull() set libr = "SYSDEV"
	
	set return = ""
	
	type SchemaTable tableinfo
	
	set ER = $$getTableInfo(file, .tableinfo)
	
	if 'ER set return = libr_","_file
	
	quit return


private STBLER(String KEY)	// STBLER.KEY

	/*
	FOR TEMPORARY USE BY DBSEXECU ONLY
	
	REMOVE ONCE DBSEXECU IS CONVERTED TO PSL
	*/
	
	type RecordSTBLER stbler = Db.getRecord("STBLER", "KEY=:KEY", 1)
	
	quit stbler.rm_"|||||"_stbler.rm2
	

private STBLXBAD(String KEY)	// STBLXBAD.KEY

	/*
	FOR TEMPORARY USE BY DBSEXECU ONLY
	
	REMOVE ONCE DBSEXECU IS CONVERTED TO PSL
	*/
	
	type RecordSTBLXBAD stblxbad = Db.getRecord("STBLXBAD", "KEY=:KEY", 1)
	
	quit stblxbad.desc_"|||"_stblxbad.flag
	
	
private STBLSKWD(String KEYWORDS())	// Keyword list		/MECH=REFARR:W

	/*
	FOR TEMPORARY USE BY SQLQ ONLY
	
	REMOVE ONCE SQLQ IS CONVERTED TO PSL
	*/
	
	type ResultSet rs = Db.select("KEYWORD,DES", "STBLSYSKEYWD")
	
	while rs.next() set KEYWORDS(rs.getCol("KEYWORD")) = rs.getCol("DES")
	
	quit
	
	
private XBAD(Date TDATE,	// XBAD.TDATE key
	     String TABLE,	// XBAD.TABLE key
	     String AKEYS,	// XBAD.AKEYS key
	     String ET,		// XBAD.ET key
	     String data)	// XBAD data

	/*
	FOR TEMPORARY USE BY SQLQ ONLY
	
	REMOVE ONCE SQLQ IS CONVERTED TO PSL
	*/
	
	type RecordXBAD xbad = Db.getRecord("XBAD", "TDATE=:TDATE, TABLE=:TABLE, AKEYS=:AKEYS, ET=:ET", 1)
	
	set xbad.col = data.piece("|", 1)
	set xbad.currval = data.piece("|", 2)
	set xbad.altval = data.piece("|", 3)
	set xbad.des = data.piece("|", 4)
	set xbad.fatal = data.piece("|", 5)
	
	do xbad.save()
	
	quit
	
	
getTableInfo(String table,		// Table name
	     SchemaTable tableInfo)	// Schema column record
       
	/*
	Load SchemaTable record, with error handling.
       
	RETURNS:
		. $$		0 = success
				1 = failure
	*/
	
	type Boolean return = 0
	
		
	do {
		
		catch error {
			
			set return = 1
		}
		
		set tableInfo = Db.getSchemaTable(table)
	}
	
	quit return
	
	
getColInfo(String table,		// Table name
	   String column,		// Column name
	   SchemaColumn colInfo)	// Schema column record
       
	/*
	Load SchemaColumn record, with error handling.
       
	RETURNS:
		. $$		0 = success
				1 = failure
	*/
	
	type Boolean return = 0
	
		
	do {
		
		catch error {
			
			set return = 1
		}
		
		set colInfo = Db.getSchemaColumn(table, column)
	}
	
	quit return
