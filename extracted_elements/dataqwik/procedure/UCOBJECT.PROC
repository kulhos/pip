//DO NOT MODIFY  PSL Object Class Library|UCOBJECT|||||||1

	/*
	ORIG: FSANCHEZ - 04/09/2001
	DESC: PSL Object Class Library

	NOTE:
	Methods Object.order() and Object.query() are implemented through
	psl2m^UCPRIM().

	---- Revision History --------------------------------------------------
	12/23/05 - Frans S.C. Witte - CRs: 18727 / 18728
		Replaced this. by PSL. and removed #XECUTE

	04/25/05 - Frans S.C. Witte - CRs: 15592 / 15593
		Experimental change: .getClass() will be resolved at runtime for
		Class Record and its descendants, and at compiletime in all other
		cases.

	12/21/04 - Frans S.C. Witte - CRs: 13403 / 13404
		Removed code that has been commented out.
		Added #ACCEPT before #BYPASS

	10/19/04 - Frans S.C. Witte - CRs: 11445 / 11446
		The following subroutines have been moved to UCREF: addValue,
		copy, equals, getPointer, getValue, toString.
		Subrutine isPrimitive now uses $$primDesc^UCPRIM() to construct
		the result.
		#warn and #optimize removed (follow environment defaults).
		Added subroutine data(). Modified code generated for .exists().
 
        05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.
		   
	09/16/03 - Spier CR 6031,6032,6034  - arq 51423
		Retrofit of changes made in v7.0 up to this date into Profile01
		as well as release for v7.0
	*/
	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit


	/* ****************************************************************** */
private data()     // method Object.data; returns Number
	/* Return code for $DATA(). This method is deprecated except for arrays.
	   A deprecation warning will be supplied when the method is applied to
	   an object for which no descendents are declared.
	   Note that this subroutine must use objectVar instead of objectName,
	   because $DATA requires a variable.
	*/
	type public String type(,)

	set PSL.return = "$D("_PSL.objectVar_")"

	/* Get the type of this object variable, and the next type in the type(,)
	   array. If the next element has the same name, and more subscripts,
	   then it is an array descendent, and the method is appropriate.
	   Note that this observation heavily depends on the ASCII ordering of
	   "(", ",", and digit/alpha.
	*/
	type String varTyp = $$objPtr^UCGM( PSL.objectVar)
	type Number varLev = $$getLevel^UCGM( PSL.objectVar)
	type String nxtTyp = type( varLev, varTyp).order()

	type Boolean bArr= (varTyp.piece("(") = nxtTyp.piece("("))
	if bArr,varTyp["(" do {
		set varTyp = varTyp.extract(1, varTyp.length()-1)
		set bArr = (nxtTyp.extract(1, varTyp.length()) = varTyp)
	}	
	if 'bArr do WARNDEP^UCGM( PSL.objectVar _ ".data()")

	if $$getOpti^UCGM(PSL.objectVar,PSL.objectLevel)>PSL.msrc do setOpti^UCGM(PSL.objectVar,PSL.objectLevel,0)
	quit
	

	/* ****************************************************************** */
private exists		// method Object.exists; returns boolean
	/* return code to check if object exists.
	   Returns $DATA(objectVar)#2 in all cases.
	   This is based on the observation that PSL has no means to "deassign"
	   an object. So once an object has been instantiated, it will always
	   have a value. Note that this mechanism works for optimized RecordXXXX
	   objects as well: ObjectVar is used for the "default node" in that case.
	   Note that this subroutine must use objectVar instead of objectName,
	   because $DATA requires a variable.
	   */

	set PSL.return = "($D("_PSL.objectVar_")#2)"
	//set PSL.return=PSL.mExpr("'($G("_PSL.objectName_").isNull())")

	// if object optimization was turned off for this line, turn it back on
	if $$getOpti^UCGM(PSL.objectVar,PSL.objectLevel)>PSL.msrc do setOpti^UCGM(PSL.objectVar,PSL.objectLevel,0)
	quit
	

private getClass     // method Object.getClass; returns string

	/* ======== old code commented out by FSCW, CR ?	
	type String class=$$getClass^UCGM(PSL.objectName,PSL.objectLevel)	
	type Number isAnces=0

	if $$isRecord^UCGM(class) do {
		
		type String table
		set table=$$getReTable^UCGM(class)
		#ACCEPT CR=13403; PGMR=FSCW; DATE=12/21/04
		#BYPASS
		if $D(^DBINDX("SYSDEV","PARFID",table)) set isAnces=1
		#ENDBYPASS
	}

	if isAnces=0 do {
	
		if $$getOpti^UCGM(PSL.objectName,PSL.objectLevel)>PSL.msrc do setOpti^UCGM(PSL.objectName,PSL.objectLevel,0)
		set PSL.return=class.addQuotes()
	}
	
	else  set PSL.return="$G("_PSL.oLvn_"(+$G("_PSL.objectName_"),-1))"
	======== end old code commented out ======== */

	type String class=$$getClass^UCGM(PSL.objectName,PSL.objectLevel)	

	if $$isRecord^UCGM(class) do {
		/* Defer to runtime for all Record descendants, and ensure this
		   will return a value by turning off object optimization */
		do setOpti^UCGM(PSL.objectName,PSL.objectLevel,1)
		set PSL.return="$G("_PSL.oLvn_"(+$G("_PSL.objectName_"),-1))"
	}
	else  do {
		/* for all other classes: resolve at compiletime */
		set PSL.return=class.addQuotes()
	}
	
	quit
	

isPrim	// method Object.isPrimitive()

	type String class=$$getClass^UCGM(PSL.objectName,PSL.objectLevel)
	
	/*
	type Public String primtyp,method

	if primtyp(class).data() set PSL.return=1
	else  set PSL.return=method(class).piece("|",8)
	*/
	set PSL.return = $$primDes^UCPRIM(class) > 0
	quit
