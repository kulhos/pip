//DO NOT MODIFY  PSL Test Set - class List|ZUCTLST|||||||1
ZUCTLST()	// PSL Test Set, class List, all methods
	/*
	ORIG: Frans S.C. Witte - 2005-05-03
	DESC: PSL Test Set, class Class

	Module that validates the behaviour of the List class.

	---- Revision History --------------------------------------------------
	2005-05-03, Frans S.C. Witte
		Implemented validations for List.add(): All call combinations,
		and validations add01(), add02(), add12(), add26(), add27(),
		add28(), add29(), add30(), and add31().
	*/
	do add()	// List.add( String expr, String delimiter,
			//           Boolean allowDuplicate, Boolean inOrder)
	quit

	// =====================================================================
public add()	// Validate List.add(String,String,Booelan,Boolean)
	/* ---------------------------------------------------------------------
	Procedure that validates code relating to List.add().
	Validation values (see ZUCT for meaning of Cn and Rn):
	C0/R0	"", "aap,mies,noot", "aap:mies:noot", "aap!?mies!?noot"
	C1/R1	"", "new", "mies"
	C2/R2	"", ",", ":", "!?"
	C3/R3	"", 0, 1
	C4/R4	"", 0, 1
	calls:
	* public add00()		// validate C0.add(C1,C2,C3,C4)
	* public add01(R0)		// validate R0.add(C1,C2,C3,C4)
	* public add02(R1)		// validate C0.add(R1,C2,C3,C4)
	* public add03(R2)		// validate C0.add(C1,R2,C3,C4)
	* public add04(R3)		// validate C0.add(C1,C2,R3,C4)
	* public add05(R4)		// validate C0.add(C1,C2,C3,R4)
	* public add06(R0,R1)		// validate R0.add(R1,C2,C3,C4)
	* public add07(R0,R2)		// validate R0.add(C1,R2,C3,C4)
	* public add08(R0,R3)		// validate R0.add(C1,C2,R3,C4)
	* public add09(R0,R4)		// validate R0.add(C1,C2,C3,R4)
	* public add10(R1,R2)		// validate C0.add(R1,R2,C3,C4)
	* public add11(R1,R3)		// validate C0.add(R1,C2,R3,C4)
	* public add12(R1,R4)		// validate C0.add(R1,C2,C3,R4)
	* public add13(R2,R3)		// validate C0.add(C1,R2,R3,C4)
	* public add14(R2,R4)		// validate C0.add(C1,R2,C3,R4)
	* public add15(R3,R4)		// validate C0.add(C1,C2,R3,R4)
	* public add16(R0,R1,R2)	// validate R0.add(R1,R2,C3,C4)
	* public add17(R0,R1,R3)	// validate R0.add(R1,C2,R3,C4)
	* public add18(R0,R1,R4)	// validate R0.add(R1,C2,C3,R4)
	* public add19(R0,R2,R3)	// validate R0.add(C1,R2,R3,C4)
	* public add20(R0,R2,R4)	// validate R0.add(C1,R2,C3,R4)
	* public add21(R0,R3,R4)	// validate R0.add(C1,C2,R3,R4)
	* public add22(R1,R2,R3)	// validate C0.add(R1,R2,R3,C4)
	* public add23(R1,R2,R4)	// validate C0.add(R1,R2,C3,R4)
	* public add24(R1,R3,R4)	// validate C0.add(R1,C2,R3,R4)
	* public add25(R2,R3,R4)	// validate C0.add(C1,R2,R3,R4)
	* public add26(R0,R1,R2,R3)	// validate R0.add(R1,R2,R3,C4)
	* public add27(R0,R1,R2,R4)	// validate R0.add(R1,R2,C3,R4)
	* public add28(R0,R1,R3,R4)	// validate R0.add(R1,C2,R3,R4)
	* public add29(R0,R2,R3,R4)	// validate R0.add(C1,R2,R3,R4)
	* public add30(R1,R2,R3,R4)	// validate C0.add(R1,R2,R3,R4)
	* public add31(R0,R1,R2,R3,R4)	// validate R0.add(R1,R2,R3,R4)
	*/
	type List R0
	type String R1, R2
	type Boolean R3, R4
	do add00()
	for R0 = {List}"", {List}"aap,mies,noot", {List}"aap:mies:noot", {List}"aap!?mies!?noot" do {
		do add01( R0)
		for R1 = "", "new", "mies" do {
			if R0.isNull() do add02(R1)
			do add06(R0,R1)
			for R2 = "", ",", ":", "!?" do {
				if R0.isNull(),R1.isNull() do add03(R2)
				if R1.isNull() do add07(R0,R2)
				if R0.isNull() do add10(R1,R2)
				do add16(R0,R1,R2)
				for R3 = 0, 1 do {
					if R0.isNull(),R1.isNull(),R2.isNull() do add04(R3)
					if R1.isNull(),R2.isNull() do add08(R0,R3)
					if R0.isNull(),R2.isNull() do add11(R1,R3)
					if R0.isNull(),R1.isNull() do add13(R2,R3)
					if R2.isNull() do add17(R0,R1,R3)
					if R1.isNull() do add19(R0,R2,R3)
					if R0.isNull() do add22(R1,R2,R3)
					do add26(R0,R1,R2,R3)
					for R4 = 0, 1 do {
						if R0.isNull(),R1.isNull(),R2.isNull(),R3=0 do add05(R4)
						if R1.isNull(),R2.isNull(),R3=0        do add09(R0,R4)
						if R0.isNull(),R2.isNull(),R3=0        do add12(R1,R4)
						if R0.isNull(),R1.isNull(),R3=0        do add14(R2,R4)
						if R0.isNull(),R1.isNull(),R2.isNull() do add15(R3,R4)
						if R2.isNull(),R3=0        do add18(R0,R1,R4)
						if R1.isNull(),R3=0        do add20(R0,R2,R4)
						if R1.isNull(),R2.isNull() do add21(R0,R3,R4)
						if R0.isNull(),R3=0        do add23(R1,R2,R4)
						if R0.isNull(),R2.isNull() do add24(R1,R3,R4)
						if R0.isNull(),R1.isNull() do add25(R2,R3,R4)
						if R3=0        do add27(R0,R1,R2,R4)
						if R2.isNull() do add28(R0,R1,R3,R4)
						if R1.isNull() do add29(R0,R2,R3,R4)
						if R0.isNull() do add30(R1,R2,R3,R4)
						do add31(R0,R1,R2,R3,R4)
					}
				}
			}
		}
	}

	quit

	// =====================================================================
	//validate ({List}C0).add(C1,C2,C3,C4)
public add00()

	/* to be done */

	quit

	// =====================================================================
	// validate ({ListR0}.add(C1,C2,C3,C4)
public add01( List sLst)
	type List sRes
  
	set sRes = sLst.add("")			// C1 Empty, all others absent
	write "add01(R0):<"_sLst_">.add("""")="_sRes,!

	set sRes = sLst.add("new")		// C1="new", all others absent
	write "add01(R0):<"_sLst_">.add(""new"")="_sRes,!

	set sRes = sLst.add("mies")		// C1="mies", all others absent
	write "add01(R0):<"_sLst_">.add(""mies"")="_sRes,!

	set sRes = sLst.add("",",")		// C1 Empty, C2=","
	write "add01(R0):<"_sLst_">.add("""","","")="_sRes,!

	set sRes = sLst.add("new",",")		// C1="new", C2=","
	write "add01(R0):<"_sLst_">.add(""new"","","")="_sRes,!

	set sRes = sLst.add("mies",",")		// C1="mies", C2=","
	write "add01(R0):<"_sLst_">.add(""mies"","","")="_sRes,!

	set sRes = sLst.add("",":")		// C1 Empty, C2=":"
	write "add01(R0):<"_sLst_">.add("""","":"")="_sRes,!

	set sRes = sLst.add("new",":")		// C1="new", C2=":"
	write "add01(R0):<"_sLst_">.add(""new"","":"")="_sRes,!

	set sRes = sLst.add("mies",":")		// C1="mies", C2=":"
	write "add01(R0):<"_sLst_">.add(""mies"","":"")="_sRes,!

	set sRes = sLst.add("","!?")		// C1 Empty, C2="!?"
	write "add01(R0):<"_sLst_">.add("""",""!?"")="_sRes,!

	set sRes = sLst.add("new","!?")		// C1="new", C2="!?"
	write "add01(R0):<"_sLst_">.add(""new"",""!?"")="_sRes,!

	set sRes = sLst.add("mies","!?")	// C1="mies", C2="!?"
	write "add01(R0):<"_sLst_">.add(""mies"",""!?"")="_sRes,!

	set sRes = sLst.add("",",",0)		// C1 Empty, C2=",", C3=0
	write "add01(R0):<"_sLst_">.add("""","","",0)="_sRes,!

	set sRes = sLst.add("new",",",0)	// C1="new", C2=",", C3=0
	write "add01(R0):<"_sLst_">.add(""new"","","",0)="_sRes,!

	set sRes = sLst.add("mies",",",0)	// C1="mies", C2=",", C3=0
	write "add01(R0):<"_sLst_">.add(""mies"","","",0)="_sRes,!

	set sRes = sLst.add("",":",0)		// C1 Empty, C2=":", C3=0
	write "add01(R0):<"_sLst_">.add("""","":"",0)="_sRes,!

	set sRes = sLst.add("new",":",0)	// C1="new", C2=":", C3=0
	write "add01(R0):<"_sLst_">.add(""new"","":"",0)="_sRes,!

	set sRes = sLst.add("mies",":",0)	// C1="mies", C2=":", C3=0
	write "add01(R0):<"_sLst_">.add(""mies"","":"",0)="_sRes,!

	set sRes = sLst.add("","!?",0)		// C1 Empty, C2="!?", C3=0
	write "add01(R0):<"_sLst_">.add("""",""!?"",0)="_sRes,!

	set sRes = sLst.add("new","!?",0)	// C1="new", C2="!?", C3=0
	write "add01(R0):<"_sLst_">.add(""new"",""!?"",0)="_sRes,!

	set sRes = sLst.add("mies","!?",0)	// C1="mies", C2="!?", C3=0
	write "add01(R0):<"_sLst_">.add(""mies"",""!?"",0)="_sRes,!

	set sRes = sLst.add("",",",1)		// C1 Empty, C2=",", C3=1
	write "add01(R0):<"_sLst_">.add("""","","",1)="_sRes,!

	set sRes = sLst.add("new",",",1)	// C1="new", C2=",", C3=1
	write "add01(R0):<"_sLst_">.add(""new"","","",1)="_sRes,!

	set sRes = sLst.add("mies",",",1)	// C1="mies", C2=",", C3=1
	write "add01(R0):<"_sLst_">.add(""mies"","","",1)="_sRes,!

	set sRes = sLst.add("",":",1)		// C1 Empty, C2=":", C3=1
	write "add01(R0):<"_sLst_">.add("""","":"",1)="_sRes,!

	set sRes = sLst.add("new",":",1)	// C1="new", C2=":", C3=1
	write "add01(R0):<"_sLst_">.add(""new"","":"",1)="_sRes,!

	set sRes = sLst.add("mies",":",1)	// C1="mies", C2=":", C3=1
	write "add01(R0):<"_sLst_">.add(""mies"","":"",1)="_sRes,!

	set sRes = sLst.add("","!?",1)		// C1 Empty, C2="!?", C3=1
	write "add01(R0):<"_sLst_">.add("""",""!?"",1)="_sRes,!

	set sRes = sLst.add("new","!?",1)	// C1="new", C2="!?", C3=1
	write "add01(R0):<"_sLst_">.add(""new"",""!?"",1)="_sRes,!
	
	set sRes = sLst.add("mies","!?",1)	// C1="mies", C2="!?", C3=1
	write "add01(R0):<"_sLst_">.add(""mies"",""!?"",1)="_sRes,!
	
	set sRes = sLst.add("",",",0,0)		// C1 Empty, C2=",", C3=0, C4=0
	write "add01(R0):<"_sLst_">.add("""","","",0,0)="_sRes,!

	set sRes = sLst.add("new",",",0,0)	// C1="new", C2=",", C3=0, C4=0
	write "add01(R0):<"_sLst_">.add(""new"","","",0,0)="_sRes,!

	set sRes = sLst.add("mies",",",0,0)	// C1="mies", C2=",", C3=0, C4=0
	write "add01(R0):<"_sLst_">.add(""mies"","","",0,0)="_sRes,!

	set sRes = sLst.add("",":",0,0)		// C1 Empty, C2=":", C3=0, C4=0
	write "add01(R0):<"_sLst_">.add("""","":"",0,0)="_sRes,!

	set sRes = sLst.add("new",":",0,0)	// C1="new", C2=":", C3=0, C4=0
	write "add01(R0):<"_sLst_">.add(""new"","":"",0,0)="_sRes,!

	set sRes = sLst.add("mies",":",0,0)	// C1="mies", C2=":", C3=0, C4=0
	write "add01(R0):<"_sLst_">.add(""mies"","":"",0,0)="_sRes,!

	set sRes = sLst.add("","!?",0,0)	// C1 Empty, C2="!?", C3=0, C4=0
	write "add01(R0):<"_sLst_">.add("""",""!?"",0,0)="_sRes,!

	set sRes = sLst.add("new","!?",0,0)	// C1="new", C2="!?", C3=0, C4=0
	write "add01(R0):<"_sLst_">.add(""new"",""!?"",0,0)="_sRes,!

	set sRes = sLst.add("mies","!?",0,0)	// C1="mies", C2="!?", C3=0, C4=0
	write "add01(R0):<"_sLst_">.add(""mies"",""!?"",0,0)="_sRes,!

	set sRes = sLst.add("",",",1,0)		// C1 Empty, C2=",", C3=1, C4=0
	write "add01(R0):<"_sLst_">.add("""","","",1,0)="_sRes,!

	set sRes = sLst.add("new",",",1,0)	// C1="new", C2=",", C3=1, C4=0
	write "add01(R0):<"_sLst_">.add(""new"","","",1,0)="_sRes,!

	set sRes = sLst.add("mies",",",1,0)	// C1="mies", C2=",", C3=1, C4=0
	write "add01(R0):<"_sLst_">.add(""mies"","","",1,0)="_sRes,!

	set sRes = sLst.add("",":",1,0)		// C1 Empty, C2=":", C3=1, C4=0
	write "add01(R0):<"_sLst_">.add("""","":"",1,0)="_sRes,!

	set sRes = sLst.add("new",":",1,0)	// C1="new", C2=":", C3=1, C4=0
	write "add01(R0):<"_sLst_">.add(""new"","":"",1,0)="_sRes,!

	set sRes = sLst.add("mies",":",1,0)	// C1="mies", C2=":", C3=1, C4=0
	write "add01(R0):<"_sLst_">.add(""mies"","":"",1,0)="_sRes,!

	set sRes = sLst.add("","!?",1,0)	// C1 Empty, C2="!?", C3=1, C4=0
	write "add01(R0):<"_sLst_">.add("""",""!?"",1,0)="_sRes,!

	set sRes = sLst.add("new","!?",1,0)	// C1="new", C2="!?", C3=1, C4=0
	write "add01(R0):<"_sLst_">.add(""new"",""!?"",1,0)="_sRes,!
	
	set sRes = sLst.add("mies","!?",1,0)	// C1="mies", C2="!?", C3=1, C4=0
	write "add01(R0):<"_sLst_">.add(""mies"",""!?"",1,0)="_sRes,!
	
	set sRes = sLst.add("",",",0,1)		// C1 Empty, C2=",", C3=0, C4=1`
	write "add01(R0):<"_sLst_">.add("""","","",0,1)="_sRes,!

	set sRes = sLst.add("new",",",0,1)	// C1="new", C2=",", C3=0, C4=1
	write "add01(R0):<"_sLst_">.add(""new"","","",0,1)="_sRes,!

	set sRes = sLst.add("mies",",",0,1)	// C1="mies", C2=",", C3=0, C4=1
	write "add01(R0):<"_sLst_">.add(""mies"","","",0,1)="_sRes,!

	set sRes = sLst.add("",":",0,1)		// C1 Empty, C2=":", C3=0, C4=1
	write "add01(R0):<"_sLst_">.add("""","":"",0,1)="_sRes,!

	set sRes = sLst.add("new",":",0,1)	// C1="new", C2=":", C3=0, C4=1
	write "add01(R0):<"_sLst_">.add(""new"","":"",0,1)="_sRes,!

	set sRes = sLst.add("mies",":",0,1)	// C1="mies", C2=":", C3=0, C4=1
	write "add01(R0):<"_sLst_">.add(""mies"","":"",0,1)="_sRes,!

	set sRes = sLst.add("","!?",0,1)	// C1 Empty, C2="!?", C3=0, C4=1
	write "add01(R0):<"_sLst_">.add("""",""!?"",0,1)="_sRes,!

	set sRes = sLst.add("new","!?",0,1)	// C1="new", C2="!?", C3=0, C4=1
	write "add01(R0):<"_sLst_">.add(""new"",""!?"",0,1)="_sRes,!

	set sRes = sLst.add("mies","!?",0,1)	// C1="mies", C2="!?", C3=0, C4=1
	write "add01(R0):<"_sLst_">.add(""mies"",""!?"",0,1)="_sRes,!

	set sRes = sLst.add("",",",1,1)		// C1 Empty, C2=",", C3=1, C4=1
	write "add01(R0):<"_sLst_">.add("""","","",1,1)="_sRes,!

	set sRes = sLst.add("new",",",1,1)	// C1="new", C2=",", C3=1, C4=1
	write "add01(R0):<"_sLst_">.add(""new"","","",1,1)="_sRes,!

	set sRes = sLst.add("mies",",",1,1)	// C1="mies", C2=",", C3=1, C4=1
	write "add01(R0):<"_sLst_">.add(""mies"","","",1,1)="_sRes,!

	set sRes = sLst.add("",":",1,1)		// C1 Empty, C2=":", C3=1, C4=1
	write "add01(R0):<"_sLst_">.add("""","":"",1,1)="_sRes,!

	set sRes = sLst.add("new",":",1,1)	// C1="new", C2=":", C3=1, C4=1
	write "add01(R0):<"_sLst_">.add(""new"","":"",1,1)="_sRes,!

	set sRes = sLst.add("mies",":",1,1)	// C1="mies", C2=":", C3=1, C4=1
	write "add01(R0):<"_sLst_">.add(""mies"","":"",1,1)="_sRes,!

	set sRes = sLst.add("","!?",1,1)	// C1 Empty, C2="!?", C3=1, C4=1
	write "add01(R0):<"_sLst_">.add("""",""!?"",1,1)="_sRes,!

	set sRes = sLst.add("new","!?",1,1)	// C1="new", C2="!?", C3=1, C4=1
	write "add01(R0):<"_sLst_">.add(""new"",""!?"",1,1)="_sRes,!

	set sRes = sLst.add("mies","!?",1,1)	// C1="mies", C2="!?", C3=1, C4=1
	write "add01(R0):<"_sLst_">.add(""mies"",""!?"",1,1)="_sRes,!

	quit

	// =====================================================================
	// validate C0.add(R1,C2,C3,C4)
public add02( String sElm)
	type List sRes

	// C0 = constant, all others absent
	set sRes = {List}"".add( sElm)
	write "add02(R1):"""".add(<"_sElm_">)="_sRes,!

	set sRes = {List}"aap,mies,noot".add( sElm)
	write "add02(R1):""aap,mies,noot"".add(<"_sElm_">)="_sRes,!

	set sRes = {List}"aap:mies:noot".add( sElm)
	write "add02(R1):""aap:mies:noot"".add(<"_sElm_">)="_sRes,!

	set sRes = {List}"aap!?mies!?noot".add( sElm)
	write "add02(R1):""aap!?mies!?noot"">.add(<"_sElm_">)="_sRes,!

	// C0 = constant, C2 matches delimiter in C0, C3 and C4 absent
	set sRes = {List}"".add( sElm, "")
	write "add02(R1):"""".add(<"_sElm_">,"""")="_sRes,!

	set sRes = {List}"aap,mies,noot".add( sElm, ",")
	write "add02(R1):""aap,mies,noot"".add(<"_sElm_">,"","")="_sRes,!

	set sRes = {List}"aap:mies:noot".add( sElm, ":")
	write "add02(R1):""aap:mies:noot"".add(<"_sElm_">,"":"")="_sRes,!

	set sRes = {List}"aap!?mies!?noot".add( sElm, "!?")
	write "add02(R1):""aap!?mies!?noot"".add(<"_sElm_">,""!?"")="_sRes,!

	// C0 = constant, C2 matches delimiter in C0, C3=0, C4 absent
	set sRes = {List}"".add( sElm, "", 0)
	write "add02(R1):"""".add(<"_sElm_">,"""",0)="_sRes,!

	set sRes = {List}"aap,mies,noot".add( sElm, ",", 0)
	write "add02(R1):""aap,mies,noot"".add(<"_sElm_">,"","",0)="_sRes,!

	set sRes = {List}"aap:mies:noot".add( sElm, ":", 0)
	write "add02(R1):""aap:mies:noot"".add(<"_sElm_">,"":"",0)="_sRes,!

	set sRes = {List}"aap!?mies!?noot".add( sElm, "!?", 0)
	write "add02(R1):""aap!?mies!?noot"".add(<"_sElm_">,""!?"",0)="_sRes,!

	// C0 = constant, C2 matches delimiter in C0, C3=1, C4 absent
	set sRes = {List}"".add( sElm, "", 1)
	write "add02(R1):"""".add(<"_sElm_">,"""",1)="_sRes,!

	set sRes = {List}"aap,mies,noot".add( sElm, ",", 1)
	write "add02(R1):""aap,mies,noot"".add(<"_sElm_">,"","",1)="_sRes,!

	set sRes = {List}"aap:mies:noot".add( sElm, ":", 1)
	write "add02(R1):""aap:mies:noot"".add(<"_sElm_">,"":"",1)="_sRes,!

	set sRes = {List}"aap!?mies!?noot".add( sElm, "!?", 1)
	write "add02(R1):""aap!?mies!?noot"".add(<"_sElm_">,""!?"",1)="_sRes,!

	// C0 = constant, C2 matches delimiter in C0, C3=1, C4=0
	set sRes = {List}"".add( sElm, "", 1, 0)
	write "add02(R1):"""".add(<"_sElm_">,"""",1,0)="_sRes,!

	set sRes = {List}"aap,mies,noot".add( sElm, ",", 1, 0)
	write "add02(R1):""aap,mies,noot"".add(<"_sElm_">,"","",1,0)="_sRes,!

	set sRes = {List}"aap:mies:noot".add( sElm, ":", 1, 0)
	write "add02(R1):""aap:mies:noot"".add(<"_sElm_">,"":"",1,0)="_sRes,!

	set sRes = {List}"aap!?mies!?noot".add( sElm, "!?", 1, 0)
	write "add02(R1):""aap!?mies!?noot"".add(<"_sElm_">,""!?"",1,0)="_sRes,!

	// C0 = constant, C2 matches delimiter in C0, C3=1, C4=1
	set sRes = {List}"".add( sElm, "", 1, 1)
	write "add02(R1):"""".add(<"_sElm_">,"""",1,1)="_sRes,!

	set sRes = {List}"aap,mies,noot".add( sElm, ",", 1, 1)
	write "add02(R1):""aap,mies,noot"".add(<"_sElm_">,"","",1,1)="_sRes,!

	set sRes = {List}"aap:mies:noot".add( sElm, ":", 1, 1)
	write "add02(R1):""aap:mies:noot"".add(<"_sElm_">,"":"",1,1)="_sRes,!

	set sRes = {List}"aap!?mies!?noot".add( sElm, "!?", 1, 1)
	write "add02(R1):""aap!?mies!?noot"".add(<"_sElm_">,""!?"",1,1)="_sRes,!

	quit

	// =====================================================================
	// validate C0.add(C1,R2,C3,C4)
public add03( String sDlm)

	/* to be done */

	quit

	// =====================================================================
	// validate C0.add(C1,C2,R3,C4)
public add04( Boolean bDup)

	/* to be done */

	quit

	// =====================================================================
	// validate C0.add(C1,C2,C3,R4)
public add05( Boolean bSrt)

	/* to be done */

	quit

	// ====================================================================
	// validate R0.add(R1,C2,C3,C4)
public add06( List sLst, String sElm)

	/* to be done */

	quit

	// =====================================================================
	// validate R0.add(C1,R2,C3,C4)
public add07( List sLst, String sDlm)

	/* to be done */

	quit

	// =====================================================================
	// validate R0.add(C1,C2,R3,C4)
public add08( List sLst, Boolean bDup)

	/* to be done */

	quit

	// =====================================================================
	// validate R0.add(C1,C2,C3,R4)
public add09( List sLst, Boolean bSrt)

	/* to be done */

	quit

	// =====================================================================
	// validate C0.add(R1,R2,C3,C4)
public add10( String sElm, String sDlm)

	/* to be done */

	quit

	// =====================================================================
	// validate C0.add(R1,C2, Boolean bDup,C4)
public add11( String sElm, Boolean bDup)

	/* to be done */

	quit

	// =====================================================================
	// validate C0.add(R1,C2,C3,R4)
public add12( String sElm, Boolean bSrt)
	type List sRes

	// List = "", all delimiters
	set sRes = ({List}"").add( sElm, "", 0, bSrt)
	write "add12(R1,R4):"""".add(<"_sElm_">,"""",0,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"").add( sElm, "", 1, bSrt)
	write "add12(R1,R4):"""".add(<"_sElm_">,"""",1,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"").add( sElm, ",", 0, bSrt)
	write "add12(R1,R4):"""".add(<"_sElm_">,"","",0,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"").add( sElm, ",", 1, bSrt)
	write "add12(R1,R4):"""".add(<"_sElm_">,"","",1,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"").add( sElm, ":", 0, bSrt)
	write "add12(R1,R4):"""".add(<"_sElm_">,"":"",0,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"").add( sElm, ":", 1, bSrt)
	write "add12(R1,R4):"""".add(<"_sElm_">,"":"",1,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"").add( sElm, "!?", 0, bSrt)
	write "add12(R1,R4):"""".add(<"_sElm_">,""!?"",0,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"").add( sElm, "!?", 1, bSrt)
	write "add12(R1,R4):"""".add(<"_sElm_">,""!?"",1,<"_bSrt_">)="_sRes,!

	// List = "aap,mies,noot", delimiter = "" or ","
	set sRes = ({List}"aap,mies,noot").add( sElm, "", 0, bSrt)
	write "add12(R1,R4):""aap,mies,noot"".add(<"_sElm_">,"""""",0,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"aap,mies,noot").add( sElm, "", 1, bSrt)
	write "add12(R1,R4):""aap,mies,noot"".add(<"_sElm_">,"""",1,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"aap,mies,noot").add( sElm, ",", 0, bSrt)
	write "add12(R1,R4):""aap,mies,noot"".add(<"_sElm_">,"","",0,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"aap,mies,noot").add( sElm, ",", 1, bSrt)
	write "add12(R1,R4):""aap,mies,noot"".add(<"_sElm_">,"","",1,<"_bSrt_">)="_sRes,!

	// List = "aap:mies:noot", delimiter = ":"
	set sRes = ({List}"aap:mies:noot").add( sElm, ":", 0, bSrt)
	write "add12(R1,R4):""aap:mies:noot"".add(<"_sElm_">,"":"",0,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"aap:mies:noot").add( sElm, ":", 1, bSrt)
	write "add12(R1,R4):""aap:mies:noot"".add(<"_sElm_">,"":"",1,<"_bSrt_">)="_sRes,!

	// List = "aap!?mies!?noot", delimiter = "!?"
	set sRes = ({List}"aap!?mies!?noot").add( sElm, "!?", 0, bSrt)
	write "add12(R1,R4):""aap!?mies!?noot"".add(<"_sElm_">,""!?"",0,<"_bSrt_">)="_sRes,!

	set sRes = ({List}"aap!?mies!?noot").add( sElm, "!?", 1, bSrt)
	write "add12(R1,R4):""aap!?mies!?noot"".add(<"_sElm_">,""!?"",1,<"_bSrt_">)="_sRes,!

	quit

	// =====================================================================
	// validate C0.add(C1,R2,R3,C4)
public add13( String sDlm, Boolean bDup)

	/* to be done */

	quit

	// =====================================================================
	// validate C0.add(C1,R2,C3,R4)
add14( String sDlm, Boolean bSrt)

	/* to be done */

	quit

	// =====================================================================
	// validate C0.add(C1,C2,R3,R4)
public add15( Boolean bDup, Boolean bSrt)

	/* to be done */

	quit

	// =====================================================================
	// validate R0.add(R1,R2,C3,C4)
public add16( List sLst, String sElm, String sDlm)

	/* to be done */

	quit

	// =====================================================================
	// validate R0.add(R1,C2,R3,C4)
public add17( List sLst, String sElm, Boolean bDup)

	/* to be done */

	quit

	// =====================================================================
	// validate R0.add(R1,C2,C3,R4)
public add18( List sLst, String sElm, Boolean bSrt)

	/* to be done */

	quit

	// =====================================================================
	// validate R0.add(C1,R2,R3,C4)
public add19( List sLst, String sDlm, Boolean bDup)

	/* to be done */

	quit

	// =====================================================================
	// validate R0.add(C1,R2,C3,R4)
public add20( List sLst, String sDlm, Boolean bSrt)

	/* to be done */

	quit

	// =====================================================================
	// validate R0.add(C1,C2,R3,R4)
public add21( List sLst, Boolean bDup, Boolean bSrt)

	/* to be done */

	quit

	// =====================================================================
	// validate C0.add(R1,R2,R3,C4)
public add22( String sElm, String sDlm, Boolean bDup)

	/* to be done */

	quit

	// =====================================================================
	// validate C0.add(R1,R2,C3,R4)
public add23( String sElm, String sDlm, Boolean bSrt)

	/* to be done */

	quit

	// =====================================================================
	// validate C0.add(R1,C2,R3,R4)
public add24( String sElm, Boolean bDup, Boolean bSrt)

	/* to be done */

	quit

	// =====================================================================
	// validate R0.add(C1,R2,R3,R4)
public add25( String sDlm, Boolean bDup, Boolean bSrt)

	/* to be done */

	quit

	// =====================================================================
	// validate R0.add(R1,R2,R3,C4)
public add26( List sLst, String sElm, String sDlm, Boolean bDup)
	type List sRes

	// exclude trivial combinations where sLst does not contain sDlm
	if sLst?1.ANP,sLst'[sDlm write "add26(R0,R1,R2,R3):<"_sLst_"> does not contain <"_sDlm_">",! quit

	set sRes = sLst.add( sElm, sDlm, bDup, 0)
	write "add26(R0,R1,R2,R3):<"_sLst_">.add(<"_sElm_">,<"_sDlm_">,<"_bDup_">,0)="_sRes,!

	set sRes = sLst.add( sElm, sDlm, bDup, 1)
	write "add26(R0,R1,R2,R3):<"_sLst_">.add(<"_sElm_">,<"_sDlm_">,<"_bDup_">,1)="_sRes,!

	quit

	// =====================================================================
	// validate R0.add(R1,R2,C3,R4)
public add27( List sLst, String sElm, String sDlm, Boolean bSrt)
	type List sRes

	// exclude trivial combinations where sLst does not contain sDlm
	if sLst?1.ANP,sLst'[sDlm write "add27(R0,R1,R2,R4):<"_sLst_"> does not contain <"_sDlm_">",! quit

	set sRes = sLst.add( sElm, sDlm, 0, bSrt)
	write "add27(R0,R1,R2,R4):<"_sLst_">.add(<"_sElm_">,<"_sDlm_">,0,<"_bSrt_">)="_sRes,!

	set sRes = sLst.add( sElm, sDlm, 1, bSrt)
	write "add27(R0,R1,R2,R4):<"_sLst_">.add(<"_sElm_">,<"_sDlm_">,1,<"_bSrt_">)="_sRes,!

	quit

	// =====================================================================
	// validate R0.add(R1,C2,R3,R4)
public add28( List sLst, String sElm, Boolean bDup, Boolean bSrt)
	type List sRes

	set sRes = sLst.add( sElm, "", bDup, bSrt)
	write "add28(R0,R1,R3,R4):<"_sLst_">.add(<"_sElm_">,"""",<"_bDup_">,<"_bSrt_">)="_sRes,!

	// exclude trivial combinations where sLst does not contain delimiter
	if (sLst[",")!sLst.isNull() do {
		set sRes = sLst.add( sElm, ",", bDup, bSrt)
		write "add28(R0,R1,R3,R4):<"_sLst_">.add(<"_sElm_">,"","",<"_bDup_">,<"_bSrt_">)="_sRes,!
	}

	if (sLst[":")!sLst.isNull() do {
		set sRes = sLst.add( sElm, ":", bDup, bSrt)
		write "add28(R0,R1,R3,R4):<"_sLst_">.add(<"_sElm_">,"":"",<"_bDup_">,<"_bSrt_">)="_sRes,!

	}

	if (sLst["!?")!sLst.isNull() do {
		set sRes = sLst.add( sElm, "!?", bDup, bSrt)
		write "add28(R0,R1,R3,R4):<"_sLst_">.add(<"_sElm_">,""!?"",<"_bDup_">,<"_bSrt_">)="_sRes,!
	}
	quit

	// =====================================================================
	// validate R0.add(C1,R2,R3,R4)
public add29( List sLst, String sDlm, Boolean bDup, Boolean bSrt)
	type List sRes

	// exclude trivial combinations where sLst does not contain sDlm
	if sLst?1.ANP,sLst'[sDlm write "add29(R0,R2,R3,R4):<"_sLst_"> does not contain <"_sDlm_">",! quit

	set sRes = sLst.add( "", sDlm, bDup, bSrt)
	write "add29(R0,R2,R3,R4):<"_sLst_">.add("""",<"_sDlm_">,<"_bDup_">,<"_bSrt_">)="_sRes,!

	set sRes = sLst.add( "new", sDlm, bDup, bSrt)
	write "add29(R0,R2,R3,R4):<"_sLst_">.add(""new"",<"_sDlm_">,<"_bDup_">,<"_bSrt_">)="_sRes,!

	set sRes = sLst.add( "mies", sDlm, bDup, bSrt)
	write "add29(R0,R2,R3,R4):<"_sLst_">.add(""mies"",<"_sDlm_">,<"_bDup_">,<"_bSrt_">)="_sRes,!

	quit

	// =====================================================================
	// validate C0.add(R1,R2,R3,R4)
public add30( String sElm, String sDlm, Boolean bDup, Boolean bSrt)
	type List sRes

	set sRes = ({List}"").add( sElm, sDlm, bDup, bSrt)
	write "add30(R1,R2,R3,R4):"""".add(<"_sElm_">,<"_sDlm_">,<"_bDup_">,<"_bSrt_">)="_sRes,!

	// exclude trivial combinations where sDlm neither a comma nor empty
	if ","[sDlm do {
		set sRes = ({List}"aap,mies,noot").add( sElm, sDlm, bDup, bSrt)
		write "add30(R1,R2,R3,R4):""aap,mies,noot"".add(<"_sElm_">,<"_sDlm_">,<"_bDup_">,<"_bSrt_">)="_sRes,!
	}

	// exclude trivial combinations where sDlm neither a colon nor empty
	if ":"[sDlm do {
		set sRes = ({List}"aap:mies:noot").add( sElm, sDlm, bDup, bSrt)
		write "add30(R1,R2,R3,R4):""aap:mies:noot"".add(<"_sElm_">,<"_sDlm_">,<"_bDup_">,<"_bSrt_">)="_sRes,!
	}

	// exclude trivial combinations where sDlm completely different
	if "!?"[sDlm do {
		set sRes = ({List}"aap!?mies!?noot").add( sElm, sDlm, bDup, bSrt)
		write "add30(R1,R2,R3,R4):""aap!?mies!?noot"".add(<"_sElm_">,<"_sDlm_">,<"_bDup_">,<"_bSrt_">)="_sRes,!
	}
	quit

	// =====================================================================
	// validate R0.add(R1,R2,R3,R4)
public add31( List sLst, String sElm, String sDlm, Boolean bDup, Boolean bSrt)
	type List sRes

	set sRes = sLst.add( sElm, sDlm, bDup, bSrt)
	write "add31(R0,R1,R2,R3,R4):<"_sLst_">.add(<"_sElm_">,<"_sDlm_">,<"_bDup_">,<"_bSrt_">)="_sRes,!

	quit
	
