//DO NOT MODIFY  PSL Date Method Library UPGRADE Group|UCDATE|||||||1
	/*
	ORIG: FSANCHEZ - 02/17/2003
	DESC: PSL Date Method library, System Group (uses Cache.getRecord())

	*************************************************************************
	* IMPORTANT NOTE:							*
	*	According to the rules that apply to PSL compiler upgrades,	*
	*	this DQ procedure shall compile with the bootstrap limitations	*
	*	as described in the Framework Upgrade Documentation.		*
	*************************************************************************

	---- Environment Sensitive Elements ------------------------------------
	RecordUTBLNBD and Cache.getRecord()
		Used in subroutine isBusDat (in code generated for method
		Date.isBusDate())
	commands("mask","Date")
		Used to generate code for Date.toString()

	---- Revision History --------------------------------------------------
	09/19/06 - Frans S.C. Witte - CRs: 22720 / 22274
		Modified dayOfYr and datToEOY to tokenize arguments passed to
		PSL.mExpr().

	05/19/06 - Frans S.C. Witte - CRs: 22060 / 22061
		Removed code that has been commented out earlier (unimplemented
		method).

	01/10/06 - Frans S.C. Witte - CRs: 19000
		Corrected code generated for Date.nextFreqDate (added quit at
		the end of the generated subroutine)

	12/27/05 - Frans S.C. Witte - CRs: 18727 / 18728
		%MSKD replaced by commands("mask","Date")

	10/24/05 - Frans S.C. Witte - CRs: 17937 / 15593
		Corrected problem when %MSKD not defined.

	08/01/05 - Frans S.C. Witte - CRs: 15592 / 15593
		Modified toString to use actual(1) and objectName at most once
		in the generated code. Runtime call to $$DAT^%ZM() has been
		eliminated as per Frank's request.
		Added code to change implementation of isBusDat to transform
		%PSL-E-RECNOFL into %PSL-E-BUSDATE. This code is still commented
		out, because it requires changes to the implementation of the
		CATCH command in UCGM. These changes will not be available to
		UCDATE until the next AMR.
		Removed #XECUTE (violates PSL compiler upgrade rules), and
		replaced 'this' by 'PSL'.

	07/11/05 - RussellDS - CR16572
		Modified toString section to use environment default mask, if
		there is one, and to return null for null input in the event
		we generate $ZD code, versus $$DAT^%ZM call.
	
	12/16/04 - Frans S.C. Witte - CRs: 11445 / 11446
		Changed subroutine toString to ensure that all calls are
		equivalent to $$DAT^%ZM().

	11/25/04 - Frans S.C. Witte - CRs: 11441 / 11442
		Fixed dayofYr and daysToEOY (missing delimiter after MM/DD).
		Subroutine isBusDate: moved kill of %CACHE() into #BYPASSed code.
		Added visibility (private / local) for all subroutines.
		Documentation changes to bring documentation in line with actual
		implementation.
		Commented out nxTermDat because it is not implemented (OBJECTMET
		has been updated accordingly).
		Renamed dayofYr to dayOfYr, added dayOfM, and monthOfY.

	05/12/04 - RussellDS - CR9676
		   Move Profile04 version to Profile01 to support single code
		   base for PSL.

	03/26/04 - RussellDS - CR9172
		   Integrate most recent changes for movement of filers to PSL.
		   Changed in-line casting of this.objectName to assign to
		   obj2Date to prevent scope warnings because of casting issues.

	02/06/04 - FSanchez P01 - 8074
		   Added default values for Date.isBusDate

	09/16/03 - Spier CR 6031,6032,6034  - arq 51423
		   Retrofit of changes made in v7.0 up to this date into Profile01
		   as well as release for v7.0
	*/
	//I18N=QUIT

	#warn FUNCTION ON
	#optimize FUNCTIONS OFF

	/* no main entry */
	quit

	// ---------------------------------------------------------------------
private day	// method Date.day()
	// Returns (String) day of month
	
	if PSL.objectName.isLiteral() set PSL.return=$ZD(PSL.objectName,"DD")
	else  set PSL.return="$ZD("_PSL.objectName_",""DD"")"
	quit

	// ---------------------------------------------------------------------
private dayOfM	// method Date.dayOfMonth()
	// Returns (Number) day of month
	
	if PSL.objectName.isLiteral() set PSL.return=+$ZD(PSL.objectName,"DD")
	else  set PSL.return="+$ZD("_PSL.objectName_",""DD"")"
	quit

	// ---------------------------------------------------------------------
private month	// method Date.month()
	// Returns String month
	
	if PSL.objectName.isLiteral() set PSL.return=$ZD(PSL.objectName,"MM")
	else  set PSL.return="$ZD("_PSL.objectName_",""MM"")"
	quit

	// ---------------------------------------------------------------------
private monthOfY	// method Date.monthOfYear()
	// Returns Number month
	
	if PSL.objectName.isLiteral() set PSL.return=+$ZD(PSL.objectName,"MM")
	else  set PSL.return="+$ZD("_PSL.objectName_",""MM"")"
	quit

	// ---------------------------------------------------------------------
private year	// method Date.year()
	// Returns int year
	
	if PSL.objectName.isLiteral() set PSL.return=$ZD(PSL.objectName,"YEAR")
	else  set PSL.return="$ZD("_PSL.objectName_",""YEAR"")"
	quit

	// ---------------------------------------------------------------------
private daysInMo	// method Date.daysInMonth
	// Returns Number of days in the month
	
	type String label="vdatDIM"

	if 'PSL.subrouExists(label) do {
		
		type PSLBuffer buf=PSL.openBuffer("(Date object)","Date.daysInMonth")

		do buf.add("type Number month=object.month()")
		do buf.add("type Number return=""31,28,31,30,31,30,31,31,30,31,30,31"".piece("","",month)")
		do buf.add("if month=2,object.isLeapYear() set return=return+1")
		do buf.add("quit return")
		do buf.insert(label)
	}

	set PSL.return="$$"_label_"("_PSL.objectName_")"
	quit

	// ---------------------------------------------------------------------
private dayOfYr	// method: Date.dayOfYear()

	type String tkn = $$tokenPush^UCPATCH( PSL.objectName)
	set PSL.return = "("_ tkn_ "+1-(""01/01/""_"_ tkn_ ".year()).toDate())"
	set PSL.return = $$tokenPop^UCPATCH( PSL.mExpr(PSL.return), 1)
	quit

	// ---------------------------------------------------------------------
private daysToEOY	// method: Date.daysToEOY()

	type String tkn = $$tokenPush^UCPATCH( PSL.objectName)
	set PSL.return = "((""12/31/""_"_ tkn_ ".year()).toDate()-"_ tkn_ ")"
	set PSL.return = $$tokenPop^UCPATCH( PSL.mExpr(PSL.return), 1)
	quit

	// ---------------------------------------------------------------------
private isBusDat	// method: Date.isBusDate(String Calendar)

	if PSL.actual(1).isNull(1) set PSL.actual(1)="IBS".addQuotes()

	if PSL.objectName.isLiteral(),PSL.actual(1).isLiteral() do { quit
		type Date obj2Date = {Date}(PSL.objectName)
		set PSL.return=obj2Date.isBusDate(PSL.actual(1).stripQuotes())
	}

	type literal String label = "vdatBD"

	if 'PSL.subrouExists(label) do {
		
		type PSLBuffer buf=PSL.openBuffer("(Date object,String p1)","Date.isBusDate")

		do buf.add("#OPTIMIZE")
		// Added default values for parameters P01 - 8074
		do buf.add("if object.get().isNull() set object=%SystemDate")
		do buf.add("if p1.get().isNull() set p1=""IBS""")
		do buf.add("")

		/* Add catch-block to transform %PSL-E-RECNOFL error that might be
		   thrown by %Cache().getRecord into the date specific error
		   %PSL-E-BUSDATE.
		   NOTE: This code is still commented out because the AMR05 does
		   not support CATCH commands inside a PSLBuffer. */
		/* ======== COMMENTED OUT BEGIN ========
		do buf.add("catch vRecErr {")
		do buf.add("  if vRecErr.type=""%PSL-E-RECNOFL"" set vRecErr.type=""%PSL-E-BUSDATE""")
		do buf.add("  throw vRecErr")
		do buf.add("}")
		======== COMMENTED OUT END ======== */
		
		/* Add code protected by catch block */
		do buf.add("type Public Cache %CACHE()")
		do buf.add("type RecordUTBLNBD rec=%CACHE(""UTBLNBD"").getRecord(""UTBLNBD"",""NBDC=:p1"")")
		do buf.add("type Number n=(object#7)")
		do buf.add("if n=0,rec.thu quit 0")
		do buf.add("if n=1,rec.fri quit 0")
		do buf.add("if n=2,rec.sat quit 0")
		do buf.add("if n=3,rec.sun quit 0")
		do buf.add("if n=4,rec.mon quit 0")
		do buf.add("if n=5,rec.tue quit 0")
		do buf.add("if n=6,rec.wed quit 0")
		do buf.add("")
	
		/* The code below violates the use of the %CACHE() array as
		   documented. However, the structure used to store the UTBLNBD1
		   existance of a date (for a specific calendar) is such that it
		   does not conflict with Record cache usage.
		   The %CACHE("UTBLNBD").getRecord() will ensure that
		   %CACHE("UTBLNBD",NBCD) contains a valid UTBLNBD record.
		   The stucture used by the M code below uses descendant nodes
		   %CACHE("UTBLNBD",NBCD,date) to contain additional data.
		   (counting)
		   */
		do buf.add("type Boolean x=%CACHE(""UTBLNBD"",p1,object).get()")
		do buf.add("if x.isNull() do {")
		do buf.add(" set x='Db.isDefined(""UTBLNBD1"",""NBDC=:p1,NBD=:object"")")
		do buf.add(" set %CACHE(""UTBLNBD"",p1,object)=x")
		do buf.add(" #bypass")
		do buf.add(" if $G(%CACHE(""UTBLNBD""))>100 kill %CACHE(""UTBLNBD"")")
		do buf.add(" set %CACHE(""UTBLNBD"")=$G(%CACHE(""UTBLNBD""))+1")
		do buf.add(" #endbypass")
		do buf.add(" }")
		do buf.add("quit x")
		do buf.insert(label)
	}

	set PSL.return="$$"_label_"("_PSL.objectName_","_PSL.actual(1)_")"
	quit

	// ---------------------------------------------------------------------
private nxBusDat	// method: Date.nextBusDate(Number numberDays, String Calendar)

	if PSL.actual(1).isNull(1) set PSL.actual(1)=1
	if PSL.actual(2).isNull(1) set PSL.actual(2)="IBS".addQuotes()

	if PSL.objectName.isLiteral(),PSL.actual(1).isLiteral(),PSL.actual(2).isLiteral() do { quit
		type Date obj2Date = {Date}(PSL.objectName)
		set PSL.return=obj2Date.nextBusDate(PSL.actual(1).stripQuotes(),PSL.actual(2).stripQuotes())
	}

	type String label="vdatNBD"

	if 'PSL.subrouExists(label) do {
		
		type PSLBuffer buf=PSL.openBuffer("(Date object,Number p1,String p2)","Date.nextBusDate")

		do buf.add("for object=object+1:1 if object.isBusDate(p2) set p1=p1-1 quit:p1<1")
		do buf.add("quit object")
		do buf.insert(label)
	}

	set PSL.return="$$"_label_"("_PSL.objectName_","_PSL.actual(1)_","_PSL.actual(2)_")"
	quit

	// ---------------------------------------------------------------------
private prBusDat	// method: Date.prevBusDate(Number numberDays, String Calendar)

	if PSL.actual(1).isNull(1) set PSL.actual(1)=1
	if PSL.actual(2).isNull(1) set PSL.actual(2)="IBS".addQuotes()

	if PSL.objectName.isLiteral(),PSL.actual(1).isLiteral(),PSL.actual(2).isLiteral() do { quit
		type Date obj2Date = {Date}(PSL.objectName)
		set PSL.return=obj2Date.prevBusDate(PSL.actual(1).stripQuotes(),PSL.actual(2).stripQuotes())
	}

	type String label="vdatPBD"

	if 'PSL.subrouExists(label) do {
		
		type PSLBuffer buf=PSL.openBuffer("(Date object,Number p1,String p2)","Date.prevBusDate")

		do buf.add("for object=object-1:-1 if object.isBusDate(p2) set p1=p1-1 quit:p1<1")
		do buf.add("quit object")
		do buf.insert(label)
	}

	set PSL.return="$$"_label_"("_PSL.objectName_","_PSL.actual(1)_","_PSL.actual(2)_")"
	quit

	// ---------------------------------------------------------------------
private isLeapYr	// method Date.isLeapYear - returns Boolean (date is leap year)
	
	if PSL.objectName.isLiteral() do { quit

		set PSL.return=$ZD(PSL.objectName,"YEAR")
		set PSL.return=PSL.return#4=0&('(PSL.return#100=0)!(PSL.return#400=0))
	}

	type String label="vdatILY"

	if 'PSL.subrouExists(label) do {
		
		type PSLBuffer buf=PSL.openBuffer("(Date object)","Date.isLeapYear")

		do buf.add("type Number year=object.year()")
		do buf.add("quit year#4=0&('(year#100=0)!(year#400=0))")
		do buf.insert(label)
	}

	set PSL.return="$$"_label_"("_PSL.objectName_")"
	quit

	// ---------------------------------------------------------------------
private toString	// method Date.toString(String mask) - return formatted date
	/* ---------------------------------------------------------------------
	INPUTS:
	. commands("mask","Date") = default date mask for this site.
		The variable will be present at compile time (UCGM ensures that),
		and contains the mask to use in case the mask is absent (or "").

	NOTES:
	. Because this element belongs to the PSL Compiler System Group, it must
		compile against the latest Profile AMR. Because PSL.isVariable()
		is not part of the AMR05, this subroutine cannot yet use it.
	*/
	type public String commands(,)

	type String mask = PSL.actual(1)

	if mask.isNull() set mask = commands( "mask","Date").addQuotes()
	set PSL.return = ""
	
	if mask.isLiteral(), PSL.objectName.isLiteral() do {
		
		// both values are literal, resolve at compile time
		type Date d = {Date}(PSL.objectName.stripQuotes())
		set PSL.return = d.toString( mask.stripQuotes()).addQuotes()
	}
	else  if $$isVar^UCGM(PSL.objectName) do {
		/* 'PSL.objectName' will be referenced twice in the generated
		   $SELECT(). This is only safe if PSL.objectName is a (local)
		   variable. */
		if mask.isLiteral(), ",""DL"",""DS"",""ML"",""MS"","'[(","_mask_",") do {
			set PSL.return = "$S("_ PSL.objectName_ "'="""":$ZD("_ PSL.objectName_ ","_ mask_ "),1:"""")"
		}
	}

	/* if no shortcut has been assigned yet, need to generate function */
	if PSL.return.isNull()  do {
		type literal String label="vdat2str"

		if 'PSL.subrouExists(label) do {
		
			type PSLBuffer buf=PSL.openBuffer("(Date object, String mask)","Date.toString")

			do buf.add("if object.isNull() quit """"")
			do buf.add("if mask.isNull() set mask="_ commands( "mask", "Date").addQuotes()))
		
			//code for "DL"/"DS"/"ML"/"MS"
			do buf.add("type String cc,lday,lmon")
			do buf.add("if mask=""DL""!(mask=""DS"") do {	// Long or short weekday")
			do buf.add("  set cc=^DBCTL(""SYS"",""DVFM"").get()	// Country code")
			do buf.add("  if cc.isNull() set cc=""US""")
			do buf.add("  set lday=^DBCTL(""SYS"",""*DVFM"",cc,""D"",mask).get()")
			do buf.add("  set mask=""DAY""	// Day of the week")
			do buf.add("}")
			do buf.add("if mask=""ML""!(mask=""MS"") do {	// Long or short month")
			do buf.add("  set cc=^DBCTL(""SYS"",""DVFM"").get()	// Country code")
			do buf.add("  if cc.isNull() set cc=""US""")
			do buf.add("  set lmon=^DBCTL(""SYS"",""*DVFM"",cc,""D"",mask).get()")
			do buf.add("  set mask=""MON""	// Month of the year")
			do buf.add("}")
			do buf.add("quit $ZD(object,mask,lmon.get(),lday.get())")

			do buf.insert(label)
		}

		set PSL.return = "$$"_label_"("_PSL.objectName_","_mask_")"
	}
	quit

	/* ======== begin old code commented out by FSCW, CR 14490
	type String mask = PSL.actual(1)
	if mask.isNull() set mask = "MM/DD/YEAR".addQuotes()
	
	if mask.isLiteral() do {

		if PSL.objectName.isLiteral() set PSL.return=$$DAT^%ZM(PSL.objectName,mask).addQuotes()
		//else  set PSL.return="$ZD("_PSL.objectName_","_mask_")"
		else  do {
			type String msk = mask.stripQuotes()
			if (msk="DL")!(msk="DS")!(msk="ML")!(msk="MS") do {
				set PSL.return="$$DAT^%ZM("_PSL.objectName_","_mask_")"
			}
			else  set PSL.return="$S("_PSL.objectName_"="""":"""",1:$ZD("_PSL.objectName_","_mask_"))"
		}
	}
	else  set PSL.return="$$DAT^%ZM("_PSL.objectName_","_mask_")"
	quit
	======== end old code */

	// ---------------------------------------------------------------------
private nxFreDat	// method: Date.nextFregDate(String frequency,Number AF,String control)

	/*  Returns next/previous date based upon valid PROFILE frequency
	This method is a wrapper method to the M function $$NJD^UFRE
	As such, it incorporates the existing 'caching' logic which
	stores previously retrieved lookups in the array SVFRE.  The
	second paramater 'AF' is typically passed by reference.
	*/

	if PSL.actual(1).isNull() set PSL.actual(1)=PSL.actual(1).addQuotes()
	if PSL.actual(3).isNull() set PSL.actual(3)=PSL.actual(3).addQuotes()
	
	if PSL.objectName.isLiteral(),PSL.actual(1).isLiteral(),PSL.actual(3).isLiteral() do { quit
		type Date obj2Date = {Date}(PSL.objectName)
		set PSL.return=obj2Date.nextFreqDate(PSL.actual(1).stripQuotes(),,PSL.actual(3).stripQuotes())
	}

	type String label="vdatFre"

	if 'PSL.subrouExists(label) do {
		
		type PSLBuffer buf=PSL.openBuffer("(Date object,String p1,Number p2,String p3)","Date.Next Frequency")

		do buf.add("if object.isNull()!p1.isNull() quit """"")
		do buf.add("type Public String SVFRE(,,)")
		do buf.add("if p3.get().isNull() set p3=0")
		do buf.add("type String x=SVFRE(p1,object,p3).get()")
		do buf.add("if x.isNull() quit $$NJD^UFRE(object,p1,.p2,p3)")
		do buf.add("set p2=x.piece(""|"",2) quit x.piece(""|"",1)")
		do buf.add("quit")
		do buf.insert(label)
	}

	// if 'PSL.actual(2).isNull(),'PSL.actual(2).isLiteral(),attrib(2).piece(tab,3) set PSL.actual(2)="."_PSL.actual(2)
	set PSL.return="$$"_label_"("_PSL.objectName_","_PSL.actual(1)_","_PSL.actual(2)_","_PSL.actual(3)_")"

	quit
