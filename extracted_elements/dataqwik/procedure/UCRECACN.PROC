//DO NOT MODIFY  RecordACN Class Methods|UCRECACN|||||||1
UCRECACN	
	/*
	This procedure contains the methods which are used for the
	class RecordACN. The methods created in this class are common to
	the two ancestor classes of this class RecordDEP and RecordLN.
	
	In addition, the common code for the default method, used by both
	RecordDEP and RecordLN, is also used by RecordCIF.
	
	This unit belongs to the Dictionary group of the compiler.
		    
	---- Revision History -------------------------------------------------
	01/18/07 - RussellDS - CRs 24902 / 24903 / 24974
		   Modified default section to always regenerate the appropriate
		   UCREC*0 code to always ensure the the correct code exists.
		   This approach will likely be modified at a future date, but
		   corrects a problem with the generated code mis-matching an
		   Oracle schema and not having any easy way to regenerate it.
	
	10/03/06 - RussellDS - CR22719
		   Converted to PSL.

	-----------------------------------------------------------------------
	*/
	
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.  The M routine from the     *
	// * crtns directory should be used for this purpose.                *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other during an upgrade,    *
	// * an mrtns version of this routine should not exist.              *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	
	
	quit		// No entry from top
	

	// ---------------------------------------------------------------------
private upd(String target,	// Table table (DEP or LN)
	    String source, 	// Source table
	    String keys)	// Source table key(s)
	/* ---------------------------------------------------------------------
	Copy each data item from renewal table into primary table (DEP or LN).
	This method is called by renew^UCRECDEP and renew^UCRECLN to handle the
	processing that is common to both.
	
	INPUTS:
		. PSL.objectName	variable referencing the RecordDEP or 
					RecordLN instance
	*/
	
	type String comment, label
	
	set comment = "Record"_target_".renew("_keys_")" 
	
	set label = $$findSubr^UCGM("vRe"_target, comment)
	
	if 'PSL.subrouExists(label) do {
	
		type List collist, primkeys
		type Number i
		type String col, from, to
		
		type PSLBuffer buf = PSL.openBuffer("(Record"_target_" vTarget)", comment)
	
		do buf.add("type Record"_source_" vOid = Db.getRecord("""_source_""","_keys_")")
		do buf.add("do vTarget.setAuditFlag(1)")
	
		set collist = $$COLLIST^DBSDD(source, 1, 1, 1, .primkeys)	
		for i = 1:1:collist.count() do {
	
			set col = collist.elementAt(i)
			
			quit:primkeys.contains(col)
			quit:'Db.isSchemaColumn(target, col)
		
			set from = "vOid."_col.lowerCase()
			set to = "vTarget."_col.lowerCase()
		
			do buf.add("if '"_from_".isNull(), ("_from_" '= "_to_") set "_to_" = "_from)
		}

		do buf.add("quit")
		
		do buf.insert(label)
	}
	
	set PSL.return = label_"("_PSL.objectName_")"
	
	quit
	
	
	// ---------------------------------------------------------------------
private default(String targttbl,	// Table involved (CIF, DEP, or LN)
		String rtnname,		// Name of routine to generate
		String dfttable,	// Product default table to use
		List oldcols)		// Old column list (*4)
	/* ---------------------------------------------------------------------
	Retrieve defaults from product defaults table and move into a object.
	
	Used in the creation of new accounts or CIFs via RPC or other mechanisms.
	
	Supports implementation of the RecordDEP.default(), RecordLN.default(),
	and RecordCIF.default() methods.  This code is called by the default
	section of UCRECCIF, UCRECDEP, and UCRECLN.
	
	Approach:  Generate or update new runtime code 'rtnname' which will
		   contain the assignments to the object from the appropriate
		   product default table (PRODDFTC for CIF, PRODDFTD for DEP,
		   and PRODDFTL for LN).  Any time a procedure using this
		   default method is used, 'rtnname' will be updated.  This 
		   resolves issues with columns having been added or deleted
		   from the default table, or changes to the Oracle mapping.
		   
		   Defaults will be based on column name matches.  The old
		   code used assignment at the node level for M databases and
		   column names for RDBs, however, a single approach is now
		   used that does not depend on node and piece equivalence
		   and therefore works the same in either an MDB or RDB.
		   
	ARGUMENT NOTES:
	(*4) oldcols -	no longer used.  In prior version, this was a list 
			of columns used in prior generation of 'rtnname'.
			If this list doesn't match the current list, then the
			routine 'rtnname' will be build/rebuilt.

	INPUTS:
		. PSL.actual(1)		key for default table
		. PSL.objectName	variable referencing the RecordCIF instance
	*/
	
	type public String commands(,)
	
	type Number i
	type String cmperr(), col, pslcode(), retval, split(), targtobj
	type List collist
	
	if PSL.actual(1).beginsWith("""") do warnGroup^UCGM("MISMATCH", ".default() method argument should not be in quotes")
	set retval = "^"_rtnname_"("_PSL.objectName_","_PSL.actual(1).stripQuotes()_")"
	
	set collist = $$COLLIST^DBSDD(dfttable, 1, 1, 1, "")
	
	set targtobj = "vTarget"
	
	do addcode(.pslcode(), "public "_rtnname_"(Record"_targttbl_" "_targtobj_",  // "_targttbl_" record to default data to")
	do addcode(.pslcode(), " Number TYPE)  // "_targttbl_" Type")
	do addcode(.pslcode(), "")
	do addcode(.pslcode(), " // This code is generated by procedure UCRECACN when a PSL element")
	do addcode(.pslcode(), " // that uses the Record"_targttbl_".default() method is compiled and there")
	do addcode(.pslcode(), " // has been a change in the table "_dfttable_".")
	do addcode(.pslcode(), "")
	do addcode(.pslcode(), " // This code defaults new "_targttbl_" data by copying the values in table")
	do addcode(.pslcode(), " // "_dfttable_" into the Record"_targttbl_" object passed in.")
	do addcode(.pslcode(), "")
	
	do addcode(.pslcode(), " type Record"_dfttable_" proddft = Db.getRecord("""_dfttable_""", ""TYPE=:TYPE"")")
	
	for i = 1:1:collist.count() do {
	
		set col = collist.elementAt(i)
		
		quit:'Db.isSchemaColumn(targttbl, col)
			
		do addcode(.pslcode(), " set "_targtobj_"."_col.lowerCase()_" = proddft."_col.lowerCase())
	}
	
	do addcode(.pslcode(), " quit")
	
	// Save column list used for this build for checking to see if need re-build
	do addcode(.pslcode(), "")
	do addcode(.pslcode(), "private colsused() // Return list of columns used to build this version")
	do addcode(.pslcode(), " type Number X = 1 // FOR LITERAL PROBLEM")
	do addcode(.pslcode(), " type String ret")
	do addcode(.pslcode(), " set ret = """"")
		
	do splitCode^UCGMC(collist, 0, "", .split())
	for i = 1:1:split("").order(-1) do addcode(.pslcode(), " set ret = ret_"_split(i).addQuotes())
	
	do addcode(.pslcode(), " quit ret")
	
	// Call PSL compiler
	do cmpA2F^UCGM(pslcode(), rtnname, , , commands(,), , .cmperr())
		
	if cmperr.get() do PSL.error("Error generating "_rtnname_" - review UCRECACN.PROC")
	
	set PSL.return = retval
	
	quit


addcode(String pslcode(),	// PSL Code array
	String code)		// Line of code to add

	/*
	Add code to pslcode() array
	*/

	type Number line = pslcode("").order(-1) + 1
	
	set pslcode(line) = code
	
	quit
