//DO NOT MODIFY  DATA-QWIK Procedure Definition|DBSPROC|||||||1
public DBSPROC	// Procedure definition
	/*
	 	 
	 Procedure definition
	
	 KEYWORDS:	PROCEDURE,FILER
	
	 RETURNS:
	
	    ER		Error flag			/TYP=N
	    RM         Error message			/TYP=T
	
	---------- Revision History -------------------------------------------
	12/07/06 - Frans S.C. Witte - CRs 22719 / 20613
		Replaced "smart quotes" by ASCII quotes in comment

	07/15/06 - RussellDS - CR22121
		Modify COMPILE section to handle % routine names.
	
	03/14/06 - RussellDS - CR20135
		Modify display of name in COMPILE section to occur after we've
		made sure it's a valid procedure.
	
	02/25/06 - RussellDS - CR19065
		Modify COMPILE section to return PGM.
		   
	02/14/06 - Teliv - CR 19582
		Postprocessor wasnt called properly in section EXT. Also RM message
		wasnt clear if you exit the editor with no changes. Put the correct
		message in section EXT.
		Also made some sections as Public and Conditional pausing in the end of 
		Build section only in case it quits normally.

	02/09/05 - Teliv - CR 19493
		If the first line of Procedure wasnt a Label , the line was getting ignored
		Hence if the line started with a comment, the comment was ignored and 
		Procedure errored out. Fixed this issue.
	
	13/10/05 - Teliv - CR 17903
		Converted to PSL

	05/16/05 - RussellDS - CR15379
		Modified COMPILE section to add vSIG section to generated
		procedure code in order to return signature of procedure.
	
		Eliminate writing of compile info after call to cmpA2F^UCGM
		since that is now handled by UCGM.
	
	03/24/05 - Pete Chenard - CR 14146
		Modified EXT section to define PROCID from KEYS(2).  The KEYS
		array is defeined in DBSDEUTL and contains a list of the keys and
		their values for the table being modified (DBTBL25 in this case).
		KEYS(2) = Procedure Name.
	
		Also removed references to 'mplus' flag and the SECTION section, since
		in Profile04 and up, all procedure code must be PSL.
	
		Removed old revision history.
	
	23/11/04 - Frans S.C. Witte - CRs 11441 / 11442
		Subroutine COMPILE now calls cmpA2F^UCGM() to compile the PSL
		source code into M code, and store and compile the M routine.
		This allows the PSL compiler to do or skip explicit ZLINK.
			
	*/
	// I18N=QUIT
	
	quit
	
public EXT(Number %ProcessMode)	//	
	/* Call by functions DBSPROCC,DBSPROCM,DBSPROCD to maintain procedure
	   definitions
	*/

	type public Number ER
	type public String %LIBS, RM
	
	type Number SEQ, vER
	type String DBTBL(,,), filstr(), KEYS(), PROCID, TAB, VFMQ
	
	do ^DBSDEUTL(%ProcessMode,"DBTBL25")
	
	quit:VFMQ="Q"
	
	set PROCID=KEYS(2).get()	// KEYS array defined in DBSDEUTL.
	 			 		
	if PROCID.isNull() quit
	
	set DBTBL("SYSDEV", 25, PROCID) = ""	// Prevent warning on lock
	lock +DBTBL("SYSDEV",25,PROCID):2
	else  do { quit
		set ER=1
		set RM=$$^MSG(7354,"Procedure") 
	}
			
	if %ProcessMode=3 do { quit	// Delete old definition
		do Db.delete("DBTBL25D","%LIBS='SYSDEV' AND PROCID=:PROCID")
		do Db.delete("DBTBL25","%LIBS='SYSDEV' AND PROCID=:PROCID")

		lock -DBTBL("SYSDEV",25,PROCID)
	}

	type DbSet ds=Db.selectDbSet("DBTBL25D","%LIBS='SYSDEV' AND PROCID=:PROCID","SEQ ASC")

	if ds.isEmpty() do {	// New procedure
		
		set TAB = $C(9)
	
		//Header information
		set filstr(1) = TAB_"/*"				// All is in PSL format
		set filstr(2) = TAB_" ORIG: "_%UserID_" - "_%SystemDate.toString() 	// Developer , date
		set filstr(3) = TAB_" DESC: "			// Description
		set filstr(4) = TAB
		set filstr(5) = TAB_" ---- Comments --------------------------------------------------------"
		set filstr(6) = TAB
		set filstr(7) = TAB_" ---- Revision History ------------------------------------------------"
		set filstr(8) = TAB
		set filstr(9) = TAB_" ****** Consider using setAuditFlag for all objects in this procedure"
		set filstr(10) = TAB_"   example :do dep.setAuditFlag(1)"
		set filstr(11) = TAB
		set filstr(12) = TAB_"*/"
	}
	else  while ds.next() do {
		type RecordDBTBL25D dbtbl25d = ds.getRecord("DBTBL25D")
		set filstr(dbtbl25d.seq) = dbtbl25d.code	
	}
	
	do ^DBSWRITE("filstr")		// Access editor

	if VFMQ="Q" do { quit		// <F11> exit
		lock -DBTBL("SYSDEV",25,PROCID) 		
		if %ProcessMode=1 set RM=$$^MSG(6710,PROCID)	// Not Modified
	}
		
	do Db.delete("DBTBL25D", "%LIBS='SYSDEV' AND PROCID=:PROCID") 	// Delete existing records
	
	if 'filstr(1).order(),filstr(1).isNull() lock -DBTBL("SYSDEV",25,PROCID) quit	// if everything is deleted from the editor
	
	
	set SEQ = 0
	for  set SEQ=filstr(SEQ).order() quit:SEQ.isNull()  do { 
		type RecordDBTBL25D dbtbl25d = Class.new("RecordDBTBL25D","%LIBS='SYSDEV',PROCID=:PROCID,:SEQ")
		set dbtbl25d.code = filstr(SEQ)
		do dbtbl25d.save()
	}
		

	// Update audit information and the Time
	type RecordDBTBL25 dbtbl25 = Db.getRecord("DBTBL25","%LIBS='SYSDEV',PROCID=:PROCID",1)
	set dbtbl25.user = %UserID
	set dbtbl25.time = %CurrentTime
	
	do dbtbl25.save() 

	lock -DBTBL("SYSDEV",25,PROCID)	
	
	quit
	
	

PP	// Post processor to check duplicate name

	type public String RM, X
	type public Number ER
 
	if X.isNull() quit

	if Db.isDefined("DBTBL25","%LIBS='SYSDEV',PROCID=:X") do {
		set ER = 1 
		set RM = $$^MSG(253)
	}

	quit

	
	
public COPY	// Copy definition (Called by function DBSPROCCO)
	
	type Number %FRAME, SEQ
	type String PROCIDF, PROCIDT, %TAB(), %READ, VFMQ
	
	set %TAB("PROCIDF") = "/DES=From Procedure Name/LE=12/TYP=U/TBL=[DBTBL25]PROCID"
	set %TAB("PROCIDT") = "/DES=To Procedure Name/LE=12/TYP=U/TBL=[DBTBL25]PROCID:NOVAL/XPP=D PP^DBSPROC"
	set %READ = "@@%FN,,PROCIDF/REQ,PROCIDT/REQ,"
	set %FRAME = 2

	do ^UTLREAD

	quit:VFMQ="Q" 
	
	type RecordDBTBL25 dbtbl25f = Db.getRecord("DBTBL25","%LIBS='SYSDEV',PROCID=:PROCIDF")
	type RecordDBTBL25 dbtbl25t = dbtbl25f.copy()	// Copy header
	
	set dbtbl25t.procid = PROCIDT
	set dbtbl25t.pgm = ""		// Remove Old name
	do dbtbl25t.setMode(0)
	
	do dbtbl25t.save()
	
	type DbSet ds=Db.selectDbSet("DBTBL25D","%LIBS='SYSDEV' AND PROCID=:PROCIDF","SEQ ASC")

	// Copy detail
	while ds.next() do {	
		type RecordDBTBL25D dfrom = ds.getRecord("DBTBL25D")
		set SEQ = dfrom.seq
		
		type RecordDBTBL25D dto = Class.new("RecordDBTBL25D","%LIBS='SYSDEV',PROCID=:PROCIDT,SEQ=:SEQ")
		set dto.code = dfrom.code
		
		do dto.save()
	}

	quit
	

public BUILDALL	// Build all procedure routines (called) by FILER.COM) 

	type ResultSet rs = Db.select("PROCID","DBTBL25","%LIBS='SYSDEV'","PROCID ASC")
	while rs.next() do COMPILE(rs.getCol("PROCID"))

	quit


	
public BUILD	// Build run-time routine (Called by function DBSPROCB)

	type Number CNT

	do Db.delete("TMPDQ","PID=:%ProcessID")

	set CNT = $$LIST^DBSGETID("DBTBL25") 		// Select procedure ID(s)
	quit:(+CNT=0)
	
	type DbSet ds = Db.selectDbSet("TMPDQ","PID=:%ProcessID","ELEMENT ASC")
	while ds.next() do {
		type RecordTMPDQ tmpdq = ds.getRecord("TMPDQ")
		do COMPILE(tmpdq.element)
	}
	
	do Db.delete("TMPDQ","PID=:%ProcessID")
	
	// "Press any key" message and pause
	write $$MSG^%TRMVT("",,1)
	
	quit
	


public COMPILE(String PROCID,	// Procedure ID
	       String PGM)	// Generated program name	/NOREQ/MECH=REFNAM:W

	type public String RM
	type public Number ER
	
	type Date LTD
	type Number count, FCOUNT, increm, SIZE
	type String %LIBS, code(), desc, line, m2src(), q, SIG 
	type String TIME, TPGM, USER, vpgm, zvar, zpgm

	set ER = 0
	set RM = ""
	set q = """"
	set count=0
	set line = ""
	set line.piece("-",70) = ""
	set line = " ;"_line 

	set %LIBS="SYSDEV"
	
	// Invalid Procedure name
	if 'Db.isDefined("DBTBL25","%LIBS=:%LIBS,PROCID=:PROCID") do { quit
		set ER = 1 
		set RM = $$^MSG(1408,PROCID)
	}
		
	write !,PROCID,?15
	
	type RecordDBTBL25 dbtbl25 = Db.getRecord("DBTBL25","%LIBS=:%LIBS,PROCID=:PROCID")
	type RecordDBTBL25D dbtbl25d = Db.getRecord("DBTBL25D","%LIBS=:%LIBS,PROCID=:PROCID,SEQ=1")

	if dbtbl25.pgm.isNull() do { quit 
		set RM = $$^MSG(3056,PROCID) 
		write $$MSG^%TRMVT(RM)
		hang 2 
	}	

	set desc = dbtbl25.des				// Description
	set PGM = dbtbl25.pgm				// Routine name
	set vpgm=""
	set zpgm=""
		
	type DbSet ds=Db.selectDbSet("DBTBL25D","%LIBS='SYSDEV' AND PROCID=:PROCID","SEQ")
	if ds.next() do {
		type RecordDBTBL25D d25d = ds.getRecord("DBTBL25D")
		set vpgm = d25d.code		// First line
	}
	
	set TPGM = PGM					// Parameter defined?

	if vpgm.extract(1,PGM.length()) = PGM do {	// Use user-defined tag
		set TPGM = vpgm
	}
	else  do {
		if vpgm.extract(1,6).upperCase() = "PUBLIC" , vpgm.extract(8,7+PGM.length()) = PGM do {	
			set TPGM = vpgm
		}
		else  do {
			if vpgm.extract(1,7).upperCase() = "PRIVATE" , vpgm.extract(9,8+PGM.length()) = PGM do {
				set TPGM = vpgm
			}
			else  do {
				set TPGM=TPGM_$C(9)_vpgm
			}	
		}
	}
			
	do add(TPGM,.count)		

	do SYSVAR^SCADRV0()
	
	// Gather signature data
	set LTD = dbtbl25.ltd			// Date last modified
	set TIME = dbtbl25.time			// Time last updated
	set USER = dbtbl25.user			// User who last modified
	set SIZE = 0

	while ds.next() do {
		type RecordDBTBL25D d25d = ds.getRecord("DBTBL25D")
		set FCOUNT = d25d.seq + count
		set m2src(FCOUNT) = d25d.code
		set SIZE = SIZE + d25d.code.length()	
	}

	// Add signature tag
	set SIG = LTD_"^"_TIME_"^"_USER_"^"_SIZE
	set m2src(FCOUNT + 1) = ""
	set m2src(FCOUNT + 2) = "vSIG()"_$C(9)_"quit """_SIG_""""_$C(9)_"// Signature - LTD^TIME^USER^SIZE"
	
	// Check for ^MPLUSTAG to be added 
	// I $D(^MPLUSTAG)
	
	// do MARKER^UCUTIL(.m2src)	// add PSL marker for line  coverage check
        
        do cmpA2F^UCGM(.m2src,PGM.replace("%", "_"),,,,,,PROCID_"~Procedure~"_SIG)

	quit



add( String data, Number count)	// Insert procedural code into buffer 

	type public String m2src()

	set count = count + 1
	set m2src(count) = data
	
	quit
	
	
ERR	//

	type public Number RM
		
	write !,RM 
	hang 2
	quit
