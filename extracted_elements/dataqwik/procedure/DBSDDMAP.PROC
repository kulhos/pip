//DO NOT MODIFY  Map wide tables into smaller for Oracle|DBSDDMAP|||||||1
	/*
	
	   ORIG: CHIANG - 11/05/96
	   DESC: Utility to generate Mapping definitions for wide tables
	
	   KEYWORDS:
	
	
	   LIBRARY:
	         . REPORT   - DIsplay Mapping information
		  . MAP      - Return MApping definition
		  . DEF      - Create wide table definition file to be used
	                      by GUI client
	
	
	
	  ---------- Revision History ------------------------------------------
	  12/08/03 - sPIER 7403
	  	psl warning cleanup
	  	
	  03/01/00 - Spier - 43583
	  	Converted to psl
	  02/17/00 - SPIER - 37025
	        Modified to account for possible future splits and to
	        put custom columns into their own split table. This is necesary
	        since some customers with a large number of custom columns can
	        expand the last table past the 255 column limit of Oracle.

	*/
	quit 
	//I18N=QUIT

REPORT(OPT)	// Public; Report wide to split table mapping

	/*
	Description:
		This line tag is called from the GTM prompt by DBA's to determine the 
		correct node in which to add new columns

	Arguments:
 
	. OPT								/TYP=l/NOREQ/MECH=VAL
		0 = full report  1 = summary only
 
	Returns:  Displays to screen
 
	Example:
 
	D REPORT^DBSDDMAP(0)
 
	*/


	new CNT,DI,IO,LINE,LOW,MAPSTART,NODE,SEG,TBL
	set OPT=$G(OPT)
	set LINE=""
	set $P(LINE,"-",79)=""
	do ^SCAIO
	use IO
	do INIT
	for FID="CUVAR","DEP","LN","PRODCTL","PRODDFTL","PRODDFTD" do PRINT
	write !,LINE,!
	close IO
	quit 

PRINT	// Private;   Print information about the split tables


	
	new CNT,DI,LOW,NODE,SEG
	
	write !,LINE,!,"Table Name: ",FID
	if 'OPT write !!,"Column Name",?20,"New Table Name",?40,"Node Number",!!
	do MAP(FID,.TBL)

	set DI="" 
	for  set DI=$O(TBL(FID,DI)) quit:DI=""  do {
		set SEG=TBL(FID,DI)
		if 'OPT do {
			write !,DI,?20,SEG
			type RecordDBTBL1D col=Db.getRecord("DBTBL1D","%LIBS='SYSDEV',FID=:FID,DI=:DI")
			write ?40,col.nod
			}
		set CNT(SEG)=$G(CNT(SEG))+1
		}
	
	write !!
	set LOW=1
	
	set NODE="" 
	for  set NODE=$O(MAPSTART(FID,NODE)) quit:NODE=""  do {
		if $X>50 write !
		write "NODE ",LOW,"-",NODE," = Table ",MAPSTART(FID,NODE),"  " set LOW=NODE+1
		}
	set SEG=""
	write !! 
	for  set SEG=$O(CNT(SEG)) quit:SEG=""  do {
		if $X>60 write !
		write "Table ",SEG," = ",CNT(SEG),"   "
		}
	write !
	quit 



	
MAP(FID,MAP)	// Public; Produce a map of the columns and the split file in which they are mapped

	
	/*
	
	Description:  
		This line tag is called from the host sync utility, along with the report label above.
		The MAP array is returned to the calling program with the details of how the table has
		been split.
	
	   ARGUMENTS:

	   . FID File name  				/TYP=T/REQ/MECH=VAL
	   . MAP Mapping definition 			/TYP=T/REQ/MECH=REFARRY:W

	   Example:

	   D MAP^DBSDDMAP("DEP",.ARRAY)

	*/

	new DI,MAPSTART,NODE,V

	do INIT
	if '$D(MAPSTART(FID)) quit 
	kill MAP(FID)

	/*

		MAPSTART array contains a node map.  The following result set retrieves the columns
		and nodes from the schema definition and based on the node and MAPSTART it determines
		which split table that column belongs in.  Based on that, it builds the array MAP to 
		define the spliut table schema.
	*/
	type ResultSet ditem=Db.select("DI,NOD","DBTBL1D","%LIBS='SYSDEV' and FID=:FID")
	if ditem.isEmpty() quit
	while ditem.next() do {
		set DI=ditem.getCol(1)
		set NODE=ditem.getCol(2)

		// Dummy key
		if $E(DI)?1n quit                     
		if $E(DI)="""" quit 

		// Access key
		if NODE["*" set MAP(FID,DI)=1 quit    
		if $E(NODE)?1A set NODE=$A($E(NODE))

		// Computed item
		if NODE="" do { quit         
			if FID'="LN" set MAP(FID,DI)="C1" quit 

			// From A-J
			if $E(DI)']]"K" set MAP(FID,DI)="C1" quit    

			// From K-Z
			set MAP(FID,DI)="C2" quit            
			}

		// Store ACN in table 1
		if FID="DEP"!(FID="LN") if NODE=99 set MAP(FID,DI)=1 quit 

		// Get sequence
		set V=$O(MAPSTART(FID,NODE-1))             
		set MAP(FID,DI)=MAPSTART(FID,V)
		}

	quit 
	
INIT	//Private, By tables to split, define the nodes at which a split occurs by building the array MAPSTART

	/*
	
	
	   MAP(FID,LOW_NODE)=sequence
	   MAPSTART(FID,"*")=computed

	*/

	set MAPSTART("DEP",55)=1 
	set MAPSTART("DEP",103)=2
	set MAPSTART("DEP",425)=3 
	set MAPSTART("DEP",441)=4
	set MAPSTART("DEP",600)=5 
	set MAPSTART("DEP",700)=6
	set MAPSTART("DEP",800)=7 
	set MAPSTART("DEP",899)=8
	set MAPSTART("DEP",999)=9 
	set MAPSTART("DEP",2000)=97
	set MAPSTART("DEP",5000)=98 
	set MAPSTART("DEP",99999)=99
	
	set MAPSTART("PRODDFTD",100)=1 
	set MAPSTART("PRODDFTD",425)=2 
	set MAPSTART("PRODDFTD",441)=3
	set MAPSTART("PRODDFTD",600)=5 
	set MAPSTART("PRODDFTD",700)=6
	set MAPSTART("PRODDFTD",800)=7 
	set MAPSTART("PRODDFTD",899)=8
	set MAPSTART("PRODDFTD",999)=9 
	set MAPSTART("PRODDFTD",2000)=97
	set MAPSTART("PRODDFTD",5000)=98 
	set MAPSTART("PRODDFTD",99999)=99
	
	set MAPSTART("LN",55)=1 
	set MAPSTART("LN",62)=2
	set MAPSTART("LN",100)=3 
	set MAPSTART("LN",441)=4
	set MAPSTART("LN",600)=5 
	set MAPSTART("LN",700)=6
	set MAPSTART("LN",800)=7 
	set MAPSTART("LN",900)=8
	set MAPSTART("LN",999)=9 
	set MAPSTART("LN",2000)=97
	set MAPSTART("LN",5000)=98 
	set MAPSTART("LN",99999)=99
	
	set MAPSTART("PRODDFTL",100)=2 
	set MAPSTART("PRODDFTL",441)=3
	set MAPSTART("PRODDFTL",600)=5 
	set MAPSTART("PRODDFTL",700)=6
	set MAPSTART("PRODDFTL",800)=7 
	set MAPSTART("PRODDFTL",900)=8
	set MAPSTART("PRODDFTL",999)=9 
	set MAPSTART("PRODDFTL",2000)=97
	set MAPSTART("PRODDFTL",5000)=98 
	set MAPSTART("PRODDFTL",99999)=99
	
	set MAPSTART("PRODCTL",30)=1 
	set MAPSTART("PRODCTL",99999)=2
	
	set MAPSTART("CUVAR",69)=1 
	set MAPSTART("CUVAR",10000)=2
	quit 



XFR(FILENAME)	// Public; Build a entry for transfer to PFW client of the table WTBLMAP

	/*

	Description:

	  The table WTBLMAP is local to the PFW client. It is a map that PFW
	  uses to put the split tables back into a wide table format when PFW
	  sends any communication back to the host.  This label is used to build
	  the transfer file of this mapping table. 

	Arguments:
 
	. FILENAME		Table Name		/TYP=T/REQ/MECH=VAL

	*/

	new DI,INDEX,QUOTE,STNAME,SORTFID
	if FILENAME="" quit 
	kill MAP
	do MAP(FILENAME,.MAP)
	if '$D(MAP(FILENAME)) quit 
	do RESORT
	set QUOTE=$C(34)

	// Build header for the map table
	write "T,",%CurrentDate,",",%CurrentTime,",",QUOTE,"WTBLMAP",QUOTE,",1,N,G"
	write !,"F,WTNAME"
	write !,"S,T"
	write !,"D,D,",QUOTE,FILENAME,QUOTE,!

	// Build information about the individual Columns
	set INDEX=""
	for  set INDEX=$O(SORTFID(INDEX)) quit:INDEX=""  do {
		set STNAME="W_"_FILENAME_"_"_INDEX
		write "T,",%CurrentDate,",",%CurrentTime,",",QUOTE,"WTBLMAP",QUOTE,",2,N,G",!
		write "F,WTNAME,COLNAME,STNAME",!
		write "S,T,T,T",!
		set DI=""
		for  set DI=$O(SORTFID(INDEX,DI)) quit:DI=""  do {

			// Duplicate keys
			if INDEX'=1,(DI="CID"!(DI="TYPE")) quit      
			write "D,I,",QUOTE,FILENAME,QUOTE,",",QUOTE,DI,QUOTE,",",QUOTE,STNAME,QUOTE,!
			}
		}
	quit 
	
	
RESORT	// Public; Sort the array MAP into an array better suited to further processing

	
	/*

	Based on the MAP array produced in label MAP , the array for a particular TABLE is resorted
	by the number associated with the split table in order to easily process all columns associated 
	with the split table. The output from this function is an array named SORTFID

	Inputs:
 
	. FILENAME		Table Name		/TYP=T/REQ
	*/
	
	new FID,JI,X,Y

	kill SORTFID
	set (X,Y)=""

	type RecordDBTBL1 table=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:FILENAME")
	for  set X=$O(MAP(X)) quit:X=""!($D(voerr))  do {
		for  set Y=$O(MAP(X,Y)) quit:Y=""  do {
			set FID=MAP(X,Y)
			if FID'="" set SORTFID(FID,Y)=""
			}
		}

	for  set X=$O(SORTFID(X)) quit:X=""  do {
		set SORTFID(X)=FILENAME
		for JI=1:1 Q:$P(table.acckeys,",",JI)=""  S SORTFID(X,$P(table.acckeys,",",JI))=""
		}
	quit 
