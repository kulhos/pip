//DO NOT MODIFY  PSL Compiler - Runtime system|UCGMR|||||||1
	/*
	ORIG: FSANCHEZ - 01/15/98
	DESC: Library of runtime utilities (with target language dependent code)

	---- Environment Sensitive Elements ------------------------------------
	Target Language Dependency
		This unit implements the runtime behavior of the following
		methods:
		- Object.toString()
		- Object.equals()
		- Object.copy()
		Furthermore it implements the MTL runtime exception handling
		code.

	---- Comments ----------------------------------------------------------
	This unit implements the PSL runtime system. Some of the functions are
	Target Language Independent. The code of these functions occurs at the
	beginning of this unit. However, most of the functions are target
	language dependent. The code for these functions will be grouped per
	target language.

	----- Revision History -------------------------------------------------
	04/27/06 - Frans S.C. Witte - CR 26334
		Corrected value of $$clsByName() if class not found

	08/18/06 - Frans S.C. Witte - CRs 22720 / 22274
		* Converted to PSL
		* Added $$UPPER() and $$LOWER() to be called by "phase 0" and
		  "phase 1" units during bootstrap.
		* Added $$clsByName and deprecated isClass().
		* Re-grouped labels (see intro) and documented target language
		  specifics.

	03/07/06 - RussellDS - CRs 19962 / 18164
		Modify ZX section to remove use of %ZTRAP and replace with
		use of %ZTPTRAP to correspond with changes to server code.

	11/07/05 - Frans S.C. Witte - CRs 18163/18164
		Added $$isClass() that returns if expr is a class without
		causing side-effects. $$clsIsAnc and $$clsIsCls now call
		$$isClass.

	 04/06/05 - Frans S.C. Witte - CRs 14919 / 14920
		Runtime code for Object.copy() now uses M MERGE command.

	12/07/04 - Frans S.C. Witte - CRs 11445 / 11446
		Subroutines clsIsAnc and clsIsClass: added new reClass because
		the routines may be called at runtime.

	10/12/04 - Frans S.C. Witte - CRs 11441 / 11442
		* Added function clsIsAnc(), a runtime wrapper for
		  Class.isAncestor and Class.isDescendant.
		* Added function clsIsClass(), a runtime wrapper for
		  Class.isClass.
		* Added code to subroutine ZX() that takes care of %ZTRAP to
		  deal with GT.M runtime errors (after handling all scoped catch
		  blocks).

	05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

	07/31/00 - Terrie Dougherty - 40587
		Collapse routine to allow roll forward from V6.0 through V6.3

	10/07/99 - Chiang - 33890
		Modified 'copy' and 'equals' sections to support record
		type 1 file.
	*/
	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	/* ================================================================== */
	/* Target Language Independent functions and subroutines              */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
private clsByName(expr) // Return correct class name of class expr
	/* ---------------------------------------------------------------------
	If expr occurs in OBJECT as supplied, it will be returned unchanged,
	else if is a Record class, and the table name (as supplied) is a valid
	table name, then expr will be returned unchanged.
	Else if a case-insensitve match is found in OBJECT, then the name of
	that class (as spelled in OBJECT) will be returned,
	else "" will be returned.

	NOTES:
	. The call to ^UCXOBJ in this function makes UCXOBJ part of the
		runtime system. A cleaner solution would be to move ocClassName
		into UCGMR, but that will have to be postponed until UCGMR is
		converted to PSL.
	*/
	quit $$ocClassName^UCXOBJ(expr)

	// ---------------------------------------------------------------------
private clsIsClass(c) // runtime wrapper for Class.isValid
	/* ---------------------------------------------------------------------
	This function "wraps" the call to $$clsByName(). It checks for an
	empty value, because that is not handled by $$clByName()

	ARGUMENTS:
	. c = name of class
	*/
	if c="" quit ""
	quit $$clsByName(c)'=""

	// ---------------------------------------------------------------------
private clsIsAnc(a,d) // runtime wrapper for Class.isAncestor / Class.isDecendant
	/* ---------------------------------------------------------------------
	This function "wraps" the call to $$isAncestor^UCGM().
	It validates input values (empty values are not accepted by
	isAncestor^UCGM), and sets reClass.

	ARGUMENTS:
	. a = name of anscestor class
	. d = name of descendant class
	*/
	if a="" quit ""
	if d="" quit ""
	if $$clsByName(a)="" quit 0
	if $$clsByName(d)="" quit 0
	quit $$ocIsAncestor^UCXOBJ(a,d)

	// ---------------------------------------------------------------------
private isClass(expr) // deprecated ; Return if expr is a class
	/* ---------------------------------------------------------------------
	*/
	quit $$clsByName(expr)'=""
	/* ======== DEAD CODE BELOW
	new z
	if expr=reClass quit 1
	if $$isRecord^UCGM(expr) set z=$$getReTable^UCGM(expr) quit $$isTable^UCXDD(z)

	if $D(^OBJECT(expr)) quit 1
	quit $$ocGet^UCXOBJ(,expr)'=""
	======== DEAD CODE ABOVE */

	// ---------------------------------------------------------------------
public LOWER( String S) // Return S.lowerCase()
	/* ---------------------------------------------------------------------
	Stub for M routines to obtain the lowercase conversion in a Character
	Set Indendent way.
	*/
	quit S.lowerCase()

	// ---------------------------------------------------------------------
public UPPER( String S) // Return S.upperCase()
	/* ---------------------------------------------------------------------
	Stub for M routines to obtain the uppercase conversion in a Character
	Set Indendent way.
	*/
	quit S.upperCase()

	/* ================================================================== */
	/* MTL code                                                           */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
private copy( Number v1) // MTL runtime for Object.copy()
	/* ---------------------------------------------------------------------
	MTL copy instantiates a new entry in vobj() and MERGEs the source vobj()
	tree into the new target vobj() tree. It returns the object id of the
	new object.
	*/
	type Number vOid

	#ACCEPT CR=22720; Date=2006-08-18; PGM=Frans S.C. Witte; Group=BYPASS
	#BYPASS
	set vOid=$O(vobj(""),-1)+1
	merge vobj(vOid)=vobj(v1)
	#ENDBYPASS

	quit vOid

	// ---------------------------------------------------------------------
private equals( Number p1, Number p2) // MTL runtime for Object.equals()
	/* ---------------------------------------------------------------------
	MTL Object.equals() compares two vobj() trees.
	To compare equal, both the structure and the contents must be identical:
	- Each node in vobj(p1) must have an identical node in vobj(p2).
	- Each node in vobj(p2) must have an identical node in vobj(p1).

	NOTES:
	. This function is completely implemented in PSL, using
		- Primitive values
		- Object.query()
		- access to vobj() "hidden" in PSL variable indirection
	*/
	type Boolean equals
	type String z1, z1e, z2, z2e
	set z1 = "vobj("_ p1, z1e = z1, z1 = z1_ ")"
	set z2 = "vobj("_ p2, z2e = z2, z2 = z2_ ")"

	set equals = 1
	I @z1.get() '= @z2.get() quit 0		// compare top nodes
	for  set z1 = @z1.query(), z2 = @z2.query()  quit:z1.extract( 1, z1e.length())'=z1e  do { if equals=0 quit

		if z1.extract( z1e.length()+1, z1.length()) '= z2.extract( z2e.length()+1, z2.length()) set equals = 0
		else  if @z1 '= @z2 set equals = 0
	}
	quit equals

	// ---------------------------------------------------------------------
private toString( Number p1) // MTL runtime for Object.toString()
	/* ---------------------------------------------------------------------
	MTL Object.toString() produces a TAB separated List of node-value pairs,
	with node the list of subscripts descending from vobj(p1).

	NOTES:
	. This function is completely implemented in PSL, using
		- Primitive values
		- Object.query()
		- access to vobj() "hidden" in PSL variable indirection
	*/
	type String return,zo,ze
	set zo = "vobj("_ p1, ze = zo, zo = zo_ ")"

	if @zo.exists() set return = @zo_ 9.char()
	else  set return = ""

	for  set zo = @zo.query() quit:'zo.beginsWith(ze)  set return = return_ zo.extract( ze.length()+2, zo.length())_ "="""_ @zo_ """"_ 9.char()

	quit return.extract( 1, return.length()-1)

	// ---------------------------------------------------------------------
ZT( String voexe, List vorefs, Number voptr)  // MTL Object cleanup error trap
	/* ---------------------------------------------------------------------
	MTL runtime code that
	- deletes all nodes from vobj() with vOid>voptr
	- deletes all nodes from vobj() that occur in List vorefs
	- XECUTEs voexe

	NOTES:
	. This subroutine is coded as a single #BYPASS block because there is
		no additional advange to coding one or two lines in "basic PSL".
	*/
	#ACCEPT CR=22720; Date=2006-08-18; PGM=Frans S.C. Witte; Group=BYPASS
	#BYPASS
	for  set voptr=voptr+1 quit:'$data(vobj(voptr))  kill vobj(voptr)
	if vorefs'="" for voptr=1:1:$length(vorefs,",")  kill vobj($get(@$piece(vorefs,",",voptr)))
	xecute $get(voexe)
	#ENDBYPASS

	quit

	// ---------------------------------------------------------------------
private ZX( Number voPtr, String voGoto, String voTag)  // MTL General error handler
	/* ---------------------------------------------------------------------
	Note related to %ZTPTRAP usage -- %ZTPTRAP is set by the PBSSRV server
	to specify the error handling action for GTM-TPTIMEOUT error.  This
	action will force a return to the server and allow it to construct an
	appropriate reply, without getting caught in any application level
	error handling loops.  Basically, this ensures immediate return to the
	server in the event of a TPTIMEOUT.  All other errors, whether GTM, PSL,
	or other, are handled as defined by the currently set trap.

	The placement of the execution of %ZTPTRAP is in order to ensure that
	PSL catch blocks in scope are first executed, and that vobj is cleaned
	up, prior to execution of %ZTPTRAP.

	NOTES:
	. This subroutine is coded as a single #BYPASS block because there is
		no additional advange to coding one or two lines in "basic PSL".
	*/
	#ACCEPT CR=22720; Date=2006-08-18; PGM=Frans S.C. Witte; Group=BYPASS
	#BYPASS
	do @voTag
	if $data(vobj) for  set voPtr=$order(vobj(voPtr)) quit:voPtr=""  kill vobj(voPtr)
	if $get(%ZTPTRAP)'="",$piece($zstatus,",",3)["%GTM-E-TPTIMEOUT" xecute "set %ZTPTRAP="""" "_%ZTPTRAP
	zgoto voGoto-1
	#ENDBYPASS

	quit	// will never be reached, but the compiler wants to see it
	
