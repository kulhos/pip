//DO NOT MODIFY  Error log report|SCAER|||||||1
SCAER	// Error log report
	/*
	ORIG:  Dan S. Russell (2417) - 12/23/86

	Error log inquiry on single error, or at tag RPT report

	---- Revision History ------------------------------------------------
	03/14/06 - RussellDS - CR20135
		   Made sure %OPMODE, ER, and RM are not defined coming in
		   since causes problems with display.
	
	01/05/06 - RussellDS - CR18400
		   Fixed bug in TRCTRL.
	
	10/23/05 - RussellDS - CR17936
		   Fix various errors from change to use ERRORSEQ.  Undef in
		   DATEPP due to use of obsoleted table definition.  Incorrect
		   usage of SEQ in STACK2 section.  Remove control characters
		   from look-up display (some Oracle message contain screen
		   control characters).
	
	10/04/05 - RussellDS - CR17395
		   SEQ modified in UTLERR to eliminate table ERRORSEQ and
		   produce larger number.  Modify this procedure to get count
		   and build lookup display correctly based on changes.
		   
		   Remove old revision history.  

	07/27/05 - SkariahV- CR16679
		   Removed #WARN and #OPTIMIZE directives.
	*/
	
	type public String %ZTX
	
	type String scaer()
	
	/*
	 NOTE:  Do not instantiate PSL objects in the top section.  All objects
	 	used for processing should be instantiated in the PROC section 
	 	or lower subsections).  This is to aviod vobj variables being
	        overlaid when loading variables from the error log.
	*/
	
	do PROC
	
	/*
		scaer will exist if the user selects to load variables from 
		a specific error in the PROC section.
	*/
	
	if scaer.data() do {

		// Remove all variables and reset symbol table from scaer array
		
		#ACCEPT Date=10/06/05; Pgm=RussellDS; CR=17397
		#BYPASS
		kill (scaer)
		#ENDBYPASS
		
		set %ZTX=""
		for  set %ZTX=scaer(%ZTX).order() quit:%ZTX=""  if %ZTX'="%ZTX" set @%ZTX=scaer(%ZTX)
		if scaer("%ZTX").exists() set %ZTX=scaer("%ZTX")
		else  kill %ZTX 
	}
		
	quit
	
		
PROC	// Main processing

	type Boolean ER
	type Date DATE, TJD
	type String %fkey, CONAM, ET, IO, %NOBANNER, %NOPRMT, %OPMODE, PGM, PID
	type String %READ, RID, RM, %TAB, SCAER, TMP(), VFMQ, VIN3, VIN4, VIN5, VIN6, VIN7, VIN8, X
	type Number DSPVAR, ERSEQ, MUMPS, OLNTB, SEQ

	do ZBINIT^%TRMVT()
	set CONAM = CUVAR.CONAM
	
	#ACCEPT PGM=Erik Scheetz;DAT=12/11/02
	if '%InputTimeOut.exists() set %InputTimeOut=60

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set TJD=cuvar.tjd
	
	set %Library="SYSDEV"
	set PID=%ProcessID

	set DATE=%CurrentDate

	set %TAB("DATE")=".TJD4/HLP=[ERROR]DATE/TBL=[ERROR]DATE:DISTINCT/XPP=D DATEPP^SCAER"
	set %TAB("SEQ")=".SEQ2/TBL=""TMP(/RH=Seq     Error ID         Description""/XPR=D SEQPRE^SCAER"

	set %READ="@@%FN,,DATE/REQ,SEQ/REQ"
	set %NOPRMT="F"

	do ^UTLREAD

	quit:VFMQ="Q"

	set ERSEQ = TMP(SEQ).piece(" ", 1)
	set ET = TMP(SEQ).piece("|", 2)
	
	set (MUMPS,DSPVAR)=0 
	set IO=$I
	set VIN3="="_DATE
	set VIN5="="_ERSEQ
	set (VIN4,VIN6,VIN7,VIN8)="ALL"

	set RID="SCAER" 
	do ^URID 
	if PGM="" do { quit
		set ER=1 
		set ET="INVLDRPT" 
		do DSP^UTLERR
	}

	set (%NOBANNER,SCAER)=1
	
	do V0^@PGM

	do VAR
	
	// Reset terminal attributes
	do TERM^%ZUSE(0,"ECHO/ESCAPE/EDIT/NOCHARACTERS/NOIMAGE/WIDTH=80/TERMINATOR=""""")
        write $$SCRAWON^%TRMVT 		// Enable auto wrap
	
	quit


VAR	// Prompt for variable

	type public Date DATE
	type public Number SEQ
	type public String %fkey(),ET,X
	type Boolean zexit=0
	
	while 'zexit do {
		// Variable to display or <SEL> for options
		write $$LOCK^%TRMVT,$$BTM^%TRMVT,$$^MSG(2938),":  "
		set X=$$TERM^%ZREAD()
		if X="",%fkey'="SEL" set zexit=1 quit
	
		write $$BTM^%TRMVT
		if '(X="?"!($E(X)="*")!(%fkey="SEL")) do DISPONE quit
	
		set X=$$^DBSMBAR(169)
	
		if X=""!(X=1) quit

		if X=2 do ALL quit

		if X=3 do { quit
			do LOAD
			set zexit=1
		}
			
		if X=4 do OUTPUT quit
		
		if X=5 do STACK quit
		
	}
	
	quit


DISPONE	// Display single variable

	type public Date DATE
	type public Number ERSEQ
	type public String ET,X

	type Boolean HIT=0
	type String ARR,Y,Z
	
	write $$CUP^%TRMVT(1,23),$$CLL^%TRMVT

	type RecordERROR9 error9=Db.getRecord("ERROR9","DATE=:DATE,ET=:ET,SEQ=:ERSEQ,VAR=:X",1)
	if error9.getMode()=1 do {
		write X,"=",error9.value,!
		set HIT=1
	}
		
	set Z=X
	if X["""" do { 
		set Z=""
		type Number I
		for I=1:1:X.length() set Y=X.extract(I),Z=Z_$select(Y'="""":Y,1:Y_Y)
	}
		
	set ARR=1_""""_$select(Z'["(":Z_"(",1:Z)_""".E"
	
	do DISP

	if 'HIT write $$^MSG(2042)	// Not found
	else  write !
	quit


ALL	// Display all variables

	type public Number HIT=0
	type public String ARR=".E",X="#z"
	
	do DISP

	write !
	quit


DISP	// Variables display

	type public Number HIT
	type public String X
	type Boolean QUIT=0	

	type ResultSet rs=Db.select("VAR,VALUE","ERROR9","DATE=:DATE AND ET=:ET AND SEQ=:ERSEQ AND VAR NOT ='~'","VAR")
	if rs.isEmpty() quit
    
	while rs.next() quit:(X'?@ARR)  quit:QUIT  do { 
		write rs.getCol("VAR"),"=",$$TRCTRL(rs.getCol("VALUE")),!
		set HIT=HIT+1
		
		if HIT#22=0 do {
			set QUIT=$$WAIT
			if QUIT=0 write $$BTM^%TRMVT
		}
	}
		
	quit
	

public TRCTRL(X)	// Translate control characters in X to $C(xx) and quote strings

	if '(X?.E1C.E!(X[$C(34))) quit $select(X?1N.N:X,1:$C(34)_X_$C(34))

	type Number HIT=0,I
	type String CNTRL="",L=X.length(),Y="",Z
		
	for I=1:1 quit:I>L  do {
		set Z=X.extract(I)
		if Z?1C set CNTRL=1
		else  set CNTRL=0
		
		if CNTRL do {
			set Y=Y_$select(I=1:"$C(",'HIT:$C(34)_"_$C(",1:",")_$ascii(Z)
			set HIT=HIT+1
		}
		else  do {
			set Y=Y_$select(I=1:$C(34),HIT:")_"_$C(34),1:"")_$select(Z="""":$C(34),1:"")_Z
			set HIT=0
		}
	}
		
	set Y=Y_$select(HIT:")",1:$C(34))
	
	quit Y


STACK	// Display stack info (plus device and lock info)

	type public String X="" 
	type public Number HIT=0
	type String I
 
	for I="#DEVICE","#LOCK","#STACK" do STACK2(I)

	quit
	

STACK2(INFO)
	
	type public Number ERSEQ,HIT
	type public Date DATE 
	type public String ET
	
	type String VALUE,VAR1
	type Number J
	type Boolean QUIT=0
		
	if HIT=0 write !
	write !,INFO.extract(2,9)

	for J=1:1 do { quit:QUIT
		set VAR1=INFO_J
		
		type RecordERROR9 error9
		set error9=Db.getRecord("ERROR9","DATE=:DATE,ET=:ET,SEQ=:ERSEQ,VAR=:VAR1",1)
		if error9.getMode()=0 set QUIT=1 quit
		
		write ?11,error9.value,!
		set HIT=HIT+1
		
		if HIT#22=0 do {
			set QUIT=$$WAIT
			if QUIT=0 write $$BTM^%TRMVT
		}
	}
	
	quit


OUTPUT	// Output error

	type public String IO
	
	// So that the variables are nopt redefined by D-Q.
	type String %NOBANNER,%NOOPEN,ET
	type Date DATE
	type Number DSPVAR,SEQ

	do ^SCAIO 
	use IO
	set %NOOPEN="" 
	set DSPVAR=1
	set %NOBANNER=1 
	do V0^@PGM
	do CLOSE^SCAIO

	use 0
	
	quit


LOAD	// Load variables

	/*
		This section returns the scaer array with all of the loaded variables
		at the time of the error.  The top section will set these variables 
		before exiting the process.
	*/

	type public String scaer(),%ZTX		

	set %ZTX="#z"

	type ResultSet rs=Db.select("VAR,VALUE","ERROR9","DATE=:DATE AND ET=:ET AND SEQ=:ERSEQ AND VAR>:%ZTX","VAR")
	if rs.isEmpty() quit
	
	while rs.next() do {
		type String VAR=rs.getCol("VAR")
		set scaer(VAR)=rs.getCol("VALUE")
	}

	quit


public RPT	// Call full report

	type String ET,PGM,RID
	type Number ER
	
	set RID="SCAER"
	do ^URID
	if PGM="" do {	quit
		set ER=1,ET="INVLDRPT" 
		do DSP^UTLERR
	}
		
	do ^@PGM
	quit


private DATEPP	// Date post processor

	type public Number ER
	type public String %MSKD,RM,X

	type Number ERCNT
	type Date DATE1
	

	quit:X=""  
	set DATE1=$$^SCAJD(X)
	
	type ResultSet rs = Db.select("COUNT(SEQ)", "ERROR", "DATE=:DATE1")
	if rs.next() set ERCNT = rs.getCol(1)
	else  set ERCNT = 0
	
	// No errors logged on ~p1	
	if (ERCNT = 0) do Runtime.setErrMSG("ERROR",1931,DATE1.toString()) quit:ER

	// ~p1 errors logged
	set RM = $$^MSG(3036,ERCNT)
	
	quit


private SEQPRE	// Sequence pre-processor

	type public Date DATE
	type public Number ER
	type public String RM, TMP()
	
	type Number CNT
	type String ZE

	catch error {
		set ER=1
				
		// Either directory or system is invalid
		if $P($$ETLOC^%ZT,",",1)="FILE_PROTECTION" set RM=$$^MSG(888) quit
	
		// System error
		set RM=$$ETLOC^%ZT_" ... "_$$^MSG(7061)
	
	}

	type ResultSet rs=Db.select("ET,SEQ,MUMPSZE","ERROR","DATE=:DATE","SEQ ASC")
	
	set CNT = 1

	while rs.next()  do {
		
		type String SEQ
		
		set ZE=rs.getCol("MUMPSZE")
		if ZE="" set ZE=rs.getCol("ET")
		else  set ZE = ZE.piece(",", 1, 2)_","_ZE.piece(",", 4)
		
		// Remove control characters that affect screen display
		set ZE = ZE.translate($C(10,11,12,13),"    ")
		
		set SEQ = rs.getCol("SEQ")
		set SEQ = SEQ.justify(15, -1)
		
		set TMP(CNT)=SEQ_"  "_ZE.extract(1, 55)_"|"_rs.getCol("ET")

		set CNT = CNT + 1	
	}
		
	quit


WAIT()	//  Wait for user response

	if $$^DBSMBAR(158)=2 quit 1
	quit 0
