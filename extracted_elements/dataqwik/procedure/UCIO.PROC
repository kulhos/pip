//DO NOT MODIFY  Methods of class IO - Insensitive Group|UCIO|||||||1
	/*
	ORIG: Jeff Walton 10/19/1999
        DESC: Library of IO methods

	---------- Revision History --------------------------------------------
	10/30/06 - Frans S.C. Witte - CRs: 23841 / 23842
		Modified open() to use /CHSET device parameter instead of
		/ICHSET and /OCHSET

	07/10/06 - Frans S.C. Witte - CRs: 22273 / 22274
		Converted to PSL. Added support for charsetName, charsetElemType
		and charsetElemName for Unicode independence. Split into runtime
		part (this unit) and compiletime part (UCIO0).

	11/16/05 - Frans S.C. Witte - CRs: 18247 / 15593
		Replaced call to$$^CUVAR() by call to $$^UCXCUVAR()

	05/02/05 - Frans S.C. Witte - CRs: 17056 / 17057
		Subroutine write: added code to SET $X=0 when non-standard
		write terminator is used.
		Subroutines close, open, read, write: modified all local variable
		names to start with v.
		Generated lables now conform to vIoXyz.

	11/25/04 - Frans S.C. Witte - CRs: 12808 / 12809
		Generated code for IO.open now throws exception when open fails.
		Generated code for "argumentless" IO.read now throws exceptions
		for all abnormal conditions.
		Generated code for IO.read and IO.write save and restore $IO.
		Generated code for IO.write in case of "default EOL character"
		has been modified to provide cleaner code.
		Generated code for IO.close no longer calls CLOSE^SCAIO, but
		closes device directly (to prevent uncontroled side effects).
		Subroutine error commented out (not used in this routine)

	05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

	 10/15/02 - SPIER - 51089
	       Modifications for v7.0 enhancements
	*/
	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	#OPTION ResultClass ON
	quit

	// ---------------------------------------------------------------------
private void close( local IO vOid)	// Object
	/* ---------------------------------------------------------------------
	Runtime implementation of IO.close
        */
	type String vIo = vOid.device
	
	/* Assignment to read-only property IO.device must be hard-coded as
	   change to vobj(vOid) */
	#ACCEPT CR=22273; DATE=2006-07-10; PGM=Frans S.C. Witte; GROUP=DEPRECATED
	set vobj(vOid.getPointer(),1).piece("|",6) = ""

	close vIo
	quit

	// ---------------------------------------------------------------------
private void open( local IO vOid,		// object
		local String vRtn,	// name of calling routine
		local String vSrn,	// name of calling subroutine
		local String vOnm)	// name of IO instance variable	
	/* ---------------------------------------------------------------------
	The method supports the charset properties as follows:
	- If IO.charsetName is specified explicitly, it will be appended to the
		open parameters unconditionally.
	- If IO.charsetName is NULL, then $$UCIOENCD() will be called with the
		values of charsetElemType and charsetElemName, subroutine name,
		and instance variable name.
		If charsetElemType is NULL, then charsetElemType="Routine" and
		charsetElemName=$T(+0) will be supplied.
		The value returned by the function will be appended to the
		open parameters unconditionally.
	- If an exception occurs while obtaining the charsetName (e.g. because
		routine UCIOENCD is not found) then no charset specification
		will be appended to the open parameters.

	NOTES:
	. The absence of an explicit charsetElemType will result in default
		values for both charsetElemType and charsetElemName.
	. The intention is to provide a default UCIOENCD routine as part of the
		compiler boostrap process. However, because that process itself
		uses class IO to read and write files, vIoOpen() must be able to
		deal with an environment that does not have a UCIOENCD routine.
		Until it is known how this will be dealt with, the code
		generated here will include exception handling to deal with
		$$UCIOENC() exceptions.
        */
	type String vF = vOid.fileName
	if vF.isNull() throw Class.new("Error","%PSL-E-IOOPEN,"_$$^MSG(1087))
	if 'vOid.device.isNull() throw Class.new("Error","%PSL-E-IOOPEN,device already open")

	type String vD = vOid.directory
	if vD.isNull() set vD = $$^UCXCUVAR("SPLDIR")

	type String vP = vOid.openParams
	type String vC = vOid.charsetName

	if vC.isNull() do {	// no IO.charsetName specified, derive it
		type String vT = vOid.charsetElemType
		type String vN = vOid.charsetElemName
	
		if vT.isNull() set vT = "Routine" , vN=vRtn
		do {
			catch vX {
				// ignore exceptions thrown due to $$^UCIOENCD()
			}
			set vC=$$^UCIOENCD(vT,vN,vSrn,vOnm)
			set vOid.charsetName = vC
		}
	}

	// Independent of call to $$^UCIOENCD(): if characterset, then add it (quoted)
	//if 'vC.isNull() set vP = vP_ "/ICHSET="_ vC_ "/OCHSET="_ vC
	if 'vC.isNull() set vP = vP_ "/CHSET="""_ vC_ """"

	/* Assignment to read-only property IO.device must be hard-coded as
	   change to vobj(vOid) */
	#ACCEPT CR=22273; DATE=2006-07-10; PGM=Frans S.C. Witte; GROUP=DEPRECATED
	set vobj(vOid.getPointer(),1).piece("|",6) = $$FILE^%TRNLNM(vF,vD)
	
	type String vR = $$FILE^%ZOPEN( vOid.device, vP, vOid.timeout, vOid.recordSize)
	if vR.toNumber()=0 throw Class.new("Error","%PSL-E-IOOPEN,"_$P(vR,"|",2))

	quit

	// ---------------------------------------------------------------------
private String read( local IO vOid)	// Object
	/* ---------------------------------------------------------------------
	*/
	type String vEr
	type String vIo = $I // save current device
	type String vRd = $$^%ZREAD( vOid.device, .vEr)

	if vIo'=$I use vIo // restore previous device if needed
	
	if vEr.toNumber()'=0 throw Class.new("Error","%PSL-E-IO"_ "EOF,NOTOPEN,OTHER".piece(",",vEr)_ ","_ vEr.piece("|",2))
	quit vRd

	// ---------------------------------------------------------------------
private void write( local IO vOid,		// Object
		local String vStr,	// data to write
		local String vEol)	// end-of-line indicator
	/* ---------------------------------------------------------------------
        */
	type String vIo = $I	// save current device

	if 'vEol.exists() use vOid.device write vStr,!
	else  use vOid.device write vStr,vEol set $X=0
	
	if vIo'=$I use vIo	// restore previous device if needed

	quit
