//DO NOT MODIFY  Compiler commands - Dictionary Group|UCGMC|||||||1
private UCGMC(	local String cmd,
		local String m2src(),
		public Number lptr,
		local String str,
		public Number ptr,
		local String tok)	//
	/*
	ORIG: FSANCHEZ - 25 DEC 1998 
	DESC: Interprets Extended M compiler options 

	---- Revision History --------------------------------------------------
	01/22/07 - RussellDS - CRs: 24902 / 24903 / 24974
		Replaced use of variable true with isTrue to avoid conflict
		with new PSL intrinsic variable
	
	10/31/06 - Frans S.C. Witte - CRs: 22719 / 20163
		* Corrected quit from XECUTE if bootstrap

	07/11/06 - Frans S.C. Witte - CRs: 22720 / 22274
		* Added support for #OPTION ResultClass
		* Corrected quit from $$IF() if error.

	06/07/06 - Frans S.c. Witte - CRs: 22060 / 22061
		* Added utility subroutine splitCode() to break a long code line
		  into pieces.

	04/25/06 - Frans S.C. Witte - CRs: 21394 / 21395
		* Added $$INFO(), $$OPTION(), $$DEFINE(), decode() and
		  decodeLine().
		  Added support for '*' in #INFO, #WARN, #OPTIMIZE and #OPTION.
		  Added warn/info group LENGTH.

	03/14/06 - Frans S.C. Witte - CRs: 20280 / 18164
		* Converted to PSL.

	11/29/05 - Frans S.C. Witte - CRs: 18163 / 18164
		* getLit and RgetLit commented out. Code is now handled by
		  litVal^UCCOLUMN.
		* Changed $$rdb^UCDBRT() to $$rtIsRdb^UCXDD() (3 occurrences)
		* Subroutine xecute: corrected code when in boot mode

	08/04/05 - Frans S.C. Witte -	CRs: 15592 / 15593
		* Added descriptions of WARN / OPTIMIZE / Options
		* #XECUTE ignored in BOOT mode
		* replaced 32767 by $$getPslValue^UCOPTS("maxLineLength")

	06/29/05 - Frans S.C. Witte - CR16346
		* Modified RgetLit to conform to standard ER handling

	05/05/05 - RussellDS - CR15379
		* Modify IF section to identify functions involved in #IF
		  directives, and update the sysmap() array
		* Remove checkCalls section

	04/07/05 - Frans S.C. Witte - CRs: 14919 / 14920
		$$rdb^UCDB() changed to $$rdb^UCDBRT() (3 occurrences)
		* Changed ERROR^UCGM(.message) to ERROR^UCGM(message).

	21/21/04 - Frans S.C. Witte - CRs: 13403 / 13404
		* Call to chkCalls^UCLABEL() with new signature enabled.
		* Added compiler warning when #BYPASS is detected. It uses the
		  warning option  BYPASS, that has been added to $$allWARN and
		  $$defWARN.
		* Removed code that was commented out by previous CR.

	11/28/04 - Frans S.C. Witte - CRs: 11445 / 11446
		* Call to chkCalls^UCLABEL() (in subroutine checkCalls()) adapted.
		* chkCalls^UCLABEL() is now also used to check labels local to the
		  current compilation unit. To be able to make changes to both a
		  DQ procedure and an M routine given the CR install programs, the
		  change to this routine must be implemented through a separate CR
		  that is deployed after the CR that changed UCLABEL.
		* Removed function $$related() and procedure checkparam(), because
		  this is now handled exclusively by UCLABEL.
		* Added READ to list of all warnings.
		* Value assigned to commands("WARN",cond) is now 1 (was ""). This
		  allows $DATA(commands("WARN",cond)) to be replaced by $GET().
		* Added functions $$allWARN(), $$defWARN() $$allOPTIMZE(),
		  $$defOPTIMIZE(), and $$allOptions().
		* All #CompCommands that insert comment now properly call
		  initLevel^UCGM().
		* Subroutine getTable commented out (not called).
		* Added deprecation warnings for Schema.createTable and
		  Schema.deleteTable.
		* When #BYPASS is detected, values assigned to all Primitives are
		  invalidated.

	05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

	03/26/04 - RussellDS - CR9172
		     Integrated changes related to filers to PSL.

	01/14/04 - Spier- 7240
		removed quit from label in newTable, since next line
		quit from label it was not needed.

	11/14/03 - SPIER - 51640
	        Modified checkparam section, loop through comma seperated
		parameters did not account for params such as ttx(,). Converted
		to tabs through call to ATOM^%ZS

	11/13/03 - Added logic to turn off warnings with switch

	10/01/03 - fsanchez
	        Added Schema.getTable method

	09/04/03 - SPIER - 51640
	        Changes made to correct param checking. If parameter
		is not passed from within the element it is not 
		necessarily required.

	07/11/03 - SPIER - 51423
	        Changes to while section to correct errors.
	 	Change to if section to define condition
		that should be ignored for dead code issues

	04/24/03 - GIRIDHARANB - 45497
		Corrected an improper call to RgetLit section

	03/27/03 - GIRIDHARANB - 45497
		Fixes made to the RnewTable section to correct an improper
		call to MAP^DBMAP to check the created column names are not
		reserved words.

	03/13/03 - Chenardp/Giridharan - 45497
		Added support for Oracle/DB2 (RnewTable,RdelTable,RgetLit)

	02/14/03 - SPIER - 51423
	        Bug fixes

	10/01/02 - FSANCHEZ
	        Fixed #BYPASS stack error

	03/19/02 - SPIER - 49177
	        Modified to call routine TBXANALZ to save
		the data collected during the compile.

	10/06/00 - SPIER - 41971
		Modified UCGMC section to add indicator that 
		code being compiled is coming fom this routine.

	08/14/00 - SANCHEZ	40349
		Fixed infinite loop condition in checkCalls

	02/18/00 - SPIER - 35208
		Modified newTable to change the format type from
		Numeric to text for all columns.

	09/15/99 - Chiang - 35208
		Modified newTable section to limit global name to 8
		characters.

	06/11/99 - FRS - 32919
		Modified to support supertype table.

	01/05/99 - SPIER - 31307
		Modified 'newTable' section to prevent the removal of 
		DQ created tables of the same name. 

	12/16/98 - CHIANG - 31307
		Modified 'newTable' section to allow tables defined with
		only access keys.
	*/
	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	type public String fCompile()

	set cmd = cmd.extract( 2, cmd.length())

	if cmd="ACCEPT"             quit $$ACCEPT( m2src(), lptr, str, .ptr, tok)
	if cmd="BREAK"              quit $$BREAK( str, .ptr, tok)
	if cmd="BYPASS"             quit $$BYPASS( m2src(), .lptr, .ptr)
	if cmd="IF"                 quit $$IF( m2src(), .lptr, str, .ptr, tok)
	if cmd="ELSE",  fCompile>0  quit $$ELSE( m2src(), .lptr, .ptr)
	if cmd="END",   fCompile>0  quit $$END( .ptr)
	if cmd="ENDIF", fCompile>0  quit $$END( .ptr)
	if cmd="OPTIMIZE"           quit $$OPTIMIZE( str, .ptr, tok)
	if cmd="OPTION"             quit $$OPTION( str, .ptr, tok)
	if cmd="WARN"               quit $$WARN( str, .ptr, tok)
	if cmd="INFO"               quit $$INFO( str, .ptr, tok)
	if cmd="WHILE"              quit $$WHILE( m2src(), .lptr, str, .ptr, tok)
	if cmd="XECUTE"             quit $$XECUTE( str, .ptr, tok)

	do PSL.error( "Unexpected compiler command: "_cmd)
	set ptr = 0
  	quit "; "_str

	/* ================================================================== */
	/* Compiler directives                                                */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
ACCEPT( local String m2src(),
	local Number lptr,
	local String str,
	public Number ptr,
	local String tok)	// Accept a warning and quiet the compiler
	/* ---------------------------------------------------------------------
	*/
	type public String commands(,,)

	type String atom = "", kwd,return
	type List   val
	type Number elm, llptr = m2src(lptr).order()

	for  set return = $$getExpr(str,.ptr,tok, "") quit:return.isNull()  set atom=atom_return quit:ptr=0

	for kwd="DATE","PGM" do {
		set val = atom.getSub( kwd, ";", "=", 1)
		if val.isNull() do warnGroup^UCGM( "SYNTAX", "Accept requires "_kwd_" field")
	}

	/* CR field is required for V7.0 and up only.
	   To prevent warnings for "old" #ACCEPTS that carried into V7.0 +,
	   try to extract the YEAR from the DATE keyword (delimiter + 4 digits
	   at the end, or 4 digits + delimiter at the beginning, programmers
	   that still use 2 digit years will get what they deserve).
	   If the year is before 2005, don't warn. */
	if %VersionID '< 7 do {
		set val = atom.getSub( "CR", ";", "=", 1)
		if val.isNull() do {
			type String dat = atom.getSub( "DATE", ";", "=", 1)
			if dat?.E1P4N set dat = dat.extract( dat.length()-3, dat.length())
			else   if dat?4N1P.E set dat = dat.extract(1, 4)
			if dat?4N, dat.toNumber()<2005 quit

			do warnGroup^UCGM( "SYNTAX", "Accept requires CR field")
		}
	}

	/* Deal with the GROUP tag. Currently every value is acceptable
	   */
	set ptr = 0
	set val = atom.getSub("GROUP", ";", "=", 1).upperCase()
	if val.isNull() set commands( "ACCEPT", llptr) = ""
	else  for elm=1:1:val.count() set commands( "ACCEPT", llptr, val.elementAt(elm)) = ""

	quit "; "_ str

	// ---------------------------------------------------------------------
BREAK( local String str,
	public Number ptr,
	local String tok)	// Break in the compiler
	/* ---------------------------------------------------------------------
	*/
	new $ZT set $ZT="B"

	if '$$ask( .str, .ptr, tok) quit ""
	if str="" break  quit ""

	#ACCEPT DATE=2006-03-14;PGM=FSCW;CR=20280;GROUP=XECUTE
	xecute "ZB "_str

	quit ""

	// ---------------------------------------------------------------------
BYPASS( local String m2src(),
	public Number lptr,
	public Number ptr)
	// Bypass the M++ compiler
	/* --------------------------------------------------------------------	
	All lines following this line, until the line that contains the
	"#ENDBYPASS" is directly inserted into the target code.
	A warning message will be supplied.
	*/
	type String  init
	type String  mcode
	type Boolean stop = 0

	do warnGroup^UCGM( "BYPASS", "Embedded M code bypassing compiler")

	set init = $$initLine^UCGM( PSL.level)

	do ADD^UCGM( init_";*** Start of code by-passed by compiler")

	while 'stop  set lptr = m2src(lptr).order() quit:lptr=""  do {

		set mcode = m2src(lptr)
		if mcode.upperCase()["#ENDBYPASS" set stop=1 quit
		set mcode=init_ mcode.translate( 9.char()," ").trim(-1)
		do ADD^UCGM( mcode)
	}

	do resetType^UCGM()	// Invalidate assignments to Primitives

	set ptr = 0
	quit ";*** End of code by-passed by compiler ***"

	// ---------------------------------------------------------------------
DEFINE( local String str,
	public Number ptr,
	local String tok)
	/* ---------------------------------------------------------------------
	#DEFINE name value
	*/
	type literal String BINOPS = "'+-*/\#_!&()"
	type public Boolean commands(,)

	type PSLExpression name = $$ATOM^%ZS( str, .ptr, "", tok)
	if 'name.isVariable() do PSL.error( "Variable name expected")

	type PSLExpression expr = ""
	type String atom
	while ptr>0 do {
		set atom = $$ATOM^%ZS( str, .ptr, BINOPS, tok)
		if BINOPS[atom set expr = expr_atom quit
		if atom.isLiteral() set expr = expr_atom quit
		if 'commands( "DEFINE", atom).exists() do PSL.error("Invalid experession element: "_atom) set ptr=0 quit
		set expr=expr_commands( "DEFINE", atom)
	}

	#ACCEPT Date=2006-04-25; PGM=FSCW; CR=20280; Group=XECUTE
	xecute "set commands(""DEFINE"",name)="_expr

	quit "; "_str

	// ---------------------------------------------------------------------
IF(	local String m2src(),
	public Number lptr,
	local String str,
	public Number ptr,
	local String tok)	// Process #IF
	/* ---------------------------------------------------------------------
	There are two forms of #IF:
	1) #IF condition
		This form indicates that the code block following the source
		line that contains the #IF and including all lines up to the
		matching #ELSE or #END must only be included if the condition is
		met. If the condition is not met, the lines will not be included
		in the generated M routine.
	2) #IF condition code
		This form indicates that the code following the condition shall
		only be included if the condition is met. By definition, the
		scope of the #IF is just the current source line, and #ELSE is
		inappropriate.

	NOTES:
	. Due to the very strict interpretation of code-following-the-condition,
		the current implementation treats the follwoing combination as a
		case of #IF conditition code:
			#IF condition // comment
		This could be relaxed if str were replaced by
		$$stripCmt^UCPSLLR(str) before calling $$atom^%ZS()
	. The functions IF, ELSE, END, and WHILE use public variable fCompile()
		to keep track of the outcome of nested #IFs:
		- if a #IF block is detected, fCompile is incremented, and the
			truthvalue is stored in fCompile(fCompile)
		- a successive #ELSE checks fCompile(fCompile) to see if its
			code block needs to be included or skipped
		- the #END and #ENDIF directives KILL fCompile(fCompile), and
			decrement fCompile
	*/
	type public String fCompile()
	type public String struct(,)
	type public String sysmap(,,)

	type String  atom,cmdDel
	type Number  cmdNum
	type Boolean isTrue

	set atom=$$ATOM^%ZS(str,.ptr,";",tok)

	// Find any extrinsic functions ($$) used in #IF
	if atom["$$" do {
		type String fatom,func
		type Number fptr

		set fptr = 0
		for  do { quit:fptr=0
			set fatom=$$ATOM^%ZS(atom,.fptr,"+-*/\#_'=><[]&!?",tok,1)
			quit:fatom.extract(1,2)'="$$"
			set func = fatom.piece( "(", 1)
			set func = func.extract( 3, func.length())
			set sysmap( "#IF", "FUNC", func) = ""
		}
	}
	set cmdDel = $S(ptr:str.extract(ptr+1),1:""),cmdNum=0

	set atom=$$condBool^UCGM(atom) if PSL.ER quit ""

	do {
		catch ifEx {
			do PSL.error(" Runtime exception in #IF: "_{String}ifEx)
		}

		#ACCEPT DATE=20060314;PGM=FSCW;CR=20280;GROUP=XECUTE
		xecute ("I "_atom) set isTrue=$T

		if 'isTrue set ptr = 0	// Don't process the rest of the line

		if isTrue set struct( 7, PSL.subRou) = lptr
		if '(cmdDel=" ") do {			// #IF/#END[IF] block

			set fCompile = fCompile+1
			set fCompile(fCompile) = isTrue_ 9.char()_ lptr

			if 'isTrue do skip( m2src(), .lptr, "#IF")
		}
	}

	quit ""

	// ---------------------------------------------------------------------
INFO( local String str,
	public Number ptr,
	local String tok)
	/* ---------------------------------------------------------------------
	#INFO groups switch

	INFO groups are the same as WARN groups, even though most groups will
	have no associated INFO messages.
	*/
	type public Boolean commands(,)

	type List    all  = $$allWARN
	type List    atom = $$getExpr( str, .ptr, tok, $$allWARN)
	type Boolean switch=$$getSwitch(str, .ptr, tok, 1)

	do setCmds( "INFO", atom, switch, all, .commands(,))

	set ptr = 0
	quit ""

	// ---------------------------------------------------------------------
ELSE(	local String m2src(),
	public Number lptr,	// Process #ELSE
	public Number ptr)
	/* ---------------------------------------------------------------------
	*/
	type public String fCompile()

	if fCompile(fCompile).piece( 9.char()) do skip( m2src(), .lptr, "#ELSE")

	quit ""

	// ---------------------------------------------------------------------
END( public Number ptr)	// Process #END or #ENDIF
	/* ---------------------------------------------------------------------
	*/
	type public String fCompile()

	kill fCompile(fCompile)

	set fCompile = fCompile-1
	set ptr = 0

	/* ======== code below questionable
	if PSL.subRou="" do {					// Ended with a quit

		for  set lptr=$O(m2src(lptr)) quit:lptr=""!($L($TR($E(m2src(lptr)),$C(9,32))))
		set lptr=$O(m2src(lptr),-1)
	}
	======== */

	quit ""

	// ---------------------------------------------------------------------
OPTIMIZE( local String str,
	public Number ptr,
	local String tok)
	/* ---------------------------------------------------------------------
	#OPTIMIZE options switch
	*/
	type public Boolean commands(,)

	type List    all  = $$allOPTIMIZE
	type List    atom = $$getExpr( str, .ptr, tok, all)
	type Boolean switch = $$getSwitch(str, .ptr, tok, 1)

	do setCmds( "OPTIMIZE", atom, switch, all, .commands(,))

	set ptr = 0
	quit "; "_str

	// ---------------------------------------------------------------------
OPTION( local String str,
	public Number ptr,
	local String tok)
	/* ---------------------------------------------------------------------
	#OPTION options switch
	*/
	type public Boolean commands(,)

	type List    all  = $$allOptions
	type List    atom = $$getExpr( str, .ptr, tok, all)
	type Boolean switch = $$getSwitch(str, .ptr, tok, 1)

	do setCmds( "Options", atom, switch, all, .commands(,))

	set ptr = 0
	quit "; "_str

	// ---------------------------------------------------------------------
WARN( local String str,
	public Number ptr,
	local String tok)
	/* ---------------------------------------------------------------------
	#WARN groups switch
	*/
	type public Boolean commands(,)

	type List    all  = $$allWARN
	type List    atom = $$getExpr( str, .ptr, tok, $$allWARN)
	type Boolean switch=$$getSwitch(str, .ptr, tok, 1)

	do setCmds( "WARN", atom, switch, all, .commands(,))

	set ptr = 0
	quit ""

	// ---------------------------------------------------------------------
WHILE( local String m2src(),
	public Number lptr,
	local String str,
	public Number ptr,
	local String tok)	// Process #WHILE
	/* ---------------------------------------------------------------------
	*/
	type public String fCompile()

	type String expr
	type Number ER,i,lptrb,lptre

	// condition as PSL expression, and 
	type PSLExpression atom=$$ATOM^%ZS(str,.ptr,";",tok)
	type String        cmdDel=$S(ptr:str.extract(ptr+1),1:""),
	type Number        cmdNum=0

	set (lptrb,lptre)=lptr

	/* If #WHILE-block, find the associated #END by calling skip(,,)
	   */
	if cmdDel="" set fCompile = fCompile+1 do skip( m2src(), .lptre, "#WHILE")

	type Boolean bQuit = 0

	for i=1:1:1000 do { if bQuit quit

		set ER=0
		set expr=$$condBool^UCGM(atom) if ER set bQuit=1 quit

		do {
			catch whileEx {
				do PSL.error( "Runtime exception in #WHILE: "_whileEx.toString())
				set bQuit=1
			}
			#ACCEPT DATE=20060314;PGM=FSCW;CR=20280;GROUP=XECUTE
			xecute "I "_expr
			else  set bQuit=1 quit

			set lptr=lptrb

			/* Single line #WHILE
			   */
			if (lptr=lptre) do line^UCGM( m2src(lptr).extract( ptr+1, PSL.maxLineLength)) quit

			/* Multiple line #WHILE
			   */
			for  set lptr = m2src(lptr).order() quit:(lptr'<lptre)  do line^UCGM( m2src( lptr)) if ER quit
		}
	}
	set lptr=lptre

	set ptr=0
	quit ""

	// ---------------------------------------------------------------------
XECUTE( local String str,
	public Number ptr,
	local String tok)	// xecute a string in the compiler
	/* ---------------------------------------------------------------------
	Ignored in BOOT mode (all levels)
	*/
	type public Primitive commands(,)

	if commands("boot","restrictionlevel").get()>0 set ptr=0 quit ""
	if '$$ask( .str, .ptr, tok) quit ""

	#ACCEPT DATE=2006-03-14;PGM=FSCW;CR=20280;GROUP=XECUTE
	if 'str.isNull() xecute str

	quit ""

	/* ================================================================== */
	/* public and private functions and subroutines                       */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
public allOPTIMIZE() // return list of all possible OPTIMIZE options
	/* ---------------------------------------------------------------------
	This function returns a sorted List of all possible optimization
	options. It can be used by supporting code for validation, or to turn
	optimize options ON or OFF before the PSL compiler is invoked.

	See UCOPTS.ini for a description of the individual values.
	*/
	quit "FUNCTIONS,OBJECTS"

	// ---------------------------------------------------------------------
public allOptions() // return list of all possible Option options
	/* ---------------------------------------------------------------------
	This function returns a sorted List of all possible Option options.
	It can be used by supporting code for validation, or to turn Options
	options ON or OFF before the PSL compiler is invoked.
	There is no $$defOptions() function because all Option options are
	"OFF" by default.

	The values that are site configurable are described in UCOPTS.ini. In
	addition the following values are intended for system use only:
	boot		compiler bootstrap level
	nolink		suppress automatic ZLINK of compiled routine
	*/
	quit "$GetEFD,AllowGOTO,AutoPublicERRM,ResultClass"

	// ---------------------------------------------------------------------
public allWARN() // return list of all possible WARN options
	/* ---------------------------------------------------------------------
	This function returns a sorted List of all possible warning options.
	It can be used by supporting code for validation, or to turn warning
	options ON or OFF before the PSL compiler is invoked.

	The values that are site configurable are described in UCOPTS.ini. In
	addition the following values are intended for system use only:
	INTERNAL	report internal compiler warnings (such as unexpected
			calls or values).
	*/
	type literal String WARN01 = "ACCESS,BYPASS,DATABASE,DEAD,DEPRECATED"
	type literal String WARN02 = WARN01_",DYNAMIC,FUNCTION,GLOBAL,LENGTH"
	type literal String WARN03 = WARN02_",MISMATCH,PRECEDENCE,PSLBOOT,READ"
	type literal String WARN04 = WARN03_",RECEXISTS,SCOPE,SYNTAX,SYSVAR"
	type literal String WARN   = WARN04_",XECUTE"
	quit WARN

	// ---------------------------------------------------------------------
private decode( String line, String commands(,)) // decompose a line
	/* ---------------------------------------------------------------------
	This subroutine decodes a line that contains a #WARN, #OPTIMIZE or
	#OPTION compiler command.
	*/

	// declare and hide PUBLIC vars of all #command implementations
	type String fCompile(),RM,struct(,),sysmap(,,)
	type Number ER

	type Number ptr = 0
	type String tok
	set line = $$TOKEN^%ZS( line, .tok)

	type String cmd = $$ATOM^%ZS( line, .ptr, ";").upperCase()

	if $$isComment( cmd) quit
	if {List}"#INFO,#OPTIMIZE,#OPTION,#WARN".contains(cmd) set cmd = $$UCGMC( cmd, , 0, line, ptr, tok) quit

	if cmd="#DEFINE" set cmd = $$DEFINE( line, ptr, tok) quit

	quit

	// ---------------------------------------------------------------------
private decodeFile( String sDir, String sFil, String cmds(,)) // decompose a file
	/* ---------------------------------------------------------------------
	This subroutine decodes a line that contains a #WARN, #OPTIMIZE or
	#OPTION compiler command.
	*/
	type IO rIO = Class.new( "IO")
	set rIO.directory = sDir
	set rIO.fileName  = sFil
	set rIO.openParams = "READ"

	type String subRou = rIO.device		// subRou for PSL.error()
	type Number lptr			// line pointer for PSL.error()
	do {
		catch xIO {
			if xIO.type'["OPEN" do rIO.close()
		}
		do rIO.open()
		for lptr=1:1 do decode( rIO.read().translate( 9.char(), " "), .cmds(,))
	}	
	quit

	// ---------------------------------------------------------------------
public defOPTIMIZE() // return list of default OPTIMIZE options
	/* ---------------------------------------------------------------------
	This function returns a sorted List of all optimization options that
	are "ON" by default.
	It is used by UCDTASYS.proc to set the defualt set of options if
	UCOPT did not provide an environment specific value.
	*/
	quit $$allOPTIMIZE()

	// ---------------------------------------------------------------------
public defWARN() // return list of default WARN options
	/* ---------------------------------------------------------------------
	This function returns a sorted List of all warning options that are
	"ON" by default.
	It is used by UCDTASYS.proc to set the default set of options if
	UCOPT did not provide an environment specific value.

	This function uses %VN (at "runtime") to return a version-dependent
	value.
	*/
	type public Number %VN

	type String grp
	type String wrn = $$allWARN()

	for grp="FUNCTION,","READ," set wrn = wrn.piece(grp)_ wrn.piece( grp, 2)
	if %VN'>6.4 for grp="ACCESS,","DEPRECATED,","SCOPE," set wrn = wrn.piece(grp)_ wrn.piece( grp, 2)

	quit wrn

	// ---------------------------------------------------------------------
private newTable	// deprecated method Schema.createTable()
	/* ---------------------------------------------------------------------
	FSCW CR11445:
	This method behaves like a compiler directive: The table is created
	when the PSL compiler detects the method. All code following the
	occurrence of the method can reference the table (until the associated
	Schema.deleteTable() is encountered by the compiler).
 
	INPUTS:
	. actual(1)	Literal String TableName
	. actual(2)	Literal String AccessKeys
	. actual(3)	Literal String OtherColumnNames
	. actual(4)	Literal String GlobalName		/TYP=T/DEF=ZTMPBCH

	EXAMPLE:

	do Db.createTable("TMP","JOB,SEQ","TOTAL,CNT","TMP99")

	^TMP99(JOB,SEQ)=TOTAL|CNT

	do Db.createTable("TMP",""BCHABC"",JOB,SEQ","COUNT")

	^ZTMPBCH("BCHABC",JOB,SEQ)=COUNT

	*/
	if $$rtIsRdb^UCXDD() do PSL.error("Schema.createTable() not supported for RDB") quit
	do warnGroup^UCGM("DEPRECATED","Schema.createTable() - use predefined tables")

	type String table = PSL.actual(1).piece("""",2)

	type String keys  = PSL.actual(2)
	if $E(keys)="""" set keys=$E(keys,2,$L(keys)-1)	; Remove "
	set keys = keys.stripQuotes()

	type String columns = PSL.actual(3)
	if $E(columns)="""" set columns=$E(columns,2,$L(columns)-1)

	type String global = PSL.actual(4)
	if $E(global)="""" set global=$E(global,2,$L(global)-1)
	if global="" set global="ZBCHTMP"
	if $L(global)>8 do PSL.error("Global name cannot exceed 8 characters") quit

	#ACCEPT DATE=2006-03-14;PGM=FSCW;CR=20280;GROUP=BYPASS
	#BYPASS
	if $D(^DBTBL("SYSDEV",1,table)) D  I ER Q
	.	N USER
	.	S USER=$P(^DBTBL("SYSDEV",1,table,10),"|",11)
	.	I USER=""!(USER="ZZZZZZ") Q
	.	S RM="Invalid table name "_table
	.	S ER=1 Q

	K ^DBTBL("SYSDEV",1,table)
	S ^DBTBL("SYSDEV",1,table,0)=global	; Global
	S ^(10)="124|PBS|0||||||||ZZZZZZ|5"
	S ^(12)="f"_table			; File short name
	S ^(13)="",^(22)="",^(99)=""
	S ^(16)=keys				; Access keys
	S ^(100)="^"_global_"("_keys_"|1||0"	; Global refenence, record type
	S ^(102)=keys
	;
	S lastkey=$P(keys,",",$L(keys,","))
	F i=1:1:$L(keys,",") D			; Access keys
	.	S di=$P(keys,",",i)
	.	S ^DBTBL("SYSDEV",1,table,9,di)=i_"*|20|||||||T||S|||2|0|||||124|"
	I columns'="" F i=1:1:$L(columns,",") D		; 12/16/98 BC
	.	S di=$P(columns,",",i)
	.	S ^DBTBL("SYSDEV",1,table,9,di)=lastkey_"|20|||||||T||S|||2|0|||||124|"_i
	#ENDBYPASS
	
	quit

	// ---------------------------------------------------------------------
private delTable	// method Schema.deleteTable()
	/* ---------------------------------------------------------------------
	Delete table schema (only files created with createTable method will
	be deleted).

	FSCW CR11445:
	This method behaves like a compiler directive: The table is deleted
	when the PSL compiler detects the method. All code following the
	occurrence of the method can not reference the table.

	INPUTS:
	. actual(1) = Literal String Table name

	EXAMPLE:

	do Db.deleteTable("BCHABC")

	*/
	if $$rtIsRdb^UCXDD() do PSL.error("Schema.deleteTable() not supported for RDB") quit
	do warnGroup^UCGM("DEPRECATED","Schema.deleteTable() - use predefined tables")
	type String table= PSL.actual(1).piece("""",2)
	if table.isNull() quit

	type String sts

	#ACCEPT DATE=2006-03-14;PGM=FSCW;CR=20280;GROUP=BYPASS
	#BYPASS
	S sts=$G(^DBTBL("SYSDEV",1,table,10))
	;
	; Dummy file without audit information (created by createTable method)
	I $P(sts,"|",10)=""&($P(sts,"|",11)=""!($P(sts,"|",11)="ZZZZZZ"))&($P(sts,"|",12)=5) K ^DBTBL("SYSDEV",1,table) Q
	#ENDBYPASS

	do PSL.error("Invalid table name")
	quit

	// ---------------------------------------------------------------------
private SetLit( local PSLExpression mcode,	// M code under construction
	local PSLExpression atom,		// target variable
	local PSLExpression expr) 		// value to assign
	/* ---------------------------------------------------------------------
	Set a value to it's literal
	*/
	new $ZT set $ZT="D XERROR^UCGMC(""LITERAL assignment"") ZG "_($ZL-1)

	/* Strip "S " from end of mcode, and decrement number of commands
	   */
	set PSL.cmdNum = PSL.cmdNum-1
 
	if 'expr.fitsLineLength( "S expr=".length()) set expr = $$bigExpr(expr)
	#ACCEPT DATE=20060314;PGM=FSCW;CR=20280;GROUP=XECUTE
	else  xecute ("S expr="_expr)

	do setInst^UCGM( atom, "", expr.toByteString().toPSLExpression())

	quit mcode.extract( 1, mcode.length()-2)

	// ---------------------------------------------------------------------
private splitCode( local String expr,	// long string
	   local Number extra,		// extra room (*2)
	   local String at,		// characters at which to split (*3)
	  public String split())	// chunks
	/* ---------------------------------------------------------------------
	Split a long string into chuncks that fit within the (byte)length limits
	imposed by the GT.M implementation.

	ARGUMENTS:
	(*2) extra = extra room needed to construct the code
		The difference between PSL.maxLineLength and the actual maximum
		supported by the platform will leave room for some additonal
		code. However, if the code to be added has "substantial" length,
		then the chunks shall be smaller to allow for the extra
		characters needed for the code. The value supplied here will be
		substracted from PSL.maxLineLength to obtain the maximum length
		of the chuncks in split().
	(*3) at = characters that are valid split characters
		If empty, expr will be split at "arbitrary" positions,
		that are determined completely by PSL.maxLineLength
		If not empty, the subroutine will scan backward from the position
		determined by PSL.maxLineLength to find one of the characters in
		at. However, at least MINCHUNKSIZE characters will placed in a
		chunk.
	*/
	type literal Number MINCHUNKSIZE = PSL.maxLineLength \ 8
	type Number y

	for  do { quit:expr.isNull()
		set y = expr.byteLimitSubstring( 1, PSL.maxLineLength - extra).length()

		if 'at.isNull(),y<expr.length() for y=y:-1:MINCHUNKSIZE quit:at[expr.extract(y)

		set split(split("").order(-1) + 1) = expr.extract( 1, y)
		set expr = expr.extract( y+1, expr.length())
	}
	quit

	// ---------------------------------------------------------------------
private XERROR(msg)
	/* ---------------------------------------------------------------------
	Called by ^UCGM and SetLit
	*/
	do ERROR^UCGM($G(msg)_": "_$P($ZS,",",3,999))
	quit

	/* ================================================================== */
	/* local support functions and subroutines                            */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
ask(	public String str,
	public Number ptr,
	local String tok)
	/* ---------------------------------------------------------------------
	Return string (ask if ask qualifier was used).

	If str does not contain the word ASK, then str is modified to contain
	the untokenized remainderOfLine, and the function returns 1.

	If str does contain the keyword ASK, then the entire (untokenized)
	string is displayed, and a response is read from $P.
	If the answer is "Y" or "YES" (case insensitive), then this is treated
	as if ASK was absent.
	In all other cases, str will be set to "" and the function will return 0
	(zero).

	ARGUMENTS:
	(*1) str = #COMMAND remainderOfLine or #COMMAND ASK remainderOfLine

	INPUTS:
	. %TO = default timeout value (60 if undefined)
	*/
	type public Number %TO

	type String atom
	type Number timeout = %TO.get(60)
	type String yn = 1

	if ptr=0 set atom=""
	else     set atom = str.extract( ptr+2, str.length())

	if atom.piece(" ").upperCase() = "ASK" do {

		use $P
		write !,$$UNTOK^%ZS(str,tok)_" : "
		read yn:timeout else  set yn=0

		set atom = atom.piece(" ", 2, atom.length())
		set yn = yn.upperCase()

		if (yn="Y")!(yn="YES") set yn = 1
		else  set yn = 0

	}
	set str = $$UNTOK^%ZS(atom,tok), ptr = 0
	quit yn

	// ---------------------------------------------------------------------
bigExpr(local String expr)	// Execute an expression that's bigger than the M line length !!
	/* ---------------------------------------------------------------------
	*/
	type String tok,vox()
	type Number sub

	set expr = $$TOKEN^%ZS( expr, .tok)
	for  quit:'(expr[0.char())  do {
		set sub =  vox("").order(-1)+1
		set vox(sub) = $$UNTOK^%ZS( 0.char()_ expr.piece( 0.char(), 2)_ 0.char(), tok)
		set vox(sub) = vox(sub).stripQuotes()
		set expr=expr.piece(0.char(),1)_"vox("_sub_")"_expr.piece( 0.char(),3,9999)
	}

	#ACCEPT DATE=2006-03-14;PGM=FSCW;CR=20280;GROUP=XECUTE
	xecute ("S expr="_expr)

	quit expr

	// ---------------------------------------------------------------------
getExpr( local String str,
	public Number ptr,
	local String tok,
	local String dft)	// Return expression value
	/* ---------------------------------------------------------------------
	*/
	if ptr = 0 quit dft		// Default expression

	new atom
	set atom = $$ATOM^%ZS(str,.ptr,"",tok).upperCase()

	if $$isComment(atom) do {		// Hit a comment, use default

		if ptr=0 set ptr = str.length()
		set ptr = ptr - atom.length() - 1
		set atom = dft
	}
	quit atom

	// ---------------------------------------------------------------------
getSwitch( local String str,
	public Number ptr,
	local String tok,
	local String dft)	// Return switch value
	/* ---------------------------------------------------------------------
	*/
	type Boolean atom = $$getExpr(str, .ptr, tok, dft)

	if atom=0!(atom=1)
	else  if atom="ON"  set atom=1
	else  if atom="OFF" set atom=0
	else  do PSL.error( "Unknown Compiler Switch: "_atom)

	quit atom

	// ---------------------------------------------------------------------
isComment( local String expr)	quit (expr=";")!(expr="//")!(expr="/*")

	// ---------------------------------------------------------------------
setCmds( local String cls,	// level 1 subscript in cmds()
	local List vals,	// List of assignment targets (*2)
	local String switch,	// value to store
	local List valid,	// List of valid values (*4)
	public String cmds(,))	// output array (*5)
	/* ---------------------------------------------------------------------
	support function that sets commands(cls,val)=switch for each val in vals

	ARGUMENTS:
	(*2) vals = List of assignment targets
		Probably produced by $$getEpxr(), in which case the values are in
		uppercase
		If vals="*", then the function will replace is by valid. This
		effectively acts as an indicator for "all".
	(*4) valid = List of valid values
		The purpose of this List is two fold:
		- an entry will only be added to cmds(cls,) if the element from
			vals occurs in valid (ignoring case)
		- the entry will be added using the case in valid, not the case
			in vals.
	(*5) cmds(,) = output array
		cmds(cls,val) will be added for each val in vals, provided that
		it occurs in valid, and using the spelling of valid.
	*/
	type Number elm,pos
	type String val

	if vals = "*" set vals = valid

	for elm=1:1:vals.count() do {
		set val = vals.elementAt(elm)
		set pos = valid.position( val, , 1)
		if pos>0 set cmds( cls, valid.elementAt(pos)) = switch
	}
	quit

	// ---------------------------------------------------------------------
skip(	local String m2src(),
	public Number lptr,
	local String cmd)
	/* ---------------------------------------------------------------------
	Skip over code section, stop at #ELSE or #END[IF] on #IF level
	*/
	type public Number fCompile

	type String atom, rec, tok
	type Number ptr, stop = fCompile

	for  set lptr = m2src(lptr).order() quit:lptr=""  do { if (fCompile<stop)!(stop=0) quit

		set ptr=1
		set rec  = $$TOKEN^%ZS( m2src(lptr).translate( 9.char(), " "),.tok)
		set atom = $$ATOM^%ZS(rec,.ptr,";",.tok).upperCase()

		if atom="#END"   set atom=$$END(.ptr) quit	// #END
		if atom="#ENDIF" set atom=$$END(.ptr) quit	// #ENDIF
		if atom="#ELSE",fCompile=stop set stop=0 quit
		if atom="#IF" do {				// Nested #IF
			set atom = $$ATOM^%ZS(rec,.ptr,";",tok)
			if ptr=0!(rec.extract(ptr+1)'=" ") set fCompile = fCompile + 1
		}
	}

	if lptr.isNull() set lptr = m2src("").order(-1) do PSL.error("Missing #END")
	quit
