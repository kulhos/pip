//DO NOT MODIFY  QWIK REPORT WRITER|DBSEXEQ|||||||1
DBSEXEQ	  
	 /* DBS - U - V5.0 - QWIK REPORT
	    Copyright(c)2003 Sanchez Computer Associates, Inc.  All Rights Reserved - 02/13/03 16:04:18 - RUSSELL
	      ORIG:  TELIV - 10/26/2005
	      DESC:  QWIK REPORT WRITER
	 
	---------- Revision History -------------------------------------------
	05/24/07 - GIRIDHARANB - CR27157
		   Modified section INSERT to pass %processMode to the 
		   DRV^USID call since CREATE is also called to modify a 
		   qwik report definition.
		   
	10/18/06 - GIRIDHARANB - CR22588
		   Modified sections COPY/DEL to call section to set up 
		   variable DQSCR. Also added section INIT.
		   
	09/20/06 - GIRIDHARANB - CR 22626
		   Modified section CREATE to change last updated date from 
		   %CurrentTime to %CurrentDate.
	 
	10/27/05 - TELIV - CR 17903
		   Converted to PSL

	09/28/04 - RussellDS - CR12334
	 	   Replaced obsoleted calls to ^DBSANS with new procedure
	 	   DBSGETID.
	 
	 	   Added parameters to calls to COPY^DBSUTL and DEL^DBSUTL.
	 
	*/
	
	// I18N=OFF
	
	
	
	quit
	

CREATE(Number %ProcessMode)	//

	/*
		This Section used for Both Create as well as Modify
		The ProcessMode should be 0 for Create
		The ProcessMode should be 1 for Modify
		
		The ProcessMode is forced to 0 for DBTBL6S and DBTBL6SQ screens
	
	*/

	type Boolean QFLAG, ZQRUN
	type Number %PAGE, %PG, DBOPT, I, SEQ
	type String BAN, DLIB, DQFUN, ID, PGM, OLDPGM, OLDSID, QRID, SID, VFMQ, VPG()

	type RecordDBTBL5Q d5q

	set ZQRUN = ""
	set QFLAG = 0

	if %ProcessMode=0 set QRID = $$FIND^DBSGETID("DBTBL5Q",1) 
	else  if %ProcessMode=1 set QRID = $$FIND^DBSGETID("DBTBL5Q",0)

	quit:QRID.isNull()

	set VPG(99) = ""				// Disable <PREV> option
	
	set d5q = Db.getRecord("DBTBL5Q","LIBS='SYSDEV',QRID=:QRID",1)

	if (d5q.getMode() = 0) do {

		set d5q.uid = %UserID
		set d5q.ltd = %CurrentDate
		set d5q.dtl = 1
		set d5q.rsize = 80
		set d5q.banner = 1
		set d5q.cscmp = 1
	}
	
	do DRV^USID(%ProcessMode,"DBTBL5Q",.d5q)

	if VFMQ = "Q" quit
	
	set DLIB = "SYSDEV" 

	if d5q.pfid.isNull() quit

	set %PG = 2
	set %PAGE = 2					// Two-page definiiton

	if d5q.stat > 0 set %PAGE = 3			// Add one for STAT definition
	
	set BAN = d5q.banner
	if '(BAN.extract(1) = "@") do {
		do UPDTBL(d5q,QRID)
	
		if VFMQ = "Q" set QFLAG = 1
	}
	
	if 'QFLAG, 'd5q.pfid.isNull() do {
	
		if d5q.stat > 0 do UPDSTAT(d5q,QRID)	// Define STAT definition
	
		if VFMQ '= "Q" do {
	
			// Delete old data item references
			set DBOPT=6			// Needed by DBSUTL3
			set ID=QRID
			set DQFUN="D" 
	
			do ^DBSUTL3
	
			// Update data item references
			set ID = QRID
			set DQFUN = "A" 

			do ^DBSUTL3
			
			
			do BUILD(QRID)			// Compile and run report
		}
	}

	quit
	
	
	
CHANGE	// Status of screen changes

	type public String UX()

	// If any changes, signals need to recompile
	if 'UX("DBTBL6F").exists() quit 1		// Layout changed
	if 'UX("DBTBL5SQ").exists() quit 1		// Stat def changed
	if UX("DBTBL5Q","").exists() quit 0		// Nothing changed
	
	quit 1
	

LIST	//
	do LIST^DBSEXEQ4 
	quit
	
	
	
DELETE	// QWIK REPORT DEFINITION

	type String DQSCR, RN
	
	do INIT(.QRSCREEN)
	
	set RN = $$^MSG(7978)
	set DQSCR = "^"_QRSCREEN

	do DEL^DBSUTLQR(DQSCR) 
	
	quit


COPY	//
	
	type String DQSCR, RN, SID	
	
	do INIT(.QRSCREEN)
	
	set RN = $$^MSG(7978)
	set DQSCR = "^"_QRSCREEN	
	
	do COPY^DBSUTLQR(DQSCR)
	quit




RUN	// Run QWIK Report (Function DBSQRR)

	type Boolean ZQRUN
	type Number %PAGE, %PG
	type String LIB, PGM, QRID
	
	set LIB="SYSDEV"
	
	set QRID = $$FIND^DBSGETID("DBTBL5Q",0) 
	quit:QRID.isNull()
	
	type RecordDBTBL5Q d5q = Db.getRecord("DBTBL5Q","LIBS='SYSDEV',QRID=:QRID")

	set %PAGE = 2
	set %PG = 1

	
	// Protect ACCESS FILES and DATA ITEMS prompts
	set %ProcessMode = 2
	set ZQRUN = 1 
	
	do DRV^USID(2,"DBTBL5Q",.d5q)	
	
	if '$$YN^DBSMBAR("",$$^MSG(2445),1) quit 		// Run report YES/NO ?

	set PGM = d5q.pgm					// Get run-time name

	if 'PGM.isNull() do ^@PGM quit				// Already compiled

	do BUILD(QRID)

	quit
	
	

BUILD( String QRID)	//
	
	type String X
	
	set X="" 

	do COMPILE(QRID)
	
	if $$YN^DBSMBAR("",$$^MSG(2445),1) = 0 quit

	do SYSVAR^SCADRV0()
	do QRPT^URID						// Run report

	quit
	
	

	
COMPILE(QRID)	// Compile QWIK report

	type Number ER, seq, lseq
	type String pgm, zrid

	set zrid = "QWIK_"_QRID					// Temp report name
	do EXT^DBSRWQR(QRID,.zrid)				// Convert to RW format
		
	type RecordDBTBL5Q dbtbl5q = Db.getRecord("DBTBL5Q","LIBS='SYSDEV',QRID=:QRID")	
	set pgm = dbtbl5q.pgm					// Run-time routine name
	
	if pgm.isNull() do {					// Get next sequence number
		lock +DBTBL("SYSDEV",0,"Q"):10

		type RecordDBTBL0 dbtbl0 = Db.getRecord("DBTBL0","%LIBT='SYSDEV',TYP='Q'")
		set seq = dbtbl0.desc + 1
		set dbtbl0.desc = seq
		set seq = seq + 10000

		do dbtbl0.save()
		
		L -DBTBL("SYSDEV",0,"Q")				// R01Qnnnn format
		
		set dbtbl0 = Db.getRecord("DBTBL0","%LIBT='SYSDEV',TYP='L'")
		set lseq = dbtbl0.desc + 100
		set pgm = "R"_lseq.toString().extract(2,3)_"Q"_seq.toString().extract(2,5)
	}

	type RecordDBTBL5H dbtbl5h = Db.getRecord("DBTBL5H","LIBS='SYSDEV',RID=:zrid",1)
	set dbtbl5h.pgm = pgm
	do dbtbl5h.save()

	do ^DBSRW(zrid,0)					// Compile report
	if ER.get()>0 quit					// Query error flag

	set dbtbl5h = Db.getRecord("DBTBL5H","LIBS='SYSDEV',RID=:zrid")
	
	set dbtbl5q = Db.getRecord("DBTBL5Q","LIBS='SYSDEV',QRID=:QRID")	

	set dbtbl5q.pgm = dbtbl5h.pgm				// Save into QWIK report definition
	do dbtbl5q.save()
	
	do Db.delete("DBTBL5H","LIBS='SYSDEV' AND RID=:zrid")	// Delete report definition
	
	quit




CMPALL	// Mass recompile QWIK report (function DBSQRB)

	type Number CNT
	type String QRID

	do Db.delete("TMPDQ","PID=:%ProcessID")
	
	set CNT = $$LIST^DBSGETID("DBTBL5Q") 
	quit:'CNT
	
	type DbSet ds = Db.selectDbSet("TMPDQ","PID=:%ProcessID","ELEMENT ASC")

	while ds.next() do {
		type RecordTMPDQ tmpdq = ds.getRecord("TMPDQ")
		do COMPILE(tmpdq.element)
	}
	
	do Db.delete("TMPDQ","PID=:%ProcessID")
	
	quit	



PREDI	// PRE-PP FOR DI CHECK

	type public String I()
		
	set I(3)="@SELDI^DBSFUN(FILES,.X)"
	quit



PPDI(	String X,
	String FID,
	String FILES,
	String I(),
	String RM,
	Number ER)	// PP FOR DI CHECK
	

	type String X1, X2


	set I(3)=""
	if X'?1"@WPS("1E.E1")" do PPDI2(.X,.RM,FID,FILES,.ER) quit

	set X1 = X.piece("(",2)
	set X1 = X1.piece(")",1)
	set X1 = X1.piece(",",1)

	// Invalid document name - ~p1
	close X1 
	set X2=$$FILE^%ZOPEN(X1,"READ",2) 
	if 'X2.isNull() do { quit
		set RM=$$^MSG(1317)_" "_X1
		set ER=1 
	}

	close X1
	
	set RM = $$^MSG(8217)_" "_X1	//  Export completed
	
	quit


PPDI2(	String X,
	String RM,
	String FID,
	String FILES,
	Number ER)	//

	type Number INCR
	type String DFID, NEWX, PFID, SAVX
		
	set SAVX = X
	set NEWX = ""

	set PFID = FILES.piece(",",1)
	set DFID = PFID

	for INCR=1:1 set X=SAVX.piece(",",INCR) quit:SAVX.piece(",",INCR,99)=""  do DFID(.X,.RM,FID,.NEWX,FILES,.ER) quit:ER

	// Invalid data item name or syntax error - ~p1
	if ER do { quit
		set X = SAVX 
		if RM.get().isNull() set RM=$$^MSG(1301,SAVX.piece(",",INCR))
	}  
	
	set X=NEWX.extract(1,NEWX.length()-1)

	quit
	


DFID(	String X,
	String RM,
	String FID,
	String NEWX,
	String FILES,
	Number ER)	//
	
	type Boolean ZFLG

	if X.beginsWith(""""),X.endsWith("""") set NEWX = NEWX_X_"," quit  		// "Text"

	// Modified the call to DBFID1.
	if '((X?1A.AN)!(X?1"%".AN)!(X["?")) do DFID1(.X, FILES,.NEWX,.ER,.RM) quit
	
	set X=$$^FORMDIPP(X,FILES,.ZFLG)

	quit:ER

	if X.isNull() set ER=1 quit
	
	if 'ZFLG set X = X.piece("]",2) 			// Remove [FID] reference
	
	do DFID1(.X,FID,.NEWX,.ER,.RM)
	
	quit


DFID1(String STR, 	// Input string 
      String FILES,     // List of valid tables 
      String NEWX,      // New value of X       	/MECH=REF:RW 
      Boolean ER, 	// Error flag                	/MECH=REF:W 
      String RM)  	// Error message, if ER = 1  	/MECH=REF:W 

      type Number ptr 
      type String OPRS, TEST 

      set ER = 0
      set NEWX = NEWX_STR_"," 

      quit:STR.isLiteral()    // Quoted string or number is OK

      // Find and validate all column references.  Build test to validate formulas 

      set TEST = "" 
      set OPRS = "()+-/*#\=_,!&@" 
      set ptr = 0

	for  do { quit:(ER ! (ptr = 0)) 

		type String X

		set X = $$ATOM^%ZS(STR,.ptr, OPRS)

		// Column reference 
		if '(((X.length() = 1) & (OPRS [ X)) ! X.isLiteral()) do { 

			type String COL, TABLE

			// Reference includes table name ([FID]DI) 
			if X.extract(1) = "[" do { 
				set TABLE = X.piece("[", 2).piece("]" , 1)
				set COL = X.piece("]", 2)

				if '{List}FILES.contains(TABLE) do {
					set ER = 1 

					// Invalid table name - ~p1 
					set RM = $$^MSG(1484) 
				} 
				else   if 'Db.isDefined("DBTBL1D", "%LIBS='SYSDEV' AND FID=:TABLE AND DI=:COL") do {

					set ER = 1 

					// Invalid data item ~p1 
					set RM = $$^MSG(1298, X) 
				} 
			} 

			// Otherwise, find which table 
			else  do {
				type Number I 

				set TABLE = "" 
				for I = 1:1:FILES.length(",") do { quit:'TABLE.isNull() 
					type String T = FILES.piece("," , I)

					if Db.isDefined("DBTBL1D","%LIBS='SYSDEV' AND FID=:T AND DI=:X") do { 
						set TABLE = T 
						set COL = X 
					} 
				} 

				if TABLE.isNull() do {
					set ER = 1 

					// Invalid data item ~p1 
					set RM = $$^MSG(1298, X) 
				} 
			} 

			if 'ER do { 
				set X = "["_TABLE_ "]"_COL 

				// Replace column references with literal 1 for test 
				set TEST = TEST_1 
			} 
			else  set TEST = TEST_X         // Add operator
		} 
	}

	// Execute TEST string to see if any errors in formula 
	if 'ER do { 
		type String Z
		catch error {

			set ER = 1

			// Invalid format ~p1 
			set RM = $$^MSG(1350, STR) 
		} 

		#ACCEPT Date=11/20/05; Pgm= Vinayak Teli; CR=17903 
		xecute "set Z="_TEST 
	} 

      
	quit 




ERR	//

	type public Number ER
	
	type Number ET
	
	do ET^%ZT(.ET)

	if ET = "UNDEFINED" set ER = 0 quit
	set ER=1 
	
	quit

	
UPDTBL(RecordDBTBL5Q d5q , String QRID)	//
	
	/*
	
	While saving DBTBL6F array of records, be sure to add 100 to its sequence
	While retriving from DBTBL6F , create the array witl Seq-100

	This section is used load the DBTBL6F for existing screens 
	or create a new DBTBL6F
	
	Later save the DBTBL6F
	
	*/
	
	type public Number %PAGE, %REPEAT, UX
	type public String VFMQ
	
	
	type Number I, SEQ
	type String D6F(), FILES, ITEMS, REPTYPE
	
	type RecordDBTBL6F DBTBL6F()
	
	set FILES = d5q.pfid
	set REPTYPE = d5q.reptype
	
	if %ProcessMode=1 do Db.delete("DBTBL6F","LIBS='SYSDEV' AND QRID=:QRID")
	
	if 'd5q.fld1.isNull() do ^DBSITEM(FILES,d5q.fld1,.D6F,0,REPTYPE)
	if 'd5q.fld2.isNull() do ^DBSITEM(FILES,d5q.fld2,.D6F,0,REPTYPE)
	if 'd5q.fld3.isNull() do ^DBSITEM(FILES,d5q.fld3,.D6F,0,REPTYPE)
	if 'd5q.fld4.isNull() do ^DBSITEM(FILES,d5q.fld4,.D6F,0,REPTYPE)
	if 'd5q.fld5.isNull() do ^DBSITEM(FILES,d5q.fld5,.D6F,0,REPTYPE)
	if 'd5q.fld6.isNull() do ^DBSITEM(FILES,d5q.fld6,.D6F,0,REPTYPE)
	
	do Db.delete("DBTBL6F","LIBS='SYSDEV' AND QRID=:QRID")
	
	set I = 0
		
	while D6F(I).order() do {
		set I = I + 1
		
		set DBTBL6F(I) = Class.new("RecordDBTBL6F","LIBS='SYSDEV',QRID=:QRID,SEQ=:I")
	
		set DBTBL6F(I).formdi = D6F(I).piece("|",1)
		set DBTBL6F(I).formdesc = D6F(I).piece("|",2)
		set DBTBL6F(I).formidn = D6F(I).piece("|",3)
		set DBTBL6F(I).formsize = D6F(I).piece("|",4)
		set DBTBL6F(I).formfmt = D6F(I).piece("|",5)
		set DBTBL6F(I).formfun = D6F(I).piece("|",6)
		set DBTBL6F(I).formlf = D6F(I).piece("|",7)
	}


	if I<20 do { 
		set %REPEAT = I
		do DRV^USID(0,"DBTBL6F",.DBTBL6F())	
	}
	else  do {
		
		set UX=1
		set %PAGE=%PAGE+1
		set %REPEAT=19 

		do DRV^USID(0,"DBTBL6F",.DBTBL6F())
	}
	
	if VFMQ = "Q" quit
	
	do d5q.save()		// Save Main Screen data

	set I = ""
	for  set I = DBTBL6F(I).order() quit:I.isNull()  do {	// Save Second Screen data
		set DBTBL6F(I).seq = DBTBL6F(I).seq + 100
		do DBTBL6F(I).save()
	}
	
	quit
	
	

UPDSTAT(RecordDBTBL5Q d5q , String QRID)
	/*
		This section is used to build the DBTBL6SQ for the statictics screen
	
	*/

	type public Number %PAGE, %PG, %REPEAT
	type public String VFMQ
	
	
	type Number I
	
	type RecordDBTBL6SQ D6S()

	do Db.delete("DBTBL6SQ","LIBS='SYSDEV' AND QID=:QRID")

	for I=1:1:20 set D6S(I) = Class.new("RecordDBTBL6SQ","LIBS='SYSDEV',QID=:QRID,SEQ=:I")

	set %PG=%PAGE
	set %REPEAT = I
	do DRV^USID(0, "DBTBL6S", .D6S())		
	
	if VFMQ = "Q" quit
	
	for I=1:1:20 if 'D6S(I).qdi.isNull() do {
		set D6S(I).seq = D6S(I).seq + 20
		do D6S(I).save()
	}
	
	quit
	
	
PPQ(	RecordDBTBL5Q fDBTBL5Q,
	String FILES,
	String PFID,
	String X,
	String RM,
	Number ER)	// Post Processor for Query Lines in Screen DBTBL5Q

	type String ZX
	
	if fDBTBL5Q.msql do { quit     // MSQL query syntax
 
        	// Check SQL syntax
        	if 'fDBTBL5Q.qid2.isNull() do ^SQLQ(fDBTBL5Q.qid2,fDBTBL5Q.pfid)
        	if ER,RM.isNull() set RM="Invalid MSQL query syntax"
 	}
  
 	// DATA-QWIK query syntax
 
 	if X="" quit
 
	set FILES = fDBTBL5Q.pfid
 	set PFID = FILES.piece(",",1)
 
	set ZX = X
 
	D ^DBSQRY
 
	set X = ZX
 
	quit

INIT(QRSCREEN)	//initialize the screen objects - call Usid

	type String PGM, SID
	
	set SID="DBTBL5Q"
	do ^USID
	set QRSCREEN=PGM_"(%O,.d5q)"
	quit
		
