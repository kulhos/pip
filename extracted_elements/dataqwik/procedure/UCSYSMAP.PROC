//DO NOT MODIFY  File SYSMAP Data - Application Group|UCSYSMAP|||||||1
UCSYSMAP( String PGM, String msrc(), String sysmap(), String cmperr())	//
	/*
	DESC: File data collected during PSL compile to SYSMAP tables, System group
 
	*************************************************************************
	* IMPORTANT NOTE:                                                       *
	* According to the rules that apply to PSL compiler upgrades,           *
	* this DQ procedure shall compile with the version of the PSL           *
	* compiler that has been distributed as part of the last AMR.           *
	*************************************************************************

	---- Environment Sensitive Elements ------------------------------------
	SYSMAP*
		The functions and subroutines of this unit store data in the
		SYSMAP tables.
	filers
		Subroutine FILERCHK invokes the filer of every table that occurs
		in #IF Db.isDefined or in another LITERAL context.

	---- Comments ----------------------------------------------------------
	This unit contains the subroutines that store the SYSMAP data that has
	been collected by the PSL compiler. It also validates that LITERAL db
	references refer to tables that support automatic regeneration.

	Because subroutine FILERCHK() will try to invoke the filer routine of
	each table that is used in a literal, there are serious constraints with
	respect to initial environment creations and upgrades (see FILERCHK()
	for details).

	---- Revision History --------------------------------------------------
	01/18/07 - RussellDS CRs: 24902 / 24903 / 24974
		Modified structure of all SYSMAP tables.  Replace keys
		ELEMTYPE, ELEMENT with TARGET and moved ELEMTYPE and
		ELEMENT to data.
		
		Removed old revision history (prior to 2006).
	
	05/19/06 - Frans S.S. Witte - CRs: 21394 / 21395
		* All WARNings now go through warnGroup^UCGM()

	03/29/06 - Frans S.C. Witte - CRs: 20465 / 18164
		* Added SAVGVN() to store data in SYSMAPMPOPS.
		* Added public void dellAll() to delete all data.
		* SYSMAPRTNS will not be modified if ELEMTYPE="Routine"

	01/10/06 - Frans S.C. Witte - CRs: 18163 / 18164
		Corrected GETLABEL to ensure it will never return "".

	------------------------------------------------------------------------

	UCSYSMAP(String PGM, String msrc(), String sysmap(), String cmperr())

	ARGUMENTS:

	. PGM		Element Name~Type

	. msrc()	M source code		/MECH=REFARR:R

	. sysmap()	Collected map info	/MECH=REFARR:R
		This routine looks at the following structures:
		- sysmap("#IF","Db.isDefined",table)=column
		- sysmap("#IF","FUNC",extref)=""
		- sysmap("C",subrou,atLine,calledTag)=actuallist
		- sysmap("L",label)=SEP SEP SEP formallist
		- sysmap("G0",label+offset,gvnref) (reference)
		- sysmap("G1",label+offset,gvnref) (assignment)
		- sysmap("M",label+offset,class.method)
		- sysmap("P0",label+offset,table.column) (reference)
		- sysmap("P1",label+offset,table.column) (assignment)
		- sysmap("RTNNAME")=target file
		- sysmap("T",subrou,command)=count
		- sysmap("V0",label+offset,varref) (reference)
		- sysmap("V1",label+offset,varref) (assignment)

	. cmperr()	PSL warning/error info	/MECH=REFARR:RW
	*/

	/* Validate name of routine.  For now, only validate for selected
	   element types.  Over time, may choose to add new elements types
	   to the list.  For other element types, the caller to the compiler
	   must be responsible for name validation.
	*/

	type String ELEMENT, ELEMTYPE, pdata(), subRou, TARGET

	// Don't even bother if we already have errors
	quit:(cmperr.get().piece("|", 1) > 0)

	// If we get an error, report it as a warning
	catch error {
		//do ZE^UTLERR
		//do ERROR^UCGM("UCSYSMAP error - "_error.thrownAt_" - "_error.description)
		do warnGroup^UCGM("SYSMAP","error - "_error.thrownAt_" - "_error.description)
	}

	set subRou = "^UCSYSMAP"

	set TARGET = sysmap("RTNNAME")
	
	quit:TARGET.isNull()
	
	set ELEMENT = PGM.piece("~", 1)
	set ELEMTYPE = PGM.piece("~", 2)

	/* Note regarding the checking of routine names - This is currently a warning
	   versus an error since the report writer (and possibly other DQ componenents)
	   creates a "z" copy of a report when editing and allows compilation of that
	   copy, leading to a routine name conflict with the base report.  If we eliminate
	   that issue and locate any other possible "valid" conflicts, this should be
	   changed to an error to provide more accurate data for PSL.
	*/
	if {List}"Batch,Filer,Procedure,Report,Screen".contains(ELEMTYPE) do { quit:(cmperr.get().piece("|", 1) > 0)

		type RecordSYSMAPRTNS maprtns = Db.getRecord("SYSMAPRTNS", "TARGET=:TARGET", 1)

		quit:(maprtns.getMode() = 0)				// OK, doesn't exist yet

		quit:((maprtns.elemtype = ELEMTYPE) & (maprtns.element = ELEMENT))	// OK, same

		// If "orphaned", i.e., element no longer exists, OK.  Otherwise, conflict.
		if ELEMTYPE = "Batch", 'Db.isDefined("DBTBL33", "%LIBS='SYSDEV' AND BCHID=:ELEMENT")
		else  if ELEMTYPE = "Filer", 'Db.isDefined("DBTBL1", "%LIBS='SYSDEV' AND FID=:ELEMENT")
		else  if ELEMTYPE = "Procedure", 'Db.isDefined("DBTBL25", "%LIBS='SYSDEV' AND PROCID=:ELEMENT")
		else  if ELEMTYPE = "Report", 'Db.isDefined("DBTBL5H", "LIBS='SYSDEV' AND RID=:ELEMENT")
		else  if ELEMTYPE = "Screen", 'Db.isDefined("DBTBL2", "LIBS='SYSDEV' AND SID=:ELEMENT")
		else  do warnGroup^UCGM("MISMATCH","Routine name ("_TARGET_") conflicts with "_maprtns.elemtype_" "_maprtns.element)
	}

	// Save data to SYSMAP tables

	do Runtime.start( "CS")

	/* Clean up literal function references - if this routine is involved in
	   literal function calls from other elements, delete those old references
	   to allow rebuilding later.
	*/
	type DbSet dsdel = Db.selectDbSet("SYSMAPLITFNC", "FUNCFILE=:TARGET")

	while dsdel.next() do {

		type String XTARGET

		type RecordSYSMAPLITFNC litfnc = dsdel.getRecord("SYSMAPLITFNC")

		set XTARGET = litfnc.target

		type ResultSet rs = Db.select("FUNC", "SYSMAPLITDTA", "TARGET=:XTARGET AND FUNC <> '0'")

		while rs.next() do {

			type String func = rs.getCol("FUNC")

			if func.piece("^", 2) = TARGET do Db.delete("SYSMAPLITDTA", "TARGET=:XTARGET AND FUNC=:func")
		}
	}

	// Eliminate old SYSMAP table entries
	do Db.delete("SYSMAPCALLS", "TARGET=:TARGET")
	do Db.delete("SYSMAPCOMMANDS", "TARGET=:TARGET")
	do Db.delete("SYSMAPLABELS", "TARGET=:TARGET")
	do Db.delete("SYSMAPLITDTA", "TARGET=:TARGET")
	do Db.delete("SYSMAPLITFNC", "TARGET=:TARGET")
	do Db.delete("SYSMAPM", "TARGET=:TARGET")
	do Db.delete("SYSMAPMPROPS", "TARGET=:TARGET")
	do Db.delete("SYSMAPPROPDATA", "TARGET=:TARGET")
	do Db.delete("SYSMAPVAR", "TARGET=:TARGET")
	do Db.delete("SYSMAPRTNS", "TARGET=:TARGET")

	/* Save the data in sysmap().  Note that sysmap contains four levels for
	   some elements.  Although the fourth level is not currently saved, it is
	   retained in sysmap() for potential future use.
	*/
	do SAVCMDS(TARGET, ELEMTYPE, .sysmap(), .msrc())
	do SAVLITDT(TARGET, .sysmap(), .cmperr())
	do SAVLITFN(TARGET, .sysmap(), .cmperr())
	do SAVMETHS(TARGET, ELEMTYPE, .sysmap(), .msrc())
	do SAVDATA0(TARGET, ELEMTYPE, .sysmap(), .msrc(), .cmperr(), .pdata())
	do SAVDATA1(TARGET, ELEMTYPE, .sysmap(), .msrc(), .pdata())
	do SAVVAR(TARGET, ELEMTYPE, .sysmap(), .msrc(), 0)
	do SAVVAR(TARGET, ELEMTYPE, .sysmap(), .msrc(), 1)
	do SAVGVN(TARGET, ELEMTYPE, .sysmap(), .msrc(), 0)
	do SAVGVN(TARGET, ELEMTYPE, .sysmap(), .msrc(), 1)
	do SAVLABLS(TARGET, .sysmap())
	do SAVCALLS(TARGET, ELEMTYPE, ELEMENT, .sysmap(), .msrc())

	// Map functions used as literals in other elements
	do MAPLITFN(TARGET, .sysmap(), .pdata())

	// Create map of routines to PSL elements (SYSMAPRTNS)
	type RecordSYSMAPRTNS sysmapr = Class.new("RecordSYSMAPRTNS", "TARGET=:TARGET")

	set sysmapr.elemtype = ELEMTYPE
	set sysmapr.element = ELEMENT
	do sysmapr.save()

	if (cmperr.get().piece("|", 1) > 0) do {
		
		do Runtime.rollback()
	}

	else  do Runtime.commit()

	quit
	
	
	// ---------------------------------------------------------------------
clean( String val)	// clean value for use in SYSMAP tables
	/* ---------------------------------------------------------------------
	This function cleans the supplied value so it can be used as column
	value in any of the SYSMAP tables.

	OUTPUTS:
	. $$ = cleaned value
		- If the value does not contain control characters, val is
		  returned unchanged
		- Else if val starts with "@", then "@?" will be returned
		- Else each TAB in val will be replaced by SPACE
	*/
	if val?.ANP quit val
	if val.extract() = "@" quit "@?"
	quit val.translate(9.char()," ")
	

	// ---------------------------------------------------------------------
public delAll() // DELETE FROM SYSMAP*
	/* ---------------------------------------------------------------------
	This subroutine unconditionally deletes all data from all SYSMAP related
	tables, without user interaction.
	Runtime.start() and Runtime.commit() enclose the entire operation to
	ensure an all-or-nothing result.
	*/

	do Runtime.start( "CS")

	do Db.delete("SYSMAPCALLS")
	do Db.delete("SYSMAPCOMMANDS")
	do Db.delete("SYSMAPLABELS")
	do Db.delete("SYSMAPLITDTA")
	do Db.delete("SYSMAPLITFNC")
	do Db.delete("SYSMAPM")
	do Db.delete("SYSMAPMPROPS")
	do Db.delete("SYSMAPPROPDATA")
	do Db.delete("SYSMAPVAR")
	do Db.delete("SYSMAPRTNS")

	do Runtime.commit()

	quit
	

	// ---------------------------------------------------------------------
SAVCMDS(String TARGET,
	String ELEMTYPE,
	String sysmap(),
	String msrc())
	/* ---------------------------------------------------------------------
	Save data to table SYSMAPCOMMANDS - commands
	*/

	type String command, label

	set (command, label) = ""
	for  set label = sysmap("T", label).order() quit:label.isNull()  do {
		for  set command = sysmap("T", label, command).order() quit:command.isNull()  do {

			type String LABEL

			set LABEL = $$GETLABEL(label, ELEMTYPE, .msrc(), .sysmap())

			if LABEL = " " quit

			type RecordSYSMAPCOMMANDS sysmapc = Class.new("RecordSYSMAPCOMMANDS", "TARGET=:TARGET,LABEL=:LABEL,COMMAND=:command")

			set sysmapc.count = sysmap("T", label, command)

			do sysmapc.save()
		}
	}

	quit
	
	// ---------------------------------------------------------------------
SAVLITDT(String TARGET,
	 String sysmap(),
	 String cmperr())
	
	/*
	Save data to table SYSMAPLITDTA - data involved in #IF literals
	*/
	
	type String column, table
	
	set table = ""
	for  set table = sysmap("#IF", "Db.isDefined", table).order() quit:table.isNull()  do {
		
		set column = sysmap("#IF", "Db.isDefined", table)
						
		type RecordSYSMAPLITDTA sysmapld = Class.new("RecordSYSMAPLITDTA", "TARGET=:TARGET,TABLE=:table,COLUMN=:column,FUNC='0'")
		
		do sysmapld.save()
						
		do FILERCHK(table, .cmperr())
	}
	
	quit
	
	// ---------------------------------------------------------------------
SAVLITFN(String TARGET,
	 String sysmap(),
	 String cmperr())
	/* ---------------------------------------------------------------------
	Save data to table SYSMAPLITFNC and related SYSMAPLITDTA - functions and
	data involved in literals
	*/
	
	type String func = ""
	
	for  set func = sysmap("#IF", "FUNC", func).order() quit:func.isNull()  do {
		
		type String FUNCFILE, XLABEL
		
		set FUNCFILE = $$clean( func.piece("^", 2))
		set XLABEL = $$clean( func.piece("^", 1))
		if XLABEL.isNull() set XLABEL = FUNCFILE
						
		type RecordSYSMAPLITFNC sysmaplf = Class.new("RecordSYSMAPLITFNC", "FUNCFILE=:FUNCFILE,LABEL=:XLABEL,TARGET=:TARGET")
		
		do sysmaplf.save()
						
		type DbSet ds = Db.selectDbSet("SYSMAPPROPDATA", "TARGET=:FUNCFILE")
							
		while ds.next() do {
				
			type String column, table
								
			type RecordSYSMAPPROPDATA sysmapp = ds.getRecord("SYSMAPPROPDATA")
								
			set table = sysmapp.table
			set column = sysmapp.column
								
			type RecordSYSMAPLITDTA sysmapld = Db.getRecord("SYSMAPLITDTA", "TARGET=:TARGET,TABLE=:table,COLUMN=:column,FUNC=:func", 1)
			
			do sysmapld.save()
								
			do FILERCHK(table, .cmperr())
		}
	}

	quit

	// ---------------------------------------------------------------------
SAVMETHS(String TARGET,
	 String ELEMTYPE,
	 String sysmap(),
	 String msrc())
	/* ---------------------------------------------------------------------
	Save data to table SYSMAPM - methods
	*/
	
	type String classmet, label
	
	set (classmet, label) = ""
	for  set label = sysmap("M", label).order() quit:label.isNull()  do {
		for  set classmet = sysmap("M", label, classmet).order() quit:classmet.isNull()  do {
			
			type String class, LABEL, method
			
			set LABEL = $$GETLABEL(label, ELEMTYPE, .msrc(), .sysmap())

			if LABEL = " " quit

			set class = classmet.piece(".", 1)
			set method = classmet.piece(".", 2)
			
			if class.isLike("Record%") set class = "Record"
					
			type RecordSYSMAPM sysmapm = Db.getRecord("SYSMAPM", "TARGET=:TARGET,LABEL=:LABEL,CLASS=:class,METHOD=:method", 1)
			
			set sysmapm.count = sysmapm.count + 1
					
			do sysmapm.save()
		}
	}
	
	quit
	

	// ---------------------------------------------------------------------
SAVDATA0(String TARGET,
	 String ELEMTYPE,
	 String sysmap(),
	 String msrc(),
	 String cmperr(),
	 String pdata())
	/* ---------------------------------------------------------------------
	Save data to table SYSMAPPROPDATA - referenced (read) data in sysmap("P"
	*/	
	
	type String label, tabcol

	set (label, tabcol) = ""
	for  set label = sysmap("P0", label).order() quit:label.isNull()  do {
		for  set tabcol = sysmap("P0", label, tabcol).order() quit:tabcol.isNull()  do {
			
			type String column, LABEL, objname, table, X

			set LABEL = $$GETLABEL(label, ELEMTYPE, .msrc(), .sysmap())

			if LABEL = " " quit

			set table = tabcol.piece(".", 1).upperCase()
			set column = tabcol.piece(".", 2).upperCase()
			quit:column.isNull()
			
			type RecordSYSMAPPROPDATA sysmappd = Db.getRecord("SYSMAPPROPDATA","TARGET=:TARGET,LABEL=:LABEL,TABLE=:table,COLUMN=:column", 1)
			
			set sysmappd.countread = sysmappd.countread + 1
					
			do sysmappd.save()
					
			set pdata(table, column, LABEL) = ""
					
			// Determine if literal

			set objname = sysmap("P0", label, tabcol,1).get()
			quit:objname.isNull()
				
			set X = sysmap("V0", label, objname, 1).get()
						
			if X.isLike("LITERAL%") do {
							
				type RecordSYSMAPLITDTA sysmapld = Db.getRecord("SYSMAPLITDTA", "TARGET=:TARGET,TABLE=:table,COLUMN=:column,FUNC='0'", 1)
				
				do sysmapld.save()
							
				do FILERCHK(table, .cmperr())
			}
		}
	}	
	
	quit

	// ---------------------------------------------------------------------
SAVDATA1(String TARGET,
	 String ELEMTYPE,
	 String sysmap(),
	 String msrc(),
	 String pdata())
	/* ---------------------------------------------------------------------
	Save data to table SYSMAPPROPDATA - assigned (set) data
	*/	
	
	type String label, tabcol

	set (label, tabcol) = ""
	for  set label = sysmap("P1", label).order() quit:label.isNull()  do {
		for  set tabcol = sysmap("P1", label, tabcol).order() quit:tabcol.isNull()  do {
			
			type String column, LABEL, table

			set LABEL = $$GETLABEL(label, ELEMTYPE, .msrc(), .sysmap())

			if LABEL = " " quit

			set table = tabcol.piece(".", 1).upperCase()
			set column = tabcol.piece(".", 2).upperCase()
			
			if 'column.isNull() do {
			
				type RecordSYSMAPPROPDATA sysmappd = Db.getRecord("SYSMAPPROPDATA","TARGET=:TARGET,LABEL=:LABEL,TABLE=:table,COLUMN=:column", 1)
					
				set sysmappd.countset = sysmappd.countset + 1
					
				do sysmappd.save()
					
				set pdata(table, column, LABEL) = ""
			}
		}
	}
	
	quit
	
	// ---------------------------------------------------------------------
SAVGVN( String TARGET,
	String ELEMTYPE,
	String sysmap(),
	String msrc(),
	Number varid)
	/* ---------------------------------------------------------------------
	Save data to table SYSMAPMPROP

	Global variable signatures of referenced (i.e., read) gvns (varid = 0)
	Global variable signatures of assigned (i.e., set) gvns (varid = 1)
	*/

	type String item, label, varref
	
	set item = "G"_varid

	set (label, varref) = ""
	for  set label = sysmap(item, label).order() quit:label.isNull()  do {
		for  set varref = sysmap(item, label, varref).order() quit:varref.isNull()  do {
			
			type String LABEL = $$GETLABEL(label, ELEMTYPE, .msrc(), .sysmap())
			
			if LABEL = " " quit

			type String var = $$clean( varref)

			if 'Db.isDefined("OBJECT", "CLASS=:var") do {
					
				type RecordSYSMAPMPROPS sysmapg = Db.getRecord("SYSMAPMPROPS","TARGET=:TARGET,LABEL=:LABEL,GLOBALREF=:var", 1)
					
				if (varid = 0) set sysmapg.countread = sysmapg.countread + 1
				else  set sysmapg.countset = sysmapg.countset + 1
				
				do sysmapg.save()
			}
		}
	}
	
	quit
	
	// ---------------------------------------------------------------------
SAVVAR( String TARGET,
	String ELEMTYPE,
	String sysmap(),
	String msrc(),
	Number varid)
	/* ---------------------------------------------------------------------
	Save data to table SYSMAPVAR

	Variables referenced (i.e., read) - varid = 0
	Variables assigned (i.e., set) - varid = 1
	*/

	type String item, label, varref

	set item = "V"_varid

	set (label, varref) = ""
	for  set label = sysmap(item, label).order() quit:label.isNull()  do {
		for  set varref = sysmap(item, label, varref).order() quit:varref.isNull()  do {

			type String LABEL, var

			set var = $$clean( varref.piece("(", 1))

			set LABEL = $$GETLABEL(label, ELEMTYPE, .msrc(), .sysmap())

			if LABEL = " " quit

			if 'Db.isDefined("OBJECT", "CLASS=:var") do {

				type RecordSYSMAPVAR sysmapv = Db.getRecord("SYSMAPVAR","TARGET=:TARGET,LABEL=:LABEL,VAR=:var", 1)

				if (varid = 0) set sysmapv.countread = sysmapv.countread + 1
				else  set sysmapv.countset = sysmapv.countset + 1
				
				do sysmapv.save()
			}
		}
	}
	quit
	
	// ---------------------------------------------------------------------
SAVLABLS(String TARGET,
	 String sysmap())
	/* ---------------------------------------------------------------------
	Save data to table SYSMAPLABELS
	*/

	type String label = ""

	for  set label = sysmap("L", label).order() quit:label.isNull()  do {

		if '(label.isLike("v%") ! (label = " ")) do {

			type RecordSYSMAPLABELS sysmapl = Class.new("RecordSYSMAPLABELS", "TARGET=:TARGET,LABEL=:label")		
			type String SEP = sysmap("L", label).extract()

			set sysmapl.params = sysmap("L", label).piece(SEP, 4)

			do sysmapl.save()
		}
	}
	quit

	// ---------------------------------------------------------------------
SAVCALLS(String TARGET,
	 String ELEMTYPE,
	 String ELEMENT,
	 String sysmap(),
	 String msrc())
	/* ---------------------------------------------------------------------
	Save data to table SYSMAPCALLS - calls
	*/

	type String calls, label, lineno

	set (calls, label, lineno) = ""
	for  set label = sysmap("C", label).order() quit:label.isNull()  do {
		for  set lineno = sysmap("C", label, lineno).order() quit:lineno.isNull()  do {
			for  set calls = sysmap("C", label, lineno, calls).order() quit:calls.isNull()  do {

				type Number i
				type String clab, cparams, crtn, LABEL

				if calls.isLike("%^%") set crtn = $$clean( calls.piece("^", 2))
				else  do {
					if calls.extract()="@" set crtn = $$clean( calls)
					else  set crtn = ELEMENT
				}

				set clab = $$clean( calls.piece("^", 1))
				if clab.isNull() set clab = crtn

				type RecordSYSMAPRTNS sysmapr = Db.getRecord("SYSMAPRTNS", "TARGET=:crtn", 1)
				if (sysmapr.getMode() > 0) set crtn = sysmapr.element

				set cparams = sysmap("C", label, lineno, calls)
				for i = 1:1:cparams.length(",") set cparams.piece(",", i) = cparams.piece(",", i).trim(0)

				set LABEL = $$GETLABEL(label, ELEMTYPE, .msrc(), .sysmap())
				//if LABEL.isNull() set LABEL = label

				if LABEL = " " quit

				type RecordSYSMAPCALLS sysmapc = Db.getRecord("SYSMAPCALLS", "TARGET=:TARGET,LABEL=:LABEL,CALLELEM=:crtn,CALLLAB=:clab", 1)

				set sysmapc.param = cparams

				do sysmapc.save()
			}
		}
	}
	quit

	// ---------------------------------------------------------------------
MAPLITFN( String FUNCFILE,
	  String sysmap(),
	  String pdata())
	/* ---------------------------------------------------------------------
	If this element contains functions used as literals in other elements,
	update those other element's SYSMAPLITDTA info
	*/

	type DbSet dsset = Db.selectDbSet("SYSMAPLITFNC", "FUNCFILE=:FUNCFILE")

	while dsset.next() do {

		type String COLUMN, FUNC, LABEL, TABLE, XTARGET

		type RecordSYSMAPLITFNC sysmaplf = dsset.getRecord("SYSMAPLITFNC")

		set LABEL = sysmaplf.label
		set XTARGET = sysmaplf.target

		set FUNC = LABEL_"^"_FUNCFILE

		set (COLUMN, TABLE) = ""
		for  set TABLE = pdata(TABLE).order() quit:TABLE.isNull()  do {
			for  set COLUMN = pdata(TABLE, COLUMN).order() quit:COLUMN.isNull()  do {

				if pdata(TABLE, COLUMN, LABEL).exists() do {

					type RecordSYSMAPLITDTA sysmapld = Db.getRecord("SYSMAPLITDTA", "TARGET=:XTARGET,TABLE=:TABLE,COLUMN=:COLUMN,FUNC=:FUNC", 1)

					if (sysmapld.getMode() = 0) do sysmapld.save()
				}
			}
		}
	}
	quit

	// ---------------------------------------------------------------------
GETLABEL( String INLABEL,	// Input label
	  String ELEMTYPE,	// Element type
	  String msrc(),	// M source code	/MECH=REFARR:R
	  String sysmap())	// Labels map		/MECH=REFARR:R
	/* ---------------------------------------------------------------------
	*/
	type Number MSRCNO
	type String RETURN, SEP, TAG

	set TAG = INLABEL.piece("+", 1)
	set RETURN = sysmap("L",TAG).get()
	set SEP = RETURN.extract()
	set MSRCNO = +RETURN.piece(SEP,2)

	set RETURN = TAG

	if (MSRCNO > 0) do {

		if (ELEMTYPE = "Filer") set RETURN = $$SYSMAPLB^DBSFILB(TAG, msrc(MSRCNO))
		else  if (ELEMTYPE = "Batch") set RETURN = $$SYSMAPLB^DBSBCH(TAG, msrc(MSRCNO))
		if RETURN.isNull() set RETURN = TAG
	}

	if RETURN.isNull() set RETURN = " "

	quit RETURN

	// ---------------------------------------------------------------------
FILERCHK( local String TABLE,		// Table to check
	  public String cmperr())	// Error array (*2)
	/* ---------------------------------------------------------------------
	This subroutine checks
	- that the specified table has a filer.
		If not, a compilation error will be added to cmperr()
	- that the filer is ready to deal with literal values
		If not, a compilation warning will be added to cmperr()

	ARGUMENTS:
	(*2) cmperr() = error message array
		This array is not used explicitly in this subroutine, but the
		PSL.error() and PSL.warn() calls expect that the error/warning
		with this name is present.

	NOTES:
	. This subroutine accesses DBTBL1 to obtain the name of the filer routine
	. This subroutine calls label vLITCHK of the specified filer.
		In case of initial environment creation or upgrades, the filer may
		not yet be present, or it may be outdated. A catch block protects
		againsts these cases.
	. The implications for Profile versions 6.4 and older need to be
		investigated.
	*/
	type Boolean isOK
	type String filer

	type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV', FID=:TABLE", 1)

	set filer = dbtbl1.udfile

	// No filer (including invalid table)
	if filer.isNull() do PSL.error( "Filer required for literal - table "_TABLE)

	// Check to be sure version of filer contains code for checking literals
	do {
		catch error {

			set isOK = 0
		}

		set isOK = $$vLITCHK^@filer
	}

	if 'isOK do warnGroup^UCGM("SYSMAP","Regenerate filer for literals - table "_TABLE)

	quit
