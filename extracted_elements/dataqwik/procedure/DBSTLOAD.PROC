//DO NOT MODIFY  Move data to formatted rms output file|DBSTLOAD|||||||1

	 //Private;To load the data from a table to a RMS file for transfer to a client

	/*
	
	   ORIG: CHAPYALAJ - 07/28/94
	   DESC: Move the data from the table to the RMS file.
	
	  ----Revision History---------------------------------------------------

	  07/28/06 - KELLYP - CR 22048
	  	Modified BUILD section to eliminate DYNAMIC warning.

	  07/14/06 - KELLYP - CR 22188
	  	Modified BUILD section to correct a data type problem that occurred
	  	when synch'ing a table that has keys with similar names.  UTBLNBD1
	  	has NBDC and NBD as keys and the $FIND in the BUILD section was 
	  	improperly setting the NODE value for NBD to 1 instead of 2 because
	  	NBD appears in the NBDC column name.

	  12/28/05 - Giridharanb - CR 18258
	  	* Modified section build to remove a leading "," in the select list.
	  	
	  05/12/05 - Pete Chenard - CR 11132
	  	* Modified BUILD section to use Db.select rather than DBSFETCH
	  	* Modified FETCH  to accept ResultSet as parameter and use rs.next()
	  	  to fetch data rather than FETCH^DBSFETCH.
	  	  
	  12/08/03 - Spier 7403
		  PSL warning message clean up
		
	  10/13/2001 - Spier 43583
		  Converted DBSTLOAD routine to PSL procedure	

	*/

	quit 
	
	
public BLDRMS(TBLNAME,OPT,Q,QITEM,WIDEFILE,SPLIT,FK)	// Public; Build output file for full transfer of a table type
	
	
	/*
	Description:
	This label is called from routines used within the host sync utility.  It is used to produce a 
	file of deletes and inserts of schema and data based on the queries passed in the paramater list.
	The schema sent can include foreign keys,tables and index definitions.  The only data that can be
	sent comes from tables where the LOG indicator is set to yes.
	
	
	    ARGUMENTS:
	    .TBLNAME	File list					/REQ/MECH=VAL/TBL=DBTBL1
	    .OPT     	Option						/REQ/MECH=VAL
	    .Q   	Query Defination				/NOREQ/MECH=VAL
	    .QITEM	Table Name passed when in delete mode		/NOREQ/MECH=VAL
	    .WIDEFILE	Wide table name when splitting tables		/NOREQ/MECH=VAL
	    .SPLIT	Number indicating the split table number	/NOREQ/MECH=VAL
	    .FK		DBTBL1F.FKEYS					/NOREQ/MECH=VAL
	
	

	   I18N=QUIT: Excluded from I18N standards.

	Records created in the RMS file are
		TREC	- table header record
		FREC	- Column list
		SREC	- Column format list
		DREC	- Data record
	
	*/
	


	new ACCVAL,ACKEYS,CNT,COLUMN,FILETYP,fsn,LIB,%LIBS,LOGCHG,KEYS,NETLOC,RECORD,QUOTE,TREC
	set QUOTE=$C(34)


	set QITEM=$G(QITEM) 
	set WIDEFILE=$G(WIDEFILE) 
	set SPLIT=$G(SPLIT)
	set (%LIBS,LIB)="SYSDEV"
 	type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:TBLNAME")
 	set KEYS=dbtbl1.ACCKEYS
	set ACKEYS=""
	for I=1:1:$L(KEYS,",") I $E($P(KEYS,",",I))'="""",+$P(KEYS,",",I)'=$P(KEYS,",",I) set ACKEYS=ACKEYS_","_$P(KEYS,",",I)
	if ACKEYS'="" set ACKEYS=$E(ACKEYS,2,100)
	set NETLOC=dbtbl1.netloc
	set LOGCHG=dbtbl1.log
		
	// define file type to determine if it should be loaded on gui/mumps clients
 	
	if $G(FILENAME)="" set FILETYP=""
	else  do {
		type RecordDBTBL1 schema=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:FILENAME")
		set FILETYP=schema.filetyp
		}
	set ACCVAL=""

	//Opt=3 is delete option
 	if OPT=3,TBLNAME["DBTBL",QITEM'="" do {
		for I=1:1:$L(ACKEYS,",") do {
			set COLUMN=$P(ACKEYS,",",I)
			if COLUMN="%LIBS" set ACCVAL=QUOTE_%LIBS_QUOTE quit 
			if I=2 set ACCVAL=ACCVAL_","_QUOTE_QITEM_QUOTE quit 
			if TBLNAME="DBTBL1F",WIDEFILE'="" set ACCVAL=ACCVAL_","_QUOTE_WIDEFILE_QUOTE quit 
			if I>2 set ACCVAL=ACCVAL_","_"*"
			}
		}

	if OPT=3,TBLNAME'["DBTBL",QITEM'="" do {
		set ACCVAL=""
		if ACKEYS'="" for I=1:1:$L(ACKEYS,",") do {
			if I=1 set ACCVAL=QUOTE_QITEM_QUOTE
			if I>1 set ACCVAL=ACCVAL_","_"*"
			}
		}


	if $E(ACCVAL)="," set ACCVAL=$E(ACCVAL,2,$L(ACCVAL))


	set TREC="T"

	set TREC=TREC_","_%CurrentDate_","_%CurrentTime_","_QUOTE_TBLNAME_QUOTE_","_$S(ACKEYS="":0,1:$L(ACKEYS,","))
	if ACCVAL="" set ACCVAL="*"
	set REC2=$S(TBLNAME["DBTBL":"D",$P(ACCVAL,",",1)'["*":"D",1:"T")

	if OPT=3,$G(FK),$D(SORTFID),$G(SPLIT)'="" do SPLITDEL^HSYNCSPT quit 

	if OPT=3 do { quit
		if $P(ACCVAL,",",1)'["*",ACCVAL["*" do {
			// adjust the key CNT so GUI will not deal with any * values.
			
			set $P(TREC,",",5)=$L($E(ACCVAL,1,$F(ACCVAL,"*")),",")-1
			}
		// SORTFID  is an array containing a split of the widefiles sent to the client
		
		if '$D(SORTFID) do {
			if '$D(IOLIST) quit
			set RECTYPE=$$SETREC(.SORTFID,FILETYP)
			if RECTYPE="C",'$D(IOLIST("N")) quit 
			set WRTREC=TREC_",N,"_RECTYPE_$C(9)_"F"
			
			// Columns named with % can not be inserted into Oracle, they are converted to _
			set SREC="S"
			if ACKEYS'="" do {
				set WRTREC=WRTREC_","_$TR(ACKEYS,"%","_")
				if ACKEYS'="" for I=1:1:$L(ACKEYS,",") set SREC=SREC_","_$$TYP^DBSDD(TBLNAME_"."_$P(ACKEYS,",",I))
				}
			if $E(REC2,1)'="T" set WRTREC=WRTREC_$C(9)_SREC_$C(9)
			// occurs on truncate record
			else  set WRTREC=WRTREC_$C(9)       
			set WRTREC=WRTREC_"D,"_REC2_","_ACCVAL
			do IOWRITE^HSYNCWRT(WRTREC)
			}
		else  do SPLITDEL^HSYNCSPT
		}
	set TRECWRT=0
	do BUILD(TBLNAME,.Q)
	quit 
	

CHKVER(VER)	// Private,Check Version, determine if PFW has multiple builds

	/*
	Description:	
	  Check if a new file was created in a version more record then
	  the version currently being written. New files will not be transferred
	  to older versions.
	*/
	if $O(NEWFILE(FILENAME,VER))'="" quit 1
	quit 0
	
	
BUILD(FID,Q)	// Private, Build the data item list of the file and fetch the data from the table

	/* 
	Description:
		Build a resultset through call to dbsfetch, based on type of table branch off to 
		process the transfer of the data.

	Arguments:
 
	. FID		Table Name being processed			/REQ/MECH=VAL
	. Q		Query string built in other routines		/NOREQ/MECH=VAL

	*/

	catch ERROR {	 
		use 0
		// Log error
		do ZE^UTLERR                           
		set ER=1 set RM=$$ETLOC^%ZT
		}


	new COLUMN,DI,DILIST,DITYPE,DREC,DV,DVLIST,EXE,NODE,FREC,QDV,TESTVAL,VZNOD,VZREQ,VZTYPE,VZCMP,VZLEN
	set FREC="F"
	set QDV=""
	set DILIST=ACKEYS
	set KEYCNT=$L(DILIST,",")

	// Allocate position for keys within DITYPE string
	set DITYPE=""
	set $P(DITYPE,",",KEYCNT)="" 
	set SPLITFLG=0


	type ResultSet collist=Db.select("NOD,TYP,DI,CMP","DBTBL1D","%LIBS='SYSDEV' AND FID=:FID AND NOD IS NOT NULL AND CMP IS NULL")
	if collist.isEmpty() quit
	while collist.next() do { quit:$G(ER)="W"

		// can not send memo or binary data item
		if collist.getCol(2)="B"!(collist.getCol(2)="M") set ER="W" quit
		// computed are not sent
		if collist.getCol(4)'="" quit		
		set COLUMN=collist.getCol(3)
		// literal numerics or strings will not be sent to a client
		if (COLUMN?1.N)!($E(COLUMN)["""") quit 

		if collist.getCol(1)["*" do { quit
			
			// once non key keys are removed, we need to adjust the position in the type variable
			// to account for them not being sent

			set NODE=0
			
			type Number I
			for I=1:1:ACKEYS.length(",") if ACKEYS.piece(",",I)=COLUMN set NODE=I quit
		
			set DITYPE.piece(",",NODE)=collist.getCol(2)
			
			if $D(DITYPE)>1 do {
				set VER="" 
				for  set VER=$O(DITYPE(VER)) quit:VER=""  set $P(DITYPE(VER),",",NODE)=collist.getCol(2)
				}
			}


		set DILIST=DILIST_","_COLUMN
		
		if DILIST.extract()="," set DILIST=DILIST.extract(2,999999)

		set DITYPE=DITYPE_","_collist.getCol(2)
		if $D(DITYPE)>1 do {
			set VER="" 
			for  set VER=$O(DITYPE(VER)) quit:VER=""  set DITYPE(VER)=DITYPE(VER)_","_collist.getCol(2)
			}
			
		if FID="DBTBL1D" do {
		 
			if COLUMN="REQ" set VZREQ=$L(DILIST,",")  
			if COLUMN="NOD" set VZNOD=$L(DILIST,",") 
			if COLUMN="TYP" set VZTYPE=$L(DILIST,",")
			if COLUMN="LEN" set VZLEN=$L(DILIST,",")
			if COLUMN="CMP" set VZCMP=$L(DILIST,",")
			if COLUMN="DEC" set vzdec=$L(DILIST,",")
			if COLUMN="DES" set vzdes=$L(DILIST,",")
			if COLUMN="DFT" set vzdft=$L(DILIST,",")
			if COLUMN="MAX" set vzmax=$L(DILIST,",")
			if COLUMN="MIN" set vzmin=$L(DILIST,",")
			}

		if '$D(COLLIST(COLUMN,"TYP")) quit 

		set VER=""
		for  set VER=$O(CLIENT(VER)) quit:VER=""  do {
			set TESTVAL=$O(COLLIST(COLUMN,"TYP",VER))
			if TESTVAL="" quit 
			if '$D(DITYPE(VER)) set DITYPE(VER)=DITYPE
			set DITYPE(VER)=$P(DITYPE(VER),",",1,$L(DITYPE(VER),",")-1)_","_$P(COLLIST(COLUMN,"TYP",TESTVAL),"|",1)
			}
		}




	/*
	Only a transfer of file with data with get here, file will truncate
	all data at the client. No need to tell the user. If they select
	file only they will see a message come from ddpxfr1.
	*/  
	
	if $G(ER)="W" set ER="" quit

	if ACKEYS'="" set FREC=FREC_","_DILIST
	if TBLNAME["DBTBL",$G(SPLIT)'=$G(WIDEFILE),WIDEFILE'["DBTBL" do SPLITTBL^HSYNCSPT quit

	#ACCEPT DATE=07/28/06;PGM=KELLYP;CR=unknown
	type ResultSet rs = Db.select(DILIST,FID,$G(Q))
	if rs.isEmpty() quit
	
	set $P(TREC,",",6)=$S($D(SORTFID):"W",1:"N")
	set $P(TREC,",",7)=$$SETREC(.SORTFID,FILETYP)

	if '$D(SORTFID) do {
		set WRTARRAY(1)=TREC
		set WRTARRAY(2)=$TR(FREC,"%","_")
		set WRTARRAY(3)="S,"_DITYPE
		if $D(DITYPE)>1 do {
			set VER=""
			for  set VER=$O(DITYPE(VER)) quit:VER=""  set WRTARRAY(3,VER)="S,"_DITYPE(VER)
			}
		set FOUND=1
		do FETCH(.rs)
		}

	if TBLNAME'["DBTBL",$G(SPLIT)'=$G(WIDEFILE) do {
		set SPLIT=""
		set WIDEFILE=TBLNAME
		for  set SPLIT=$O(SORTFID(SPLIT)) quit:SPLIT=""  do SPLITTBL^HSYNCSPT
		}

	quit 

 
FETCH(ResultSet rs)	//  retrieve data records and write them to the file

	/*
	Description:
	Retrieve the data and update file with that information.
	Called from BUILD^DBSTLOAD and SPLITTBL^HSYNCSPT

	   Global Scope variables:
		.exe		Executable array used to retrieve rows of data

	*/

	new DATATYPE,DREC,DVLIST,FFIDWIDE,I,NOCOLUMN,OK,QDV,PKEYS,RECORD
	set RECORD=0
	set FFIDWIDE=0

	// 	exe array created in the calling function
	while rs.next() do {
		set DVLIST = rs.getRow()
		set DVLIST = DVLIST.translate($C(9),"|")

		//Change key to required field
		if FID="DBTBL1D",$P(DVLIST,"|",VZNOD)?1N1"*" set $P(DVLIST,"|",VZREQ)=1
	
		set DREC="D"_","_"I"
		set QDV=""

		set NOCOLUMN=1 
		set DATATYPE=DITYPE
		for I=1:1:$L(DILIST,",") do DIVAL(.QDV,I) quit:NOCOLUMN=0 
		if NOCOLUMN=0 quit 

		if $D(COLLIST)>1 set VER="" for  set VER=$O(CLIENT(VER)) quit:VER=""  do {
			new QDV
			set QDV=""
			set DATATYPE=DITYPE
			if $D(DITYPE(VER)) set DATATYPE=DITYPE(VER)
			for I=1:1:$L(DILIST,",") do DIVAL(.QDV,I,VER) quit:NOCOLUMN=0 
			set DREC(VER)="D"_","_"I"_QDV
			}

		if $D(WRTARRAY) do {
			set WRTREC=WRTARRAY(1)_$C(9)_WRTARRAY(2)
			do IOWRITE^HSYNCWRT(WRTREC,,1)
			if $D(WRTARRAY(3))=1 do IOWRITE^HSYNCWRT(WRTARRAY(3)) kill WRTARRAY quit
			 
			do IOWRITE^HSYNCWRT(WRTARRAY(3),CLIENT)
			set VER=""
			for  set VER=$O(WRTARRAY(3,VER)) quit:VER=""  do IOWRITE^HSYNCWRT(WRTARRAY(3,VER),VER)
			kill WRTARRAY
			}
		if FOUND=0 do {
			if TBLNAME'["DBTBL" set $P(TREC,",",4)=QUOTE_"W_"_SORTFID(SPLIT)_"_"_SPLIT_QUOTE
			set $P(TREC,",",6,7)="S,G"
			set RECTYPE="G"
			set WRTREC=TREC_$C(9)_$TR(FREC,"%","_")
			do IOWRITE^HSYNCWRT(WRTREC,,1)
			if $D(DITYPE)=1 do IOWRITE^HSYNCWRT("S,"_DITYPE)
			if $D(DITYPE)>1 do {
				do IOWRITE^HSYNCWRT("S,"_DITYPE,CLIENT)
				set VER=""
				for  set VER=$O(DITYPE(VER)) quit:VER=""  do IOWRITE^HSYNCWRT("S,"_DITYPE(VER),VER)
				}
			set FOUND=1
			set RECORD=1
			}
		set QDV=$E(QDV,2,$L(QDV))
		set DREC=DREC_","_QDV
		if FFIDWIDE do {
			set TRECWRT=1
			set WRTREC=TREC_$C(9)_FREC
			do IOWRITE^HSYNCWRT(WRTREC,,1)
			if $D(SREC)=1 do IOWRITE^HSYNCWRT(SREC) quit
			 
			if $D(SREC)>1 do {
				do IOWRITE^HSYNCWRT(SREC,CLIENT)
				set VER=""
				for  set VER=$O(SREC(VER)) quit:VER=""  do IOWRITE^HSYNCWRT(SREC(VER),VER)
				}
			}
		if $D(DREC)=1 do IOWRITE^HSYNCWRT(DREC)
		set VER=""
		for  set VER=$O(DREC(VER)) quit:VER=""  do IOWRITE^HSYNCWRT(DREC(VER),VER)
		kill DREC
		if FFIDWIDE do {
			set $P(TREC,",",6,7)="S,G"
			new FILENAME,I,PKEYS,SORTFID,WIDEFILE
			set FILENAME=$P(DVLIST,"|",FFIDWIDE)
			do MAP^DBSDDMAP(FILENAME,.WIDEFILE)
			do RESORT^DDPXFR1(.WIDEFILE,.SORTFID,FILENAME)
			if '$D(SORTFID) quit
			 
			set I=$L($P(DILIST,"PKEYS",1),",")
			set PKEYS=$P(DVLIST,"|",I)
			set I=""
			for  set I=$O(SORTFID(I)) quit:$D(SORTFID(I,$P(PKEYS,",",1))) 
			set $P(DREC,",",FFIDWIDE+2)=QUOTE_"W_"_FILENAME_"_"_I_QUOTE
			set OK=1
			for J=1:1:$L(PKEYS,",") quit:$P(PKEYS,",",J)=""  if '$D(SORTFID(I,$P(PKEYS,",",J))) set OK=0 quit 
			if 'OK quit 
			set TRECWRT=1
			new RECTYPE
			set RECTYPE="G"
			set WRTREC=TREC_$C(9)_FREC
			do IOWRITE^HSYNCWRT(WRTREC,,1)
			if $D(SREC)=1 do IOWRITE^HSYNCWRT(SREC) quit 
			if $D(SREC)>1 do {
				do IOWRITE^HSYNCWRT(SREC,CLIENT)
				set VER=""
				for  set VER=$O(SREC(VER)) quit:VER=""  do IOWRITE^HSYNCWRT(SREC(VER),VER)
				}
			}
		}
	quit 
	

DIVAL(QDV,PTR,VER)	// Column data formatter

	/* 
	 Description:
	 The function is used to format a single piece of data

	 Arguments:
 
	 	QDV		Formatted data 			/MECH=REF:RW/REQ
		PTR		Property of table		/Mech=VAL/REQ
		VER		Host Profile Version		/Mech=VAL/NOREQ
	*/

	new DV,DVDATA,RETURNDV,TESTVAR

	if SPLITFLG,'$$SPLITDI^HSYNCSPT($P(DVLIST,"|",LOC+1),TBLNAME,DILIST,ACKEYS,SPLIT,PTR) set NOCOLUMN=0 quit


	//DVDATA will be modified to contain the older released version of the format of a column
		 
	set DVDATA=DVLIST
	set VER=$G(VER)

	if TBLNAME="DBTBL1D",$D(COLLIST($P(DVLIST,"|",3))),VER'="" do {
		if PTR=VZREQ,$O(COLLIST($P(DVLIST,"|",3),"REQ",VER))'="" do CHGDVDTA("REQ",VER)
		if PTR=VZTYPE,$O(COLLIST($P(DVLIST,"|",3),"TYP",VER))'="" do CHGDVDTA("TYP",VER)
		if PTR=VZLEN,$O(COLLIST($P(DVLIST,"|",3),"LEN",VER))'="" do CHGDVDTA("LEN",VER)
		if PTR=VZCMP,$O(COLLIST($P(DVLIST,"|",3),"CMP",VER))'="" do CHGDVDTA("CMP",VER)
		if PTR=vzdec,$O(COLLIST($P(DVLIST,"|",3),"DEC",VER))'="" do CHGDVDTA("DEC",VER)
		if PTR=vzdes,$O(COLLIST($P(DVLIST,"|",3),"DES",VER))'="" do CHGDVDTA("DES",VER)
		if PTR=vzdft,$O(COLLIST($P(DVLIST,"|",3),"DFT",VER))'="" do CHGDVDTA("DFT",VER)
		if PTR=vzmin,$O(COLLIST($P(DVLIST,"|",3),"MIN",VER))'="" do CHGDVDTA("MIN",VER)
		if PTR=vzmax,$O(COLLIST($P(DVLIST,"|",3),"MAX",VER))'="" do CHGDVDTA("MAX",VER)
		}
	set TESTVAR=$P(DATATYPE,",",PTR)
	if "N$"[TESTVAR set QDV=QDV_","_($P(DVDATA,"|",PTR)) quit 
	if "L"[TESTVAR set QDV=QDV_","_(+$P(DVDATA,"|",PTR)) quit 
	if "D"[TESTVAR set QDV=QDV_","_$$INT^%ZM($P(DVDATA,"|",PTR),"D") quit 
	if "C"[TESTVAR set QDV=QDV_","_$$INT^%ZM($P(DVDATA,"|",PTR),"C") quit 


	set DV=$P(DVDATA,"|",PTR)
	if SPLITFLG,PTR=LOC,TBLNAME["DBTBL",$D(SORTFID) set DV="W_"_SORTFID(SPLIT)_"_"_SPLIT
	
	if $P(DILIST,",",PTR)="TBLREF",'(SPLITFLG!(QITEM'="")),'$D(SORTFID) do {
			set RETURNDV=""
			do TESTFFID
			set NOCOLUMN=$$LOGGING(DV)
			set DV=RETURNDV
			}
			
	set DV=$$QUOTE^DBSTLOAD(DV)
	set QDV=QDV_","_QUOTE_DV_QUOTE
	quit

	

CHGDVDTA(ATTRIB,VER)	// account for schema change between version release

	/* 
		Description:
		The function is used to reset an attribute of a column when PFW clients
	   	are not on the same build

	Arguments:
 
	. ATTRIB	Attribute of the column that was changed		/REQ/MECH=VAL
	. VER		Version of changed column				/REQ/MECH=REF:RW
 
	Returns:
 
	. DVDATA	Updated DATA string
 
	Example:
 
	W $$CHGVDTA
 
	*/


	
	if I=VZREQ,FID="DBTBL1D",$P(DVLIST,"|",VZNOD)?1N1"*" set $P(DVDATA,"|",VZREQ)=1 quit
	 
	set VER=$O(COLLIST($P(DVLIST,"|",3),ATTRIB,VER))
	set $P(DVDATA,"|",I)=$P(COLLIST($P(DVLIST,"|",3),ATTRIB,VER),"|",1)
	quit 





SETREC(SORTFID,FILETYP)	// Determine the type of record being transferred

	/* 
	  Description:
	  The function is used to create an indicator for the T record
	  of the type of record being sent

	Arguments:
 
	. SORTFID	Array of split table mapping			/NOREQ/MECH=REFARRAY
	. FILETYP	Table type					/REQ/MECH=VAL

	*/



	if $D(SORTFID) quit "C"
	if $G(CHARBASE) quit "C"
	if FILETYP=7 quit "G"
	if $G(FILENAME)="" quit "B"
	if Db.isDefined("STBLNOGUI","FILENAME") quit "C"
	quit "B"



LOGGING(FID)	//

	/*
	 Description:
	 Determine if this table should be sent to the client. It should not be
	 if the table has logging off or the file is not assigned to the client.	
	
	Arguments:

	  .  FID	Table Name					/REQ/MECH=VAL


	*/

	type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:FID")
	if +dbtbl1.netloc=0!(+dbtbl1.log=0) quit 0
	quit 1
	

TESTFFID	//Private

	if TBLNAME'="DBTBL1F" quit
	 
	new SAVEI 
	set SAVEI=I
	new FILENAME,I,J,PKEYS,OK,SORTFID,WIDEFILE
	set (RETURNDV,FILENAME)=DV
	do MAP^DBSDDMAP(FILENAME,.WIDEFILE)
	if '$D(WIDEFILE) do { quit 
		if $D(WRTARRAY) set $P(WRTARRAY(1),",",6,7)="N,B" quit 
		set WRTARRAY(1)=TREC 
		set $P(WRTARRAY(1),",",6,7)="N,B"
		set WRTARRAY(2)=FREC 
		If $D(SREC) set WRTARRAY(3)=SREC
		set VER=""
		for  set VER=$O(SREC(VER)) quit:VER=""  set WRTARRAY(3,VER)=SREC(VER)
		}

	do RESORT^DDPXFR1(.WIDEFILE,.SORTFID,FILENAME)
	if $D(WRTARRAY) set $P(WRTARRAY(1),",",6)="W"
	if '$D(WRTARRAY) set $P(TREC,",",6)="W"
	set I=$O(SORTFID(""))
	set RETURNDV="W_"_DV_"_"_I
	set FFIDWIDE=SAVEI
	quit
	

	
QUOTE(DV)	//Private; Add quotes to data item if the data already has quotes.
	
	/*
	Arguments:
	 
	 . DV		Data Value					/REQ/MECH=VAL
	*/
	new I,QUOTE
	set QUOTE=""""
	set I=0
	for  set I=$F(DV,QUOTE,I) quit:'I  set DV=$E(DV,1,I-1)_QUOTE_$E(DV,I,$L(DV)),I=I+1

	quit DV
