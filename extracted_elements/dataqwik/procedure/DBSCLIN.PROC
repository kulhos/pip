//DO NOT MODIFY  CALL IN STUB FOR COMPUTEDS|DBSCLIN|||||||1
	/*
	ORIG: giridhab - 06/08/2005
	DESC: CALL IN STUB FOR COMPUTEDS

	---- Comments --------------------------------------------------------
	This procedure is the call-in stub to support computed data item operation
	in a relational database environment. CALFRMC is called by an oracle process
	passing in the arguments that are reqired for the computed data item to be 
	evaluated by value.
	
	LINETAG:
		CALFRMC
	INPUTS:
		STR1 - STRING WITH EXTRINSIC TO BE CALLED (AGE^CIFCDI)
		STR2 - ARGUMENT LIST SEPERATED BY $C(31).
		
	RETURNS:
		RET  - RETURN VALUE OF THE COMPUTED DATA ITEM
	

	---- Revision History ------------------------------------------------
	
	 03/20/07 - GIRIDHARANB - CR 26364
	 	    Modified to add an additional parameter/processing that is used 
	 	    to define certain system variables like %UID and %UCLS

	 09/20/06 - KELLYP - CR 23210
	 	    Modified the CALFRMC section to perform an exclusive kill.
	 	    This prevents a problem where EFD and other variables were
	 	    left around in the symbol table on multiple callbacks,
	 	    which caused further problems with incorrect data values
	 	    being returned and other errors.

	 06/22/06 - GIRIDHAB - CR21139
	 	    Modified section CALFRMC to reset ER after the call to 
	 	    establish connection to the database. The status code of ER=-4
	 	    at this is point is not fatal and means that a connection already
	 	    exists.

	 06/08/05 - GIRIDHAB - CR16152
		    Initial revision.

	*/

public CALFRMC(str1,str2,str3) // handle call-in to evaluate computeds

	type String ARG,ET,PAR,RET,RM
	type Number I,ER

	#ACCEPT CR=23210;PGM=KELLYP;DATE=9/20/06
	#BYPASS
	kill (str1,str2,str3)
	#ENDBYPASS
	
        catch error {
 
                set ER = 1
                set ET = error.type_"-"_error.thrownAt
                set RM = error.description

		if ET["%GTM-" do ZE^UTLERR quit
		do ^UTLERR
		}

	do RUNC^ORACON
	if ER=-4 set ER=0,RM=""
	else  if ER quit Class.new("Error","Database connection error")

	for I=1:1:$L(str2,$C(31)) do {
		set PAR=$P(str2,$C(31),I)
		if PAR'=+PAR set $P(str2,$C(31),I)=$$QADD^%ZS(PAR,"")
		}

	set str2=str2.translate($C(31),",")

	// process user/terminal information in str3
	if str3.data() do {
		quit:str3=" "
		set opt = $E(str3),ptoken=$E(str3,2,99)
		if opt=1 do EXECPID(ptoken)
		else   do EXECTKN(ptoken)
	}

	do SYSVAR^SCADRV0()
	set ARG="S RET="_str1_"("_str2_")"
	#ACCEPT DATE=07/11/04; CR=21139; PGM=Badri Giridharan
	xecute ARG
	quit RET

EXECTKN(ptoken)

	type Public String %UID,%UCLS
	type RecordTOKEN tkn =Db.getRecord("TOKEN","TOKEN=:ptoken",1)
	
	if 'tkn.getMode() do {  quit
		set (%UID,%UCLS)=""
	}
	
	set %UID=tkn.UID
	set %UCLS=tkn.UCLS

	quit

EXECPID(ptoken)

	type Public String drvvars
	type RecordSAVEDRV savedrv=Db.getRecord("SAVEDRV","JOBNUM=:ptoken",1)
	
        if 'savedrv.getMode() do {  quit
                set (%UID,%UCLS)=""
        }

	set drvvars=savedrv.drvvars

	#ACCEPT DATE=03/19/07; CR=24702; PGM=Badri Giridharan; GROUP=execute;
	XECUTE drvvars

	quit
	
