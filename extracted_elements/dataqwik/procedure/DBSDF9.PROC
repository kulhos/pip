//DO NOT MODIFY  Rebuild DQ node/column cross reference|DBSDF9|||||||1
public DBSDF9

	// **********************************************************************
	// * IMPORTANT NOTE:                                                    *
	// * According to the rules that apply to PSL compiler upgrades,        *
	// * the generated M routine associated with this procedure must be     *
	// * checked into StarTeam and released with the procedure whenever     *
	// * changes are made to this procedure.                                *
	// *                                                                    *
	// * The mrtns version will be used during upgrades and will then be    *
	// * removed from the mrtns directory.  Therefore, other than in a      *
	// * development environment, or during an upgrade, an mrtns version of *
	// * this routine should not exist.                                     *
	// *                                                                    *
	// * Keep these comments as single line to ensure they exist in the     *
	// * generated M code.                                                  *
	// **********************************************************************
		 
	/*
	Rebuild DQ node/column cross reference
	
	Called at top by function DBSDF9

	---- Revision History -------------------------------------------------
	05/30/06 - RussellDS - CR21551
		   Add /NOLOG to save of DBTBL1 when updating LISTDFT and 
		   LISTREQ to prevent problems during clean install.
	
	12/07/05 - RussellDS - CR18400
		   Modify updates to DBTBL1 to only occur if there is an
		   actual change in the data.  Otherwise, always ends up
		   resetting last user and last date modified.
	
	11/15/05 - RussellDS - CR18065
		   Converted to PSL.
		   
		   Removed old revision history.

	-----------------------------------------------------------------------
	*/

	// Prompt for list of tables
	quit:'$$LIST^DBSGETID("DBTBL1")
	
	type ResultSet rs = Db.select("ELEMENT", "TMPDQ", "PID=:%ProcessID", "ELEMENT ASC")
	
	while rs.next() do BLDINDX(rs.getCol("ELEMENT"))

	do Db.delete("TMPDQ", "PID=:%ProcessID")
	
	// Done
	write $$MSG^%TRMVT($$^MSG(855), "", 1)

	quit
	

public BUILDALL
	
	/*
	Mass rebild all the control files
	*/
	
	type ResultSet rs = Db.select("FID", "DBTBL1", "%LIBS='SYSDEV'", "FID ASC")
	
	while rs.next() do BLDINDX(rs.getCol("FID"))
	
	quit
	

private BLDINDX(String TABLE)	// Table name

	/*
	Build DBTBL1 and DBTBL1D indexes for TABLE
	*/
	
	type Number %ProcessMode
	type String LISTDFT, LISTREQ
	
	set %ProcessMode = 0
	set (LISTDFT, LISTREQ) = ""
	
	type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV', FID=:TABLE")
	
	// Rebuild indexes if not relational database
	if '$$rdb^UCDBRT("DBTBL1") do {
	
		type String N, TYPE
		
		// Delete existing entries before rebuild
		
		// ^XDBREF entries
		for TYPE = "DBTBL1.FSN", "DBTBL1.GLOBAL", "DBTBL1.UDFILE" do {

			set N = ""
			// Allow global references
			#ACCEPT Date=11/17/05; Pgm=RussellDS; CR=18065
			for  set N = ^XDBREF(TYPE, "SYSDEV", N).order() quit:N.isNull()  kill ^XDBREF(TYPE, "SYSDEV", N, TABLE)
		}
		
		// ^DBINDX entries
		for TYPE = "FKPTR", "MDD", "PARFID" do {

			set N = ""
			// Allow global references
			#ACCEPT Date=11/17/05; Pgm=RussellDS; CR=18065
			for  set N = ^DBINDX("SYSDEV", TYPE, N).order() quit:N.isNull()  kill ^DBINDX("SYSDEV", TYPE, N, TABLE)
		}
		
		set N = ""
		// Allow global references
		#ACCEPT Date=11/17/05; Pgm=RussellDS; CR=18065
		for  set N = ^DBINDX("SYSDEV", "DOM", "PBS", N).order() quit:N.isNull()  kill ^DBINDX("SYSDEV", "DOM", "PBS", N, TABLE)
		
		// Allow global references
		#ACCEPT Date=11/17/05; Pgm=RussellDS; CR=18065
		kill ^DBINDX("SYSDEV", "STR", TABLE)
		
		// Rebuild - DBTBL1
		do VINDEX^DBSDF1F(dbtbl1)
		
		// Rebuild - DBTBL1D, and create DFT and REQ lists
		type DbSet ds = Db.selectDbSet("DBTBL1D", "%LIBS='SYSDEV' AND FID=:TABLE", "DI ASC")
		
		while ds.next() do {
			
			type RecordDBTBL1D dbtbl1d = ds.getRecord("DBTBL1D")
			
			do VINDEX^DBSDFF(dbtbl1d)
			
			if 'dbtbl1d.di.isLiteral() do {
			
				if dbtbl1d.req ! dbtbl1d.nod.isLike("%*%") set LISTREQ = LISTREQ_dbtbl1d.di_","
				if 'dbtbl1d.dft.isNull() set LISTDFT = LISTDFT_dbtbl1d.di_","
			}
		}
		
		// Rebuilt - DBTBL1F
		type DbSet dsfk = Db.selectDbSet("DBTBL1F", "%LIBS='SYSDEV' AND FID=:TABLE")
		
		while dsfk.next() do {
			
			type RecordDBTBL1F dbtbl1f = dsfk.getRecord("DBTBL1F")
			
			do VINDEX^DBSDFKF(dbtbl1f)
		}
	}
	
	// Just build LISTDFT and LISTREQ
	else  do {
		
		type DbSet ds = Db.selectDbSet("DBTBL1D", "%LIBS='SYSDEV' AND FID=:TABLE", "DI ASC")
		
		while ds.next() do {
			
			type RecordDBTBL1D dbtbl1d = ds.getRecord("DBTBL1D")
			
			if 'dbtbl1d.di.isLiteral() do {
			
				if dbtbl1d.req ! dbtbl1d.nod.isLike("%*%") set LISTREQ = LISTREQ_dbtbl1d.di_","
				if 'dbtbl1d.dft.isNull() set LISTDFT = LISTDFT_dbtbl1d.di_","
			}
		}
	}
	
	set LISTDFT = LISTDFT.extract(1, LISTDFT.length() - 1)
	set LISTREQ = LISTREQ.extract(1, LISTREQ.length() - 1)
	
	// Only save if change to avoid always having filer reset last user and date
	if ((dbtbl1.listdft '= LISTDFT) ! (dbtbl1.listreq '= LISTREQ)) do {
	
		if (dbtbl1.listdft '= LISTDFT) set dbtbl1.listdft = LISTDFT
		if (dbtbl1.listreq '= LISTREQ) set dbtbl1.listreq = LISTREQ
	
		// Use /NOLOG to prevent problems with clean install.  There is
		// no reason to log these changes anyway.
		do dbtbl1.save("/NOLOG")
	}
	
	quit


private %EXT

	/*
	External interface to reset global reference
	
	Called by DBSUTL9
	*/

	// Rebuild field ID index file 
	write !!, $$^MSG("3221"), !!
	write %CurrentDate.toString(), "  ", $$TIM^%ZM, !!
	
	type DbSet ds = Db.selectDbSet("DBTBL1", "%LIBS='SYSDEV'", "FID ASC")
	
	while ds.next() do {
		
		type String glref
		
		type RecordDBTBL1 dbtbl1 = ds.getRecord("DBTBL1")
		
		if dbtbl1.global.isNull() set glref = ""
		
		else  set glref = "^"_dbtbl1.global_"("_dbtbl1.acckeys
		
		if (dbtbl1.glref '= glref) do {
			
			set dbtbl1.glref = glref
	
			do dbtbl1.save()
		}
	}	

	quit
