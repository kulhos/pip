//DO NOT MODIFY  PSL Test Set - Db/Record/PSLColumn/PSLTable|ZUCTXDD|||||||1
	/*
	ORIG: Frans S.C. Witte
	DESC: test code for Code generation of methods of Column (indirection),
		Db, and Record for different table types and column types

	---- Comments ----------------------------------------------------------
	This unit contains tests to validate the code generated for
	- column indirection
	- Db.getRecord()
	- Record.copy()
	- Record.overlay()

	In addition it can be called from the top to write out code for PSLTable
	and PSLColumn methods and properties. The tables and cloumns that are
	included here span the entire spectrum with respect to different record
	types and data types.

	The public subroutines ucxCln() and ucxTbl() can be used to write out
	the code for PSLColumn and PSLTable methods and properties for an
	arbitrary column or table.

	---- Revision History --------------------------------------------------
	05/31/06 - Frans S.C. Witte
		Added test code to verify Record.copy() (to same) with and
		without (implied) optimize.
	04/07/06 - Frans S.C. Witte
		Renamed ZUCTXDD, and integrated in ZUCT test set.
	05/22/05 - Frans S.C. Witte
		Initial test set for CR15028 / CR16039.
	*/
	type PSLTable  td()
	type PSLColumn cd()
	type Number o
	type String c

	// table CIF
	type String t  = "CIF"
	type List   cl = "ACN,NAM,XNAME,TAXID,LNM,DOB,AGENT,AS,AUD1CF,TYPE,CLS"

	do ucxTbl(t, .td())
	for o=1:1:cl.count() set c = cl.elementAt( o) do ucxCln(t,c,.td(),.cd())

	// table EFTPAY
	set t  = "EFTPAY"
	set cl = "CID,SEQ,REFNO,RECV1,RECV2,ORIGSEQ,CRCD,EFD"

	do ucxTbl(t, .td())
	for o=1:1:cl.count() set c = cl.elementAt( o) do ucxCln(t,c,.td(),.cd())

	// table CIFSIG
	set t  = "CIFSIG"
	set cl = "ACN,DATE,TIME,SIG"

	do ucxTbl(t, .td())
	for o=1:1:cl.count() set c = cl.elementAt( o) do ucxCln(t,c,.td(),.cd())

	// table NOTES
	set t  = "NOTES"
	set cl = "FILE,CID,NUM,RBDATE,NOTES,ACN"

	do ucxTbl(t, .td())
	for o=1:1:cl.count() set c = cl.elementAt( o) do ucxCln(t,c,.td(),.cd())

	// table TRNAUT
	set t  = "TRNAUT"
	set cl = "ETC,UCLS,BNR,BOOK,NOBOOK,REVERSAL"

	do ucxTbl(t, .td())
	for o=1:1:cl.count() set c = cl.elementAt( o) do ucxCln(t,c,.td(),.cd())

	// table LN
	set t  = "LN"
	set cl = "CID,CLS,BOO,ANPTO,DISTPF,LRIAS,OSGNCRDC,STP,STP2,STP3,STP4,STP5"

	do ucxTbl(t, .td())
	for o=1:1:cl.count() set c = cl.elementAt( o) do ucxCln(t,c,.td(),.cd())

	// table FTF (no longer exists)
	//set t  = "FTF"
	//set cl = "TPD,BRCD,%UID,TSEQ,FLG,INT,OFL,PBK,SKP"

	//do ucxTbl(t, .td())
	//for o=1:1:cl.count() set c = cl.elementAt( o) do ucxCln(t,c,.td(),.cd())

	// table CUVAR
	set t  = "CUVAR"
	set cl = "TJD,CORPID,%CRCD,%LIBS,%VN,ORIGCRCD"

	do ucxTbl(t, .td())
	for o=1:1:cl.count() set c = cl.elementAt( o) do ucxCln(t,c,.td(),.cd())

	// table STBLPCM
	set t  = "STBLPCM"
	set cl = "KEY,PCMP"

	do ucxTbl(t, .td())
	for o=1:1:cl.count() set c = cl.elementAt( o) do ucxCln(t,c,.td(),.cd())

	quit

	// #####################################################################
	// Test functions ACN
	// #####################################################################

	// ---------------------------------------------------------------------
ACNi0( String K1, List colList, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordACN, with column indirection retrieval
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type RecordACN rec = Db.getRecord("ACN","CID=:K1")
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set values(cnm) = rec.@cnm
	}
	quit

	// ---------------------------------------------------------------------
ACNi1( RecordACN rec, List colList, String values(), RecordACN cpy)
	/* ---------------------------------------------------------------------
	Test assignment code for RecordACN, with column indirection assignment,
	and audit flag off (implied).
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	set cpy = rec.copy()
	quit

	// ---------------------------------------------------------------------
ACNi2( RecordACN rec, List colList, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordACN, with column indirection assignment,
	and audit flag on.
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.setAuditFlag(1)
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	quit

	// ---------------------------------------------------------------------
ACNi3( RecordACN rec, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordACN, with column indirection assignment.
	Uses Record.overlay(values()), to force datatype conversion code
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.overlay(.values())
	quit

	// ---------------------------------------------------------------------
ACNo0( RecordACN rec, String values(), String before(), String after())
	/* ---------------------------------------------------------------------
	Test code for RecordACN.column.oldVal.
	- retrieve/assign key: (none, see test functions LN)
	- retrieve/assign non-key(s): BOO
	- special retrieval(s)/assignment(s): ANPTO through type casting
	*/
	do rec.setAuditFlag(1)
	set before("BOO") = rec.boo.oldVal, rec.boo = values("BOO")
	set after("BOO")  = rec.boo.oldVal

	if rec.cls = "L" do {
		type RecordLN lnCast = {RecordLN}rec
		set before("ANPTO") = lnCast.anpto.oldVal, lnCast.anpto = values("ANTPO")
		set after("ANPTO")  = lnCast.anpto.oldVal
	}
	quit

	// ---------------------------------------------------------------------
ACNr0( RecordACN rec, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordACN, when object optimization OFF
	- retrieve key: (none, see test functions LN)
	- retrieve non-key(s): BOO
	- special retrieval(s): ANPTO through type casting
	*/
	set values("BOO") = rec.boo
	if rec.cls = "L" do {
		type RecordLN lnCast = {RecordLN}rec
		set values("ANPTO") = lnCast.anpto
	}

	type RecordACN cpy = rec.copy()
	set values("BOO") = cpy.boo
	quit

	// ---------------------------------------------------------------------
ACNr1( String K1, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordACN, when object optimization ON
	- retrieve key: (none, see test functions LN)
	- retrieve non-key(s): BOO
	- special retrieval(s): ANPTO through type casting
	*/
	type RecordACN rec=Db.getRecord("ACN","CID=:K1")
	set values("BOO") = rec.boo
	if rec.cls = "L" do {
		type RecordLN lnCast = {RecordLN}rec
		set values("ANPTO") = lnCast.anpto
	}
	quit

	// ---------------------------------------------------------------------
ACNu0( RecordACN rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordACN, when change audit is OFF
	- assing to key: (none, see test functions LN)
	- assing to non-key(s): BOO
	- special assignment(s): ANPTO through type casting
	*/
	set rec.boo = values("BOO")
	if rec.cls = "L" do {
		type RecordLN lnCast = {RecordLN}rec
		set lnCast.anpto = values("ANTPO")
	}
	quit

	// ---------------------------------------------------------------------
ACNu1( RecordACN rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordACN, when change audit is ON
	- assing to key:
	- assing to non-key(s):
	- special assignment(s):
	*/
	do rec.setAuditFlag(1)
	set rec.boo = values("BOO")
	if rec.cls = "L" do {
		type RecordLN lnCast = {RecordLN}rec
		set lnCast.anpto = values("ANTPO")
	}
	quit

	// #####################################################################
	// Test functions CIFSIG
	// #####################################################################

	// ---------------------------------------------------------------------
CIFSIGi0( String K1, List colList, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordCIFSIG, with column indirection retrieval
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	NOTES:
	. Db.getRecord("CIFSIG",) will not compile (Blob)
	*/
	type RecordCIFSIG rec=Db.getRecord("CIFSIG","ACN=:K1")
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set values(cnm) = rec.@cnm
	}
	quit

	// ---------------------------------------------------------------------
CIFSIGi1( RecordCIFSIG rec, List colList, String values(), RecordCIFSIG cpy)
	/* ---------------------------------------------------------------------
	Test assignment code for RecordCIFSIG, with column indirection assignment,
	and audit flag off (implied).
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	set cpy = rec.copy()
	quit

	// ---------------------------------------------------------------------
CIFSIGi2( RecordCIFSIG rec, List colList, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordCIFSIG, with column indirection assignment,
	and audit flag on.
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.setAuditFlag(1)
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	quit

	// ---------------------------------------------------------------------
CIFSIGi3( RecordCIFSIG rec, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordCIFSIG, with column indirection assignment.
	Uses Record.overlay(values()), to force datatype conversion code
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	if values.data()>9 do rec.overlay(.values())
	quit

	// ---------------------------------------------------------------------
CIFSIGo0( RecordCIFSIG rec, String values(), String before(), String after())
	/* ---------------------------------------------------------------------
	Test code for RecordCIFSIG.column.oldVal.
	- retrieve/assign key: ACN
	- retrieve/assign non-key(s): TIME
	- special retrieval(s)/assignment(s): SIG
	*/
	do rec.setAuditFlag(1)
	set before("ACN")  = rec.acn.oldVal,  rec.acn  = values("ACN")
	set after("ACN")   = rec.acn.oldVal
	set before("TIME") = rec.time.oldVal, rec.time = values("TIME")
	set after("TIME")  = rec.time.oldVal
	set before("SIG")  = rec.sig.oldVal,  rec.sig  = values("SIG")
	set after("SIG")   = rec.sig.oldVal
	quit

	// ---------------------------------------------------------------------
CIFSIGr0( RecordCIFSIG rec, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordCIFSIG, when object optimization OFF
	- retrieve key: ACN
	- retrieve non-key(s): TIME
	- special retrieval(s): SIG
	*/
	set values("ACN")  = rec.acn
	set values("TIME") = rec.time
	set values("SIG")  = rec.sig

	type RecordCIFSIG cpy = rec.copy()
	set values("TIME") = cpy.time
	quit

	// ---------------------------------------------------------------------
CIFSIGr1( String K1, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordCIFSIG, when object optimization ON
	- retrieve key: ACN
	- retrieve non-key(s): TIME
	- special retrieval(s): CIFSIG
	*/
	type RecordCIFSIG rec=Db.getRecord("CIFSIG","ACN=:K1",1)
	set values("ACN")  = rec.acn
	set values("TIME") = rec.time
	set values("SIG")  = rec.sig
	quit

	// ---------------------------------------------------------------------
CIFSIGu0( RecordCIFSIG rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordCIFSIG, when change audit is OFF
	- assing to key: ACN
	- assing to non-key(s): TIME
	- special assignment(s): SIG
	*/
	set rec.acn  = values("ACN")
	set rec.time = values("TIME")
	set rec.sig  = values("SIG")
	quit

	// ---------------------------------------------------------------------
CIFSIGu1( RecordCIFSIG rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordCIFSIG, when change audit is ON
	- assing to key: ACN
	- assing to non-key(s): TIME
	- special assignment(s): SIG
	*/
	do rec.setAuditFlag(1)
	set rec.acn  = values("ACN")
	set rec.time = values("TIME")
	set rec.sig  = values("SIG")
	quit

	// #####################################################################
	// Test functions CUVAR (no primary key)
	// #####################################################################

	// ---------------------------------------------------------------------
CUVARi0( String K1, String K2, List colList, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordCUVAR, with column indirection retrieval
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type RecordCUVAR rec=Db.getRecord("CUVAR","")
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set values(cnm) = rec.@cnm
	}
	type RecordCUVAR cpy = rec.copy()
	quit

	// ---------------------------------------------------------------------
CUVARi1( RecordCUVAR rec, List colList, String values(), RecordCUVAR cpy)
	/* ---------------------------------------------------------------------
	Test assignment code for RecordCUVAR, with column indirection assignment,
	and audit flag off (implied).
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	set cpy = rec.copy()
	quit

	// ---------------------------------------------------------------------
CUVARi2( RecordCUVAR rec, List colList, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordCUVAR, with column indirection assignment,
	and audit flag on.
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.setAuditFlag(1)
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	quit

	// ---------------------------------------------------------------------
CUVARi3( RecordCUVAR rec, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordCUVAR, with column indirection assignment.
	Uses Record.overlay(values()), to force datatype conversion code
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.overlay(.values())
	quit

	// ---------------------------------------------------------------------
CUVARo0( RecordCUVAR rec, String values(), String before(), String after())
	/* ---------------------------------------------------------------------
	Test code for RecordCUVAR.column.oldVal.
	- retrieve/assign key:
	- retrieve/assign non-key(s): %CRCD, CONAM
	- special retrieval(s)/assignment(s):
	*/
	do rec.setAuditFlag(1)
	set before("%CRCD") = rec.%crcd.oldVal, rec.%crcd = values("%CRCD")
	set after("%CRCD")  = rec.%crcd.oldVal
	set before("CONAM") = rec.conam.oldVal, rec.conam = values("CONAM")
	set after("CONAM")  = rec.conam.oldVal
	quit

	// ---------------------------------------------------------------------
CUVARr0( RecordCUVAR rec, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordCUVAR, when object optimization OFF,
	and RecordCUVAR.copy() when target is optimizable.
	- retrieve key:
	- retrieve non-key(s): %CRCD, CONAM, %VN
	- special retrieval(s):
	*/
	set values("%CRCD") = rec.%crcd
	set values("CONAM") = rec.conam

	type RecordCUVAR cpy = rec.copy()
	set values("%VN") = cpy.%vn

	quit

	// ---------------------------------------------------------------------
CUVARr1( String K1, String K2, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordCUVAR, when object optimization ON
	- retrieve key:
	- retrieve non-key(s):
	- special retrieval(s):
	*/
	type RecordCUVAR rec=Db.getRecord("CUVAR","")
	set values("%CRCD") = rec.%crcd
	set values("CONAM") = rec.conam
	quit

	// ---------------------------------------------------------------------
CUVARu0( RecordCUVAR rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordCUVAR, when change audit is OFF
	- assing to key:
	- assing to non-key(s):
	- special assignment(s):
	*/
	set rec.%crcd = values("%CRCD")
	quit

	// ---------------------------------------------------------------------
CUVARu1( RecordCUVAR rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordCUVAR, when change audit is ON
	- assing to key:
	- assing to non-key(s):
	- special assignment(s):
	*/
	do rec.setAuditFlag(1)
	set rec.%crcd = values("%CRCD")
	quit

	// #####################################################################
	// Test functions DBTBL2 (negative node subscripts)
	// #####################################################################

	// ---------------------------------------------------------------------
DTy2i0( String K1, String K2, List colList, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordDBTBL2, with column indirection retrieval
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type RecordDBTBL2 rec=Db.getRecord("DBTBL2","LIBS=:K1,SID=:K2")
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set values(cnm) = rec.@cnm
	}
	type RecordDBTBL2 cpy = rec.copy()
	quit

	// ---------------------------------------------------------------------
DTy2i1( RecordDBTBL2 rec, List colList, String values(), RecordDBTBL2 cpy)
	/* ---------------------------------------------------------------------
	Test assignment code for RecordDBTBL2, with column indirection assignment,
	and audit flag off (implied).
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	set cpy = rec.copy()
	quit

	// ---------------------------------------------------------------------
DTy2i2( RecordDBTBL2 rec, List colList, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordDBTBL2, with column indirection assignment,
	and audit flag on.
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.setAuditFlag(1)
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	quit

	// ---------------------------------------------------------------------
DTy2i3( RecordDBTBL2 rec, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordDBTBL2, with column indirection assignment.
	Uses Record.overlay(values()), to force datatype conversion code
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.overlay(.values())
	quit

	// ---------------------------------------------------------------------
DTy2o0( RecordDBTBL2 rec, String values(), String before(), String after())
	/* ---------------------------------------------------------------------
	Test code for RecordDBTBL2.column.oldVal.
	- retrieve/assign key:
	- retrieve/assign non-key(s):
	- special retrieval(s)/assignment(s):
	*/
	do rec.setAuditFlag(1)
	set before("DESC")    = rec.desc.oldVal,    rec.desc = values("DESC")
	set after("DESC")     = rec.desc.oldVal
	set before("LNK9")    = rec.lnk9.oldVal,    rec.lnk9 = values("LNK9")
	set after("LNK9")     = rec.lnk9.oldVal
	set before("YORIGIN") = rec.yorigin.oldVal, rec.yorigin = values("YORIGIN")
	set after("YORIGIN")  = rec.yorigin.oldVal
	quit

	// ---------------------------------------------------------------------
DTy2r0( RecordDBTBL2 rec, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordDBTBL2, when object optimization OFF,
	and RecordDBTBL2.copy() when target is optimizable.
	- retrieve key:
	- retrieve non-key(s): DESC
	- special retrieval(s): LNK9, YORIGIN
	*/
	set values("DESC")    = rec.desc
	set values("LNK9")    = rec.lnk9
	set values("YORIGIN") = rec.yorigin

	type RecordDBTBL2 cpy = rec.copy()
	set values("DESC")    = cpy.desc
	set values("YORIGIN") = cpy.yorigin
	quit

	// ---------------------------------------------------------------------
DTy2r1( String K1, String K2, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordDBTBL2, when object optimization ON
	- retrieve key:
	- retrieve non-key(s): DESC
	- special retrieval(s): LNK9, YORIGIN
	*/
	type RecordDBTBL2 rec=Db.getRecord("DBTBL2","LIBS=:K1,SID=:K2")
	set values("DESC")    = rec.desc
	set values("LNK9")    = rec.lnk9
	set values("YORIGIN") = rec.yorigin
	quit

	// ---------------------------------------------------------------------
DTy2u0( RecordDBTBL2 rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordDBTBL2, when change audit is OFF
	- assing to key:
	- assing to non-key(s): DESC
	- special assignment(s): LNK9, YORIGIN
	*/
	set rec.desc    = values("DESC")
	set rec.lnk9    = values("LNK9")
	set rec.yorigin = values("YORIGIN")
	quit

	// ---------------------------------------------------------------------
DTy2u1( RecordDBTBL2 rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordDBTBL2, when change audit is ON
	- assing to key:
	- assing to non-key(s): DESC
	- special assignment(s): LNK9, YORIGIN
	*/
	do rec.setAuditFlag(1)
	set rec.desc    = values("DESC")
	set rec.lnk9    = values("LNK9")
	set rec.yorigin = values("YORIGIN")
	quit

	// #####################################################################
	// Test functions EFTPAY
	// #####################################################################

	// ---------------------------------------------------------------------
EFTPAYi0( String K1, String K2, List colList, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordEFTPAY, with column indirection retrieval
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type RecordEFTPAY rec=Db.getRecord("EFTPAY","CID=:K1,SEQ=:K2")
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set values(cnm) = rec.@cnm
	}
	quit

	// ---------------------------------------------------------------------
EFTPAYi1( RecordEFTPAY rec, List colList, String values(), RecordEFTPAY cpy)
	/* ---------------------------------------------------------------------
	Test assignment code for RecordEFTPAY, with column indirection assignment,
	and audit flag off (implied).
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	set cpy = rec.copy()
	quit

	// ---------------------------------------------------------------------
EFTPAYi2( RecordEFTPAY rec, List colList, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordEFTPAY, with column indirection assignment,
	and audit flag on.
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.setAuditFlag(1)
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	quit

	// ---------------------------------------------------------------------
EFTPAYi3( RecordEFTPAY rec, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordEFTPAY, with column indirection assignment.
	Uses Record.overlay(values()), to force datatype conversion code
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.overlay(.values())
	quit

	// ---------------------------------------------------------------------
EFTPAYo0( RecordEFTPAY rec, String values(), String before(), String after())
	/* ---------------------------------------------------------------------
	Test code for RecordEFTPAY.column.oldVal.
	- retrieve/assign key:
	- retrieve/assign non-key(s):
	- special retrieval(s)/assignment(s):
	*/
	do rec.setAuditFlag(1)
	set before("ORIGSEQ") = rec.origseq.oldVal, rec.origseq = values("ORIGSEQ")
	set after("ORIGSEG")  = rec.origseq.oldVal
	set before("EFD")     = rec.efd.oldVal,     rec.efd     = values("EFD")
	set after("EFD")      = rec.efd.oldVal
	quit

	// ---------------------------------------------------------------------
EFTPAYr0( RecordEFTPAY rec, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordEFTPAY, when object optimization OFF
	- retrieve key:
	- retrieve non-key(s):
	- special retrieval(s):
	*/
	set values("RECV1") = rec.recv1
	set values("CRCD")  = rec.crcd

	type RecordEFTPAY cpy = rec.copy()
	set values("RECV1") = cpy.recv1
	quit

	// ---------------------------------------------------------------------
EFTPAYr1( String K1, String K2, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordEFTPAY, when object optimization ON
	- retrieve key:
	- retrieve non-key(s):
	- special retrieval(s):
	*/
	type RecordEFTPAY rec=Db.getRecord("EFTPAY","CID=:K1,SEQ=:K2")
	set values("RECV1") = rec.recv1
	set values("CRCD")  = rec.crcd
	quit

	// ---------------------------------------------------------------------
EFTPAYu0( RecordEFTPAY rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordEFTPAY, when change audit is OFF
	- assing to key:
	- assing to non-key(s):
	- special assignment(s):
	*/
	set rec.acn = values("ACN")
	quit

	// ---------------------------------------------------------------------
EFTPAYu1( RecordEFTPAY rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordEFTPAY, when change audit is ON
	- assing to key:
	- assing to non-key(s):
	- special assignment(s):
	*/
	do rec.setAuditFlag(1)
	set rec.acn = values("ACN")
	quit

	// #####################################################################
	// Test functions LN
	// #####################################################################

	// ---------------------------------------------------------------------
LNi0( String K1, List colList, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordLN, with column indirection
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type RecordLN rec=Db.getRecord("LN","CID=:K1")
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set values(cnm) = rec.@cnm
	}
	quit

	// ---------------------------------------------------------------------
LNi1( RecordLN rec, List colList, String values(), RecordLN cpy)
	/* ---------------------------------------------------------------------
	Test assignment code for RecordLN, with column indirection assignment,
	and audit flag off (implied).
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	set cpy = rec.copy()
	set values("LRIAS") = cpy.lrias
	set values("DUIN")  = cpy.duin
	quit

	// ---------------------------------------------------------------------
LNi2( RecordLN rec, List colList, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordLN, with column indirection assignment,
	and audit flag on.
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.setAuditFlag(1)
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	quit

	// ---------------------------------------------------------------------
LNi3( RecordLN rec, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordLN, with column indirection assignment.
	Uses Record.overlay(values()), to force datatype conversion code
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	if values.data()>9 do rec.overlay(.values())
	quit

	// ---------------------------------------------------------------------
LNo0( RecordLN rec, String values(), String before(), String after())
	/* ---------------------------------------------------------------------
	Test code for RecordLN.column.oldVal.
	- retrieve/assign key: CID
	- retrieve non-key(s): BOO, ANTPO
	- special retrieval(s): STP, STP3
	*/
	do rec.setAuditFlag(1)
	set before("CID")   = rec.cid.oldVal,   rec.cid   = values("CID")
	set after("CID")    = rec.cid.oldVal
	set before("BOO")   = rec.boo.oldVal,   rec.boo   = values("BOO")
	set after("BOO")    = rec.boo.oldVal
	set before("ANPTO") = rec.anpto.oldVal, rec.anpto = values("ANTPO")
	set after("ANPTO")  = rec.anpto.oldVal

	set before("STP")   = rec.stp.oldVal
	set rec.stp         = values("STP")
	set after("STP")    = rec.stp.oldVal

	set before("STP3")  = rec.stp3.oldVal,  rec.stp3  = values("STP3")
	set after("STP3")   = rec.stp3.oldVal
	quit

	// ---------------------------------------------------------------------
LNr0( RecordLN rec, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordLN, when object optimization OFF
	- retrieve key: CID
	- retrieve non-key(s): BOO, ANTPO
	- special retrieval(s): STP, STP3, DISTPF, LRIAS
	*/
	set values("CID")    = rec.cid
	set values("BOO")    = rec.boo
	set values("ANTPO")  = rec.anpto
	set values("STP")    = rec.stp
	set values("STP3")   = rec.stp3
	set values("DISTPF") = rec.distpf
	set values("LRIAS")  = rec.lrias

	type RecordLN cpy = rec.copy()
	set values("LRIAS") = cpy.lrias
	set values("DUIN")  = cpy.duin
	quit

	// ---------------------------------------------------------------------
LNr1( String K1, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordLN, when object optimization ON
	- retrieve key: CID
	- retrieve non-key(s): BOO, ANTPO
	- special retrieval(s): STP, STP3, DISTPF, LRIAS
	*/
	type RecordLN rec=Db.getRecord("LN","CID=:K1")
	set values("CID")    = rec.cid
	set values("BOO")    = rec.boo
	set values("ANTPO")  = rec.anpto
	set values("STP")    = rec.stp
	set values("STP3")   = rec.stp3
	set values("DISTPF") = rec.distpf
	set values("LRIAS")  = rec.lrias
	quit

	// ---------------------------------------------------------------------
LNu0( RecordLN rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordLN, when change audit is OFF
	- assing to key: CID
	- assing to non-key(s): BOO, AMPTO
	- special assignment(s): STP, STP3
	*/
	set rec.cid   = values("CID")
	set rec.boo   = values("BOO")
	set rec.anpto = values("ANTPO")
	set rec.stp   = values("STP")
	set rec.stp3  = values("STP3")
	quit

	// ---------------------------------------------------------------------
LNu1( RecordLN rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordLN, when change audit is ON
	- assing to key: CID
	- assing to non-key(s): BOO, AMPTO
	- special assignment(s): STP, STP3
	*/
	do rec.setAuditFlag(1)
	set rec.cid   = values("CID")
	set rec.boo   = values("BOO")
	set rec.anpto = values("ANTPO")
	set rec.stp   = values("STP")
	set rec.stp3  = values("STP3")
	quit

	// #####################################################################
	// Test functions NOTES
	// #####################################################################

	// ---------------------------------------------------------------------
NOTESi0( String K1, String K2, String K3, List colList, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordNOTES, with column indirection retrieval
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type RecordNOTES rec=Db.getRecord("NOTES","FILE=:K1,CID=:K2,NUM=:K3")
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set values(cnm) = rec.@cnm
	}
	quit

	// ---------------------------------------------------------------------
NOTESi1( RecordNOTES rec, List colList, String values(), RecordNOTES cpy)
	/* ---------------------------------------------------------------------
	Test assignment code for RecordNOTES, with column indirection assignment,
	and audit flag off (implied).
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	set cpy = rec.copy()
	quit

	// ---------------------------------------------------------------------
NOTESi2( RecordNOTES rec, List colList, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordNOTES, with column indirection assignment,
	and audit flag on.
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.setAuditFlag(1)
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	quit

	// ---------------------------------------------------------------------
NOTESi3( RecordNOTES rec, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordNOTES, with column indirection assignment.
	Uses Record.overlay(values()), to force datatype conversion code
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	if values.data()>9 do rec.overlay(.values())
	quit

	// ---------------------------------------------------------------------
NOTESo0( RecordNOTES rec, String values(), String before(), String after())
	/* ---------------------------------------------------------------------
	Test code for RecordNOTES.column.oldVal.
	- retrieve/assign key: NUM
	- retrieve/assign non-key(s): RBDATE
	- special retrieval(s)/assignment(s): NOTES
	*/
	do rec.setAuditFlag(1)
	set before("NUM")    = rec.num.oldVal,    rec.num    = values("NUM")
	set after("NUM")     = rec.num.oldVal
	set before("RBDATE") = rec.rbdate.oldVal, rec.rbdate = values("RBDATE")
	set after("RBDATE")  = rec.rbdate.oldVal
	set before("NOTES")  = rec.notes.oldVal,  rec.notes  = values("NOTES")
	set after("NOTES")   = rec.notes.oldVal
	quit

	// ---------------------------------------------------------------------
NOTESr0( RecordNOTES rec, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordNOTES, when object optimization OFF
	- retrieve key: NUM
	- retrieve non-key(s): RBDATE
	- special retrieval(s): NOTES, ACN
	*/
	set values("NUM")    = rec.num
	set values("RBDATE") = rec.rbdate
	set values("NOTES")  = rec.notes
	set values("ACN")    = rec.acn

	type RecordNOTES cpy = rec.copy()
	set values("RBDATE") = cpy.rbdate
	quit

	// ---------------------------------------------------------------------
NOTESr1( String K1, String K2, String K3, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordNOTES, when object optimization ON
	- retrieve key: NUM
	- retrieve non-key(s): RBDATE
	- special retrieval(s): NOTES, ACN
	*/
	type RecordNOTES rec=Db.getRecord("NOTES","FILE=:K1,CID=:K2,NUM=:K3")
	set values("NUM")    = rec.num
	set values("RBDATE") = rec.rbdate
	set values("NOTES")  = rec.notes
	set values("ACN")    = rec.acn
	quit

	// ---------------------------------------------------------------------
NOTESu0( RecordNOTES rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordNOTES, when change audit is OFF
	- assing to key: NUM
	- assing to non-key(s): RBDATE
	- special assignment(s): NOTES
	*/
	set rec.num    = values("NUM")
	set rec.rbdate = values("RBDATE")
	set rec.notes  = values("NOTES")
	quit

	// ---------------------------------------------------------------------
NOTESu1( RecordNOTES rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordNOTES, when change audit is ON
	- assing to key: NUM
	- assing to non-key(s): RBDATE
	- special assignment(s): NOTES
	*/
	do rec.setAuditFlag(1)
	set rec.num    = values("NUM")
	set rec.rbdate = values("RBDATE")
	set rec.notes  = values("NOTES")
	quit

	// #####################################################################
	// Test function STFHOST (recordType=1, QID1 IS NOT NULL)
	// #####################################################################

	// ---------------------------------------------------------------------
STFHOSi0( String K1, String K2, List colList, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordSTFHOST, with column indirection retrieval
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type RecordSTFHOST rec=Db.getRecord("STFHOST","STFSEQ=:K1,TRSEQ=:K2")
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set values(cnm) = rec.@cnm
	}
	quit

	// ---------------------------------------------------------------------
STFHOSi1( RecordSTFHOST rec, List colList, String values(), RecordSTFHOST cpy)
	/* ---------------------------------------------------------------------
	Test assignment code for RecordSTFHOST, with column indirection assignment,
	and audit flag off (implied).
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	set cpy = rec.copy()
	quit

	// ---------------------------------------------------------------------
STFHOSi2( RecordSTFHOST rec, List colList, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordSTFHOST, with column indirection assignment,
	and audit flag on.
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.setAuditFlag(1)
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	quit

	// ---------------------------------------------------------------------
STFHOSi3( RecordSTFHOST rec, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordSTFHOST, with column indirection assignment.
	Uses Record.overlay(values()), to force datatype conversion code
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.overlay(.values())
	quit

	// ---------------------------------------------------------------------
STFHOSo0( RecordSTFHOST rec, String values(), String before(), String after())
	/* ---------------------------------------------------------------------
	Test code for RecordSTFHOST.column.oldVal.
	- retrieve/assign key:
	- retrieve/assign non-key(s):
	- special retrieval(s)/assignment(s):
	*/
	do rec.setAuditFlag(1)
	set before("CDT")     = rec.cdt.oldVal,     rec.cdt = values("CDT")
	set after("CDT")      = rec.cdt.oldVal
	set before("PRIMARY") = rec.primary.oldVal, rec.primary = values("PRIMARY")
	set after("PRIMARY")  = rec.primary.oldVal
	set before("TRNET")   = rec.trnet.oldVal,   rec.trnet   = values("TRNET")
	set after("TRNET")    = rec.primary.oldVal
	quit

	// ---------------------------------------------------------------------
STFHOSr0( RecordSTFHOST rec, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordSTFHOST, when object optimization OFF
	- retrieve key:
	- retrieve non-key(s):
	- special retrieval(s):
	*/
	set values("CDT")     = rec.cdt
	set values("PRIMARY") = rec.primary
	set values("TRNET")   = rec.trnet

	type RecordSTFHOST cpy = rec.copy()
	set values("TRNET") = cpy.trnet
	quit

	// ---------------------------------------------------------------------
STFHOSr1( String K1, String K2, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordSTFHOST, when object optimization ON
	- retrieve key:
	- retrieve non-key(s):
	- special retrieval(s):
	*/
	type RecordSTFHOST rec=Db.getRecord("STFHOST","STFSEQ=:K1,TRSEQ=:K2")
	set values("CDT")     = rec.cdt
	set values("PRIMARY") = rec.primary
	set values("TRNET")   = rec.trnet
	quit

	// ---------------------------------------------------------------------
STFHOSu0( RecordSTFHOST rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordSTFHOST, when change audit is OFF
	- assing to key:
	- assing to non-key(s):
	- special assignment(s):
	*/
	set rec.cdt     = values("CDT")
	set rec.primary = values("PRIMARY")
	set rec.trnet   = values("TRNET")
	quit

	// ---------------------------------------------------------------------
STFHOSu1( RecordSTFHOST rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordSTFHOST, when change audit is ON
	- assing to key:
	- assing to non-key(s):
	- special assignment(s):
	*/
	do rec.setAuditFlag(1)
	set rec.cdt     = values("CDT")
	set rec.primary = values("PRIMARY")
	set rec.trnet   = values("TRNET")
	quit

	// #####################################################################
	// Test functions STBLPCM (recordType=1, QID1 IS NOT NULL)
	// #####################################################################

	// ---------------------------------------------------------------------
STyPCMi0( String K1, List colList, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordSTBLPCM, with column indirection retrieval
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type RecordSTBLPCM rec=Db.getRecord("STBLPCM","KEY=:K1")
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set values(cnm) = rec.@cnm
	}
	quit

	// ---------------------------------------------------------------------
STyPCMi1( RecordSTBLPCM rec, List colList, String values(), RecordSTBLPCM cpy)
	/* ---------------------------------------------------------------------
	Test assignment code for RecordSTBLPCM, with column indirection assignment,
	and audit flag off (implied).
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	set cpy = rec.copy()
	quit

	// ---------------------------------------------------------------------
STyPCMi2( RecordSTBLPCM rec, List colList, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordSTBLPCM, with column indirection assignment,
	and audit flag on.
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.setAuditFlag(1)
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	quit

	// ---------------------------------------------------------------------
STyPCMi3( RecordSTBLPCM rec, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordSTBLPCM, with column indirection assignment.
	Uses Record.overlay(values()), to force datatype conversion code
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.overlay(.values())
	quit

	// ---------------------------------------------------------------------
STyPCMo0( RecordSTBLPCM rec, String values(), String before(), String after())
	/* ---------------------------------------------------------------------
	Test code for RecordSTBLPCM.column.oldVal.
	- retrieve/assign key: KEY
	- retrieve/assign non-key(s): PCMP
	- special retrieval(s)/assignment(s): (none)
	*/
	do rec.setAuditFlag(1)
	set before("KEY")  = rec.key.oldVal,  rec.key  = values("KEY")
	set after("KEY")   = rec.key.oldVal
	set before("PCMP") = rec.pcmp.oldVal, rec.pcmp = values("PCMP")
	set after("PCMP")  = rec.pcmp.oldVal
	quit

	// ---------------------------------------------------------------------
STyPCMr0( RecordSTBLPCM rec, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordSTBLPCM, when object optimization OFF
	- retrieve/assign key: KEY
	- retrieve/assign non-key(s): PCMP
	- special retrieval(s)/assignment(s): (none)
	*/
	set values("KEY")  = rec.key
	set values("PCMP") = rec.pcmp
	quit

	// ---------------------------------------------------------------------
STyPCMr1( String K1, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordSTBLPCM, when object optimization ON
	- retrieve/assign key: KEY
	- retrieve/assign non-key(s): PCMP
	- special retrieval(s)/assignment(s): (none)
	*/
	type RecordSTBLPCM rec=Db.getRecord("STBLPCM","KEY=:K1")
	set values("KEY")  = rec.key
	set values("PCMP") = rec.pcmp
	quit

	// ---------------------------------------------------------------------
STyPCMu0( RecordSTBLPCM rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordSTBLPCM, when change audit is OFF
	- assing to key: KEY
	- assing to non-key(s): PCMP
	- special assignment(s): none
	*/
	set rec.key  = values("KEY")
	set rec.pcmp = values("PCMP")
	quit

	// ---------------------------------------------------------------------
STyPCMu1( RecordSTBLPCM rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordSTBLPCM, when change audit is ON
	- assing to key: KEY
	- assing to non-key(s): PCMP
	- special assignment(s): none
	*/
	do rec.setAuditFlag(1)
	set rec.key  = values("KEY")
	set rec.pcmp = values("PCMP")
	quit

	// #####################################################################
	// Test functions TRNAUT (subfield with $E())
	// #####################################################################

	// ---------------------------------------------------------------------
TRNAUTi0( String K1, String K2, List colList, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordTRNAUT, with column indirection retrieval
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type RecordTRNAUT rec=Db.getRecord("TRNAUT","ETC=:K1,UCLS=:K2")
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set values(cnm) = rec.@cnm
	}
	quit

	// ---------------------------------------------------------------------
TRNAUTi1( RecordTRNAUT rec, List colList, String values(), RecordTRNAUT cpy)
	/* ---------------------------------------------------------------------
	Test assignment code for RecordTRNAUT, with column indirection assignment,
	and audit flag off (implied).
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	set cpy = rec.copy()
	quit

	// ---------------------------------------------------------------------
TRNAUTi2( RecordTRNAUT rec, List colList, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordTRNAUT, with column indirection assignment,
	and audit flag on.
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	do rec.setAuditFlag(1)
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	quit

	// ---------------------------------------------------------------------
TRNAUTi3( RecordTRNAUT rec, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordTRNAUT, with column indirection assignment.
	Uses Record.overlay(values()), to force datatype conversion code
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	if values.data()>9 do rec.overlay(.values())
	quit

	// ---------------------------------------------------------------------
TRNAUTo0( RecordTRNAUT rec, String values(), String before(), String after())
	/* ---------------------------------------------------------------------
	Test code for RecordTRNAUT.column.oldVal.
	- retrieve/assign key: UCLS
	- retrieve/assign non-key(s): (none)
	- special retrieval(s)/assignment(s): BNR, NOBOOK
	*/
	do rec.setAuditFlag(1)
	set before("UCLS")   = rec.ucls.oldVal,   rec.ucls   = values("UCLS")
	set after("UCLS")    = rec.ucls.oldVal

	set before("BNR")    = rec.bnr.oldVal
	set rec.bnr          = values("BNR")
	set after("BNR")     = rec.bnr.oldVal

	set before("NOBOOK") = rec.nobook.oldVal, rec.nobook = values("NOBOOK")
	set after("NOBOOK")  = rec.nobook.oldVal
	quit

	// ---------------------------------------------------------------------
TRNAUTr0( RecordTRNAUT rec, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordTRNAUT, when object optimization OFF
	- retrieve key: UCLS
	- retrieve non-key(s): (none)
	- special retrieval(s): BNR,  NOBOOK
	*/
	set values("UCLS")   = rec.ucls
	set values("BNR")    = rec.bnr
	set values("NOBOOK") = rec.nobook

	type RecordTRNAUT cpy = rec.copy()
	set values("NOBOOK") = cpy.nobook
	quit

	// ---------------------------------------------------------------------
TRNAUTr1( String K1, String K2, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordTRNAUT, when object optimization ON
	- retrieve key: UCLS
	- retrieve non-key(s): (none)
	- special retrieval(s): BNR,  NOBOOK
	*/
	type RecordTRNAUT rec=Db.getRecord("TRNAUT","ETC=:K1,UCLS=:K2")
	set values("UCLS")   = rec.ucls
	set values("BNR")    = rec.bnr
	set values("NOBOOK") = rec.nobook
	quit

	// ---------------------------------------------------------------------
TRNAUTu0( RecordTRNAUT rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordTRNAUT, when change audit is OFF
	- assing to key: UCLS
	- assing to non-key(s): (none)
	- special assignment(s): BNR, NOBOOK
	*/
	set rec.ucls   = values("UCLS")
	set rec.bnr    = values("BNR")
	set rec.nobook = values("NOBOOK")
	quit

	// ---------------------------------------------------------------------
TRNAUTu1( RecordTRNAUT rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordTRNAUT, when change audit is ON
	- assing to key: UCLS
	- assing to non-key(s): (none)
	- special assignment(s): BNR, NOBOOK
	*/
	do rec.setAuditFlag(1)
	set rec.ucls   = values("UCLS")
	set rec.bnr    = values("BNR")
	set rec.nobook = values("NOBOOK")
	quit

	// #####################################################################
	// Test function signatures
	// #####################################################################

	// ---------------------------------------------------------------------
XXXi0( String K1, String K2, List colList, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordXXX, with column indirection retrieval
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	/*
	type RecordXXX rec=Db.getRecord("XXX","KEY1=:K1,KEY2=:K2")
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set values(cnm) = rec.@cnm
	}
	type RecordXXX cpy = rec.copy()
	*/
	quit

	// ---------------------------------------------------------------------
XXXi1( Record rec, List colList, String values(), Record cpy)
	/* ---------------------------------------------------------------------
	Test assignment code for RecordXXX, with column indirection assignment,
	and audit flag off (implied).
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	/*
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	set cpy = rec.copy()
	*/
	quit

	// ---------------------------------------------------------------------
XXXi2( Record rec, List colList, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordXXX, with column indirection assignment,
	and audit flag on.
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	/*
	do rec.setAuditFlag(1)
	type Number cnm	// column name
	type Number cnr	// column name iterator
	for cnr = 1:1:colList.count() do {
		set cnm = colList.elementAt(cnr)
		set rec.@cnm = values(cnm)
	}
	*/
	quit

	// ---------------------------------------------------------------------
XXXi3( Record rec, String values())
	/* ---------------------------------------------------------------------
	Test assignment code for RecordXXX, with column indirection assignment.
	Uses Record.overlay(values()), to force datatype conversion code
	- retrieve key: (if and as supplied)
	- retrieve non-key(s): (if and as supplied)
	- special retrieval(s): (if and as supplied)
	*/
	/*
	do rec.overlay(.values())
	*/
	quit

	// ---------------------------------------------------------------------
XXXo0( Record rec, String values(), String before(), String after())
	/* ---------------------------------------------------------------------
	Test code for RecordXXX.column.oldVal.
	- retrieve/assign key:
	- retrieve/assign non-key(s):
	- special retrieval(s)/assignment(s):
	*/
	do rec.setAuditFlag(1)
	/*
	set before("YYY") = rec.yyy.oldVal, rec.yyy = values("YYY")
	set after("YYY")  = rec.yyy.oldVal
	*/
	quit

	// ---------------------------------------------------------------------
XXXr0( Record rec, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordXXX, when object optimization OFF,
	and RecordXXX.copy() when target is optimizable.
	- retrieve key:
	- retrieve non-key(s):
	- special retrieval(s):
	*/
	/*
	set values("YYY") = rec.yyy

	type Record cpy = rec.copy()
	set values("YYY") = cpy.yyy
	*/
	quit

	// ---------------------------------------------------------------------
XXXr1( String K1, String K2, String values())
	/* ---------------------------------------------------------------------
	Test retrieval code for RecordXXX, when object optimization ON
	- retrieve key:
	- retrieve non-key(s):
	- special retrieval(s):
	*/
	/*
	type RecordXXX rec=Db.getRecord("XXX","KEY1=:K1,KEY2=:K2")
	set values("YYY") = rec.yyy
	*/
	quit

	// ---------------------------------------------------------------------
XXXu0( Record rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordXXX, when change audit is OFF
	- assing to key:
	- assing to non-key(s):
	- special assignment(s):
	*/
	/*
	set rec.yyy = values("YYY")
	*/
	quit

	// ---------------------------------------------------------------------
XXXu1( Record rec, String values())
	/* ---------------------------------------------------------------------
	Test update code for RecordXXX, when change audit is ON
	- assing to key:
	- assing to non-key(s):
	- special assignment(s):
	*/
	/*
	do rec.setAuditFlag(1)
	set rec.yyy = values("YYY")
	*/
	quit

	// ---------------------------------------------------------------------
public ucxCln(	String    TBL,
		String    CLN,
		PSLTable  td(),
		PSLColumn cd())
	/* ---------------------------------------------------------------------
	*/

	// get Column Descriptor
	type String prop = TBL _ "." _ CLN
	type String rec = TBL.lowerCase()
	if 'td(TBL).exists() set td(TBL) = PSL.getPSLTable(TBL,0)
	set cd(prop) = PSL.getPSLColumn( TBL, CLN)

	write !,"================ Test PSLColumn implementation for " _ prop_ " ================",!

	// List its properties:
	write ".table", ?20, cd(prop).table,!
	write ".column", ?20, cd(prop).column,!
	write ".node", ?20, cd(prop).node,!
	write "delim and pos info", ?20, cd(prop).delimiter, ?25, cd(prop).position
	if 'cd(prop).subfieldPosition.isNull() do {
		write "/", cd(prop).subfieldTag, "~", cd(prop).subfieldMajor
		write "~", cd(prop).subfieldMinor, "~", cd(prop).subfieldPosition
	}
	write !
	write "type information", ?20, cd(prop).dataType _ cd(prop).precision
	write ":"_ cd(prop).length_ ", n2z=", cd(prop).isNullToZero,!
	write ".computation", ?20, "<"_ cd(prop).computation_ ">",!
	write "stored as", ?20, cd(prop).internalTable_ "."_ cd(prop).internalColumn,!!

	// List the application of its methods:
	write "current node",?20, "<"_ cd(prop).getCurrentNode()_ ">",!
	write "current lvn",?20, cd(prop).getCurrentLvn(rec),!
	write "column retrieval",?20, cd(prop).getCurrentExpr(rec,0),!

	if cd(prop).computation.isNull() do {
		write "column assignment",?20, cd(prop).getCurrentExpr(rec,1),!
		write "audit node",?20, "<"_ cd(prop).getOldNode(rec)_ ">",!
		write "oldVal stored in",?20, cd(prop).getOldLvn(rec),!
		write "oldVal retrieval",?20, cd(prop).getOldExpr(rec,0),!
		write "update, audit off", ?20, "<"_ cd(prop).getUpdateCode(rec,"newval",0)_ ">",!
		write "update, audit on",  ?20, "<"_ cd(prop).getUpdateCode(rec,"newval",1)_ ">",!
	}

	type String node = cd(prop).getCurrentNode(1)
	write !
	if node.toNumber()<0 do {
		write "load",?20,"key column - no separate load code",!
	}
	else  do {
		type String keypatch()
		type Number n
		set keypatch(-2)="vod000"
		set keypatch($SELECT(node="":"0*",1:node))="vod999"
		for n=1:1:td(TBL).primaryKeys.length() set keypatch(n_"*") = "vok"_n

		if "BM"[cd(prop).dataType do {
			set node="*"_cd(prop).column
			set keypatch(-151)="vod151"
		}

		write "load, new",?20, "<"_ $$getLodCode^UCXDD(td(TBL),rec,node,0,0)_ ">",!
		write "load, old",?20, "<"_ $$getLodCode^UCXDD(td(TBL),rec,node,1,0)_ ">",!
		write "load, unknown",?20, "<"_ $$getLodCode^UCXDD(td(TBL),rec,node,-1,0)_ ">",!
		write "load, new, inc",?20, "<"_ $$getLodCode^UCXDD(td(TBL),rec,node,0,1)_ ">",!
		write "load, old, inc",?20, "<"_ $$getLodCode^UCXDD(td(TBL),rec,node,1,1)_ ">",!
		write "load, unknown, inc",?20, "<"_ $$getLodCode^UCXDD(td(TBL),rec,node,-1,1)_ ">",!

		write "patch, new",?20, "<"_ $$getLodCode^UCXDD(td(TBL),"-",node,0,0,.keypatch())_ ">",!
		write "patch, old",?20, "<"_ $$getLodCode^UCXDD(td(TBL),"-",node,1,0,.keypatch())_ ">",!
		write "patch, unknown",?20, "<"_ $$getLodCode^UCXDD(td(TBL),"-",node,-1,0,.keypatch())_ ">",!
		write "patch, new, inc",?20, "<"_ $$getLodCode^UCXDD(td(TBL),"-",node,0,1,.keypatch())_ ">",!
		write "patch, old, inc",?20, "<"_ $$getLodCode^UCXDD(td(TBL),"-",node,1,1,.keypatch())_ ">",!
		write "patch, unknown, inc",?20, "<"_ $$getLodCode^UCXDD(td(TBL),"-",node,-1,1,.keypatch())_ ">",!
	}
	quit

	// ---------------------------------------------------------------------
public ucxTbl(	String    TBL,
		PSLTable  td(),
		PSLColumn cd())
	/* ---------------------------------------------------------------------
	*/

	// get Table Descriptor (and column descriptors)
	type String rec = TBL.lowerCase()

	if 'td(TBL).exists() set td(TBL) = PSL.getPSLTable(TBL,0)
	type PSLTable des = td(TBL)
	set des = des.assertLevel( 1, .cd())

	write !,"================ Test PSLTable implementation for " _ TBL_ " ================",!
	type String m()
	type String pm()
	type Number n
	type String nd

	for n=1:1:td(TBL).primaryKeys.length() set pm(n_"*") = "v"_n
	set pm(-1)=$$lvpm^UCXDD(rec,-1)

	//write "single node?",?20,des.isOneNode(),!
	write "update key",  ?20, "<", des.getUpdateKey( rec), ">",!
	write "instantiate NEW",?20, "<", des.getNewCode( rec, 0), ">",!

	write !,"================ DB.getRecord for vobj()",!
	write $$cdNewObj^UCCLASS( rec, """Record"_ des.table_ """"),!
	do getRecCode^UCXDD(des, rec, .pm(), .m())

	for n=1:1:m("").order(-1) write m(n),!
	
	write !,"================ DB.getRecord for voXN",!
	kill m,pm(-1)
	set rec=876.54321
	type String dbAcc(,,)
	if des.recordType#2 = 1 set dbAcc("*",rec,"0*") = "vod"
	type String nql = des.nodeQuotedList
	for n=1:1 quit:nql.isNull()  do {
		set nd = nql.piece( ",", 1, 1, """")
		set nql = nql.extract( nd.length() + 2, nql.length())
		set nd = nd.stripQuotes()
		set dbAcc("*",rec,nd) = "vod"_ nd
	}
	do getRecCode^UCXDD(des, rec, .pm(), .m())

	for n=1:1:m("").order(-1) write m(n),!
	
	quit
