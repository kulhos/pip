//DO NOT MODIFY  DATA QWIK dynamic Record access|DBSDYNRA|||||||1
	/*
	 ORIG: 2005-09-23, Frans S.C. Witte
	 DESC: Dynamic Record interface, Bootset, Insensitive Group

	---- Comments ----------------------------------------------------------
	The public functions and subroutines in this unit provide a dynamic
	interface to a Record class instance who's effective class will not be
	known until runtime. The interface exposed by this unit is the most
	generalized interface to a PSL Record. It is also the most expensive
	interface in terms of runtime costs. All property access code will be
	constructed on-the-fly and XECUTEd, on a per-call basis.
	The same is true for Record store and retrieval operations.

	Because this interface provides only the bare basics, programmmers shall
	exercise extreme care when using dynamic Record instances.
	In particular:
	- For NEW Records, always use the following sequences:
		- $$new^DBSDYNRA()
		- propSet^DBSDYNRA()
		- save^DBSDYNRA()
		- dispose^DBSDYNRA()
	- For EXISTING Records, always use the following sequences:
		- $$new^DBSDYNRA()
		- propSet^DBSDYNRA() to set the access key
		- get^DBSDYNRA() to retrieve the row
		- $$propGet^DBSDYNRA() and/or propSet^DBSDYNRA()
		- save^DBSDYNRA()
		- dispose^DBSDYNRA() 
	- Never re-use or re-instantiate a Record object manipulated through
		this interface.

	This unit exposes the following public interface:

	public void dispose^DBSDYNRA( Number objectId)
		Dispose of the object pointer and the object it points to.

	public Number new^DBSDYNRA( String table)
		Create a new Record instance and return it's pointer.

	public void get^DBSDYNRA( Number objectId, Boolean allowNew)
		Perform the equivalent of a Db.getRecord, using the current
		primary key column values as the accesskey.

	public void propSet^DBSDYNRA( Number objectId, String property,
			String value, Boolean audit)
		Assign a value to a property of a Record instance.

	public Primitive propGet^DBSDYNRA( Number objectId, String property)
		Return the value of a property of a Record instance.

	public void bypassSave^DBSDYNRA( Number objectId)
		Save the Record instance to the database, bypassing the filer,
		logging, and PSL's transaction processing.
		Because no TP logic is included, a call to this method for a
		table that is stored in an RDB will NOT commit the changes to
		the RDB. It is the callers responsibility to commit the changes.

	public void save^DBSDYNRA( Number objectId)
		save the Record instance to the database, calling the filer, if
		there is one, or calling bypassSave if there is no filer.
		Include PSL's transaction processing, regardless of the call to
		the filer or to bypassSave.

	---- Environment Sensitive Elements ------------------------------------
	Runtime.start() and Runtime.commit()
		These methods are called in subroutine save.

	---- Upgrade Considerations --------------------------------------------
	The code generated for Runtime.start() and Runtime.commit() depends on
	the underlying data store. If compiled in an RDB environment, it will
	include calls to ^%DBAPI for the commit. If compiled in an MDB
	environment the generated code will not contain calls to ^%DBAPI.
	Despite this database dependent code, the unit is classified in the
	Insensitive group. The reason for this is that the TBX routines will
	use this unit to store data from the .DAT files into the database, so a
	version of DBSDYNRA needs to be present when the .DAT files are
	processed (i.e. in phase 0 of the upgrade). Furthermore the PSL compiler
	itself uses this unit to instantiate the compile time CUVAR instance.
	Note that the latter is a "retrival" operation, which is data store
	independent.
	The presence of DBSDYNRA in the distribution leads to the following
	scenarios:
	* The TBX routines never call save^DBSDYNRA.
		This is the current scenario. The only drawback of this scenario
		is that if the TBX routines use DBSDYNRA to store RDB data, it
		must do the COMMIT itself, whereas no COMMIT is needed after
		storing data in an MDB. In this case the data store embedded in
		the DBSDYNRA.m version is irrelevant.
	* The TBX routines call save^DBSDYNRA and the MDB version of DBSDYNRA
	  is included in the Framework distribution.
		That scenario will always work for MDB environments, but since
		the generated code lacks the calls to ^%DBAPI, the TBX routines
		would still need to take care of the COMMIT.
	* The TBX routines call save^DBSDYNRA and the RDB version of DBSDYNRA
	  is included in the Framework distribution.
		That scenario will always work for RDB environments, and it will
		only work for MDB environments if a version of %DBAPI is
		available in the MDB environment. Furthermore, that version of
		%DBAPI shall be aware that it is called in an MDB environment.
		This scenario seems unrealistic.

	---- Revision History --------------------------------------------------
	05/18/07 - Frans S.C. Witte - CR 27486
		RECNOFL exception now puts table name in Error.context.

	05/04/07 - Frans S.C. Witte - CR 26334
		Removed quit after throw to prevent warning

	08/31/06 - RussellDS - CRs: 22719 / 20613
		Modified bypassSave section call to VOBJ^DBSDBASE to match new
		calling info. 
	
	06/13/06 - Frans S.C. Witte - CRs: 21397 / 21937
		Subroutine bypassSave(): Removed code that deals with isAutoLog,
		and added support for negative node subscripts.
		Subroutine save(): now calls DBSLOGIT before calling bypassSave
		if PSLTable.isAutoLog=1.

	05/11/06 - Frans S.C. Witte - CRs: 21101 / 18164
		Subroutine bypassSave():
		Added support for tables with PSLTable.isAutoLog=1.

	03/28/06 - Frans S.C. Witte - CRs: 20370 / 18164
		Corrected propSet to deal with non-numeric nodes.

	01/20/06 - Frans S.C. Witte - CRs: 18163 / 18164
		Modified call to newObj^UCCLASS
		Added get(,) to retrieve an existing row through this interface.
		Corrected save() when filer is present.

	12/07/05 Frans S.C. Witte - CRs 18247 / 15593
		Several minor corrections in propSet

	11/28/05 Frans S.C. Witte - CRs 18351 / 15593
		Several minor corrections in propSet and bypassSave

	09/23/05 Frans S.C. Witte - CRs: 15592 / 15593
		Initial program.
	*/

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The mrtns version will be used during upgrades and will then be *
	// * removed from the mrtns directory.  Therefore, other than in a   *
	// * development environment, or during an upgrade, an mrtns version *
	// * of this routine should not exist.                               *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	/* ------------------------------------------------------------------ */
	/* OBJECT INSTANTIATION METHODS                                       */
	/* ------------------------------------------------------------------ */

	// ---------------------------------------------------------------------
private classNew
	/* ---------------------------------------------------------------------
	Implementation of Class.new("Record",tablename)
	This code defers the Class assignment until runtime.
	This is the compile time subroutine that will be called by method^UCGM
	when the PSL source code contains the above leftexpr.
	*/
	type literal String label = "vReNew"

	do setOpti^UCGM( PSL.var, $$getLevel^UCGM(PSL.var), -1)

	if 'PSL.subrouExists( label) do {
		type PSLSubrou sr = PSL.addSubrou( label, "(vTbl)", "new Record")
		do sr.addCode(" new vOid set vOid="_ $$newObj^UCCLASS("Record""_vTbl_"""))
		do sr.addCode(" set "_ PSL.oLvn_"(vOid,-2)=0")
		do sr.addCode(" new vT set vT=$$getPslTbl^UCXDD(vTbl,0)")
		do sr.addCode(" if $piece(vT,""|"",4)#10 set vobj(vOid)=""""")
		do sr.addCode(" Q vOid")
	}

	set PSL.return = "$$"_ label_ "("_ PSL.actual(2) _")"

	quit

	/* ------------------------------------------------------------------ */
	/* RUNTIME INTERFACE FUNCTIONS AND SUBROUTINES                        */
	/* ------------------------------------------------------------------ */

	// ---------------------------------------------------------------------
public bypassSave( Number vOid)		// the Record instance (*1)
	/* ---------------------------------------------------------------------
	Runtime store of dynamic Record instance.
	Stores the available data in the underlying database without performing
	any validation or triggered action. This subroutine performs the lowest
	level equivalent of a (SQL) INSERT or UPDATE. Thus:
	- neither Runtime.start() nor Runtime.commit() are called
	- no filer will be called, even if it is defined for the table.
	- DBSLOGIT is not called, even it the underlying table has isAutoLog=1

	ARGUMENTS:
	(*1) vOid = record instance
		vobj(vOid,-1) shall contain the class.
		vobj(vOid,-2) shall contain the record mode. Only 0 (insert) and
			1 (update) are supported.
		vobj(vOid,keysubs) shall contain the complete primary key
		vobj(vOid) shall contain the top node if one is associated with
			the table.
		vobj(vOid,node) is optional for all data nodes
		vobj(vOid,-100,node) shall be defined for all nodes that are
			modified

	NOTES:
	. The original purpose of bypassSave^DBSDYNRA() was, and still is to
		provide a low-level interface to the underlying data store that
		bypasses ANY "save processing", so it can be called during
		initial environment creation and system upgrades when the
		availability of "save processing" features cannot be guaranteed.
	*/
	type public String vobj(,,)
	type String vTbl = $$getReTable^UCGM(vobj(vOid,-1))

	type PSLTable vT = PSL.getPSLTable( vTbl, 0)
	type String vDlm = vT.columnDelimiter			// delimiter

	if vT.isRdb do {					// RDB code

		// Remove this when we eventually can deal with the proper passing
		// of an object and use of the object pointer.  See VOBJ^DBSDBASE
		#ACCEPT CR=22719; Pgm=RussellDS; Date=09/06/2006;Group=MISMATCH
		do VOBJ^DBSDBASE( vOid, vDlm)
	}
	else  do {						// MDB code
		type Number vMod = vobj(vOid,-2)		// record Mode
		type Number ftyp = vT.recordType		// record type
		type String gbl  = $$getGbl^UCXDD( vT, "vOid")	// global

		if ftyp#2>0  do {	// top node depends on $D(vobj(vOid))
			type String gblTop = gbl.extract( 1, gbl.length()-1)
			if gblTop["(" set gblTop = gblTop_")"
			set @gblTop = vobj(vOid)
		}

		if ftyp>1 set gbl=gbl_"vSub)"	// add type 10/11 node subscript

		type String vNod = ""			// -100 node iterator
		type String vSub			// Subscript in global

		for  set vNod = vobj(vOid,-100,vNod).order() quit:vNod=""  do {
			if 'vobj(vOid,vNod).data() quit		// 0*, 1*, etc.

			/* For negative node subscripts, vNod and vSub are
			   different. For all others, they are identical. */
			if vNod?1"v".N.1"."1.N set vSub = - vNod.extract( 2, vNod.length())
			else  set vSub = vNod

			if vobj(vOid,vNod).data()>1 do {	// blob or memo
				type String gblBm = gbl.extract( 1, gbl.length()-1)_ ",vBms)"
				type Number vBmi	// chunck iterator
				type Number vBms = 0	// chunck subscript
				type literal Number vBmsz = PSL.maxDataLength - 1

				if (vobj(vOid,vNod,1)="")!(vMod=2) ZWITHDRAW:vMod>0 @gblBm quit

				for vBmi=1:PSL.maxDataLength:vobj(vOid,vNod,1).length() set vBms=vBms+1,@gblBm=vobj(vOid,vNod,1).extract( vBmi, vBmi + vBmsz)
			} /* end if blob or memo */
			else  do {
				if vDlm = 124 set vobj(vOid,vNod) = $$RTBAR^%ZFUNC( vobj(vOid,vNod))

				/* If node not empty, not DELETE, then store
				   (and done) */
				if 'vobj(vOid,vNod).isNull(), vMod < 2 set @gbl = vobj(vOid,vNod) quit
				
				/* Node empty or DELETE: withdraw if not insert
				   */
				if vMod > 0 ZWITHDRAW @gbl
			} /* end ordinary node */
		}  /* end for each node in -100 tree */
	} /* end MDB code */

	do ccAftSave( vOid, vT)		// common after save code

	quit

	// ---------------------------------------------------------------------
public dispose( Record vOid)		// object ID
	/* ---------------------------------------------------------------------
	Runtime function that disposes of a RecordTBL object.

	NOTES:
	. Because $$new() may be called by an ordinary M routine, the object id
		returned by $$new() may not be under automatic object scope
		maintenance. This function deletes the vobj() entry.
	*/
	kill vOid
	quit

	// ---------------------------------------------------------------------
public new( String TBL)		// table name
	/* ---------------------------------------------------------------------
	Runtime function that returns a new instance of a RecordTBL object.

	RETURNS:
	. $$ = Object ID of new RecordTBL
		vobj($$,-1) will be set to RecordTBL
		vobj($$,-2) will be set to zero (new record)
		vobj($$) will be set to ""
			if and only if PSL.getPSLTable(TBL).recordType in (1,11)

	NOTES:
	. This function does a simple Class.new("Record",tbl). No additional
		initializations are performed. In particular, implied side
		effects such as setting ACN.CLS for RecordDEP or RecordLN are
		the responsibility of the caller.
	*/
	type Record rec = Class.new("Record", TBL)
	quit rec

	// ---------------------------------------------------------------------
public get(	Number vOid,		// the Record instance (*1)
		Boolean allowNew)	// accept non-existing row?
	/* ---------------------------------------------------------------------
	Runtime retrieval of dynamic Record instance from database.

	ARGUMENTS:
	(*1) vOid = record instance
		vobj(vOid) shall have be initialized as follows:
		- vobj(vOid,-1) = runtime Record class descendant
		- vobj(vOid,-3), vobj(vOid,-4), ... = primary key column values

	OUTPUT:
	. vobj(vOid) loaded with initial node
		vobj(vOid,-2) reflects actual recordmode
		vobj(vOid,-151) will have been set for RDB tables that may need
		incremetnal loading.

	NOTES:
	. To be completely structure independent, callers shall use calls to
		setProp^DBSDYNRA() to set up the primary key column values.
	. Unlike Db.getRecord(), this procedure does NOT create a completely new
		record instance when the record does not exist. It merely
		suppresses the RECNOFL exception, and it sets the record mode.
	*/
	type PSLTable vT = PSL.getPSLTable( $$getReTable^UCGM(vobj(vOid,-1)), 0)

	type String vData,vEr,vRm	// NEW local vars used by RDB code


	/* get the initial load code and xecute it */
	type String load()
	type Number i
	do getRecCode^UCXDD( vT, "vOid", , .load())
	#ACCEPT CR=18163;DATE=2005-11-29;PGM=FSCW;GROUP=XECUTE
	for i=1:1:load("").order(-1) xecute load(i)

	type Boolean isNew = $T	// save $TEST as set by load code

	if isNew, 'allowNew throw Class.new("Error", "%PSL-E-RECNOFL,Record"_ vT.table_ " not found,"_ vT.table)
	set vobj( PSL.return, -2) = 'isNew

	/* Need -151 node for RDB tables that are not single node */
	#ACCEPT CR=18163;DATE=2005-11-29;PGM=FSCW;GROUP=XECUTE
	if vT.isRdb, 'isNew, '$$isOneNode^UCXDD( vT) xecute vT.getUpdateKey( "return")
	quit

	// ---------------------------------------------------------------------
public propGet(	Number vOid,		// the Record instance (*1)
		String vProp)		// column expression (*2)
	/* ---------------------------------------------------------------------
	Runtime retrieval of named column of dynamic Record instance.
	This function supports incremental loading of data nodes. 

	ARGUMENTS:
	(*1) vOid = record instance
		vobj(vOid) shall have its class node (vobj(vOid,-1)) set to the
		runtime Record class descendant.
	(*2) property
		Shall contain the name of a column in the table. A runtime
		exception will be thrown if the column is not defined for the
		table associated with the record.

	NOTES:
	. The code generated by this function is capable to retrieve a computed
		column at runtime. To do that, it must determine the columns
		required to pass to the computation and it must load the nodes
		for those columns. Since this is done at runtime, indirection is
		used to "compute" the return value, and it calls itself to
		recursively obtain the values of the columns that participate in
		the computation. This is obviously one of the worst cases.
	*/
	type String vTbl = $$getReTable^UCGM(vobj(vOid,-1))

	type PSLColumn vP = PSL.getPSLColumn( vTbl, vProp)
	type PSLTable vT = PSL.getPSLTable( vTbl, 0)
	type String vNod = vP.getCurrentNode(1)
	type String vRet

	if 'vNod.isNull(),vNod.toNumber()'<0 do {
		/* If the node does not yet exist, load it.
		   NOTE: for non-numeric nodes, including blob/memo nodes, the
		   IF statement will always return FALSE, because vNod is
		   supposed to be concatenated in the construction of the vobj()
		   reference: it will contain quotes and/or the extra subscript.
		   Passing "bExists=1" to getLoadCode ensures that it will use
		   the correct IF to check the existance. Because most nodes are
		   numeric, the IF before the xecute will prevent unnecessary
		   xecutes in most cases. */
		#ACCEPT CR=15592;DATE=2005-09-23;PGM=FSCW;GROUP=XECUTE
		if 'vobj(vOid,vNod).exists() xecute $$getLodCode^UCXDD(vT,"vOid",vNod,+vobj(vOid,-2).get(),1,"")
	}

	/* For recordType>1, a computed expression may require columnvalues from
	   several nodes. Retrieve each column individually to ensure that the
	   nodes are loaded */
	type String vCmp=vP.computation

	if 'vCmp.isNull(),vT.recordType>1 do {
		type String vpt()
		do parseCmp^UCXDD( vCmp, .vpt())
		type Number vCnt = vpt("").order(-1)
		type String vVal
		type Number vElm
		set vCmp=""
		for vElm=2:2:vCnt set vCmp=vCmp_vpt(vElm-1)_$$propGet(vOid,vpt(vElm)).addQuotes()

		#ACCEPT CR=15592;DATE=2005-09-23;PGM=FSCW;GROUP=XECUTE
		xecute "SET vRet="_ vCmp_ vpt(vCnt)
	}

	#ACCEPT CR=15592;DATE=2005-09-23;PGM=FSCW;GROUP=XECUTE
	else  if vP.masterfieldType = 2 xecute "SET vRet="_vP.getCurrentExpr("vOid",0).translate(9.char(),"_")

	#ACCEPT CR=15592;DATE=2005-09-23;PGM=FSCW;GROUP=XECUTE
	else  xecute "SET vRet="_vP.getCurrentExpr("vOid",0)

	quit vRet

	// ---------------------------------------------------------------------
public propSet(	Number  vOid,		// the Record instance (*1)
		String  vProp,		// column expression (*2)
		String  vVal,		// value to assign (*3)
		Boolean vAudit)		// audit changes? (*4)
	/* ---------------------------------------------------------------------
	Runtime assignment to named column of arbitrary Record instance.
	This subroutine supports incremental loading of data nodes. 

	ARGUMENTS:
	(*1) vOid = record instance
		vobj(vOid) shall have its class node (vobj(vOid,-1)) set to the
		runtime Record class descendant.
	(*2) vProp = property (columnname)
		Shall contain the name of a column in the table. A runtime
		exception will be thrown if the column is not defined for the
		table associated with the record.
	(*3) vVal = value to assign
		Shall contain the value to assinge to the property.
		This subroutine makes no effort to interpret or validate the
		supplied value.
	(*4) vAudit = audit changes?
		Emulates the value of Record.setAuditFlag().
		Note that this subroutine provides dynamic runtime specification
		of the value whereas the Record.setAuditFlag() property has a
		restricted compile time scope.

	NOTES:
	. The code generated by this function will be capable to retrieve a
		computed column at runtime. To do that, it must determine the
		columns required to pass to the	computation and it must load the
		nodes for those columns. Since this is done at runtime,
		indirection is used to "compute" the return value, and it calls
		itself to recursively obtain the values of the columns that
		participate in the computation. This is obviously slow.
		Programmers should be discouraged against runtime indirection of
		computed columns even though this code works.
	*/
	type String vTbl = $$getReTable^UCGM(vobj(vOid,-1))

	type PSLColumn vP = PSL.getPSLColumn( vTbl, vProp)

	if 'vP.computation.isNull() throw Class.new("Error","%PSL-E-INVALIDREF,"_ vTbl_ "."_ vProp)

	type String vNod = vP.getCurrentNode(1)
	if 'vNod.isNull(),vNod.toNumber()'<0 do {
		/* If the node does not yet exist, load it. The code below is
		   slightly different from the code in $$propGet(), because we
		   need to be sure that the node will only be retrieved once: A
		   second retrieval may overwrite modifications. By including the
		   $DATA() in the XECUTE, and concatenating vNod the code always
		   references the correct node. */
		#ACCEPT CR=15592;DATE=2005-09-23;PGM=FSCW;GROUP=XECUTE
		xecute "IF '$D(vobj(vOid,"_vNod_")) "_$$getLodCode^UCXDD( PSL.getPSLTable( vTbl, 0), "vOid", vNod, +vobj(vOid,-2).get(), 1, "")
	}

	/* Assignment will create the node if needed */
	#ACCEPT CR=15592;DATE=2005-09-23;PGM=FSCW;GROUP=XECUTE
	xecute vP.getUpdateCode("vOid", "vVal", vAudit)

	quit

	// ---------------------------------------------------------------------
public save(	Number vOid,		// the Record instance (*1)
		String vQual)		// applicable filer qualifiers
	/* ---------------------------------------------------------------------
	Runtime store of dynamic Record instance.
	Stores the available data in the underlying database by calling the
	filer if one is defined for the table.
	If there is no filer, it will call ^DBSLOGIT() if applicable before
	calling bypassSave().

	ARGUMENTS:
	(*1) vOid = record instance
		vobj(vOid,-1) shall contain the class.
		vobj(vOid,-2) shall contain the record mode. Only 0 (insert) and
			1 (update) are supported.
		vobj(vOid,keysubs) shall contain the complete primary key
		vobj(vOid) shall contain the top node if one is associated with
			the table.
		vobj(vOid,node) is optional for all data nodes

	NOTES:
	*/
	type String vTbl = $$getReTable^UCGM(vobj(vOid,-1))

	type PSLTable vT = PSL.getPSLTable( vTbl, 0)
	type String vFlr = vT.filerPGM

	/* standardize and add debugs if needed */
	set vQual=$$fileQual^UCDB("Record.save",vQual)

	do Runtime.start("CS")		// start transaction

	/* block needed to protect IF-ELSE !! */
	if vFlr.isNull() do {
		#ACCEPT CR=21101;DATE=2005-11-29;PGM=FSCW;GROUP=MISMATCH
		if vT.isAutoLog do ^DBSLOGIT( vOid, vobj(vOid,-2))	// LOG if applicable
		do bypassSave( vOid)	// no filer, call bypassSave
	}
	else  set vFlr = "^"_ vFlr_ "(vOid,vQual)" do @vFlr	// call filer

	do Runtime.commit()		// commit transaction
	do ccAftSave( vOid, vT)		// common after save code

	quit

	/* ------------------------------------------------------------------ */
	/* MISCELLANEOUS (LOCAL) FUNCTIONS AND SUBROUTINES                    */
	/* ------------------------------------------------------------------ */

	// ---------------------------------------------------------------------
ccAftSave(	Number vOid,		// the Record instance (*1)
		PSLTable vT)
	/* ---------------------------------------------------------------------
	Common after-save after-bypassSave code:
	- Kill -100 tree
	- set RecordMode = existing record
	- if RDB update WHERE key= ...
	*/
	kill vobj(vOid,-100)
	set vobj(vOid,-2) = 1
	
	/* If RDB, update the WHERE key= */
	#ACCEPT CR=15592;DATE=2005-09-23;PGM=FSCW;GROUP=XECUTE
	if vT.isRdb xecute vT.getUpdateKey("vOid") 

	quit	
