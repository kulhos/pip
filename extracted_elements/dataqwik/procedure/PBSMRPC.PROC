//DO NOT MODIFY  MRPC Service Class Driver|PBSMRPC|||||||1
PBSMRPC(vzreply,vzstfflg,vzrecord,vzrectyp,vzcontxt)	//Private;M Remote Procedure Calls
	/*
	   ORIG: MATTSON - 11/08/93
	   DESC: M Remote Procedure Calls

	   ARGUMENTS:
	       . vzreply  Reply message  /TYP=T/REQ/MECH=REFNAM
	       . vzstfflg STF flag  /TYP=T/REQ/MECH=VAL
	       . rvzecord Input message  /TYP=T/REQ/MECH=VAL
	       . vzrectyp Record type  /TYP=N/REQ/MECH=VAL
	       . vzcontxt Context   /TYP=T/NOREQ/MECH=VAL

	   RETURNS:
	   . $$  Error code  /TYP=N/LEN=1


	  ------Revision History------------------------------------------------
	
	  12/15/06 - SHRIRAM - 24547
	  	     Added logic to handle authorization of restrictions. Modified
	  	     this procedure to handle new optional field vzfld(4) in the 
	  	     input record and generate an array containing override details.
	  	     
	  	     Added new sections SPV and APPLYOVR.
	  	     
	  	     The code for private MRPC's is removed. 
	  	     		 			
	  12/17/03 - CARROLLJ - CR7239
		     Added #ACCEPT prior to xecute command.

	  05/19/03 - Erik Scheetz - 51349
	  	     Replaced variable vzerror with rpcerror, which fixed an
	  	     error condition that falsely returned as successful to 
	  	     the Profile Server code (PBSSRV).  
	  	     
	  	     Modified code to avoid GTM-INDRMAXLEN errors when
		     the indrection string exceeds 2K.  Indirection string
		     now contains the vzx variables rather than their values.
	  	     
	  07/24/02 - SRIVASTAVAN - 49794
		     Converted To PSL
 
	  05/08/00 - SHANL - 39895
	             Modified the code to reference ^UTBL("RTNS" instead of
	             ^STBL("RTNS".

	   03/14/00 - TANY - 37587
	              Modified SCADAT calls by passing an additional
	              parameter to the calls to improve performance.
	              The parameter is a "1" which will return a known
	              julian date.

	*/
	new rpcerror,vzermsg,vzfld,vzlod,vzlog,vzlst,vzpar,vzptr
	new vld24x7,vzrpc,vzsav,vzver,vzx
	type public Boolean ER, vzrstflg
	type String vsupv(), verrors(,)
	
	set rpcerror=0 
	set ER=0

	// Public/private fields
	set vzptr=$$LV2V^MSG(vzrecord,.vzfld)
	
	// MRPC ID/pgm
	set vzrpc=$G(vzfld(1))
	
	// Version number
	set vzver=$G(vzfld(2))
	
	// Input parameters
	set vzpar=$G(vzfld(3))
	
	// Restriction/override information
	do SPV(vzfld(4).get(), .vsupv(), .vzrstflg)
	
	if vzrpc="" do { quit ER
		// Server Error - request message requires an MRPC ID
		set vzreply=$$CSERR^PBSUTL("SV_RPCIDREQ")
		if vzstfflg do STF(vzrecord,.vzreply)
		}

	// Public MRPC
	if vzrpc'["^" do { quit rpcerror
		if vzver="" do { quit
			set rpcerror=1
			// Server Error - request message requires a version number
			set vzreply=$$CSERR^PBSUTL("SV_VERSNREQ")
			if vzstfflg do STF(vzrecord,.vzreply)
			}

		type RecordSCATBL5 scatbl5=Db.getRecord("SCATBL5","RPCID=:vzrpc",1)
		set vzpgm=scatbl5.mrpc
		set vzlog=scatbl5.%sn

		if vzpgm="" do { quit
			set rpcerror=1
			// Server Error - the MRPC requested is not valid
			set vzreply=$$CSERR^PBSUTL("SV_INVLDRPC")
			if vzstfflg do STF(vzrecord,.vzreply)
			}

		new UCLS
		set UCLS="*"
		if 'Db.isDefined("SCATBL5A","RPCID=:vzrpc,UCLS=:%UserClass"),'Db.isDefined("SCATBL5A","RPCID=:vzrpc,UCLS=:UCLS") do { quit
			set rpcerror=1
			// Server Error - user is not authorized to execute MRPC
			set vzreply=$$CSERR^PBSUTL("SV_NOAUTRPC")
			if vzstfflg do STF(vzrecord,.vzreply)
			}

		if $G(%STFHOST) do { quit:rpcerror
			new rtn
			set rtn=$P(vzpgm,"(",1)
			if $E(rtn,1,2)="$$" set rtn=$E(rtn,3,$L(rtn))
			if $L(rtn,"^")'=2 set rtn="^"_rtn

			//VALID24X7
			type RecordUTBLRTNS utblrtns=Db.getRecord("UTBLRTNS","ROUTINE=:rtn",1)
			if utblrtns.valid24x7 quit

			// Access not allowed for MRPC ~p1 at this time
			set ER=1 
			set RM=$$^MSG(3247,vzrpc)
			set rpcerror=1 
			set vzreply=$$ERRMSG^PBSUTL($G(RM),$G(ET))
			if vzstfflg do STF(vzrecord,.vzreply)			
			}

		// Add parameters to MRPC; execute remote procedure call
		set vzptr=$$LV2V^MSG(vzpar,.vzx) 
		set vzpar=$$PARAM(.vzx)
		S vzx="S vzermsg="_vzpgm_"(.vzreply,vzver,"_vzpar_")"
		
		// Execute Remote Procedure Call
		#ACCEPT DATE=5/15/03;PGM=Erik Scheetz 
		xecute vzx
		
		if 'vzermsg.isNull() set rpcerror=1, vzreply = vzermsg
		else  if vzrstflg.get() do {
				if verrors.data() do APPLYOVR(.verrors(,), .vsupv())		
				if verrors.data() do {
					do Runtime.rollback()
					set rpcerror = 1
					set vzreply = $$OVRMSG^PBSMSQL(.verrors(,)) 
				}
		}
	}
	
	quit ""


exec()	//Private;Execute MRPC ($$tag^pgm) or stub (D @pgm)


	new vzsav
	if vzlst'="" set %RPC=vzlst
	if vzlod'="" do VLOD^PBSUTL(.vzlod)

	if $E(vzpgm,1,2)="$$" do {
		#ACCEPT DATE=12/17/03;PGM=John Carroll
		xecute "S vzx="_vzpgm
		}

	else  do @vzpgm set vzx=""

	if $G(ER),vzstfflg do STF(vzrecord,$$ERRMSG^PBSUTL($G(RM),$G(ET)))

	quit vzx


list()	//Private;Return ordered list of values specified by %RPC


	if $G(%RPC)="" quit ""
	if $P(%RPC,",",1)'=vzver set ER=1 quit ""

	new vz,vzi,vzx

	set vz=""
	for vzi=2:1 set vzx=$P(%RPC,",",vzi) quit:vzx=""  do {
		set $P(vz,$C(28),vzi-1)=$G(@vzx)
		}
	quit vz


STF(pkt,reply)	// Private; Store and forward handling of rejected updates

	/*
	   This subroutine logs the original client message to an exception
	   RMS file along with the application reply when the message is a
	   store and foward message and rejects.

	*/
	new io,JD,x,X

	set JD=+%CurrentDate
	set X=$$DAY^SCADAT(JD,1)_$$MON^SCADAT(JD,1)_$$YEAR^SCADAT(JD,1)
	set io=$$SCAU^%TRNLNM("SPOOL","STF_"_X_".MRPC")

	set x=$$FILE^%ZOPEN(io,"WRITE/APPEND/SHARE",2,16384)
	if 'x do STFGBL(pkt,.reply) quit

	use io

	// I18N=OFF
	write !

	//Log original client message to RMS
	write pkt,!

	//Log server/application reply to RMS
	write reply,!

	// I18N=ON
	close io

	set ER=0 
	set reply=""

	quit


STFGBL(pkt,reply)	// File record to global

	new i,%seq,%sq

	lock +STF(%UserID)
	
	set %sq=Db.nextVal("STF1","UID=:%UserID")

	type RecordSTF1 stf1=Class.new("RecordSTF1")
	set stf1.uid=%UserID
	set stf1.seq=%sq
	set stf1.tlo=%UserStation	
	do stf1.bypassSave()

	lock -STF(%UserID)

	type RecordSTF stf

	for i=1:400:$L(pkt) do {
		set %seq=i\400+1
		new STFMSG
		set STFMSG=$E(pkt,i,i+399)

		set stf=Class.new("RecordSTF")
		set stf.uid=%UserID
		set stf.seq=%sq
		set stf.sseq=%seq
		set stf.stfmsg=STFMSG
	
		do stf.bypassSave()	
		}

	for i=1:400:$L(reply) do {
		set %seq=%seq+1
		new STFMSG1
		set STFMSG1=$E(reply,i,i+399)
	 
		set stf=Class.new("RecordSTF")
                set stf.uid=%UserID
                set stf.seq=%sq
                set stf.sseq=%seq
                set stf.stfmsg=STMSG1
 
                do stf.bypassSave()
		}
	
	set ER=0
	set reply=""

	quit
	
SPV(String ovr, String vsupv() , Boolean vzrstflg)		//Convert override info to vsupv array
	
	type String vzrest(), spvarr()
	type String INDX, SPVUID, VZPTR1
	type Boolean DONE, ER=0
	type ByteString SPVREST
		
	if ovr="" set vzrstflg=0
	
	else  do {
		set VZPTR1=$$LV2V^MSG(ovr,.vzrest)
		set INDX=""
		
		for  set INDX=vzrest(INDX).order() quit:INDX.isNull()  do { quit:ER.get()!DONE.get() 
			set VZPTR1=$$LV2V^MSG(ovr,.spvarr)
			set SPVREST = spvarr(1)
			
			if SPVREST = 0 do {
				set vzrstflg = 0 
				set DONE = 1
				quit
			}
			
			if (SPVREST = 1 !(SPVREST = "*" & (CUVAR.AUTOAUTH = 1))) do {
				set vzrstflg = 1
				#IF (CUVAR.AUTOAUTH = 1) set vsupv("*") = %UserID
				set DONE = 1
			}
			set SPVUID = spvarr(2).get()
			
			if SPVUID.isNull() do {
				#IF (CUVAR.AUTOAUTH '= 0)
				  	set SPVUID = %UserID
				#ELSE  
					do Runtime.setErrMSG("CUVAR", 1504)	// Invalid user ID
				#ENDIF	
				
			} 
			else  do {
				// Invalid user ~p1
				if 'Db.isDefined("SCAU", "UID=:SPVUID") do Runtime.setErrMSG("SCAU", 7591, SPVUID) quit

				// Invalid password
				if '$$VALIDATE^SCADRV1(spvarr(3).get(),SPVUID) do Runtime.setErrMSG("SCAU",1419)
			}
			
			if (SPVREST["_") set SPVREST = SPVREST.piece("_",3)
			
			set vsupv(SPVREST) = SPVUID
			
			if SPVREST = "*" set DONE = 1
		}
		if vsupv.data() set vzrstflg = 1
	}
	
	quit
			
APPLYOVR(String verrors(,), String vsupv())	//Apply overrides to restrictions
	
	// Save overridden errors. In the event that all errors can not be overridden
	// they must be restored so all restrictions can be passed back to client.

	type String verrsav(,)
	type String ET, IDENT, REST, SEQ, SPVUID, TBL, UCLS, UCLSARR()
	type Boolean DONE
	type public Boolean ER
			
	set DONE = 0
	set REST = "", SEQ = ""

	for  set REST=verrors(REST).order() quit:REST.isNull()  do { quit:DONE
		for  set SEQ=verrors(REST, SEQ).order() quit:SEQ.isNull()  do { quit:DONE.get()!ER.get()
			set SPVUID = ""
			set ET = verrors(REST, SEQ).piece("|",3)
			if vsupv("*").exists() set SPVUID = vsupv("*")
			else  if vsupv(ET).exists() set SPVUID = vsupv(ET)
			
			// authorization not provided
			if SPVUID.isNull() set DONE = 1 quit
			
			// setup user class array
			if 'UCLSARR(SPVUID).exists() do {
				type RecordSCAU scau = Db.getRecord("SCAU", "UID = :SPVUID", 1)

				set UCLSARR(SPVUID)= scau.%ucls
			}
			set UCLS = UCLSARR(SPVUID)	
			if 'Db.isDefined("UTBLINT","ETYPE=:ET,UCLS=:UCLS") set DONE = 1 quit
			set TBL = verrors(REST).piece("|",1)
			set IDENT = verrors(REST).piece("|",2)
			if TBL = "CIF" do {
				type RecordDAYENDXBADC xbadc = Db.getRecord("DAYENDXBADC", "TJD=:%SystemDate,%UID=:SPVUID,ACN=:IDENT,SEQ=:REST,ET=:ET", 1)
				set xbadc.uid = SPVUID
				do xbadc.save()
			} 
			else  do {
				type RecordDAYENDXBAD xbad = Db.getRecord("DAYENDXBAD", "TJD=:%SystemDate,%UID=:SPVUID,CID=:IDENT,SEQ=:REST,ET=:ET", 1)
				set xbad.uid = SPVUID
				do xbad.save()
			}
			set verrsav(REST) = verrors(REST)
			set verrsav(REST, SEQ) = verrors(REST, SEQ)
			kill verrors(REST, SEQ)
			if verrors(REST).data() < 10 kill verrors(REST)
		}
	}
	
	if verrors.data() do {
		set REST = "", SEQ = ""	
		
		for  set REST=verrsav(REST).order() quit:REST.isNull()  do { 
			set verrors(REST) = verrsav(REST)
		
			for  set SEQ=verrsav(REST, SEQ).order() quit:SEQ.isNull()  do { 
				set verrors(REST, SEQ) = verrsav(REST, SEQ)	
			}
		}
	} 
	
	quit
	
PARAM(vzx)	// Create parameter string for indirection call

	type Number i
	type String str=""

	// build parameter string
	for i=1:1 quit:'vzx(i).data()  set str=str_"vzx("_i_"),"
	
	// remove trailing comma
	set str=str.extract(1,str.length()-1)
	
	quit str
