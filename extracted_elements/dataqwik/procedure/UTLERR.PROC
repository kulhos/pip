//DO NOT MODIFY  SCA error log and display utility|UTLERR|||||||1
public UTLERR	// SCA error log and display utility
	/*
	   Utility to handle all error trapping, logging, and displaying tasks
	   for both MUMPS and application errors.

	   Breaks are disabled during error logging only, and if disabled are
	   re-enabled based on previous value of break.
	   
	 *********************************************************************
	 * NOTE:  Do not add calls to $$^MSG.  If it is necessary to use the *
	 *  	  message utility, use the call to $$MSG in this procedure.  *
	 *********************************************************************
	 
	   INPUT:

	       . ET  		Error Type
	       . $$ETLOC^%ZT 	MUMPS Error

	       Optional:

	       . %ZTBELL  Ring bell on display of error message
	       . %ZTDSPET Display error type (when displaying error
			  message)
	       . %ZTHALT  Halt after error
	       . %ZTBRK  Break after error
	       . %ZTZQ  Execute ZQ prior to exit
	       . %ZTGO  GOTO the TAG^ROUTINE stored in %ZTGO instead
	       		of quitting ^UTLERR
	       . %ZTMAIL  Send mail to the list of users stored in
			  $P(^CUVAR("%ET"),"|",3)
	       . %ZTHANG  If set, the message "<RETURN> To Continue"
			will be displayed with the error message and
			a hang will be executed for the value of %ZTHANG
	       . %ZTCOM  The comment to be displayed in the error log.
	       . %ZTDY  The line number at which the error message will
			be displayed.

	   OUTPUT:
	       . RM  Error Message
	     	     RM(1) and RM(2) (optionally)
	       . %ZTSEQ  Error Number.

	       . %ZTPRIO  Registered priority level for error condition
			  (Range: 1-5 in order of severity)

	       . %ZTLOGD  Binary value (0 or 1) indicating whether this
			  error has been placed into an external log file
			  other than normal application database file.

	       . %NET  Network on-line flag - will be set to zero
		       if network error and on front-end processor

		 No variables beginning with %ZT will be returned out of
		 this routine, even if defined on entry, with the exception
		 of %ZTLOGD, %ZTPRIO, %ZTSEQ and %ZTX.  This implies that
		 any %ZT flags which are to be defined upon entry into this
		 error trap must be set each time prior to entry if the
		 %ZTHALT option is not used.

	   LIBRARY:  DSP  Displays on next line.
		     DSPBP Displays on bottom of page.
		     DSP22 Displays on line 22.
		     TOP  No display, returns RM only.
			  (Equivalent to NODSP tag.)
		     ZE  For MUMPS error trapping.

	---- Revision History -------------------------------------------------
	
	01/17/07 - RussellDS - CR24902 / 24974
		   Modified STKSAVE section to truncate system variable info
		   if too long, just as do with regular variables.
		   
		   Removed old revision history.
	
	09/12/06 - RussellDS - CR23019
		   Made same change as CR22445 to prevent $C(9) in other saved
		   data to the error log.
	
	08/03/06 - RussellDS - CR22445
		   Modified save section to replace $C(9) in a value with the
		   string "_$C(9)_" to avoid problems when accessing this data
		   through a result set.
		   
		   Modified RTNSAV section to truncate value for MUMPSZE to
		   maximum DB length.
		   
		   Modified code to avoid PSL warnings on object instantiation.
	
	05/09/06 - RussellDS - CR21340
		   Added missing parenthesis for %ZTLEN calculation in LOGIT
		   section.  Was not calculating correct length for variables
		   when saved to error log.
	
	03/26/06 - RussellDS - CR20360
		   Removed calls to $$^MSG and replaced with $$MSG to avoid
		   error loop.
		   
		   Eliminate call to ^%ZSHSAVE - bring code local to continue
		   to reduce calls to %routines.  This was the only call.
		   
		   Added saving of intrinisic variable info.
		   
		   Removed old revision history.
	
	03/14/06 - RussellDS - CR20135
		   Added comment in ZE section related to handling of DBFILER
		   errors.
		   
		   Eliminate PSL warning.
	
	01/24/05 - RussellDS - CR19204
		   Modify INIT section checking if SEQ is already used.  Old
		   code did not consider same number might be used for different
		   error types.
		   
		   Cleaned up PSL warnings re deprecated features.
	
	----------------------------------------------------------------------
	*/
	
	do NODSP
	
	quit
	

public NODSP	// Error not displayed

	type public Number %ZTDY
	
	type String %ZTINFO(,)

	catch vERROR {
		set $ZT=""
		do ^%ET quit
	}
	
	do SAVEINFO(.%ZTINFO(,))

	do Runtime.start("CS")
	do LOG
	do Runtime.commit()
	
	kill %ZTDY

	do PROC 

	quit
	

public DSP	// Error displayed on next line

	type public Number %ZTDY
	
	type String %ZTINFO(,)

	catch vERROR {
		set $ZT=""
		do ^%ET quit
	}
	
	do SAVEINFO(.%ZTINFO(,))

	do Runtime.start("CS")
	do LOG
	do Runtime.commit()
	
	set %ZTDY=0

	do PROC

	quit
	

public DSP22	// Error displayed on line 22

	type public Number %ZTDY
	
	type String %ZTINFO(,)

	catch vERROR {
		set $ZT=""
		do ^%ET quit
	}
	
	do SAVEINFO(.%ZTINFO(,))

	do Runtime.start("CS")
	do LOG
	do Runtime.commit()
	
	set %ZTDY=22

	do PROC

	quit
	

public DSPBP	// Error displayed at bottom of page

	type public Number %ZTDY
	
	type String %ZTINFO(,)

	catch vERROR {
		set $ZT=""
		do ^%ET quit
	}
	
	do SAVEINFO(.%ZTINFO(,))

	do Runtime.start("CS")
	do LOG
	do Runtime.commit()
	
	set %ZTDY=23

	do PROC

	quit
	

public ZE	// MUMPS errors

	type public Boolean %ZTLOG, ER, vVER
	type public Number %ZTDY, %ZTSEQ
	type public String RM, vVRM

	type String %ZTINFO(,), %ZTS, ET, KEY1

	catch vERROR {
		set $ZT=""
		do ^%ET quit
	}
	
	do SAVEINFO(.%ZTINFO(,))

	do Runtime.rollback()

	set %ZTS=$$ETLOC^%ZT
	quit:%ZTS.isNull()
	
	/* Handle filer application errors as a result of save methods.
	   vVER and vVRM are reserved variable names and are used to
	   ensure that the data gets back to the drivers, where ER and
	   RM may not if they have been protected in the stack.  This is
	   an interim approach pending a complete revision of error
	   handling.
	   
	   Since this does not log DBFILER errors, if it is desired to
	   do so, e.g., in batch processing, UTLERR should be called
	   from the top by the appropriate error handler.
	   
	   Once we revamp error handling, we'll probably want to remove this
	   or modify it and review any code that is specifically looking at
	   DBFILER errors.
	*/
	if %ZTS.piece(",", 1)="%PSL-E-DBFILER" do { quit
		set (ER, vVER) = 1
		set RM = %ZTS.piece(",", 4)
		if RM.isNull() set RM = $$MSG(3322, "DBFILER")	// ~p1 error
		set vVRM = RM
		set %ZTSEQ = ""
	}

	if %ZTS.piece(",",1)="INTERRUPT" write !!,%ZTS quit

	set ET=%ZTS.piece(",",1)

	// If replication is enabled and the error is generated on the secondary
	// machine, log the error to a system file to avoid database updates.
	if $$ROLE^PBSUTL="SECONDARY" do LOGFIL quit

	do Runtime.start("CS")
	do LOG

	if %ZTLOG do RTNSAV
	do Runtime.commit()

	// Turn on error flag
	set ER=1

	// Default is scroll
	if '%ZTDY.exists() set %ZTDY=0
	// Don't display
	else  if %ZTDY<0 kill %ZTDY

	do PROC

	quit
	

PROC	// Process the error

	type public Boolean %ZTBELL, %ZTBRK, %ZTDSPET, %ZTDSPSQ, %ZTENV, %ZTGO
	type public Boolean %ZTHALT, %ZTHANG, %ZTLOG, %ZTMAIL, %ZTZQ
	type public Number %ZTDY, %ZTI, %ZTLEN, %ZTSEQ
	type public String %ZTCOM, %ZTS, %ZTVAR, %ZTZE, %ZTZS, ET, RM()
	
	type String %ZTX

	kill RM

	set %ZTZE=%ZTZE.get()

	set %ZTX = ET.get()
	
	// Use %ZTX=" " avoid error on instantiation
	if %ZTX.isNull() set %ZTX = " "
	
	type RecordSTBLER stbler = Db.getRecord("STBLER", "KEY=:%ZTX", 1)

	if '%ZTX.isNull(),(stbler.getMode() <> 0) do {
		set RM(1)=stbler.rm
		set RM(2)=stbler.rm2
	}
	// Error not Defined
	else  do {
		set %ZTX = ""
		set stbler.key = ""
		set RM(1)=$S('%ZTZE.isNull():%ZTZE.piece(">",2,99),1:$$MSG(5364))
		set RM(2)=""
		set %ZTDSPET=1
	}

	if '%ZTBELL.exists() set %ZTBELL=stbler.bell
	if '%ZTDSPET.exists() set %ZTDSPET=stbler.dspet
	if %ZTDSPET set RM(1)="<"_ET_"> "_RM(1)
	if '%ZTDSPSQ.exists() set %ZTDSPSQ=1
	if %ZTLOG,%ZTDSPSQ set RM(1)="#"_%ZTSEQ_" "_RM(1)
	if '%ZTHALT.exists() set %ZTHALT=stbler.halt
	if '%ZTBRK.exists() set %ZTBRK=stbler.brk
	if '%ZTZQ.exists() set %ZTZQ=stbler.qafterr
	if '%ZTGO.exists() set %ZTGO=stbler.go

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	if '%ZTMAIL.exists() set %ZTMAIL=stbler.mail
	if %ZTMAIL,'cuvar.errmdft set %ZTMAIL=0

	if '%ZTHANG.exists() set %ZTHANG=+stbler.hang

	// Environment (default to batch) not currently used
	if '%ZTENV.exists() set %ZTENV=0

	do VARSUB
	do WRITE

	if RM(2).isNull() do {
		set %ZTX=RM(1)
		kill RM
		set RM=%ZTX
	}

	// Break requested in error trap
	if %ZTBRK break
	if %ZTMAIL do MAIL
	if %ZTHALT halt

	//I18N=OFF
	#ACCEPT Date=05/10/05; PGM=Dan Russell; CR=15943
	#BYPASS
	if %ZTZQ,$$^%ZSYS="GT.M" xecute "zgoto 1"
	#ENDBYPASS
	//I18N=ON

	set %ZTX=%ZTGO

	// Clean up %ZT* variables, except for %ZTX
	kill %ZTBELL,%ZTBRK,%ZTCOM,%ZTDSPET,%ZTDSPSQ,%ZTDY,%ZTENV
	kill %ZTGO,%ZTHALT,%ZTHANG,%ZTI,%ZTLEN,%ZTLOG,%ZTMAIL
	kill %ZTS,%ZTVAR,%ZTZE,%ZTZQ,%ZTZS

	if '%ZTX.isNull() do @%ZTX quit

	quit

LOG	// Log the error if required
	// Always log all MUMPS errors and save all variables
	
	type public Boolean %ZTLOG, %ZTLOGD
	type public Number %ZTPRIO
	type public String %ZTS, %ZTVAR, ET
	
	type Number %ZTERRNO
	type String %ET, %ZTCAT, %ZTDESC, %ZTZS

	//Global scope variables/instance
	kill %ZTPRIO,%ZTLOGD

	set %ET=""

	//Get Error info from $ZSTATUS, if defined
	set %ZTZS=%ZTS.get()

	//Default to stbler.id
	set %ZTCAT="STBLER"

	set %ZTERRNO=%ZTZS.piece(",",3)
	set %ZTDESC=%ZTZS.piece(",",4)
	if %ZTERRNO>0 set %ZTCAT="MERROR"

	set %ET=%ZTZS.piece(",",5)
	if %ET["." set %ET=%ET.piece(".",%ET.length("."))

	//Default to log the error
	set %ZTLOG=1

	//ET not set before calling error trap
	if ET.get().isNull() set ET=%ZTZS.piece(",",1)
	if ET.isNull() set ET="ETUNDEF"

	//ET is potentially re-formatted in %ZT
	if %ET.isNull() set %ET=ET

	if ET?1"<".E do {
		set ET=ET.extract(2,99)
		set %ZTVAR="ALL"
		set %ZTLOG=1
	}

	do LOGIT

	quit
	

LOGIT	//

	type public Boolean %ZTLOG, %ZTLOGD
	type public Number %ZTLEN, %ZTPRIO, %ZTSEQ
	type public String %, %ET, %ZTCAT, %ZTDESC, %ZTH, %ZTVAR, %ZTZE, ET, RM()
	
	type Number %ZJOB, %ZTI
	type String %ZTX

	// Don't allow interrupt during error logging.
	do DISABLE^%ZBREAK

	set %ZJOB=%ProcessID

	if '%ET.isNull(),Db.isDefined("STBLER","%ET") do {
		type RecordSTBLER stbler=Db.getRecord("STBLER","%ET")
		set RM(1)=stbler.rm
		set RM(2)=stbler.rm2
		
		do VARSUB
		
		set %ZTDESC=RM(1)
		set %ZTLOG=+stbler.log
	}
	//No ET defined, default to log
	else  set %ZTLOG=1

	if %ZTLOG do INIT

	/* 
	   Call External routine to return priority level.  If system is linked
	   to a central error facility, this call will also post an entry to
	   that log.
	   Based on level of severity, the error will set off an alarm.  This
	   will be determined in the API and the call will always be made from
	   the application.
	*/

	// Error log sequence number ~p1
	if %ZTSEQ.get() set %ZTDESC=%ZTDESC_" - "_$$MSG(3389,%ZTSEQ)

	// Return error priority level and post event
	set %ZTPRIO=$$ERRLOS^%ZFUNC(%ET,%ZTCAT,"",0,0,.%ZTDESC)

	//If error not found, it won't be logged
	if %ZTPRIO set %ZTLOGD=1

	//Don't log to ERROR table
	if '%ZTLOG quit

	kill %ZTZE

	set %ZTLOG=1

	// Get variables to save for this error
	if '%ZTVAR.exists() do {
		if 'ET.isNull(),Db.isDefined("STBLER","ET") do { quit
			type RecordSTBLER stbler=Db.getRecord("STBLER","ET")
			set %ZTVAR=stbler.var
		}
		set %ZTVAR="ALL"
	}

	/*
	   Determine the maximum size of the variable name that can
	   be used in the 5th subscript.  The M standard limits the
	   total length of the global name and subscripts (plus an
	   allowance of 2 times the number of subscripts) to 237.
	   The following calculation uses a value of 210 (typical
	   limit specified in GDE for PROFILE databases).
	*/

	set %ZTLEN=210-("ERROR".length()+%ZTH.length()+ET.length()+{String}%ZTSEQ.length()+11)

	if %ZTX.exists() do {
		type RecordERROR9 error9=Class.new("RecordERROR9", "DATE=:%ZTH,ET=:ET,SEQ=:%ZTSEQ,VAR='%ZTX'")

		set error9.value=%ZTX

		do error9.save()
	}
		
	if $$UPPER^%ZFUNC(%ZTVAR)="ALL" do {
		set %ZTX="%"
		if %.exists() do SAVE(%ZTX)
		for  set %ZTX=@%ZTX.order() quit:%ZTX.isNull()  do SAVE(%ZTX)
	}
	else  do {
		set %ZTX="%ZT"
		for  set %ZTX=@%ZTX.order() quit:%ZTX'?1"%ZT".E  do SAVE(%ZTX)
		for %ZTI=1:1 set %ZTX=%ZTVAR.piece(",",%ZTI) quit:%ZTX.isNull()  do SAVE(%ZTX)
	}

	// Move STORE error non-array variables back to ^ERROR
	if ET="STORE" do {
		type ResultSet rs=Db.select("VAR,VAL","TMPERR9","JOB=:%ZJOB")

		while rs.next() do {

			type RecordERROR9 error9=Class.new("RecordERROR9", "DATE=:%ZTH,ET=:ET,SEQ=:%ZTSEQ,VAR=:rs.getCol(""VAR"")")

			set error9.value=rs.getCol("VAL")
			
			do error9.save()
		}

		do Db.fastDelete("TMPERR9","JOB=:%ZJOB")
	}

	// Save stack related information
	do STKSAVE
	
	quit
	

SAVE(%ZTX)	// Save variables

	type String %ZTD, %ZTY

	if ",%ZTINFO,%ZTLEN,%ZTSEQ,%ZTX,"[(","_%ZTX_",") quit

	// Suppress warning due to .data used with indiretion
	#ACCEPT Date=03/14/06; Pgm=RussellDS; CR=20135
	set %ZTD=@%ZTX.data()

	if %ZTD#2 do {
		set %ZTY=@%ZTX
		do save(%ZTX)
	}

	for  set %ZTX=@%ZTX.query() quit:%ZTX.isNull()  do {
		set %ZTY=@%ZTX
		do save(%ZTX)
	}

	quit
	

save(%ZTX)	// Update error table

	type public Number %ZTLEN, %ZTSEQ
	type public String %ZTH, %ZTY, ET

	type String VAL

	if %ZTX.length()>%ZTLEN do {
		// Strip off last 5 bytes
		set %ZTX=%ZTX.extract(1,%ZTLEN-5)

		// Ensure quotes in string will be balanced
		for  quit:%ZTX.length("""")#2=0  set %ZTX=%ZTX.extract(1,%ZTX.length()-1)

		// Add ...") to indicate subscript was truncated
		set %ZTX=%ZTX_"..."")"
	}
	
	// Replace $C(9) to avoid problems with result sets on this data
	if %ZTY[$C(9) set %ZTY=%ZTY.replace($C(9),"_$C(9)_")

	set VAL=%ZTY.extract(1,400)

	type RecordERROR9 error9=Class.new("RecordERROR9", "DATE=:%ZTH,ET=:ET,SEQ=:%ZTSEQ,VAR=:%ZTX")

	set error9.value=VAL

	do error9.save()

	quit
	
	
SAVEINFO(String %ZTINFO(,))	// Save ZSHow info to %ZTINFO array

	/* This is called on entry to each entry point of UTLERR, prior to
	   rollbacks for transaction starts, in order to capture info like
	   $TLevel, $TRestart, that would be affected by these actions.
	*/
		
	zshow "DILS":%ZTINFO
	
	quit
	

STKSAVE	// Save device, lock, and stack information

	type public Number %ZTSEQ
	type public String %ZTH, %ZTINFO(,), ET

	type String DSC, I, J

	for I = "D", "I", "L", "S" if %ZTINFO(I).data() do {
		
		if (I = "D") set DSC = "#DEVICE"
		else  if (I = "I") set DSC = "#INTRINSIC"
		else  if (I = "L") set DSC = "#LOCK"
		else  set DSC = "#STACK"

		for J=1:1 quit:'%ZTINFO(I, J).exists()  do {
		
			type String DESC
			
			set DESC = DSC_J
		
			type RecordERROR9 error9=Class.new("RecordERROR9", "DATE=:%ZTH,ET=:ET,SEQ=:%ZTSEQ,VAR=:DESC")
		
			set error9.value=%ZTINFO(I, J).extract(1, 400)
			
			do error9.save()
		}
	}
	
	quit
	

INIT	// Set up top levels of error log

	type public Number %ZTSEQ
	type public String %DIR, %ZTCOM, %ZTH, ET

	type Date DTE
	type Number %ZBL, I, SEQ
	type String X, ZB

	set ZB=""

	// Translate control characters in $ZB
	set %ZBL=$L($ZB)
	for I=1:1:%ZBL do {
		set X=$E($ZB,I)
		set ZB=ZB_$S(X?1C:"^"_((X.ascii()+64)#128).char(),1:X)
	}

	set DTE=%CurrentDate
	
	// Get process unique sequence.  Allow up to 99 per second.  If
	// we're logging more than that per process, hang one second.
	do {
		
		type Number CNT = 1
		
		for  do { quit:'SEQ.isNull()
			
			set SEQ = 1000000 + %CurrentTime
			set SEQ = SEQ_({String}(1000000 + (%ProcessID # 1000000))).extract(2, 7)
			set SEQ = SEQ_({String}(100 + CNT)).extract(2, 3)
			
			type ResultSet rs = Db.select("SEQ", "ERROR", "DATE=:DTE AND SEQ=:SEQ")
			
			if 'rs.isEmpty() do {
			
				set SEQ = ""
				set CNT = CNT + 1
				if (CNT > 99) do {
					
					set CNT = 1
					hang 1
				}
			}
		}
	}
		
	type RecordERROR error=Class.new("RecordERROR", "DATE=:DTE,ET=:ET,SEQ=:SEQ")

	set error.uid=%UserID.get()
	set error.time=%CurrentTime
	set error.term=%UserStation.get()
	set error.job=%ProcessID
	set error.mumpsza=$ZA
	set error.mumpszb=ZB
	set error.dir=%DIR.get()
	set error.mpsztcom=%ZTCOM.get().replace($C(9),"_$C(9)_")

	do error.save()

	type RecordERROR9 error9=Class.new("RecordERROR9", "DATE=:DTE,ET=:ET,SEQ=:SEQ")

	if %ZTH.exists() do {
		set error9.var="%ZTH"
		set error9.value=%ZTH
		do error9.save()
	}

	if %ZTSEQ.exists() do {
		set error9.var="%ZTSEQ"
		set error9.value=%ZTSEQ
		do error9.save()
	}

	set %ZTH=%CurrentDate
	set %ZTSEQ=SEQ

	quit
	

WRITE	// Write out error message(s)

	type public Boolean %ZTBELL, %ZTHANG
	type public Number %ZTDY
	type public String %IPMODE, %ZTCOM, RM()
	
	type Number I
	type String MSG, X

	// Don't display message (entry at NODSP)
	if '%ZTDY.exists() quit
	if %IPMODE.get()["NOINT" quit

	if '%ZTCOM.exists() set %ZTCOM=""

	// Not running in interactive mode
	if '$$INTRACT^%ZFUNC quit

	//   <RETURN> to continue:
	set %ZTCOM=%ZTCOM.extract(1,50)_$S(%ZTHANG:$$MSG(5362),1:"")

	quit:'$$TERM^%ZOPEN(0,0)

	use 0
	if %ZTBELL write *7

	if %ZTDY set %ZTDY=%ZTDY-('RM(1).isNull())-('RM(2).isNull())+(%ZTCOM.isNull())

	for I=1,2 if 'RM(I).isNull() do {
		set MSG=RM(I)
		do WMSG
	}

	quit:%ZTCOM.isNull()

	set MSG=%ZTCOM do WMSG

	do TERM^%ZUSE(0,"FLUSH")
	//I18N=OFF
	#ACCEPT Date=09/13/06; Pgm=RussellDS; CR=23019; Group=BYPASS
	#BYPASS
	xecute "read X:%ZTHANG"
	#ENDBYPASS
	//I18N=ON
	
	quit
	

WMSG	// Write RM(1), RM(2), and continue messages

	type public Number %ZTDY
	type public String MSG

	if '%ZTDY write !
	else  do {
		write 27.char()_"["_(%ZTDY+1)_";0H"_27.char()_"[K"
		set $X=0,$Y=%ZTDY,%ZTDY=%ZTDY+1
	}

	write 27.char()_"[7m"
	write " "_MSG_" "_27.char()_"[0m"

	quit
	

RTNSAV	// Save routine info, last updated and error line text

	type public Number %ZTSEQ
	type public String %ZTH, %ZTZE, %ZTZS, ET

	type String ELOC, ERR, ETYP, L1, L2, OFF, RTN, SETYP, TAG, X, XLT

	do ET^%ZT(.SETYP,.ERR,.ETYP,.ELOC)

	//  Value of $ZS
	set %ZTZS=ERR.get()
	set %ZTZE=$$ETLOC^%ZT

	// Log the value of $ZS
	type RecordERROR9 error9=Class.new("RecordERROR9", "DATE=:%ZTH,ET=:ET,SEQ=:%ZTSEQ,VAR='#ZS'"))

	set error9.value=%ZTZS

	do error9.save()

	set RTN=ELOC.piece("^",2)
	set X=ELOC.piece("^",1)
	quit:RTN.isNull()

	set TAG=X.piece("+",1)
	set OFF=+X.piece("+",2)

	// No Routine
	set L1=$$MSG(5425)
	set L2=""

	do ^%ZRTNLOD(RTN,"X",1,.XLT)
	set L1=X(2).get()
	
	if 'TAG.isNull(),XLT(TAG).exists() set L2=X(XLT(TAG)+OFF).get()
	
	type RecordERROR error=Db.getRecord("ERROR","%ZTH,ET,%ZTSEQ")

	set error.mumpsze=%ZTZE.extract(1, 40)
	set error.line2=L1.replace($C(9),"_$C(9)_")
	set error.errline=L2.replace($C(9),"_$C(9)_")
	
	do error.save()
	
	quit


VARSUB	// Substitute variables into error message

	type Number I

	for I=1,2 do VSUB

	quit


VSUB	//

	type public Number I
	type public String RM()

	type Number X
	type String V

	set X=0

	for  set X=RM(I).find("<<",X) quit:X=0  do {
		if RM(I).extract(X+1,99).piece("<<",1)'[">>" quit

		set V=RM(I).extract(X,99).piece(">>",1)
		do V1
		set RM(I)=RM(I).extract(1,X-3)_V_RM(I).extract(X,99).piece(">>",2,99)
	}

	quit


V1	//

	type public String V

	if V.isNull()!V set V="<<"_V_">>" quit
	#ACCEPT DATE=12/30/03;PGM=John Carroll;CR=unknown
	if V.extract(1)="$",V["(",V[")" xecute "S V="_V quit
	if @V.exists() set V=@V quit
	set V=""

	quit


MAIL	// Send mail to users

	type public Boolean %ZTLOG
	type public Number %ZTSEQ
	type public String ET, RM()

	type Number I
	type String IO, MSG, SUBJ, USER, USERS, X

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set USERS=cuvar.errmail
	quit:USERS.isNull()

	set IO="MAIL"_%ProcessID_".TMP"

	//Directory specific spooler
	set X=cuvar.spldir

	//Logical reference to spooler
	if X.isNull() set X=$$SCAU^%TRNLNM("SPOOL")

	//System-wide spooler
	if X.isNull() set X=$$SCA^%TRNLNM("SPOOL")

	//User's home directory
	if X.isNull() set X=$$HOME^%TRNLNM

	//Can't open file
	quit:'$$FILE^%ZOPEN(IO,"WRITE/NEWV",1)

	// Error in job ~p1 .  User ID: ~p2
	use IO write !,$$MSG(5363,%ProcessID,$S(%UserID.exists():%UserID,1:"???")),!

	// Error type:  ~p1   log sequence ~p2
	if %ZTLOG write !,$$MSG(5366,ET,%ZTSEQ)
	// Error type:  ~p1   not loged
	else  write !,$$MSG(5913,ET),!

	if RM.data()=1 write !,RM
	else  write !,RM(1),!,RM(2)

	close IO

	// Error in job ~p1.  User ID: ~p2
	set SUBJ=$$MSG(5365)
	for I=1:1 set USER=USERS.piece(",",I) quit:USER.isNull()  do {
		set X=$$MAIL^%OSSCRPT(.MSG,USER,SUBJ,IO)
	}

	set X=$$DELETE^%OSSCRPT(IO)

	quit


STORE	// Handle store error - save and kill all non-array variables

	type public Number %ZTI
	type public String %, %ZTX
	
	type Number %ZJOB
	
	set %ZJOB=%ProcessID

	do Db.fastDelete("TMPERR9","JOB=:%ZJOB")

	type RecordTMPERR9 tmperr9=Class.new("RecordTMPERR9", "JOB=:%ZJOB")

	if %ZTX.exists() do {
		set tmperr9.var="%ZTX"
		set tmperr9.val=%ZTX
		do tmperr9.save()
	}
	
	if %ZTI.exists() do {
		set tmperr9.var="%ZTI"
		set tmperr9.val=%ZTI
		do tmperr9.save()
	}

	if %.exists() do {
		set tmperr9.var="%"
		set tmperr9.val=%
		do tmperr9.save()
	}

	set %ZTX="%"

	for %ZTI=1:1 set %ZTX=@%ZTX.order() quit:%ZTX.isNull()  do {
		if @%ZTX.exists(),",%ZTI,%ZTX,"'[(","_%ZTX_",") do {
		
			type RecordTMPERR9 tmperr9=Class.new("RecordTMPERR9", "JOB=:%ZJOB,VAR=:%ZTX")
		
			set tmperr9.val=@%ZTX

			do tmperr9.save()

			#ACCEPT Date=08/03/06; Pgm=RussellDS; CR=22445; GROUP=SCOPE
			kill @%ZTX
		}
	}

	quit
	

MSG(msgno,p1,p2)	//Private;Error message handler
	/*
	   To ensure UTLERR does not get into loop if message table is missing,
	   verify existence before calling $$^MSG, otherwise, handle with
	   hard-coded message.

	*/
	type String msg
	
	if Db.isDefined("STBLMSG","msgno") set msg=$$^MSG(msgno,p1.get(),p2.get())
	else  do {
		// I18N=OFF
		if msgno=3322 set msg = p1.get()_" error" quit
		if msgno=3389 set msg = "Error log sequence number "_p1.get() quit
		if msgno=5362 set msg="  Press return to continue:  " quit
		if msgno=5363 set msg="Error in job "_p1.get()_".  User ID: "_p2.get() quit
		if msgno=5364 set msg="Error not defined" quit
		if msgno=5365 set msg="Error processor message" quit
		if msgno=5366 set msg="Error type:  "_p1.get()_"  "_p2.get() quit
		if msgno=5425 set msg="No routine" quit
		if msgno=5913 set msg="Error type "_p1.get()_" Not logged" quit
		if msg.get().isNull() set msg="Unknown UTLERR message" quit
		// I18N=ON
	}
	
	quit msg


LOGFIL	//Log updates to a system file

	type String %ZTFILE

	set %ZTFILE=$$FILE^%TRNLNM("PROFILE_ERROR.LOG","SCAU$DIR")
	if '$$FILE^%ZOPEN(%ZTFILE,"WRITE/APPEND",2,1024) quit
	use %ZTFILE

	write !,"===================================================",!
	write $$DAT^%ZM(%CurrentDate,"DD-MON-YEAR")
	write $$TIM^%ZM(%CurrentTime,"24:60:SS")
	write !,"===================================================",!

	zshow "*"

	write !,"===================================================",!
	close %ZTFILE
	use 0
	
	quit	
