//DO NOT MODIFY  Methods of PSL Class Reference|UCREF|||||||1

	/*
	ORIG: Frans S.C. Witte 
	DESC: PSL Object Class Library - Methods of Class Reference 

	******** Revision History *********************************************
	12/23/05 - Frans S.C. Witte - CRs: 18727 / 18728
		Replaced this. by PSL. and removed #XECUTE

	10/26/04 - Frans S.C. Witte - CRs: 11441 / 11442
		Code from PSL procedure UCOBJECT moved to this PSL procedure.
		
	*/
	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

private copy	// method Reference.copy; Returns Reference
	/*
	INPUTS:
	. PSL.objectName

	OUTPUTS:
	. PSL.return = $$copy^UCGMR(PSL.objectName)
		OR	PSL.objectName (iff $$primVar^UCPRIM())

		Although the method applies to Reference classes only, the
		implementation of the class may be primitive.
	*/
	
	type String class=$$getClass^UCGM(PSL.objectName,PSL.objectLevel)
	
	if $$primVar^UCPRIM(class) set PSL.return=PSL.objectName
	else  	set PSL.return="$$copy^UCGMR("_PSL.objectName_")"
	quit
	

private equals	//method Reference.equals; Returns boolean
	/*
	INPUTS:
	. PSL.objectName
	. PSL.actual(1) = variable that references the second object to compare

	OUTPUTS:
	. PSL.return = $$equals^UCGMR(PSL.objectName,PSL.actual(1))
		OR	PSL.objectName = PSL.actual(1) (iff $$primVar^UCPRIM())

		Although the method applies to Reference classes only, the
		implementation of the class may be primitive.
	NOTES:
	* If comparing RecordXXX classes, need to turn Object optimization off.
	  However, even then the outcome depends on the nodes that have actually
	  been loaded from the database.
	*/
	
	type String class1,class2
	
	set class1=$$getClass^UCGM(PSL.objectName)
	set class2=$$getClass^UCGM(PSL.actual(1))

	if class1'=class2 do PSL.error("Objects must the same type") quit

	/* FSCW CR11441: replaced following two lines
	if class1="String" set PSL.return="("_PSL.objectName_"="_PSL.actual(1)_")"
	else  set PSL.return="$$equals^UCGMR("_PSL.objectName_","_PSL.actual(1)_")"
	*/
	if $$primVar^UCPRIM(class1) set PSL.return="("_PSL.objectName_"="_PSL.actual(1)_")"
	else  set PSL.return="$$equals^UCGMR("_PSL.objectName_","_PSL.actual(1)_")"
	quit
	

private getPointer     // method Reference.getPointer; returns Number (integer)
	/*
	INPUTS:
	. PSL.objectName
	. PSL.objectLevel
	. PSL.msrc

	OUTPUTS:
	. PSL.return = $GET(PSL.ObjectName)
	. object optimization unconditionally turned on
	*/

	do WARNDEP^UCGM("Reference.getPointer() - consider using Object.exists()")
	set PSL.return="$G("_PSL.objectName_")"
	if $$getOpti^UCGM(PSL.objectName,PSL.objectLevel)>PSL.msrc do setOpti^UCGM(PSL.objectName,PSL.objectLevel,0)
        quit
	

private getValue	// method Reference.getStoredValue(String tag)
	/*
	INPUTS:
	. PSL.objectName
	. PSL.actual(1) = name of runtime property /REQ
	
	OUTPUTS:
	. PSL.return = $GET(PSL.olvn(PSL.objectName,-999,PSL.actual(1)))

		Although method applies to Reference classes only, the
		implementation of the class may be primitive.
		In that case a compiletime error is returned.
	*/

	type String class=$$getClass^UCGM(PSL.objectName,PSL.objectLevel)	

	if $$primVar^UCPRIM(class) do PSL.error("Method is invalid for class with primitive implementation") quit
	if PSL.actual(1).isNull(1) do PSL.error("Tag parameter is required")

	set PSL.return="$G("_PSL.oLvn_"("_PSL.objectName_",-999,"_PSL.actual(1)_"))"

	quit


private setValue	// method Reference.setStoredValue(String tag,Object value)
	/*
	INPUTS:
	. PSL.objectName
	. PSL.actual(1) = name of runtime property /REQ
	. PSL.actual(2) = value of runtime property /REQ
	
	OUTPUTS:
	. PSL.return = vObjStor(PSL.objectName,PSL.actual(1),PSL.actual(2))
	. new PSLBuffer with vObjStor

		Although method applies to Reference classes only, the
		implementation of the class may be primitive.
		In that case a compiletime error is returned.
	*/

	type String class=$$getClass^UCGM(PSL.objectName,PSL.objectLevel)	

	// if class.isPrimitive() do PSL.error("Method is invalid for Primitive objects") quit

	if $$primVar^UCPRIM(class) do PSL.error("Method is invalid for class with primitive implementation") quit
	if PSL.actual(1).isNull(1) do PSL.error("Tag parameter is required")
 
        type String label="vObjStor"
 
	if 'PSL.subrouExists(label) do {
        
		type PSLBuffer buf=PSL.openBuffer("(String object,String p1,String p2)","Object.storeValue")
		do buf.add("type Public String "_PSL.oLvn)
		do buf.add("if object.get().isNull() quit")
		do buf.add("set "_PSL.oLvn_"(object,-999,p1)=p2.get()")
		do buf.add("quit")
		do buf.insert(label)
	}
 
        set PSL.return=label_"("_PSL.objectName_","_PSL.actual(1)_","_PSL.actual(2)_")"
	quit


private toString	// method Reference.toString; Returns String
	/*
	INPUTS:
	. PSL.objectName
	
	OUTPUTS:
	. PSL.return = $$toString^UCGMR(PSL.objectName)
		OR	PSL.objectName (iff $$primVar^UCPRIM())

		Although method applies to Reference classes only, the
		implementation of the class may be primitive.
	*/
	
	type String class=$$getClass^UCGM(PSL.objectName,PSL.objectLevel)
	
	if $$primVar^UCPRIM(class) set PSL.return=PSL.objectName
	else  set PSL.return="$$toString^UCGMR("_PSL.objectName_")"
	quit
	
