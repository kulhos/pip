//DO NOT MODIFY  Class Class methods|UCCLASS|||||||1
	/*
	ORIG: FSANCHEZ - 04/06/98
	DESC: Library of class methods

	----- Revision History -------------------------------------------------
	03/13/06 - Frans S.C. Witte - CRs: 20280 / 18164
		$$clsRel() copied from UCLABEL

	01/20/06 - Frans S.C. Witte - CRs: 18163 / 18164
		Modified signature of and call to newObj^UCCLASS

	12/27/05 - Frans S.C. Witte - CRs: 18727 / 18728
		Modified clasNew to use lvns instead of RecordOBJECT properties
		because modifying properties without Record.save may not be
		handled correctly by the compiler.

	08/22/05 - Frans S.C. Witte - CRs: 15592 / 15593
		Replaced global reference with call to UCXDD.
		Replaced "this." by "PSL."
		Added function $$cdNewObj() to return code to instantiate a new
		object.

	01/11/05 - Frans S.C. Witte - CRs: 11443 / 11444
		Removed code that has been commented out by previous CRs.

	10/12/04 - Frans S.C. Witte - CRs: 9793, 11445 / 11446
		Migrated M source to PSL source.
		Corrected behavior for Class.new() for Primitive classes and
		Reference classes with primitive internal representation.
		Added default behavior for second parameter of Class.new() for
		the above classes.
		Added implementation of Class.isAncestor(), Class.isClass(), and
		Class.isDescendant(), and deprecation warning for Class.isValid().

	05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

	02/14/03 - Sanchez/SPIER - 51423
		Bug fixes

	10/15/02 - Sanchez - 51089
		Modifications for v7.0 enhancements

	*/
	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit


	/* ****************************************************************** */
private classNew	// method Class.new ; returns any
	/* INPUTS:
	. PSL.actual(1) = literal String className
	. PSL.actual(2) = Object instParam
	
	OUTPUTS:
	. PSL.return = instantiation expression. This can be:
		* $$vNewObj(className) (if standard object, without constructor)
		* PSL.actual(2) (or "") (if class implementation uses primitive type)
		* value returned by constructor
	. ER = 1 if undefined class
	*/
	type public Number ER
	type RecordOBJECT z
	type String cls = PSL.actual(1).stripQuotes()
	type Boolean abstr = 0, noinst = 0
	type String constr
	set PSL.class = cls

	if PSL.isRecord( PSL.class), PSL.class'=PSL.reClass do {

		type String table = PSL.class.extract(PSL.reClass.length()+1,PSL.class.length())

		if '$$isTable^UCXDD(table) do ERROR^UCGM("Invalid DATA-QWIK table: "_table) quit

		if 'Db.isDefined("OBJECT", "CLASS=:cls") set cls = PSL.reClass
		set z = Db.getRecord("OBJECT", "CLASS=:cls")
		set constr = z.constructor
		if constr.isNull()!(cls=PSL.reClass) set constr = "new^UCRECORD"
	}
	else  do { 
		if 'Db.isDefined("OBJECT", "CLASS=:cls") do ERROR^UCGM( "Undefined class: "_cls) quit
		set z = Db.getRecord("OBJECT", "CLASS=:cls")
		set abstr  = z.abstract
		set noinst = z.noinstant
		set constr = z.constructor
	}
	if ER quit

	if abstr  do ERROR^UCGM("Illegal reference to abstract class: "_PSL.class) quit
	if noinst do ERROR^UCGM("Class is not instantiable: "_PSL.class) quit

	if constr.isNull() do {
		if $$primVar^UCPRIM( PSL.class) do {
			if PSL.actual(2).isNull() set PSL.actual(2) = PSL.actual(2).addQuotes()
			set PSL.return = PSL.actual(2)
		}
		else  set PSL.return=$$newObj(PSL.class)
	}
	else  do @constr			// Call class constructor
	quit

	// ---------------------------------------------------------------------
clsRel( String clsfp,	// class of formal parameter		/MECH=VAL
	String clsap)	// class of actual parameter		/MECH=VAL
	/* ---------------------------------------------------------------------
	Return the relationship between two classes.

	INPUTS:
	. primtyp() and reClass for calls to ^UCGM() and ^UCPRIM()

	OUTPUTS:
	. $$ =	0 if classes are not related (probably an error)
		1 if classes are equal, or if the class of the actual parameter
		  is a subclass of the class of the formal parameter,
		  or if both classes have a primitive implementation
		2 if the class of the actual parameter is a superclass of the
		  class of the formal parameter.
	*/

	if clsfp="" set clsfp="Primitive"
	if clsap="" set clsap="Primitive"

	if clsfp=clsap!(clsfp="Object") quit 1

	/* All classes with primitive implementation are considered (correctly)
	   related for now.
	*/
	if $$primDes^UCPRIM(clsfp)>0,$$primDes^UCPRIM(clsap)>0 quit 1

	if Class.isAncestor(clsfp,clsap) quit 1
	if Class.isDescendant(clsfp,clsap) quit 2
	quit 0


	/* ****************************************************************** */
private isAncestor	// Method Class.isAncestor ; Returns Boolean
	/* INPUTS:
	. PSL.actual(1) = name of ancestor class
	. PSL.actual(2) = name of descendant class

	OUTPUTS:
	. PSL.return = "$$ClsIsAnc^UCGMR(PSL.actual(1),PSL.actual(2))" or its
	  value if both are literal.
	*/
	if PSL.actual(1).isNull() do ERROR^UCGM("Ancestor parameter required") quit
	if PSL.actual(2).isNull() do ERROR^UCGM("Descendant parameter required") quit

 	set PSL.return="$$clsIsAnc^UCGMR(" _ PSL.actual(1) _ "," _ PSL.actual(2) _ ")"
 	if PSL.actual(1).isLiteral(), PSL.actual(2).isLiteral() do {
		#ACCEPT DATE=10/12/04; PGM=FSCW; CR=11445
 		xecute "set return=" _ PSL.return
 		if PSL.return.isNull() set PSL.return=""""""
 	}
	quit


	/* ****************************************************************** */
private isClass	// Method Class.isClass ; Returns Boolean
	/* INPUTS:
	. PSL.actual(1) = name of class

	OUTPUTS:
	. PSL.return = ''$DATA(^OBJECT(PSL.actual(1)))
	*/
	if PSL.actual(1).isNull(1) do ERROR^UCGM("Class name required") quit

 	set PSL.return="$$clsIsClass^UCGMR(" _ PSL.actual(1) _ ")"
 	if PSL.actual(1).isLiteral() do {
		#ACCEPT Date=10/12/04; PGM=FSCW; CR=11445
 		xecute "set return=" _ PSL.return
 		if PSL.return.isNull() set PSL.return = """"""
 	}
	quit


	/* ****************************************************************** */
private isDescendant	// Method Class.isDescendant ; Returns Boolean
	/* INPUTS:
	. PSL.actual(1) = name of descendant class
	. PSL.actual(2) = name of parent class

	OUTPUTS:
	. PSL.return = "$$ClsIsAnc^UCGMR(PSL.actual(2),PSL.actual(1))" or its
	  value if both are literal.
	*/
	if PSL.actual(1).isNull() do ERROR^UCGM("Descendant parameter required") quit
	if PSL.actual(2).isNull() do ERROR^UCGM("Ancestor parameter required") quit

 	set PSL.return="$$clsIsAnc^UCGMR(" _ PSL.actual(2) _ "," _ PSL.actual(1) _ ")"
 	if PSL.actual(1).isLiteral(), PSL.actual(2).isLiteral() do {
		#ACCEPT DATE=10/12/04; PGM=FSCW; CR=11445
 		xecute "set return=" _ PSL.return
 		if PSL.return.isNull() set PSL.return = """"""
 	}
	quit


	/* ****************************************************************** */
private isValid	// Method Class.isValid ; Returns Boolean
	/* INPUTS:
	. PSL.actual(1) = object id

	OUTPUTS:
	. PSL.return = '$DATA(vobj(+$G(PSL.actual(1))))
	. PSL.return = runtime object type (vobj(oid,-1)) equals specified class
	
	*/
	do WARNDEP^UCGM("Class.isValid - use Object.exists")
	if PSL.actual(1).isNull(1) do ERROR^UCGM("Reference object required") quit
	if PSL.actual(1).extract()="." set PSL.actual(1) = PSL.actual(1).extract(2, PSL.actual(1).length())
	;
 	set PSL.return="$D(" _ PSL.oLvn _ "(+$G("_ PSL.actual(1) _ ")))"
	quit


	/* ****************************************************************** */
private newObj( String class)	// name of class
	/*
	CALLED BY:
	. getTran^UCTS
	. classNew^UCROWSET
	*/
	type String label = "vClNew"		// label to be added if needed

	if 'PSL.subrouExists( label) do {

		type PSLSubrou sr = PSL.addSubrou( label, "(vCls)", "Create a new object")
		do sr.addCode( " N vOid")
		do sr.addCode( $$cdNewObj("vOid","vCls"))
		do sr.addCode( " Q vOid")
	}

	quit "$$"_label_"("""_class_""")"

	// ---------------------------------------------------------------------
private cdNewObj( PSLIdentifier objInst,	// object instance variable
		PSLExpression   objClass)	// object class expression
	/* ---------------------------------------------------------------------
	Helper function that returns the M code to create a new object of the
	specified class. Like the $$cdXxxYyy functions in UCXDD this is a
	low-level function that can be called by different PSL compiler
	subroutines that need to create an object instance while still
	maintaining a single place that constrcuts such code.

	NOTES:
	. because this code may be called at runtime, PSL.oLvn cannot be used.
	*/
	type literal String oLvn = "vobj"

	quit " S "_ objInst_ "=$O("_ oLvn_ "(""""),-1)+1,"_oLvn _ "("_ objInst_ ",-1)="_ objClass
