MRPC003(return,versn,ETC,CID,EFD,SELECT,QUAL,MSCINP)	;Public;Transaction Qualifiers and SQL ; Procedure MRPC003 - Transaction Qualifiers and SQL
	;;Copyright(c)2003 Sanchez Computer Associates, Inc.  All Rights Reserved - 02/27/03 15:49 - CARROLLJ
	;
	; **** This is a DATA-QWIK generated routine (level 25) ****
	;
	; Version number of client message is not compatible with server
	I $G(versn)=1 Q $$V1(.return,versn,ETC,CID,EFD)
	;
	I $G(versn)>3 Q $$ERRMSG^PBSUTL($$^MSG(2951))
	;
	S STACK=$Tlevel Tstart (vobj):transactionid="BA"
	S RETURN=$$START()
	I $Tlevel Trollback STACK 
	Q RETURN
	;
START()	;
	N CRCD,DATA,fld,i,IRCB,MFT,MFREQ,pobs,PP,qlf,req,RETURN,retval,sort,x
	;
	I '$D(%O) N %O S %O=0
	I 'EFD S EFD=TJD
	S ER=0
	;
	N acn S acn=$$vDb1(CID)
	;
	; Set ETC value if user requests it by entering *CR or *DR.
	S vobj(acn,49)=$G(^ACN(vobj(acn,-3),49))
	;
	I $E(ETC)="*" S ETC=$$GETETC(ETC,$P(vobj(acn,50),"|",1))
	;
	N trn
	;
	D
	. N $ZT S $ZT="D ZX^UCGMR("_+$O(vobj(""),-1)_","_$ZL_",""vtrap1^"_$T(+0)_""")"
	. ;
	. S trn=$$vCa1(ETC)
	. N vo4
	. S vo4=vobj(trn,-3)
	. S vobj(trn,0)=$$vCa1N(vo4,0)
	. S vobj(trn,2)=$$vCa1N(vo4,2)
	. S vobj(trn,5)=$$vCa1N(vo4,5)
	. ;
	. Q 
	; Invalid transaction code ~p1
	I ETC="" D SETERR^DBSEXECU("TRN","MSG",1498) K vobj(+$G(acn)),vobj(+$G(trn)) Q $$ERRMSG^PBSUTL(RM)
	;
	; Check for record level protection on the account.
	I $P(vobj(trn,0),"|",3)'="M" D  I ER K vobj(+$G(acn)),vobj(+$G(trn)) Q $$ERRMSG^PBSUTL(RM)
	. ; Protect %ProcessMode value, but it has to be 1 for UACN call
	. N %O
	. S %O=1
	. D PROT^UACN
	. Q 
	;
	S PP(ETC)=$P(vobj(trn,2),"|",1)
	;
	I "DL"[$P(vobj(trn,0),"|",3) D  I ER K vobj(+$G(acn)),vobj(+$G(trn)) Q $$ERRMSG^PBSUTL($G(RM),$G(ET))
	. ;
	. D ETCCID^TTXEXT(.trn,CID) Q:ER 
	. ;
	. ; Record not found
	. N V1 S V1=vobj(acn,-3) I '$D(^ACN(V1,50)) D SETERR^DBSEXECU("ACN","MSG",2335) Q 
	. ;
	. S CRCD=$P(vobj(acn,50),"|",12)
	. ;
	. I $P(vobj(trn,0),"|",3)="L" D
	..  ; Interest Rate Calculation Base
	..  S IRCB=$P(vobj(acn,49),"|",12)
	..  Q 
	. ;
	. I $P(vobj(trn,0),"|",3)="D" D
	..  ; Interest Rate Calculation Base
	..  S IRCB=$P(vobj(acn,49),"|",12)
	..  Q 
	. Q 
	;
	D MFT^CRTMF
	;
	S MFREQ=$$PROC($P(vobj(trn,0),"|",3),.MFT)
	;
	D POBS^TTXRPC(.pobs)
	;
	S (fld,qlf,return)=""
	;
	; For misc transactions, only handle service fee default amount
	I $P(vobj(trn,0),"|",3)="M" D  I ER K vobj(+$G(acn)),vobj(+$G(trn)) Q $$ERRMSG^PBSUTL($G(RM),$G(ET))
	. ;
	. I $P(vobj(trn,0),"|",4)'="FEE" Q 
	. I $G(MSCINP)="" Q 
	. S DFT("AMT")=$$SRVFEE(MSCINP)
	. I DFT("AMT") S sort("D","AMT")=DFT("AMT")
	. Q 
	;
	E  I $G(PP(ETC))'="" D  I ER K vobj(+$G(acn)),vobj(+$G(trn)) Q $$ERRMSG^PBSUTL($G(RM))
	. XECUTE PP(ETC)
	. I '$D(DFT("AMT")) Q 
	. S sort("D","AMT")=DFT("AMT")
	. Q 
	;
	; Implement Variable Amount field
	N VARTAMT
	;
	S VARTAMT=$P(vobj(trn,0),"|",31)
	;
	I $G(VARTAMT)'="" D
	. ; Bypass code review error of hardcoded languange phrase
	. ; I18N=OFF
	. N SQLCMD,VARFID,VARDI
	. ;
	. S VARFID=$P(VARTAMT,".",1)
	. S VARDI=$P(VARTAMT,".",2)
	. S SQLCMD="D SELECT^SQL("_""""
	. S SQLCMD=SQLCMD_VARDI_" FROM "_VARFID_" WHERE CID=:CID"
	. S SQLCMD=SQLCMD_""""_",,,.VARTAMT"_")"
	. ;
	. ; I18N=ON
	. XECUTE SQLCMD
	. S sort("D","AMT")=VARTAMT
	. Q 
	;
	N PCFD21,VDT
	;
	; Value Date to Next Accrual Calc Date
	S PCFD21=$P(vobj(trn,5),"|",21)
	;
	; Value Date to next Accrual Calc Period
	; if Interest rate Calc Base is 6
	I PCFD21,IRCB=6 S VDT=$$VALNACP^DEPLBB(.acn,EFD) N vpc S vpc=(ER) K:vpc vobj(+$G(acn)),vobj(+$G(trn)) Q:vpc 
	E  S VDT=""
	;
	I VDT D
	. S VDT=$$DAT^%ZM(VDT)
	. S sort("V","VDT")=VDT
	. Q 
	;
	; Check to see if IRA and withholding required
	I $P(vobj(trn,0),"|",3)="D",'$E($P(vobj(trn,0),"|",1)) D  I ER K vobj(+$G(trn)) Q $$ERRMSG^PBSUTL($G(RM),$G(ET))
	. ;
	. N dep
	. S dep=acn
	. N vo2,vo3
	. S vo2=$G(vobj(dep,-2)),vo3=vobj(dep,-3)
	. S:$D(vobj(dep,51))=0 vobj(dep,51)=$S(vo2:$G(^ACN(vo3,51)),1:"")
	. S:$D(vobj(dep,99))=0 vobj(dep,99)=$S(vo2:$G(^ACN(vo3,99)),1:"")
	. ;
	. ;
	. ; Close Acct and Prohibit Further Proc
	. I $P(vobj(trn,5),"|",5)=1 Q 
	. ;
	. ; don't set support fields for PRA w/h manual adj.
	. I ("^DEPBW"]$P(vobj(trn,0),"|",5))!("^DEPBW"]$P(vobj(trn,0),"|",8)) Q 
	. ;
	. I $P(vobj(dep,51),"|",34)="" Q 
	. ;
	. N iratype S iratype=$$vDb3($P(vobj(dep,99),"|",1),$P(vobj(dep,51),"|",34))
	. ;
	. ; Record not found
	. N V1,V2 S V1=vobj(iratype,-3),V2=vobj(iratype,-4) I '$D(^IRA(V1,V2))#2 D SETERR^DBSEXECU("IRATYPE","MSG",2335) K vobj(+$G(iratype)) Q 
	. ;
	. I '$P(vobj(iratype),"|",29) K vobj(+$G(iratype)) Q 
	. ;
	. ; Withholding required indicator
	. N cuvar S cuvar=$$vDb4()
	. S vobj(cuvar,"DEP")=$G(^CUVAR("DEP"))
	. ;
	. I $P(vobj(cuvar,"DEP"),"|",11) D
	..  S sort("Q",61)=1
	..  S sort("Q",62)=1
	..  Q 
	. K vobj(+$G(cuvar)),vobj(+$G(iratype)) Q 
	;
	F i=1:1 S x=$P(MFREQ,",",i) Q:x=""  D
	. S qlf=$P(x,"/",1)
	. S req=$P(x,"/",2)
	. ;
	. I req["REQ" S req=1
	. ;
	. N stbltsd S stbltsd=$$vDb5(qlf)
	. N utblztsd S utblztsd=$$vDb6(qlf)
	. ;
	. I qlf<1000 S acro=$P(vobj(stbltsd),"|",1)
	. ;
	. I qlf>999 S acro=$P(vobj(utblztsd),"|",1)
	. ;
	. I acro="TCMT" S fld="T"
	. E  I $D(pobs("TSSP","MSC",acro)) S fld="M"
	. E  I $D(pobs("TSSP","PSI",acro)) S fld="P"
	. E  I $D(pobs("TSSP","QLF",acro)) S fld="Q"
	. E  K vobj(+$G(stbltsd)),vobj(+$G(utblztsd)) Q 
	. ;
	. I $G(sort(fld,qlf))'="" S sort(fld,qlf)=req_"="_sort(fld,qlf)
	. E  S sort(fld,qlf)=+req
	. K vobj(+$G(stbltsd)),vobj(+$G(utblztsd)) Q 
	;
	I $G(versn)=2 D
	. ;
	. K vobj(+$G(trn)) S trn=$$vDb7(ETC)
	. S vobj(trn,3)=$$vCa1N(vobj(trn,-3),3)
	. ;
	. S DATA=$P(vobj(trn,3),"|",29)_$C(9)_$P(vobj(trn,3),"|",1)_$C(9)_$P(vobj(trn,3),"|",3)_$C(9)_$P(vobj(trn,3),"|",4)
	. S DATA=DATA_$C(9)_$P(vobj(trn,3),"|",30)_$C(9)_$P(vobj(trn,3),"|",7)_$C(9)_$P(vobj(trn,3),"|",9)
	. S DATA=DATA_$C(9)_$P(vobj(trn,3),"|",10)_$C(9)_$P(vobj(trn,3),"|",31)_$C(9)_$P(vobj(trn,3),"|",13)
	. S DATA=DATA_$C(9)_$P(vobj(trn,3),"|",15)_$C(9)_$P(vobj(trn,3),"|",16)_$C(9)_$P(vobj(trn,3),"|",32)
	. S DATA=DATA_$C(9)_$P(vobj(trn,3),"|",19)_$C(9)_$P(vobj(trn,3),"|",21)_$C(9)_$P(vobj(trn,3),"|",22)
	. ;
	. N MFVAR
	. I $G(DATA)'="" F i=1:4:16 S XCODE=$P(DATA,$C(9),i) I XCODE'="" D
	..  S XCODE=$$LTRIM^%ZS(XCODE)
	..  S MFVAR=$P(DATA,$C(9),i+1)
	..  I MFVAR="" Q 
	..  ;
	..  ; set default value
	..  S @MFVAR=$P(DATA,$C(9),i+3)
	..  S VAR=$P($E(XCODE,3,1000),"=",1)
	..  ;
	..  ; Execute the processer if it sets our MFVAR field
	..  I VAR=$P(DATA,$C(9),i+1) D
	...   I $E(XCODE,1,2)'="S " Q 
	...   XECUTE XCODE
	...   Q 
	..  S sort("M",MFVAR)=+$P(DATA,$C(9),i+2)_"="_@MFVAR
	..  Q 
	. Q 
	;
	I $G(versn)=3 D
	. ; Version 3 - execute post processor if it sets a value.
	. N DEFAULT,REQD,SUPDATA,SEQ,VAR,XCODE
	. S SEQ=""
	. ;
	. N trnsd
	. ;
	. N rs S rs=$$vOpen1()
	. I ''$G(vobj(rs,0)) F  Q:'($$vFetch1(rs))  D
	..  S SEQ=vobj(rs)
	..  K vobj(+$G(trnsd)) S trnsd=$$vDb8(ETC,SEQ)
	..  S REQD=$P(vobj(trnsd),"|",6)
	..  S DEFAULT=$P(vobj(trnsd),"|",5)
	..  S SUPDATA=$P(vobj(trnsd),"|",1)
	..  ;
	..  ; Set the preprocessor and acronym
	..  I SUPDATA<1000 D
	...   N stbltsd S stbltsd=$$vDb5(SUPDATA)
	...   S XCODE=$P(vobj(stbltsd),"|",6)
	...   S ACRO=$P(vobj(stbltsd),"|",1)
	...   K vobj(+$G(stbltsd)) Q 
	..  I SUPDATA>999 D
	...   N utblztsd S utblztsd=$$vDb6(SUPDATA)
	...   S XCODE=$P(vobj(utblztsd),"|",6)
	...   S ACRO=$P(vobj(utblztsd),"|",1)
	...   K vobj(+$G(utblztsd)) Q 
	..  ;
	..  S XCODE=$$LTRIM^%ZS(XCODE)
	..  S @ACRO=DEFAULT
	..  S VAR=$P($E(XCODE,3,1000),"=",1)
	..  ;
	..  I VAR=ACRO D
	...   I $E(XCODE,1,2)'="S " Q 
	...   XECUTE XCODE
	...   Q 
	..  ; If preprocessor exists, return field.
	..  I XCODE'="" S sort("M",SUPDATA)=REQD_"="_@ACRO
	..  Q 
	. K vobj(+$G(rs)),vobj(+$G(trnsd)) Q 
	S (fld,qlf)=""
	F  S fld=$O(sort(fld)) Q:fld=""  D
	. S retval=""
	. F  S qlf=$O(sort(fld,qlf)) D  Q:qlf="" 
	..  I qlf="" D  Q 
	...   S return=return_$$V2LV^MSG(fld_","_$E(retval,1,$L(retval)-1))
	...   Q 
	..  S retval=retval_qlf_"="_sort(fld,qlf)_","
	..  Q 
	. Q 
	;
	I $G(SELECT)'="" D
	. N data,I,PARAM,stmt,SQLPARAM
	. ;
	. N token S token=$$vDb9(%TOKEN)
	. S PARAM=$P(vobj(token),"|",10)
	. S SQLPARAM=""
	. F I=1:1:$L(PARAM,"/") I $P(PARAM,"/",I)["PROT"!($P(PARAM,"/",I)["DQMODE") S SQLPARAM=SQLPARAM_"/"_$P(PARAM,"/",I)
	. S stmt=$P(SELECT," ",2,999)
	. D SELECT^SQL(stmt,$G(QUAL)_SQLPARAM,,.data) N vpc S vpc=(ER) K:vpc vobj(+$G(token)) Q:vpc 
	. ;
	. S return=return_$$V2LV^MSG("S,"_data)
	. K vobj(+$G(token)) Q 
	;
	I ER K vobj(+$G(trn)) Q $$ERRMSG^PBSUTL(RM)
	K vobj(+$G(trn)) Q ""
	;
PROC(cls,mft)	;  Process MFT array from CRTMF
	;
	N i,%READ,x
	S %READ=""
	F i=1:1 S x=$G(mft(cls,i)) Q:x=""!(ER)  D BLDSCR^CRTMF(x,1)
	Q %READ
	;
SRVFEE(trn,INPUT)	;Private; Handle service fee default calculation
	;
	S:$D(vobj(trn,0))=0 vobj(trn,0)=$S($G(vobj(trn,-2)):$G(^TRN(vobj(trn,-3),0)),1:"")
	;
	N CHGOPT,CID,DFT,FEEAMT,FEECNT,FEEPLN,FID,fsn,LSTETC,LSTAMT,PGM,pplst
	N TAMT,TSO,TYPE,val,vdd
	;
	N CRT
	S CRT=1
	S CID=$P(INPUT,",",1)
	S FEECNT=$P(INPUT,",",2)
	S LSTETC=$P(INPUT,",",3)
	S LSTAMT=$P(INPUT,",",4)
	;
	I CID="" Q ""
	I 'FEECNT S FEECNT=1
	;
	; Default amount from tran code
	I $P(vobj(trn,0),"|",7) S DFT=$P(vobj(trn,0),"|",7)
	;
	S FID=$S($P(vobj(trn,0),"|",3)="L":"LN",1:"DEP")
	;
	S pplst="FEEPLN,TYPE,ANLSYS,SCND,SVCFEECID"
	;
	S val=$$getdata^PBSUTL(FID,pplst,CID,.fsn,.vdd) I ER Q ""
	S FEEPLN=$P(val,$C(28),1)
	S TYPE=$P(val,$C(28),2)
	;
	I FEEPLN="" Q ""
	;
	S TAMT=$$FEETYP(0)
	;
	; Find correct posting program
	N rs S rs=$$vOpen2()
	I ''$G(vobj(rs,0)),$$vFetch2(rs) S SRVDATE=vobj(rs)
	;
	S PGM=$$FEEPGM^UFID(FEEPLN,SRVDATE) I ER K vobj(+$G(rs)) Q ""
	;
	; Invalid service fee posting program
	I PGM="" K vobj(+$G(rs)) Q ""
	S PGM="^"_PGM_"(1,ETC,"_+FEECNT_",1,TAMT)"
	D @PGM
	;
	I '$D(FEEAMT) K vobj(+$G(rs)) Q ""
	I CHGOPT=1 K vobj(+$G(rs)) Q FEEAMT
	;
	; Service fee is calculated at analysis
	K vobj(+$G(rs)) Q ""
	;
FEETYP(TAMT)	; Find TAMT for fees based on a percent of the previous
	;
	I LSTETC="" Q TAMT
	;
	N trn S trn=$$vDb7(LSTETC)
	S vobj(trn,0)=$G(^TRN(vobj(trn,-3),0))
	;
	I $P(vobj(trn,0),"|",3)'="M" K vobj(+$G(trn)) Q TAMT
	;
	K vobj(+$G(trn)) Q LSTAMT
	;
GETETC(ETC,TYPE)	;
	N DATA
	;
	S DATA=""
	;
	I TYPE="" Q ""
	;
	N prodctl S prodctl=$$vDb10(TYPE)
	N vo1
	S vo1=vobj(prodctl,-3)
	S vobj(prodctl,14)=$G(^UTBLCTL(vo1,14))
	S vobj(prodctl,15)=$G(^UTBLCTL(vo1,15))
	;
	N V1 S V1=vobj(prodctl,-3) I '$D(^UTBLCTL(V1,50)) K vobj(+$G(prodctl)) Q ""
	;
	I ETC="*DR" S DATA=$P(vobj(prodctl,14),"|",1)
	I ETC="*CR" S DATA=$P(vobj(prodctl,15),"|",1)
	;
	I DATA'="" D
	. S ETC=DATA
	. S sort("E","ETC")=ETC
	. Q 
	;
	K vobj(+$G(prodctl)) Q DATA
	;
V1(return,versn,ETC,CID,AMT)	;Private ; Version 1 code
	;
	I '$D(%O) N %O S %O=0
	;
	; Version number of client message is not compatible with server
	I $G(versn)'=1 Q $$ERRMSG^PBSUTL($$^MSG(2951))
	S ER=0
	;
	N trn S trn=$$vDb7(ETC)
	;
	S vobj(trn,0)=$G(^TRN(vobj(trn,-3),0))
	;
	D ETCCID^TTXEXT(.trn,CID) I ER K vobj(+$G(trn)) Q $$ERRMSG^PBSUTL($G(RM),$G(ET))
	;
	S ITC=$P(vobj(trn,0),"|",1)
	S CLS=$P(vobj(trn,0),"|",3)
	S E(9)=$P(vobj(trn,0),"|",9)
	;
	; Record not on file
	I "DL"[CLS,'$D(^ACN(CID,50)) S ER=1 S ET="RECNOF" K vobj(+$G(trn)) Q $$ERRMSG^PBSUTL(,ET)
	;
	D CRTMFT^CRTMF
	;
	S MFREQ=$$PROC1(CLS,.MFT)
	;
	N fld,i,pobs,qlf,req,x
	D POBS^TTXRPC(.pobs)
	;
	S (fld,qlf,return)=""
	;
	F i=1:1 S x=$P(MFREQ,",",i) Q:x=""  D
	. S qlf=$P(x,"#",1)
	. S req=$P(x,"#",2)
	. ;
	. I qlf="TCMT" S fld="T"
	. E  I $D(pobs("TSSP","MSC",qlf)) S fld="M"
	. E  I $D(pobs("TSSP","PSI",qlf)) S fld="P"
	. E  I $D(pobs("TSSP","QLF",qlf)) S fld="Q"
	. S return=return_$$V2LV^MSG(qlf)_$$V2LV^MSG(+req)_$$V2LV^MSG(fld)
	. Q 
	;
	K vobj(+$G(trn)) Q ""
	;
PROC1(cls,mft)	;  Process MFT array from CRTMF
	;
	N %READ,i,x
	S %READ=""
	;
	F i=1:1 S x=$G(mft(cls,i)) Q:x=""!(ER)  D CRTBLDSCR^CRTMF(x)
	;
	Q %READ
	;
	Q
	;
vCa1(p1)	; RecordTRN.getRecord: TRN
	;
	new object
	if '$D(%CACHE("TRN",p1)) do
	 . set object=$$vDb2(p1)
	;
	else  do
	 . set object=$O(vobj(""),-1)+1,vobj(object,-1)="RecordTRN"
	 . set vobj(object,-3)=p1
	;
	quit object
	;
vCa1N(p1,n)	; Load TRN Cache into %CACHE("TRN")
	;
	if '$D(%CACHE("TRN",p1,n)) set %CACHE("TRN",p1,n)=$G(^TRN(p1,n))
	quit %CACHE("TRN",p1,n)
	;
vDb1(p1)	; RecordACN.getRecord: ACN
	;
	N object
	S object=$O(vobj(""),-1)+1,vobj(object,-1)="RecordACN"
	S vobj(object,50)=$G(^ACN(p1,50))
	I ($P(vobj(object,50),"|",2)="D")  S vobj(object,-1)="RecordDEP"
	I ($P(vobj(object,50),"|",2)="L")  S vobj(object,-1)="RecordLN"
	I vobj(object,50)="",'$D(^ACN(p1,50))
	;
	S vobj(object,-2)='$T
	S vobj(object,-3)=p1
	Q object
	;
vDb10(p1)	; RecordPRODCTL.getRecord: PRODCTL
	;
	N object
	S object=$O(vobj(""),-1)+1,vobj(object,-1)="RecordPRODCTL"
	S vobj(object,50)=$G(^UTBLCTL(p1,50)) I vobj(object,50)="",'$D(^UTBLCTL(p1,50))
	;
	S vobj(object,-2)='$T
	S vobj(object,-3)=p1
	Q object
	;
vDb2(p1)	; RecordTRN.getRecord: TRN
	;
	N object
	S object=$O(vobj(""),-1)+1,vobj(object,-1)="RecordTRN"
	I '$D(^TRN(p1))
	I $T K vobj(object) S $ZS="0,"_$ZPOS_",RECNOFL" X $ZT
	S vobj(object,-2)=1
	S vobj(object,-3)=p1
	Q object
	;
vDb3(p1,p2)	; RecordIRATYPE.getRecord: IRATYPE
	;
	N object
	S object=$O(vobj(""),-1)+1,vobj(object,-1)="RecordIRATYPE"
	S vobj(object)=$G(^IRA(p1,p2)) I vobj(object)="",'$D(^IRA(p1,p2))
	;
	S vobj(object,-2)='$T
	S vobj(object,-3)=p1
	S vobj(object,-4)=p2
	Q object
	;
vDb4()	; RecordCUVAR.getRecord: CUVAR
	;
	N object
	S object=$O(vobj(""),-1)+1,vobj(object,-1)="RecordCUVAR"
	I '$D(^CUVAR)
	I $T K vobj(object) S $ZS="0,"_$ZPOS_",RECNOFL" X $ZT
	S vobj(object,-2)=1
	Q object
	;
vDb5(p1)	; RecordSTBLTSD.getRecord: STBLTSD
	;
	N object
	S object=$O(vobj(""),-1)+1,vobj(object,-1)="RecordSTBLTSD"
	S vobj(object)=$G(^STBL("TSD",p1)) I vobj(object)="",'$D(^STBL("TSD",p1))
	I $T K vobj(object) S $ZS="0,"_$ZPOS_",RECNOFL" X $ZT
	S vobj(object,-2)=1
	S vobj(object,-3)=p1
	Q object
	;
vDb6(p1)	; RecordUTBLZTSD.getRecord: UTBLZTSD
	;
	N object
	S object=$O(vobj(""),-1)+1,vobj(object,-1)="RecordUTBLZTSD"
	S vobj(object)=$G(^UTBL("ZTSD",p1)) I vobj(object)="",'$D(^UTBL("ZTSD",p1))
	I $T K vobj(object) S $ZS="0,"_$ZPOS_",RECNOFL" X $ZT
	S vobj(object,-2)=1
	S vobj(object,-3)=p1
	Q object
	;
vDb7(p1)	; RecordTRN.getRecord: TRN
	;
	N object
	S object=$O(vobj(""),-1)+1,vobj(object,-1)="RecordTRN"
	I '$D(^TRN(p1))
	I $T K vobj(object) S $ZS="0,"_$ZPOS_",RECNOFL" X $ZT
	S vobj(object,-2)=1
	S vobj(object,-3)=p1
	Q object
	;
vDb8(p1,p2)	; RecordTRNSD.getRecord: TRNSD
	;
	N object
	S object=$O(vobj(""),-1)+1,vobj(object,-1)="RecordTRNSD"
	S vobj(object)=$G(^TRN(p1,3,p2)) I vobj(object)="",'$D(^TRN(p1,3,p2))
	I $T K vobj(object) S $ZS="0,"_$ZPOS_",RECNOFL" X $ZT
	S vobj(object,-2)=1
	S vobj(object,-3)=p1
	S vobj(object,-4)=p2
	Q object
	;
vDb9(p1)	; RecordTOKEN.getRecord: TOKEN
	;
	N object
	S object=$O(vobj(""),-1)+1,vobj(object,-1)="RecordTOKEN"
	S vobj(object)=$G(^TOKEN(p1)) I vobj(object)="",'$D(^TOKEN(p1))
	I $T K vobj(object) S $ZS="0,"_$ZPOS_",RECNOFL" X $ZT
	S vobj(object,-2)=1
	S vobj(object,-3)=p1
	Q object
	;
vOpen1()	; SEQ FROM TRNSD WHERE ETC=:ETC ORDER BY SEQ
	;
	N object
	;
	S object=$O(vobj(""),-1)+1
	S vobj(object,0)=1
	S vobj(object,-1)="ResultSet"
	S vobj(object,-2)="$$vFetch1^"_$T(+0)
	S vobj(object,-3)="SEQ FROM TRNSD WHERE ETC=:ETC ORDER BY SEQ"
	D vL1a1
	Q object
	;
vL1a0	S vobj(object,0)=0 Q
vL1a1	S vobj(object,1)=ETC
	S vobj(object,2)=""
vL1a3	S vobj(object,2)=$O(^TRN(vobj(object,1),3,vobj(object,2)),1) I vobj(object,2)="" G vL1a0
	Q
	;
vFetch1(object)	;
	;
	;
	I vobj(object,0)=0  Q 0
	;
	S vobj(object)=vobj(object,2)
	;
	D vL1a3 
	;
	Q 1
	;
vOpen2()	; FEEDT FROM FEEPLN WHERE PLAN=:FEEPLN AND FEEDT<=:EFD ORDER BY FEEDT DESC
	;
	N object
	;
	S object=$O(vobj(""),-1)+1
	S vobj(object,0)=1
	S vobj(object,-1)="ResultSet"
	S vobj(object,-2)="$$vFetch2^"_$T(+0)
	S vobj(object,-3)="FEEDT FROM FEEPLN WHERE PLAN=:FEEPLN AND FEEDT<=:EFD ORDER BY FEEDT DESC"
	D vL2a1
	Q object
	;
vL2a0	S vobj(object,0)=0 Q
vL2a1	S vobj(object,1)=FEEPLN
	S vobj(object,2)=EFD
	;
	S vobj(object,3)=(vobj(object,2)+1)
vL2a5	S vobj(object,3)=$O(^UTBL("FEEPLN",vobj(object,1),vobj(object,3)),-1) I vobj(object,3)="" G vL2a0
	Q
	;
vFetch2(object)	;
	;
	;
	I vobj(object,0)=0  Q 0
	;
	S vobj(object)=vobj(object,3)
	;
	D vL2a5 
	;
	Q 1
	;
vtrap1	; Error trap
	;
	N error S error=0
	S vobj(0,-1)="Error"
	S vobj(0)=$ZS
	S ETC="" 
	K vobj(+$G(error)) Q  
