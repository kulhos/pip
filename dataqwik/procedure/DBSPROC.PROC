//DO NOT MODIFY  DATA-QWIK Procedure Definition|DBSPROC|||||||1
public DBSPROC	// Procedure definition
	/*
	 	 
	 Procedure definition
	
	 KEYWORDS:	PROCEDURE,FILER
	
	 RETURNS:
	
	    ER		Error flag			/TYP=N
	    RM         Error message			/TYP=T
	
	---------- Revision History -------------------------------------------
	07/22/2008 - RussellDS - CR30801
		* Removed commented out code.
		* Removed call to SCADRV0.
		* Removed old revision history.
	
	10/01/07 - Frans S.C. Witte CR 27800
		First line tag no longer added.
		Signature now uses "public" instead of "Public".
		Program name passed to UCGM unmodified (compiler will deal with
		"%" versus "_").
		Cleaned up unused variables and subroutines.

	03/16/07 - Pete Chenard - CRs 25988 / 25987
		Added #OPTION ResultClass ON for vSig label
		Added Public String yo vSig label
		
	12/07/06 - Frans S.C. Witte - CRs 22719 / 20613
		Replaced "smart quotes" by ASCII quotes in comment

	07/15/06 - RussellDS - CR22121
		Modify COMPILE section to handle % routine names.
	
	03/14/06 - RussellDS - CR20135
		Modify display of name in COMPILE section to occur after we've
		made sure it's a valid procedure.
	
	02/25/06 - RussellDS - CR19065
		Modify COMPILE section to return PGM.
		   
	02/14/06 - Teliv - CR 19582
		Postprocessor wasnt called properly in section EXT. Also RM message
		wasnt clear if you exit the editor with no changes. Put the correct
		message in section EXT.
		Also made some sections as Public and Conditional pausing in the end of 
		Build section only in case it quits normally.

	*/
	// I18N=QUIT
	
	quit
	
public EXT(Number %ProcessMode)	//	
	/* Call by functions DBSPROCC,DBSPROCM,DBSPROCD to maintain procedure
	   definitions
	*/

	type public Number ER
	type public String %LIBS, RM
	
	type Number SEQ, vER
	type String DBTBL(,,), filstr(), KEYS(), PROCID, TAB, VFMQ
	
	do ^DBSDEUTL(%ProcessMode,"DBTBL25")
	
	quit:VFMQ="Q"
	
	set PROCID=KEYS(2).get()	// KEYS array defined in DBSDEUTL.
	 			 		
	if PROCID.isNull() quit
	
	set DBTBL("SYSDEV", 25, PROCID) = ""	// Prevent warning on lock
	lock +DBTBL("SYSDEV",25,PROCID):2
	else  do { quit
		set ER=1
		set RM=$$^MSG(7354,"Procedure") 
	}
			
	if %ProcessMode=3 do { quit	// Delete old definition
		do Db.delete("DBTBL25D","%LIBS='SYSDEV' AND PROCID=:PROCID")
		do Db.delete("DBTBL25","%LIBS='SYSDEV' AND PROCID=:PROCID")
		#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
		type Number x = $$DELETE^%OSSCRPT($$SRCFILE^FILEUTL("PROC",PROCID))
		
		// remove compiled code
		// check SYSMAP references, schedule for recompile

		lock -DBTBL("SYSDEV",25,PROCID)
	}

	type String DQFILE = $$SRCFILE^FILEUTL("PROC",PROCID)
	type DbSet ds=Db.selectDbSet("DBTBL25D","%LIBS='SYSDEV' AND PROCID=:PROCID","SEQ ASC")

	if ds.isEmpty() do {	// New procedure
		
	#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
		if $$EXISTS^FILEUTL(DQFILE), $$SIZE^FILEUTL(DQFILE)>0 quit	// use existing file

		type IO io = Class.new("IO")
		#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
		set io.directory = $$PARSE^%ZFUNC(DQFILE,"DIRECTORY")
		#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
		set io.fileName = $$PARSE^%ZFUNC(DQFILE, "NAME")_$$PARSE^%ZFUNC(DQFILE, "TYPE")
		set io.openParams = "WRITE/NEWV"

		catch ioerr {
			if 'io.device.isNull() do io.close()
			if ioerr'["PSL-E-IO" throw ioerr

			write "I/O error: ", ioerr.type,!
		}
		
		do io.open()

		type RecordDBTBL25 proc = Db.getRecord("DBTBL25","%LIBS='SYSDEV',PROCID=:PROCID")
        	do io.write("//DO NOT MODIFY  "_proc.des_"|"_proc.pgm_"||||"_proc.rpcvar_"|"_proc.rpcvar1)

		set TAB = 9.char()
	
		//Header information
		do io.write(TAB_"/*")				// All is in PSL format
		do io.write( TAB_" ORIG: "_%UserID_" - "_%SystemDate.toString()) 	// Developer , date
		do io.write( TAB_" DESC: ")			// Description
		do io.write( TAB)
		do io.write( TAB_" ---- Comments --------------------------------------------------------")
		do io.write( TAB)
		do io.write( TAB_" ---- Revision History ------------------------------------------------")
		do io.write( TAB)
		do io.write( TAB_" ****** Consider using setAuditFlag for all objects in this procedure")
		do io.write( TAB_"   example :do dep.setAuditFlag(1)")
		do io.write( TAB)
		do io.write( TAB_"*/")
		do io.close()
	}
	/*
	else  while ds.next() do {
		type RecordDBTBL25D dbtbl25d = ds.getRecord("DBTBL25D")
		set filstr(dbtbl25d.seq) = dbtbl25d.code	
	}
	*/

        // Get editor option
        type String EDTOPT = ""                      // Default

        if '%UserID.get().isNull() do {

                type RecordSCAU scau = Db.getRecord("SCAU", "UID=:%UserID", 1)
                set EDTOPT = scau.editor
                if (EDTOPT = "DBS") set EDTOPT = ""
        }

	#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
	type Boolean updated = '$$EDTOPT^%OSSCRPT(EDTOPT, DQFILE)

	; Restore auto-wrap
	#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
	use 0 write $$SCRAWON^%TRMVT

	if 'updated do { quit		// <F11> exit
		lock -DBTBL("SYSDEV",25,PROCID) 		
		if %ProcessMode=1 set RM=$$^MSG(6710,PROCID)	// Not Modified
	}

	/*
	TODO - replace DBTBL25D content only after successful compilation (cache last correct version)	
	do Db.delete("DBTBL25D", "%LIBS='SYSDEV' AND PROCID=:PROCID") 	// Delete existing records
	
	if 'filstr(1).order(),filstr(1).isNull() lock -DBTBL("SYSDEV",25,PROCID) quit	// if everything is deleted from the editor
	
	set SEQ = 0
	for  set SEQ=filstr(SEQ).order() quit:SEQ.isNull()  do { 
		type RecordDBTBL25D dbtbl25d = Class.new("RecordDBTBL25D","%LIBS='SYSDEV',PROCID=:PROCID,:SEQ")
		set dbtbl25d.code = filstr(SEQ)
		do dbtbl25d.save()
	}
	*/

	// Update audit information and the Time
	type RecordDBTBL25 dbtbl25 = Db.getRecord("DBTBL25","%LIBS='SYSDEV',PROCID=:PROCID",1)
	set dbtbl25.user = %UserID
	set dbtbl25.time = %CurrentTime
	
	#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
	if $$EXISTS^FILEUTL(DQFILE), $$SIZE^FILEUTL(DQFILE)>0 do {

		type IO io = Class.new("IO")
	#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
		set io.directory = $$PARSE^%ZFUNC(DQFILE,"DIRECTORY")

	#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
		set io.fileName = $$PARSE^%ZFUNC(DQFILE, "NAME")_$$PARSE^%ZFUNC(DQFILE, "TYPE")
		set io.openParams = "READ"

		catch ioerr {
			if 'io.device.isNull() do io.close()
			if ioerr'["PSL-E-IO" throw ioerr

			write "I/O error: ", ioerr.type,!
		}
		
		do io.open()

		type String hdr = io.read()
		do io.close()

		if 'hdr.contains("//DO NOT MODIFY") quit

		set dbtbl25.pgm = hdr.piece("|",2)
		set dbtbl25.rpcvar = hdr.piece("|",6)
		set dbtbl25.rpcvar1 = hdr.piece("|",7)
		
	}

	do dbtbl25.save() 

	lock -DBTBL("SYSDEV",25,PROCID)	
	
	quit
	

PP	// Post processor to check duplicate name

	type public String RM, X
	type public Number ER
 
	if X.isNull() quit

	if Db.isDefined("DBTBL25","%LIBS='SYSDEV',PROCID=:X") do {
		set ER = 1 
		set RM = $$^MSG(253)
	}

	quit

	
public COPY	// Copy definition (Called by function DBSPROCCO)
	
	type Number %FRAME, SEQ
	type String PROCIDF, PROCIDT, %TAB(), %READ, VFMQ
	
	set %TAB("PROCIDF") = "/DES=From Procedure Name/LE=12/TYP=U/TBL=[DBTBL25]PROCID"
	set %TAB("PROCIDT") = "/DES=To Procedure Name/LE=12/TYP=U/TBL=[DBTBL25]PROCID:NOVAL/XPP=D PP^DBSPROC"
	set %READ = "@@%FN,,PROCIDF/REQ,PROCIDT/REQ,"
	set %FRAME = 2

	do ^UTLREAD

	quit:VFMQ="Q" 
	
	type RecordDBTBL25 dbtbl25f = Db.getRecord("DBTBL25","%LIBS='SYSDEV',PROCID=:PROCIDF")
	type RecordDBTBL25 dbtbl25t = dbtbl25f.copy()	// Copy header
	
	set dbtbl25t.procid = PROCIDT
	set dbtbl25t.pgm = ""		// Remove Old name
	do dbtbl25t.setMode(0)
	
	do dbtbl25t.save()

	// TODO check existence of PROCIDF

	#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
	type String tmp = $$COPYFIL^%OSSCRPT($$SRCFILE^FILEUTL("PROC",PROCIDF), $$SRCFILE^FILEUTL("PROC",PROCIDT))
	
	type DbSet ds=Db.selectDbSet("DBTBL25D","%LIBS='SYSDEV' AND PROCID=:PROCIDF","SEQ ASC")

	// Copy detail
	while ds.next() do {	
		type RecordDBTBL25D dfrom = ds.getRecord("DBTBL25D")
		set SEQ = dfrom.seq

		if 'dfrom.code.contains("//DO NOT MODIFY") quit	
		type RecordDBTBL25D dto = Class.new("RecordDBTBL25D","%LIBS='SYSDEV',PROCID=:PROCIDT,SEQ=:SEQ")
		set dto.code = dfrom.code
		
		do dto.save()
	}

	quit
	

public BUILDALL	// Build all procedure routines (called) by FILER.COM) 

	type ResultSet rs = Db.select("PROCID","DBTBL25","%LIBS='SYSDEV'","PROCID ASC")
	while rs.next() do COMPILE(rs.getCol("PROCID"))

	quit

	
public BUILD	// Build run-time routine (Called by function DBSPROCB)

	type Number CNT

	do Db.delete("TMPDQ","PID=:%ProcessID")

	set CNT = $$LIST^DBSGETID("DBTBL25") 		// Select procedure ID(s)
	quit:(+CNT=0)
	
	type DbSet ds = Db.selectDbSet("TMPDQ","PID=:%ProcessID","ELEMENT ASC")
	while ds.next() do {
		type RecordTMPDQ tmpdq = ds.getRecord("TMPDQ")
		do COMPILE(tmpdq.element)
	}
	
	do Db.delete("TMPDQ","PID=:%ProcessID")
	
	// "Press any key" message and pause
	#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
	write $$MSG^%TRMVT("",,1)
	
	quit
	

public COMPILE(String PROCID,	// Procedure ID
	       String PGM)	// Generated program name	/NOREQ/MECH=REFNAM:W

	type public String RM
	type public Number ER
	
	type Date LTD
	type Number count, FCOUNT, SIZE
	type String %LIBS, cmpType, code(), m2src(), SIG, TIME, TPGM, USER

	set ER = 0
	set RM = ""
	set count=0

	set %LIBS="SYSDEV"
	
	// Invalid Procedure name
	if 'Db.isDefined("DBTBL25","%LIBS=:%LIBS,PROCID=:PROCID") do { quit
		set ER = 1 
		set RM = $$^MSG(1408,PROCID)
	}
		
	write !, PROCID, !
	
	type RecordDBTBL25 dbtbl25 = Db.getRecord("DBTBL25","%LIBS=:%LIBS,PROCID=:PROCID")
	// type RecordDBTBL25D dbtbl25d = Db.getRecord("DBTBL25D","%LIBS=:%LIBS,PROCID=:PROCID,SEQ=1")

	if dbtbl25.pgm.isNull() do { quit 
		set RM = $$^MSG(3056,PROCID) 
		#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
		write $$MSG^%TRMVT(RM)
		hang 2 
	}	

	set PGM = dbtbl25.pgm				// Routine name

	type String procfile = $$SRCFILE^FILEUTL("PROC",PROCID)

	type IO io = Class.new("IO")
	#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
	set io.directory = $$PARSE^%ZFUNC(procfile,"DIRECTORY")
	#ACCEPT Date=20-JAN-2016;PGM=kulhan;WARN=ACCESS;CR=4
	set io.fileName = $$PARSE^%ZFUNC(procfile, "NAME")_$$PARSE^%ZFUNC(procfile, "TYPE")
	set io.openParams = "READ"

	do {
		catch iox {
			if 'io.device.isNull() do io.close()
			if iox["IOEOF" quit
			throw iox
		}
		
		do io.open()

		type String REC
		for  set REC=io.read()  do {
			set FCOUNT = FCOUNT + 1
			set m2src(FCOUNT) = REC
			set SIZE = SIZE + REC.length()	
		}
	}

	/* If the is an extension of RecordTABLE code, compile as a filer, and we don't need
	   the signature */
	if PROCID.beginsWith("Record") set cmpType = "Filer"
	else  do {
		
		// Add signature tag
		set SIG = LTD_"^"_TIME_"^"_USER_"^"_SIZE
		set m2src(FCOUNT + 1) = " #OPTION ResultClass ON"
		set m2src(FCOUNT + 2) = "public String vSIG()"_ 9.char()_"quit """_SIG_""""_9.char()_"// Signature - LTD^TIME^USER^SIZE"
		
		set cmpType = "Procedure"_ "~"_ SIG
	}
	
	type Number cmperr = $$cmpA2F^PSLC(m2src(),,PGM,,PROCID_ "~"_ cmpType)	
        // do cmpA2F^UCGM(.m2src,PGM,,,,,,PROCID_ "~"_ cmpType)

	// replace DBTBL25D content only after successful compilation (cache last correct version)	
	if cmperr = 0, cmpType '= "Filer" {
		do Db.delete("DBTBL25D", "%LIBS='SYSDEV' AND PROCID=:PROCID") 	// Delete existing records
	
		type Number SEQ = 0
		for  set SEQ=m2src(SEQ).order() quit:(SEQ>FCOUNT)!(SEQ.isNull())  do { 
			if m2src(SEQ).contains("//DO NOT MODIFY") quit	

			type RecordDBTBL25D dbtbl25d = Class.new("RecordDBTBL25D","%LIBS='SYSDEV',PROCID=:PROCID,:SEQ")
			set dbtbl25d.code = m2src(SEQ)
			do dbtbl25d.save()
		}
	}

	quit

ERR	//

	type public Number RM
		
	write !,RM 
	hang 2
	quit
