public PBSMSQL(String REPLY,Boolean STFFLG,String RECORD,Number RECTYP,String CONTEXT)	// MSQL Service Class Driver
	/*
	   ORIG: MATTSON - 11/08/93

	   PROFILE/SQL service class driver, called by the PROFILE Enterprise
	   server.  This service class driver is responsible for servicing
	   SQL requests of the PROFILE application.

	   MUMPS SQL Service Class Driver

	   ARGUMENTS:
	   . REPLY  - Reply message			/TYP=T/MECH=REFNAM:W

	   . STFFLG - STF flag				/TYP=L/REQ/MECH=VAL

	   . RECORD - Input Message			/TYP=T/REQ/MECH=VAL

	   . RECTYP - Record type -			/TYP=N/REQ/MECH=VAL
	   		0 - Native client
			1 - Foreign client

	   . CONTEXT- Default context			/TYP=T/NOREQ/MECH=VAL

	   INPUTS:
	   . %STFHOST - Flag that indicates whether on-line updates should
			either be suspended or disallowed, depending on the
			application.

	   RETURNS:
	   . $$ Message reply status			/TYP=N/LEN=1

	   EXAMPLE:

	   S ER=$$^PBSMSQL(.REPLY,0,MSG,0)

	------Revision History------------------------------------------------
	2009-07-29 - RussellDS - CR42482
		* Modified to use the default format mask values (%MSK*) if
		  they are not overridden for this message.
	
	2009-05-06 - RussellDS - CR40198
		* Problem if lower case SQL received.  A change in the JDBC
		  driver no longer does the upper-casing.  This is fixed by
		  always using SQL^%ZS to tokenize.
	
	01/19/2009 - RussellDS - CR37680
		* Fix to change for CR36959 to correct problem where not
		  checking account number in all cases.
		
	01/07/2009 - RussellDS - CR36959
		* Modified logging overrides to DAYENDXBAD to match PBSMRPC.
	
	11/14/2008 - RussellDS - CR 36391
		Retrofitted from  FW 2.7
		
		Modified MAIN section to deal with specific in/out variables
		instead of the entire symbol table.  The other approach was
		resulted in excessive overhead based on benchmarking.
	
	10/23/08 - Gordon Joyner - CR36117
		   Added support for Buffered SQL Restriction Authorizations.

		   Cleaned up code to fix some of the PSL warnings.

		   Modified method MAIN to use tree vrflg() instead of verrors()

		   Modified method SPV() to add statement sequence as 1st key of vsupv()
		   this allows us to collect authorizations by statement when using
		   buffered sql

		   Modified method SPVOVR() to recognize new key structures for
		   OVR() and vsupv() trees.  Both now have statement sequence as 1st
		   key

		   Modified method OVRMSG() to recognize new key structure for
		   OVR() tree.  Added to level to AU message for statements.
		   If the statement seq is 5 then there must be groups for 1-4.  The
		   group may be null or have a Length Value of 1.

	09/25/08 - GIRIDHARANB - CR35828

		   Rolled up these changes from FW version 2.7:

		   Modified section MAIN to include new sql parameter "SAVECUR" to
		   indicate that the call orginated from the server. The exe and vsql
		   arrays should be saved in this case.

		   Corrected the formal parameter in section ERRRPLY to "String Bufname"

		   Corrected all calls to ERRREPLY to include a buffer name if operating
		   with a buffer. This ensures the sql buffer record are purged on an error
		   condition.

		   Modified section MAIN to use result set to look up the cursor
		   process ID from sqlcur0.

		   Modified section LOOP to store the reply from the call to
		   SVXCHMSG in vzcpmsg, on a transaction restart we return this reply
		   back to the client and avoid making a call to the cursor
		   pool process.

	11/30/07 - Pete Chenard - 30087
		   Modified vzREPLY to type it as ByteString.


	-----------------------------------------------------------------------
	   I18N=OFF

	*/
	
	type public String %MSKC, %MSKD, %MSKE, %MSKL, %MSKN

	type Boolean RETVAL
	
        set RETVAL=0
        do MAIN(.RETVAL,.REPLY,%MSKC.get(),%MSKD.get(),%MSKE.get(),%MSKL.get(),%MSKN.get())

        // Return Value: 0 = success, 1 = processing error
        quit RETVAL


MAIN(Boolean RETVAL,
     String REPLY,
     String %MSKC,
     String %MSKD,
     String %MSKE,
     String %MSKL,
     String %MSKN)
     
 	// Main processing for MSQL Service Class Driver

	/*
	ARGUMENTS:

		. RETVAL  - Return value from Main section	/MECH=REFNAM:W
				0 - Success
				1 - Processing error


		. REPLY - The response built in this function	/MECH=REFNAM:W
			  if there is a validation error.
			  
		. %MSK* - Passed as non-ret parameters since we want to use
			  the default values, but also allow SQL to override
			  based on message options, without changing the
			  default values when we return to PSBSRV.

	IMPORTANT NOTE:  Any change to the variables necessary to pass to and be
			 returned by PBSCURS must be coordinated in this section
			 as well as in EXEC^PBSCURS.  Look for all uses of the
			 arrays infld and outfld.
	*/
	
	type public Boolean STFFLG,INTRCTV
	type public String CONTEXT,ER,ET,RECORD,RM,%STFHOST,%TOKEN,UCLS,vzcpmsg,%ZTSEQ

	type Number PTR
	type String bufname,FLD()
	type String SQLCNT,SQLCOD,SQLDTA,SQLEXPR,SQLIND,SQLPAR(),SQLREC,SQLTOK()
	type String verrors(,),vrflg(,,),vsupv(,),ZUID

	set bufname=""

	/*
	 FLD(1) SQL statement
	 FLD(2) PROFILE/SQL qualifier
	 FLD(3) Supervisory authorization
	*/
	set PTR=$$LV2V^MSG(RECORD,FLD())
	
	// Invalid SQL Command
	if FLD(1).get()="" do Runtime.setErrMSG("STBLER",8564) set RETVAL=$$ERRRPLY(bufname) quit
	
	// Overlay saved context
	if CONTEXT.get()'="" do PARSPAR^%ZS(CONTEXT,SQLPAR())

	// Overlay parameters from this message
	if FLD(2).get()'="" do PARSPAR^%ZS(FLD(2),SQLPAR())

	if SQLPAR("FORMAT").exists() set ER=$$FORMAT(SQLPAR("FORMAT")) if ER set RETVAL=$$ERRRPLY(bufname) quit
	if SQLPAR("DATE").exists() set %MSKD=SQLPAR("DATE")
	if SQLPAR("DEC").exists() set (%MSKE,%MSKN)=SQLPAR("DEC")
	
	// Setup par("SAVECUR")
	set SQLPAR("SAVECUR") = ""

	set SQLEXPR=$$SQL^%ZS(FLD(1),SQLTOK()) if ER set RETVAL=$$ERRRPLY(bufname) quit
	
	// If buffered.. get buffer name
	if SQLEXPR.piece(" ",1)="BUFFER" set bufname = SQLEXPR.piece(" ",3)

	// Check 24x7 access
	// Database Update Restricted
	if (%STFHOST.get()),('$$VALID(SQLEXPR,SQLTOK)) do Runtime.setErrMSG("STBLER",7912) set RETVAL=$$ERRRPLY(bufname) quit

	// Supvervisory override
	if FLD(3).get()'="" do SPV(FLD(3),vsupv(,)) if ER set RETVAL=$$ERRRPLY(bufname) quit

	// Need ODBC V2.0 to match the server software
	// Version number of client message is not compatible with server
	if SQLPAR("ODBC").get()=1 do Runtime.setErrMSG("STBLER",2951) set RETVAL=$$ERRRPLY(bufname) quit

	// Store and forward, force check of store and forward user class in sqlbuf
	if STFFLG do {
		set SQLPAR("SPVOVR")=1
		set vsupv(1,"~")=CUVAR.DFTSTFUCLS
		if vsupv(1,"~")="" set UCLS="MGR"
	}

	/*
	Call SVXCHMSG^%DBAPI for OPEN, FETCH and CLOSE statements
	if the underlying database is Oracle to ensure the cursor
	operations are all performed using the same connection.
	For all other databases, call SQL directly.
	*/

	#IF $$TRNLNM^%ZFUNC("SCAU_DB")="ORACLE"
	
	// NO CURSOR PROCESS FOR INTERACTIVE SESSIONS.
	set INTRCTV='$$INTRACT^%ZFUNC
	
	if (",CLOSE,FETCH,OPEN,"[(","_SQLEXPR.piece(" ",1)_",")),INTRCTV do {
		
		type Number ptr
		type String cursor, hdr, infld(), msg, msgtyp, outfld()
		type String sqlcmd, msgSQLEXP, msgSQLTOK()
		type ByteString cpReply
		
		if vzcpmsg.get() do { quit
			
			// Restart - don't process the message again.
			set cpReply = vzcpmsg
			
			// Strip header (bytes 1-10) from the reply message
			set cpReply = cpReply.extract(11,cpReply.length())
		
			// Load the variables returned from EXEC^PBSCURS
			set ptr = $$LV2V^MSG(cpReply, infld())
			set ER = infld(1)
			set RM = infld(2)
			set SQLCOD = infld(3)
			set SQLDTA = infld(4)
			set SQLCNT = infld(5)
			set SQLIND = infld(6)
			if 'infld(7).isNull() set %ZTSEQ = infld(7)
		}
		
		set msgSQLTOK = SQLTOK
		set sqlcmd = SQLEXPR.piece(" ",1)
		set msgSQLEXP = SQLEXPR.extract(sqlcmd.length()+2,SQLEXPR.length())
		
		if sqlcmd = "OPEN" do { quit:ER
			
			if msgSQLEXP.extract(1,7) = "CURSOR " set msgSQLEXP = msgSQLEXP.extract(8,SQLEXPR.length())
			set cursor = $$TOK^SQL(msgSQLEXP,"AS,USING",.msgSQLTOK)
			if cursor.isNull() do { quit
				
				set ER = 1
				// Cursor name required
				set RM = $$^MSG(8559)
			}
			set msgtyp = 1
		}

		if sqlcmd = "FETCH" do { quit:ER
			
			set cursor = $$TOK^SQL(msgSQLEXP,"AS,USING",msgSQLTOK())

			if cursor.extract(1,5) = "FROM " set cursor = cursor.extract(6,cursor.length())
			if cursor.ascii() = 0 set cursor = $$UNTOK^%ZS(cursor,msgSQLTOK())

			type ResultSet rs = Db.select("CPID","SQLCUR0", "TOKEN=:%TOKEN AND CURSOR=:cursor")

			if rs.isEmpty() set ER=1,RM="Cursor "_cursor_" is not OPEN" quit
			while rs.next() set msgtyp = rs.getCol(1)	
		}
		
		if sqlcmd = "CLOSE" do { quit:ER
			
			if msgSQLEXP.extract(1,7) = "CURSOR " set msgSQLEXP = msgSQLEXP.extract(8,SQLEXPR.length())
			set cursor = msgSQLEXP.piece(" ",1)

			type ResultSet rs1 = Db.select("CPID","SQLCUR0","TOKEN=:%TOKEN AND CURSOR=:cursor")

			if rs1.isEmpty() set ER=1,RM="Cursor "_cursor_" is not OPEN" quit
			while rs1.next() set msgtyp = rs1.getCol(1)	
		}

		// Build message header
		set hdr = (1000000000).random()
		set hdr = "0000000000".extract(1,10-hdr.length())_hdr

		// Build message - see comments above about changes to variables
		set outfld(1) = "set ER=$$^SQL(SQLEXPR,.SQLPAR,.SQLCOD,.SQLDTA,.SQLCNT,.SQLIND,.SQLTOK)"
		set outfld(2) = %ProcessID
		set outfld(3) = %TOKEN.get()
		set outfld(4) = cursor
		set outfld(5) = sqlcmd
		set outfld(6) = SQLEXPR
		if (SQLPAR.data() > 0) do {
			
			type String par = ""
			type String pars = ""
			
			// Use 0.char() vs. "/" and "=" to avoid issues with values like MM/DD/YY
			for  set par = SQLPAR(par).order() quit:par.isNull()  set pars = pars_ par_ 0.char()_ SQLPAR(par)_ 0.char()
			set outfld(7) = pars.extract(1, pars.length() - 1)
		}
		else  set outfld(7)  =  ""
		set outfld(8) = SQLTOK
		set outfld(9) = %CompanyName.get()
		set outfld(10) = %SystemCurrency.get()
		set outfld(11) = %Identifier.get()
		set outfld(12) = %MSKC.get()
		set outfld(13) = %MSKD.get()
		set outfld(14) = %MSKE.get()
		set outfld(15) = %MSKL.get()
		set outfld(16) = %MSKN.get()
		set outfld(17) = %STFHOST.get()
		set outfld(18) = %UserClass.get()
		set outfld(19) = %UserID.get()
		set outfld(20) = %VersionID.get()
		set outfld(21) = %ClientVersionID.get()
		set outfld(22) = %SystemDate.get()
		set outfld(23) = %UserStation.get()
		
		set msg = $$V2LV^MSG(outfld())

		set msg = hdr_msg

		// Passes message to EXEC^PBSCURS
		set ET = $$SVXCHMSG^%DBAPI(msgtyp,%ProcessID,msg,.cpReply,30)
		
		// Store cursor reply in case of a restart
		set vzcpmsg = cpReply				
		
		if 'ET.isNull() set ER = 1 quit

		// Strip header (bytes 1-10) from the reply message
		set cpReply = cpReply.extract(11,cpReply.length())
		
		// Load the variables returned from EXEC^PBSCURS
		// See comments above about changes to variables
		set ptr = $$LV2V^MSG(cpReply, infld())
		set ER = infld(1)
		set RM = infld(2)
		set SQLCOD = infld(3)
		set SQLDTA = infld(4)
		set SQLCNT = infld(5)
		set SQLIND = infld(6)
		if 'infld(7).isNull() set %ZTSEQ = infld(7)
	}

	else  set ER=$$^SQL(SQLEXPR,SQLPAR(),.SQLCOD,.SQLDTA,.SQLCNT,.SQLIND,SQLTOK())

	#ELSE
	set ER=$$^SQL(SQLEXPR,SQLPAR(),.SQLCOD,.SQLDTA,.SQLCNT,.SQLIND,SQLTOK())
	#ENDIF

	// For non-buffered SQL commands copy verrors(,) into vrflg(,,)
	// This should only happen for non-buffered SQL statements.
	if verrors.data(), 'vrflg.data() do {
		type String s1="", s2=""
		for  set s1=verrors(s1).order() quit:s1.isNull()  do {
			set vrflg(1,s1)=verrors(s1)
			for  set s2=verrors(s1,s2).order() quit:s2.isNull()  do {
				set vrflg(1,s1,s2)=verrors(s1,s2)
			}
		}
	}

	// Returns status, error code
	set SQLCOD=$$SQLCOD(SQLCOD.get(),.ER)

	// Apply supvervisory override when they exist and authorizations exist, but not
	// when they have already been checked by COMMIT^SQLBUF (vrflg=1)
	if vsupv.data(),vrflg.data(),'vrflg.get() do SPVOVR(vrflg(,,), vsupv(,))

	// Check override array
	if 'ER,'vrflg.data() do { set RETVAL=0 quit

		// SQL state code
		set FLD(1)=SQLCOD

		// Stored procedure name
		set FLD(2)=RM.get()

		// Number of rows returned
		set FLD(3)=SQLCNT.get()

		// Results table
		set FLD(4)=SQLDTA.get()

		// Column protection attributes
		set FLD(5)=SQLIND.get().piece(0.char(),1)

		// Column format attributes 03/03/2000
		set FLD(6)=SQLIND.get().piece(0.char(),2)

		// Convert to pack format
		if FLD(5)'="" set FLD(5)=$$COLOUT^%ZFUNC(FLD(5))

		set REPLY=$$V2LV^MSG(FLD())
	}

	// Error reply
	if ER set RETVAL=$$ERRRPLY(bufname) quit
	
	// Got here because of restrictions
	do Runtime.rollback() // Non-fatal restrictions
	
	// Override AU message
	set REPLY=$$OVRMSG(vrflg(,,))
	set RETVAL=1
	
	quit

SPV(String OVR, String vsupv(,))	// Convert override information into vsupv() array
	/*
	   ARGUMENTS:

	   . OVR	Supervisory Authorization		/TYP=T/MECH=REFARRY:R
	   		OVR(n)=Error_type|User_Id|Password

	   . vsupv	Override by type			/TYP=T/MECH=REFARRY:W
			vsupv(Error_type)="" or vsupv("*")=""

	   OUTPUTS:

	   ER		Error code				/TYP=N
	   RM		Error message				/TYP=T
	*/
	
	type public String ER, %UserID
	type String ET, I, SPVREST, SPVUID, UCLS, Z, ZOVR()
	type Boolean DONE

	set ER=0
	set DONE = 0

	#IF (CUVAR.AUTOAUTH = 1)
	set vsupv(1, "*") = %UserID
	#ELSE
	if 'OVR.isNull() do {
		// Supv override
		set Z=$$LV2V^MSG(OVR, ZOVR())
		for I=1:1 quit:'ZOVR(I).exists()  do { quit:ER!DONE
			type String V()

			// Type|UID|PSW|CID
			set Z=$$LV2V^MSG(ZOVR(I), V())
			set SPVUID = V(2).get()

			if SPVUID.isNull() do { quit:ER
				if CUVAR.AUTOAUTH=2 set SPVUID = %UserID
				else  do Runtime.setErrMSG("CUVAR", 1504)	// Invalid user ID
			}
			else  do { quit:ER
				// Invalid user
				if 'Db.isDefined("SCAU", "UID=:SPVUID") do {
					do Runtime.setErrMSG("SCAU", 7591, SPVUID)
					set DONE = 1
				}
				// Invalid password
				if '$$VALIDATE^SCADRV1(V(3).get(),SPVUID) do {
					do Runtime.setErrMSG("SCAU",1419)
					set DONE = 1
				}
			}

			set SPVREST = V(1).piece("_",3)
			set vsupv(1, SPVREST) = SPVUID

			if SPVREST = "*" set DONE = 1
		}
	}
	#ENDIF
	quit

SPVOVR(String vrflg(,,),			// Apply override logic 
		String vsupv(,))
	/*
	   Retain all entries in vrflg unless all restrictions are overridden.
	   Return vrflg=1 to indicate this processing already took place since may occur in SQLBUF,
	   or in PBSMSQL for non-buffered SQL.
	   SPVST "":No authorization attempted
			  0:Authorization Successful
			  1:Authorization Failed
	*/
	type public String %UID
	type String ovrsav(,,)
	type String ET, IDENT, STSEQ, SEQ1, SEQ2, UCLSARR(), UCLS, UID, ZTBL
	type Boolean ALL, FAIL

	if '(vsupv.data()) quit

	set STSEQ="", FAIL=0
	for  set STSEQ=vrflg(STSEQ).order() quit:STSEQ.isNull()  do {
		set ALL=0, UID="", UCLS=""
		// vsupv("*") = all restrictions, UID=vsupv("*"), UCLS=scau.%ucls
		// vsupv("~") = all restricitons, UID=%UID,       UCLS=vsupv("~")
		if (vsupv(STSEQ,"*").exists()) do {
			set ALL = 1
			set UID = vsupv(STSEQ,"*")
			if '(UCLSARR(UID).exists()) do {
				type RecordSCAU scau = Db.getRecord("SCAU", "UID = :UID", 1)
				set UCLSARR(UID) = scau.%ucls
			}
			set UCLS = UCLSARR(UID)
		}
		else  if (vsupv(STSEQ,"~").exists()) do {
			set ALL = 1
			set UID = %UID
			set UCLS = vsupv(STSEQ,"~")
		}

		set (SEQ1,SEQ2)=""
		for  set SEQ1=vrflg(STSEQ,SEQ1).order() quit:SEQ1.isNull()  do {
			for  set SEQ2=vrflg(STSEQ,SEQ1,SEQ2).order() quit:SEQ2.isNull()  do {
				// Error type
				set ET = vrflg(STSEQ,SEQ1,SEQ2).piece("|",3)
				if 'ALL,'vsupv(STSEQ,ET).exists() set FAIL=1 quit
				
				if 'ALL do {
					set UID = vsupv(STSEQ,ET).get()
					if '(UCLSARR(UID).data()) do {
						type RecordSCAU scau = Db.getRecord("SCAU", "UID = :UID",1)
						set UCLSARR(UID)= scau.%ucls
					}
					set UCLS = UCLSARR(UID)
				}
				if UCLS.isNull() set FAIL=1 quit
				
				// can it be overridden? if not quit
				if 'Db.isDefined("UTBLINT","ETYPE=:ET,UCLS=:UCLS") do { quit
					set FAIL=1
					set vrflg(STSEQ,SEQ1,SEQ2).piece("|",10)=1	// SPVST flag
				}
				
				set ovrsav(STSEQ,SEQ1,SEQ2) = vrflg(STSEQ,SEQ1,SEQ2)
				if FAIL quit
				
				// Record authorization for CIF,DEP,LN,ACN
				set ZTBL = vrflg(STSEQ,SEQ1).piece("|",1)
				set IDENT = vrflg(STSEQ,SEQ1).piece("|",2)
				if ZTBL = "CIF" do {
					if IDENT.isNull() quit	// null values
					type Number XSEQ = Db.nextVal("DAYENDXBADC","TJD=:%SystemDate,%UID=:%UserID,ACN=:IDENT")
					type RecordDAYENDXBADC xbadc = Db.getRecord("DAYENDXBADC", "TJD=:%SystemDate,%UID=:%UserID,ACN=:IDENT,SEQ=:XSEQ,ET=:ET", 1)
					set xbadc.uid = UID
					do xbadc.save()
				}
				else  do {
					type Number CID = 0
					type Number I, X, XSEQ
				
					// Find account number
					for I = 1:1:IDENT.length(",") set X = IDENT.piece(",",I).toNumber() if Db.isDefined("ACN", "CID=:X") set CID = X quit
				
					// Don't log unless we've got a valid account number
					quit:(CID'>0)
					
					set XSEQ = Db.nextVal("DAYENDXBAD","TJD=:%SystemDate,%UID=:%UserID,CID=:CID")
					
					type RecordDAYENDXBAD xbad = Db.getRecord("DAYENDXBAD", "TJD=:%SystemDate,%UID=:%UserID,CID=:CID,SEQ=:XSEQ,ET=:ET", 1)
					
					set xbad.uid = UID
					set xbad.ident = IDENT
					do xbad.save()
				}
			}
			if FAIL quit
			set ovrsav(STSEQ,SEQ1) = vrflg(STSEQ,SEQ1)
			kill vrflg(STSEQ,SEQ1)
		}
	}

	/*
	If restrictions exist that can not be authorized, move those that could be back
	into OVR array and set top level of OVR to indicate that restrictions have been
	checked to prevent re-processing them since COMMIT^SQLBUF and the main
	label of this routine call this label.
	*/
	if (vrflg.data()) do {
		set vrflg = 1		// this tells MAIN^PBSMSQL vrflg() has been processed
		set (STSEQ,SEQ1,SEQ2) = ""
		for  set STSEQ = ovrsav(STSEQ).order() quit:STSEQ.isNull()  do {
			for  set SEQ1 = ovrsav(STSEQ,SEQ1).order() quit:SEQ1.isNull()  do {
			  	if ovrsav(STSEQ, SEQ1).exists() set vrflg(STSEQ, SEQ1) = ovrsav(STSEQ, SEQ1)
				for  set SEQ2 = ovrsav(STSEQ,SEQ1,SEQ2).order() quit:SEQ2.isNull()  do {
					set vrflg(STSEQ, SEQ1, SEQ2) = ovrsav(STSEQ, SEQ1, SEQ2)
					set vrflg(STSEQ, SEQ1, SEQ2).piece("|",10)=0	// SPVST flag
				}
			}
		}
	}
	quit


OVRMSG(String vrflg(,,))	// Build override message
	/*
	   ARGUMENTS:

	   . OVR	Override array		/TYP=T/REQ/MECH=REFARRY:R

			vrflg(BUF)=FID|keys
			vrflg(BUF,SEQ)=||err_type|||||err_desc||SPVST
	*/

	type String AU1(),STSEQ,FID,KEYS,MSG(),SEQ1,SEQ2,Z

	set (STSEQ,SEQ1,SEQ2)=""
	for STSEQ=1:1:vrflg("").order(-1) do {
		type String AU2()
		type Number CNT=0
		for  set SEQ1=vrflg(STSEQ,SEQ1).order() quit:SEQ1=""  do {
			set FID=vrflg(STSEQ,SEQ1).piece("|",1)		// Table name
			set KEYS=vrflg(STSEQ,SEQ1).piece("|",2)		// Access keys
			for  set SEQ2=vrflg(STSEQ,SEQ1,SEQ2).order() quit:SEQ2=""  do {
				type String AU3()
				set AU3(1)="XBAD_"_FID_"_"_vrflg(STSEQ,SEQ1,SEQ2).piece("|",3)
				set AU3(2)=""
				set AU3(3)=vrflg(STSEQ,SEQ1,SEQ2).piece("|",8)	// Error description
				set AU3(4)=KEYS		// Access keys
				set AU3(5)=vrflg(STSEQ,SEQ1,SEQ2).piece("|",10)	// SPVST flag
	
				set CNT=CNT+1
				set AU2(CNT)=$$V2LV^MSG(AU3())
			}
		}
		set AU1(STSEQ)=$$V2LV^MSG(AU2())
	}

	set MSG(1)="AU"
	set MSG(2)=""
	set MSG(3)=$$V2LV^MSG(AU1())

	quit $$V2LV^MSG(MSG())


ERRRPLY(String buffer)	// Build standard server error reply

	type public Boolean STFFLG
	type public String ET,REPLY,RM()

	if RM.get()="",RM.data()>1 set RM=RM(1).get()_" "_RM(2).get()

	set REPLY=$$ERRMSG^PBSUTL(RM.get(),ET.get())

	// If off-line, put into exception
	if STFFLG do STF
	
	if 'buffer.isNull() do clearBuffer^SQLBUF(%SessionID, buffer)

	quit 1


SQLCOD(Number SQLCOD,String ER)	// Return appropriate SQL status
	/*
	   Format and potentially change the value of the SQL state code before
	   replying back.

	   ARGUMENTS:
	   . SQLCOD	- SQL status code returned from the
			  application				/TYP=N/REQ/MECH=VAL

	   . ER		- Error code - subject to change based
	   		  on the value of sqlcod.		/TYP=N/REQ/MECH=REF

	   RETURNS:
	   . SQLCOD - SQL status code
			00000 - Success
			01500 - Success, at end of results table
			01501 - Timeout  (not currently enabled)
			50000 - General PROFILE/SQL error
			50001 - Invalid stored procedure name
	*/
	
	type String RETURN

	set SQLCOD=$S(SQLCOD=100:"1500",1:+SQLCOD)

	if SQLCOD>0,SQLCOD<1500 set SQLCOD=0
	
	set RETURN = {String}SQLCOD.justify(5, 1, "0")	// Zero pad

	//Invalid stored procedure name
	if (RETURN = 50001) set ER=0

	quit RETURN


FORMAT(String FMT)	// Redefine format masks for this message
	/*
	   If the /FORMAT qualifier is passed from the client request, this
	   function will replace the edit masks defined by the system with
	   those from the specified format table.  If no entry exists for the
	   requested format, return an error.

	   ARGUMENTS:
	   . FMT    - Format to be used for current	/TYP=T/REQ/TBL=[DBTBL6E]/MECH=VAL
		      client request.

	   RETURNS:
	   . $$	    - Error status of the call.
	*/

	type public String %MSKC,%MSKD,%MSKE,%MSKL,%MSKN,RM

	type String X

	// Load format from table
	type RecordSTBLTFMT tfmt=Db.getRecord("STBLTFMT","FMT",1)
	
	// Invalid format
	if tfmt.getMode()=0 set RM=$$^MSG(1350,FMT) quit 1
	
	set %MSKD=tfmt.mskd		// Date mask
	set %MSKL=tfmt.mskl		// Logical mask
	set %MSKC=tfmt.mskc		// Clock time mask
	set %MSKE=tfmt.mske		// Currency mask
	set %MSKN=tfmt.mskn		// Numeric mask

	quit 0


STF	// Store and forward handling of rejected updates
	/*
	   This subroutine logs the original client message to an exception
	   file along with the application reply when the message is a
	   store and foward message and rejects.

	*/

	type public String ER,REPLY,RM

	type String NSEQ,ZBRCD,ZBUF,ZDATE,ZTOKEN,ZUID

	set ZTOKEN=%SessionID

	// Buffer Name
	type ResultSet rs=Db.select("BUFFER","DBBUF","TOKEN=:ZTOKEN")
	if rs.isEmpty() quit	// Missing buffer name
	if rs.next() set ZBUF=rs.getCol(1)

	type RecordTOKEN token=Db.getRecord("TOKEN","ZTOKEN",1)
	if token.getMode()=0 quit
	set ZUID=token.uid

	type RecordSCAU scau=Db.getRecord("SCAU","ZUID",1)
	if scau.getMode()=0 quit
	set ZBRCD=scau.brcd

	if ZBRCD="" set ZBRCD=CUVAR.BOBR	// Back Office Branch Code

	// Get next SEQ from STFSQL
	set ZDATE=%CurrentDate
	type ResultSet rsstf = Db.select("DISTINCT SEQ", "STFSQL", "DATE=:ZDATE", "SEQ DESC")
	if rsstf.next() set NSEQ = rsstf.getCol("SEQ") + 1
	else  set NSEQ = 1

	type DbSet rs1=Db.selectDbSet("DBBUFCOM","TOKEN=:ZTOKEN AND BUFFER=:ZBUF")
	if rs1.isEmpty() quit
	while rs1.next() do {
		type RecordDBBUFCOM  dbbuf=rs1.getRecord("DBBUFCOM")

		// set the record in STFSQL
		type RecordSTFSQL stfsql=Class.new("RecordSTFSQL")
		set stfsql.date=%CurrentDate
		set stfsql.seq=NSEQ
		set stfsql.bufseq=dbbuf.bufrec
		set stfsql.brcd=ZBRCD
		set stfsql.uid=ZUID
		set stfsql.status=RM.get()
		set stfsql.sql=dbbuf.bufexpr
		do stfsql.bypassSave()
	}

	set ER=0
	set REPLY=""

	quit


VALID(String EXPR,String TOK,String SPEC)	// Check if message can be processed during end of day
	/*
	   When 24x7 mode is enabled INSERT, UPDATE and DELETE statements are
	   prohibited for tables ACN, DEP and LN. Only public stored
	   procedures (EXECUTE statements) are allowed.

	   Note that the validity of statements in a BUFFER are checked when
	   the transaction is committed.  This check is performed in program
	   SQLBUF.
	*/
	type String CMD

	set CMD=EXPR.piece(" ",1)
	set EXPR = EXPR.extract(CMD.length()+2, EXPR.length())
	set SPEC=0

	// Do not restrict the following SQL statements during end-of-day
	if ",BUFFER,CLOSE,CREATE,DESCRIBE,FETCH,OPEN,SELECT,"[(","_CMD_",") quit 1

	// Restrict the following SQL statements during end-of-day
	if ",ALTER,DROP,"[(","_CMD_",") quit 0

	type Boolean VALID
	type String TABLE,X

	set VALID=1

	if CMD="INSERT" do {

		type String INTO

		set X=$$TOK^SQL(EXPR,"INTO",.TOK)

		if INTO.get()="" set INTO=X if INTO="" quit

		set TABLE=$$FUN^SQL(INTO,,TOK)
		set VALID=$$CHKTBL(TABLE)

		if VALID=0 set VALID=1,SPEC=1

		}

	if CMD="UPDATE" do {

		type String SET

		set X=$$TOK^SQL(EXPR,"SET",.TOK)
		if X'[(0.char()) set TABLE=X
		else  set TABLE=$$UNTOK^%ZS(X,TOK)
		set VALID=$$CHKTBL(TABLE)

		}

	if CMD="DELETE" do {

		type String FROM

		set X=$$TOK^SQL(EXPR,"FROM",.TOK)

		if FROM.get()="" set FROM=X if FROM="" quit

		set TABLE=$$FUN^SQL(FROM,,TOK)
		set VALID=$$CHKTBL(TABLE)

		}

	if CMD="EXECUTE" do {
		set X=EXPR.piece(" ",2)

		if X.extract(1,2)'="$$" quit

		set X=X.extract(3,X.length())
		set X=X.piece("(",1)
		if 'Db.isDefined("UTBLRTNS","X")  set VALID=0

		}

	quit VALID


CHKTBL(String TABLE)	//Check if table is restricted

	if TABLE["""" set TABLE=TABLE.stripQuotes()
	if TABLE="ACN" quit 0
	if TABLE="DEP" quit 0
	if TABLE="LN" quit 0

	quit 1
 #OPTION ResultClass ON
public String vSIG()	quit "61571^56885^Dan Russell^23849"	// Signature - LTD^TIME^USER^SIZE
