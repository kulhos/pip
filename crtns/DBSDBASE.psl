DBSDBASE
	
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The mrtns version will be used during upgrades and will then be *
	// * removed from the mrtns directory.  Therefore, other than in a   *
	// * development environment, or during an upgrade, an mrtns version *
	// * of this routine should not exist.                               *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	 
	/*
	Oracle/DB2 Database Utilities
	
	Private labels are available for DATA-QWIK, SQL, and PSL only.

	---- Revision History -------------------------------------------------
	09/10/2007 - RussellDS - CR29295
	
		Removed BIND and VOBJ sections.  No longer used.
		
		Removed old revision history.
	
	09/07/07 - RussellDS - CR27652
		   Modified handling of PROCLIST in REGENSP to remove use of
		   Error class since that was causing problems with attempt
		   to set to null.
	
	01/29/07 - GIRIDHARAN - CR: 24677
		   Modified section BUILD to quit on a M database.
		   
	08/28/06 - RussellDS - CRs: 22719 / 20613
		   Rewrote VOBJ section to improve efficiency.
	
	06/08/06 - RussellDS - CR21672
		   Modified BUILD section to display errors that occur.  Was
		   referencing undefined vRm previously.  Now displays any
		   errors from returned error array.
	
	03/08/06 - GIRIDHARAN - CR19999
		   Modified section BUILD to pass in the rdb table name to 
		   section REGENSP
	
	03/01/06 - Giridharanb - CR19860
		   Added a function BUILD to support mass regeneration of oracle
		   stored procedures..
		   
	02/23/06 - Frans S.C. Witte - CR19761
		   Funcion $$value(): for datatype 'L' an empty string will
		   unconditionally translate into zero.

	02/10/06 - Pete Chenard - CR 19161
		   Added LIST function, which returns the list of columns
		   for a specified table in the order in which they exist in 
		   the relational database.
		   
	02/02/06 - RussellDS - CR19376
		   Added CREATESP and REGENSP sections.  Modified RUNSP section
		   to use CREATESP.
	
	01/18/06 - RussellDS - CR19046
		   Modified VOBJ section to correctly get node information for
		   blob/memo fields - replace node with position on construction
		   of vobj reference.
	-----------------------------------------------------------------------
	*/

	quit		// Do not call from top


private RUNSP(String expr,	// SQL expression
	      String colnam,
	      String tabnam,
	      String cnd,
	      String hostval,
	      String RM)
	      
	/*
	Returns the SP name if it exists, otherwise creates stored
	procedure on the Oracle database and then returns the name.
	
	Throws an error if error encountered.  ER retained as public
	variable for backward compatibility.
	
	NOTE:  This section will go away once the current caller is
	       modified to call CREATESP directly.
	*/
	
	type String INPUT()
	
	set INPUT("SQL") = expr
	set INPUT("WHERE") = cnd
	set INPUT("HOSTVARS") = hostval
	
	quit $$CREATESP(tabnam, "SelectAll", .INPUT(), 0)
	

private CREATESP(String RTBL,		// Table name [*]
		 String METHOD,		// Name of method procedure created for [*]
		 String INPUT(),	// Input to procedure creation [*]
		 Boolean REGEN)		// Force regeneration [*]
		 
	/*
	Create a stored procedure, return the name.
	
	ARGUMENT NOTES:
	
		. RTBL		Either the RDB table name or $DB for procedures
				that are database wide
				
		. METHOD	Identifies the method for which the procedure is
				create since each method has its own naming
				convention and approach to generating the supporting
				procedure.
				
				The allowed method names are documented below.
				
		. INPUT		The contents of this array vary based on the method
				and are documented for each method.  INPUT is saved
				in DBSPID to be used to determine if a request for
				a procedure duplicates one that already exists.
				
		. REGEN		Allows forced regeneration of a stored procedure.
				
	RETURNS:
		. $$		Procedure name
		
		. Error		Throws an error if an error is encountered
		
	EXAMPLE:
	
		set spname = $$CREATESP^DBSDBASE("ACN", "SelectAll", .INPUT(), 0)
		
	Methods:
	
		. SelectAll	SELECT * from RTBL for a single row
		
				  INPUT("SQL") = select statement
				  INPUT("WHERE") = where clause
				  INPUT("HOSTVARS") = host variable list
				
				Name = T_tablename$SEL_ALL
				  
	Notes:	Additional methods are planned for the future.
		If we begin using packages, the names may change.
	*/
	
	type Boolean ER = false
	type Number seq
	type String N, procdata, RM, spname
	
	set (N, procdata) = ""
	for  set N = INPUT(N).order() quit:N.isNull()  do {
		
		set procdata = procdata_N_"="_INPUT(N)_13.char()_10.char()
	}
	
	set spname = ""
	
	// See if procedure already generated and, if so, just return name
	if 'REGEN do {
	
		type ResultSet rs = Db.select("SPNAME", "DBSPID", "RTBL=:RTBL AND METHOD=:METHOD AND PROCDATA=:procdata")
		
		if rs.next() set spname = rs.getCol("SPNAME")
	}

	quit:'spname.isNull() spname
	
	if (METHOD = "SelectAll") do {
		
		set spname = "T_"_RTBL_"$SEL_ALL"
		set seq = 0				// Only one of these
		
		do {
			
			type String return
			
			catch error {
				
				set ER = true
				set RM = error.description
			}
	
			set return = $$EXECCP^%DBAPI(0, spname, "*", RTBL, INPUT("WHERE"), INPUT("HOSTVARS"))
		}
	}
	
	else  do {
		
		set ER = true
		set RM = "Invalid method name"
	}
		
	if 'ER do {
		
		type RecordDBSPID dbspid = Db.getRecord("DBSPID", "RTBL=:RTBL,METHOD=:METHOD,SEQ=:seq", 1)
		
		// Note that this may replace an existing, different procedure name.
		// This will only occur if we change our naming conventions.
		set dbspid.spname = spname
		set dbspid.procdata = procdata
		set dbspid.lastdate = %CurrentDate
		set dbspid.lasttime = %CurrentTime
			
		do dbspid.save()
	}
	
	if ER throw Class.new("Error", "%DQ-E-CREATESP,"_RM.get().replace(",","~"))
	
	quit spname
	
	
private REGENSP(String RTBL,		// Relational table name [*]
		String PROCLIST(,))	// Procedures regenerated [*]	/MECH=REFARR:W
		 
	/*
	Regenerate all the stored procedures for a given table, return the names.
	
	ARGUMENT NOTES:
	
		. RTBL		Either the RDB table name or $DB for procedures
				that are database wide
				
		. PROCLIST	Array returned containing procedure name, method,
				and description of any errors that occur
				
				  PROCLIST(spname, method) = error message or
				  			     null if no error
				
	RETURNS:
		. $$		0 if no errors
				number of errors otherwise

	EXAMPLE:
		set X = $$REGENSP("ACN", .PROCLIST(,))
	*/
	
	type Boolean REGENER
	type String CRLF
	
	set REGENER = 0
	set CRLF = 13.char()_10.char()
	
	type DbSet ds = Db.selectDbSet("DBSPID", "RTBL=:RTBL")
	
	while ds.next() do {
		
		type Number I
		type String input(), procdata, spname, X
		
		type RecordDBSPID dbspid = ds.getRecord("DBSPID")
		
		set procdata = dbspid.procdata
		
		for I = 1:1:procdata.length(CRLF) - 1 do {
			
			set X = procdata.piece(CRLF, I)
			set input(X.piece("=", 1)) = X.piece("=", 2, X.length())
		}
		
		catch regenerr {
			
			set REGENER = REGENER + 1
			set PROCLIST(dbspid.spname, dbspid.method) = regenerr.description
		}
		
		set spname = $$CREATESP(RTBL, dbspid.method, .input(), 1)
		
		set PROCLIST(spname, dbspid.method) = ""
	}
	
	quit REGENER
	

private wide(String dqtable)	// DATA-QWIK table name

	/*
	Wide table check

	Checks if the specified table is split into multiple smaller tables.

	RETURNS:
		. $$	0 - not a wide table		/TYP=L
			1 - is a wide table
	*/
	
	type public String %DB

	type RecordDBMAPT dbmapt = Db.getRecord("DBMAPT", "DB=:%DB,TBL=:dqtable", 1)
	
	quit +dbmapt.issplit
	
	
Public LIST(table)     // returns ordered list of columns for a specified table.
 
	type String list=""
	type String col
	type ResultSet rs=Db.select("COL,POS","DBMAP","TBL=:table","POS ASC")
	while rs.next() do {
		set col=rs.getCol(1)
		quit:col.isLiteral()
		set list=list_","_rs.getCol(1)
	}
	set list=list.extract(2,9999)
	quit list

public BUILD    // Build Stored procedures for all tables in the DB
 
        type Number CNT,i,vEr
	type String dbid,rfid,SPLIST(,)
	
	set dbid=$$TRNLNM^%ZFUNC("SCAU_DB")		
 
        do Db.delete("TMPDQ","PID=:%ProcessID")
 
        set CNT = $$LIST^DBSGETID("DBTBL1")            // Select table names 
        quit:(+CNT=0)
        
        if dbid="GTM" write $$MSG^%TRMVT("",,1) quit
 
        type DbSet ds = Db.selectDbSet("TMPDQ","PID=:%ProcessID","ELEMENT ASC")
        while ds.next() do {
                type RecordTMPDQ tmpdq = ds.getRecord("TMPDQ")
		set rfid=tmpdq.element
                do MAP^DBMAP(dbid,.rfid)
                if rfid.length(",")>1 for i=1:1:rfid.length(",") do {
                        set vEr=$$REGENSP(rfid.piece(",",i),.SPLIST(,))
                }
                else  set vEr=$$REGENSP(rfid,.SPLIST(,))
                
                if vEr do {
                	
                	type String ERDESC, N, SP
                	
                	// Errors: ~p1
                	write !!, $$^MSG(6819)
                	
                	set (N, SP) = ""
                	for  set SP = SPLIST(SP).order() quit:SP.isNull()  do {
                		
                		for  set N = SPLIST(SP, N).order() quit:N.isNull()  do {
                			
                			set ERDESC = SPLIST(SP, N)
                			
                			if 'ERDESC.isNull() write ?10, SP, " - ", N, ":  ", ERDESC, !
                		}
                	}
                }
        }
 
        do Db.delete("TMPDQ","PID=:%ProcessID")
 
        // Press any key message and pause
        write $$MSG^%TRMVT("",,1)
 
        quit
 #OPTION ResultClass ON
public String vSIG()	quit "60955^55454^Dan Russell^9830"	// Signature - LTD^TIME^USER^SIZE
