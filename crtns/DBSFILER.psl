DBSFILER
		 
	/*
	DATA-QWIK general purpose database filer.
	
	Much of this procedure will be obsoleted once all code is converted
	to PSL.
	
	NOTE:  The EXT section of this procedure cannot be used for tables that
	are in an RDB.  Any callers expecting to file to an RDB must be written
	in PSL and use the save() methods.

	---- Revision History -------------------------------------------------
	11/09/2008 - RussellDS - CRs 36391/35741
		Modify VDDUX section to handle table validation the same way
		that filers do during INSERT, i.e., if only a single key,
		ignore any :QUERY conditions.
	
	10/16/2008 - RussellDS - CRs 35741/35918
		Corrected typo in VDDUX ("{" should be "[")
	
	01/21/2008 - RussellDS - CR30801
		Removed reference to DBTBL1.UDFILE and code that handled the
		case of there not being a filer - now there always is.
		
		Removed FILE, INDEX, and tbl sections, no longer used.
		
		Removed old revision history.
	
	09/04/07 - RussellDS - CR27653
		   Modified VDDUX section to consider pattern match.
	
	08/30/07 - RussellDS - CR27738
		   Fix problem with indirection in EXT section.
		   
		   Fixed undefined errors in FILE section.
		   
		   Remove old revision history.
	
	08/07/07 - RussellDS - CR28507
		   Removed references to obsolete columns in DBTBL8 - QRY1,
		   QRY2, and NULLFLG.
	
	01/24/07 - RussellDS - CRs 24902 / 24903 / 24974
		   Removed header comment about needing to release the .m
		   file for bootstrapping.  That is no longer needed.
	-----------------------------------------------------------------------
	*/

	quit		// Do not call from top

	
public EXT(String fid,			// Table name
	   Number %ProcessMode,		// Processing mode [*]
	   String par)			// Parameters		/NOREQ
	   
	/*
	Update a single record based on the access keys and the short name
	
	NOTE:  This section is for backward compatibility for code that has
	not yet been rewritten to PSL.  Once all code is PSL, this section
	and all it's supporting code should be removed.
	
	This call is not to be used by any PSL code.
	
	ARGUMENT NOTES:
	
		. %ProcessMode		Values - 0 = insert
						 1 = update
						 2 = integrity check
						 3 = delete
	*/
	
	// vfkey() is public array used by SQL for buffered commits in
	// order to perform foreign key checking at end.
	
	type public Boolean ER
	type public String RM, UX(,), vfkey()

	type Boolean vtp
	type Date vtjd
	type Number I
	type String vpgm
	
	set ER = 0
	
	if $$rdb^UCDB(fid) do { quit
		
		set ER = 1
		set RM = "^DBSFILER is not valid for RDB tables.  Rewrite caller to PSL using save methods."
	}
	
	set vpgm = "Record"_ fid
	
	#ACCEPT Date=06/14/2008; Pgm=RussellDS; CR=30801; Group=BYPASS
	#BYPASS
	S vtp=$Tlevel				; Is TP already on?
	#ENDBYPASS
	
	if 'vtp do Runtime.start("CS", "*")
		
	if (%ProcessMode = 2) do {		// Integrity check
			
		type String vpgmx
			
		set vpgmx = "vlegacy^"_vpgm_"(%ProcessMode,$G(par))"
			
		do @vpgmx
	}
	else  do {
			
		type Number obj
		type String vpgmx, vobj()
			
		set obj = $$SN2OBJ^UCUTIL(fid)	// Convert to object format
			
		set vpgmx = "vSave^"_vpgm_"(obj,$G(par))"
			
		do @vpgmx			// Call filer
	}
	
	quit:vtp				// Let calling routine to manage TP
	
	kill vfkey				// Don't return if not under TP
	
	#ACCEPT Date=06/14/2008; Pgm=RussellDS; CR=30801; Group=BYPASS
	#BYPASS
	I '$Tlevel S ER=1 Q		; TP restart error?
	#ENDBYPASS
	
	if ER do Runtime.rollback() quit
	
	do Runtime.commit()
	
	quit


public VDDUX(String fid,	// Table name
	     String vx())	// Data buffer [*]	/MECH=REFARR:R

	/*
	Validate input based on data dictionary attributes.
	
	Called by filer generated code.
	
	If encounters an error, will throw error.

	ARGUMENT NOTES:

		. vx	vx(column)=old_value|new_value

	EXAMPLES:

		do VDDUX("DEP",.vx)
	*/
	
	type String col, delim, vRM
	
	type PSLTable tblrec = PSL.getPSLTable(fid, 0)
	
	set delim = tblrec.columnDelimiter.char()
	
	set (col, vRM) = ""
	
	for  set col = vx(col).order() quit:col.isNull()  do { quit:'vRM.isNull()
		
		type String max, min, tbl, typ, X
		
		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:fid,DI=:col")
		
		quit:(dbtbl1d.nod ? 1N1"*")		// No need to check keys
		
		set tbl = dbtbl1d.tbl
	
		if 'tbl.isNull() do {			// Table look-up
		
			type Number I, keycnt
			type String acckeys, tblfid
		
			// No validation
			if tbl.beginsWith("@") set tbl = "" quit

			// No validation
			if tbl.isLike("%:NOVAL%") set tbl = "" quit
			
			// Not table reference
			if (tbl '? 1"[".E1"]".E) set tbl = "" quit
			
			// Check for too many keys
			set tblfid = tbl.piece("[", 2).piece("]", 1)
			
			type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:tblfid", 1)

			// Not valid table
			if (dbtbl1.getMode() = 0) set tbl = "" quit
			
			set acckeys = dbtbl1.acckeys
			set keycnt = 0
			for I = 1:1:acckeys.length(",") if 'acckeys.piece(",", I).isLiteral() set keycnt = keycnt + 1

			/* For a single key, we'll just check that the table exists.  Remove
			   any :QUERY syntax.  If multiple keys and :QUERY, check that all
			   but last key are provided and that each is a literal, otherwise
			   do not do table look-up check.  This matches approach taken by
			   filer generator during INSERT. */
			   
			if (keycnt = 1) set tbl = tbl.piece(":QU", 1)	// Remove QUERY if only one key 
			else  if 'tbl.isLike("%:QU%") do {
			
				type String key, keyname, keyval, TOK
			
				type String qry = tbl.piece(":QU", 2).piece(" ", 2, PSL.maxStringLength)
				
				if qry.isNull() set tbl = "" quit
						
				set qry = qry.stripQuotes()
				#ACCEPT DATE=11/09/2008; PGM=Dan Russell; CR=36588; Group=ACCESS
				set qry = $$TOKEN^%ZS(qry, .TOK)
						
				for I = 1:1:acckeys.length(",") - 1 do { quit:tbl.isNull()
							
					set keyname = acckeys.piece(",", I)
					quit:keyname.isLiteral()
					set key = "["_ tbl_ "]"_ keyname_ "="
							
					if (qry '[ key) set tbl = ""
					else  do {
								
						set keyval = qry.piece(key, 2)
						#ACCEPT DATE=11/09/2008; PGM=Dan Russell; CR=36588; Group=ACCESS
						set keyval = $$ATOM^%ZS(keyval, 0, ",:&", TOK, 0)
						if keyval.isNull() set tbl = ""
						else  if '(keyval.isNumber() ! (keyval ? 1"""".E1"""")) set tbl = ""
					}
				}
			
			}
			else  set tbl = ""
		}
	
		set typ = dbtbl1d.typ
		set min = dbtbl1d.min
		if 'min.isNull() set min = $$valuea(min, typ)
		set max = dbtbl1d.max
		if 'max.isNull() set max = $$valuea(max, typ)
		
		// Get current value - needed by VAL^DBSVER
		set X = vx(col).piece(delim, 2)
		
		set vRM = $$VAL^DBSVER(typ, +dbtbl1d.len, +dbtbl1d.req, tbl, dbtbl1d.ptn, min, max, +dbtbl1d.dec, , "["_fid_"]"_col, 0)

		if 'vRM.isNull() set vRM = fid_"."_dbtbl1d.di_" "_vRM
	}
	
	if 'vRM.isNull() throw Class.new("Error","%PSL-E-DBFILER,"_vRM.replace(",","~"))
	
	quit
	
	
valuea(String v,	// Input value
       String typ)	// Data type

	set v = $$value(v, typ)
	if ((v ? 1A.AN) ! (v ? 1"%".AN)) set v = "<<"_v_">>"	// <<variable>> 
	
	quit v
	
	
value(String v,		// Input value
      String typ)	// Data type
      
	/*
	Convert internal to external format
	
	EXAMPLES:     External            Internal      Type
	
	              SystemDate           TJD            D
	              CurrentDate          +$H            D
	              123		   123            
	              XYZ		   "XYZ"     
	              <<ABCDE>>            ABCDE      
		      T		   	   TJD            D
	              C                    +$H            D
	              Y                    1              L
	              N                    0              L
	*/
	
	type String RETURN
	
	if v.isNull() set RETURN = ""
	else  if Db.isDefined("STBLJRNFUNC", "FUNC=:v") do {	// System keyword
	
		type RecordSTBLJRNFUNC jrnfunc = Db.getRecord("STBLJRNFUNC", "FUNC=:v")
	
		set RETURN = jrnfunc.code
	}
	else  if v.isNumber() set RETURN = v
	else  if v.beginsWith("<<"), v.endsWith(">>") set RETURN = v.piece("<<", 2).piece(">>", 1)	// <<Variable>>
	
	else  if (typ = "D") do {
		
		if (v = "T") set RETURN = "TJD"			// System Date
		else  if (v = "C") set RETURN = "+$H"		// Calendar Date
		else  set RETURN = ""
	}
	else  if (typ = "C") do {
		
		if (v = "C") set RETURN = "$P($H,"","",2)"	// Current time
		else  set RETURN = ""
	}
	else  if (typ = "L") do {				// Logical
		
		if (v = "Y") set RETURN = 1
		else  set RETURN = 0
	}
	else  if (v = """") set RETURN = """"""""""		// String delimiter
	else  set RETURN = """"_v_""""				// Text
	
	quit RETURN
 #OPTION ResultClass ON
public String vSIG()	quit "61311^54316^Dan Russell^8131"	// Signature - LTD^TIME^USER^SIZE
