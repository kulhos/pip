DBSAG	
		 
	/*
	Utilities to manage DATA-QWIK aggregate definitions.
	
	NOTE:  When creating an aggregate definition on an RDB, must do things
	       in the following order:
	       
	         1)  Define aggregate definition
	         2)  Create DQA* tables
	         3)  Load the generated DDL to the RDB
	         4)  For the aggregate tables (main plus detail if appropriate)
	             DO FILE^DBMAP(table_name,database_id)
	         5)  Compile Aggregate Procedures

	---- Revision History -------------------------------------------------
	10/10/2007 - RussellDS - CR29695
		Eliminate use of setMode(3).  Being obsoleted in PSL.
	
	10/10/05 - RussellDS - CR17418
		   Created.

	-----------------------------------------------------------------------
	*/
	
	quit
	

public MENU(Number OPT)	// Option - 0 = create, 1 = update

	/*
	Modify aggregate definitions
	*/
	
	type public Boolean ER = 0
	type public String %DB
	
	type Boolean doCOLS, doCOMP, doCRTBL, doDELETE, doHDR, doROWS, QUIT
	type Number %FRAME, OLNTB
	type String %NOPRMT, %READ, %TAB(), AGID, VFMQ
	
	if %DB.get().isNull() set %DB = $$GETDB
	
	set OLNTB=6040
	set AGID = $$FIND^DBSGETID("DBTBL22", 'OPT) quit:AGID.isNull()
	
	// Create new record
	if (OPT = 0) do {
		set (doCOLS, doCOMP, doCRTBL, doHDR, doROWS) = 1
		set doDELETE = 0
	
		set %TAB("doHDR") = ".AGGHC"
		set %TAB("doCOLS") = ".AGGCC"
		set %TAB("doROWS") = ".AGGRC"
		set %TAB("doCRTBL") = ".AGGCR"
		set %TAB("doCOMP") = ".AGGCMP"
		
		set %READ="@@%FN,,doHDR,doCOLS,doROWS,doCRTBL,doCOMP"
	}
	else  do {
		set (doCOLS, doCOMP, doCRTBL, doDELETE, doHDR, doROWS) = 0
		
		set %TAB("doHDR") = ".AGGHM"
		set %TAB("doCOLS") = ".AGGCM"
		set %TAB("doROWS") = ".AGGRM"
		set %TAB("doCRTBL") = ".AGGCR/XPP=I X=1 D CHKDATA^DBSAG(AGID)"
		set %TAB("doDELETE") = ".AGGDEL"
		set %TAB("doCOMP") = ".AGGCMP"
		
		set %READ="@@%FN,,doHDR,doCOLS,doROWS,doCRTBL,doDELETE,doCOMP"
	}
	
	set %NOPRMT = "F"
	set %FRAME = 1
	do ^UTLREAD quit:VFMQ="Q"

	set QUIT = 0
	if (doHDR ! (OPT = 0)) do { quit:QUIT
		
		type Number ORIGDTP
		type String ORIGGRP
		
		type RecordDBTBL22 dbtbl22 = Db.getRecord("DBTBL22", "%LIBS='SYSDEV',AGID=:AGID", 1)
		
		set ORIGDTP = dbtbl22.dtp
		set ORIGGRP = dbtbl22.grp
		
		do DRV^USID(OPT, "DBTBL22", .dbtbl22)
		
		if ((OPT = 0) & (VFMQ '= "F")) set QUIT = 1
		
		if (VFMQ = "F") do {
			
			do dbtbl22.save()
			
			if (OPT = 1), 'doCRTBL, ((dbtbl22.dtp '= ORIGDTP) ! (dbtbl22.grp '= ORIGGRP)) do {
				
				// Table structure has changed. Use function @DBTBL22M to recreate DQA* tables.
				write $$MSG^%TRMVT($$^MSG(5436), 0, 1)
			}
		}
	}
	
	if doCOLS do REPEAT(AGID, "COLUMNS")
	if doROWS do REPEAT(AGID, "ROWS")
	
	if doCRTBL do { quit:ER
		
		type String DDLOUT
		
		do DQBLD^SQLAG(AGID, .DDLOUT)
		
		// Use DDL file ~p1 to create table definition(s) in ~p2
		if 'DDLOUT.isNull() write $$MSG^%TRMVT($$^MSG(5434, DDLOUT, %DB), 0, 1)
	}
	
	if doDELETE do {
		
		type Date DATE
		type String %READ, %TAB(), MATDTBL, MATTBL, VFMQ
		
		type RecordDBTBL22 dbtbl22 = Db.getRecord("DBTBL22", "%LIBS='SYSDEV',AGID=:AGID", 1)
		
		quit:(dbtbl22.getMode() = 0)	// No table definition yet
		
		set MATTBL = "DQA"_AGID
		
		if dbtbl22.dtl set MATDTBL = "DQA"_AGID_"DTL"
		
		if (dbtbl22.dtp <> 0) do {
			
			set %TAB("DATE") = "["_MATTBL_"]DATE/TBL=["_MATTBL_"]DATE:DISTINCT"
			
			set %READ = "DATE"
			
			do ^UTLREAD
			
			quit:(VFMQ '= "F")
			
			do DELETE^SQL(MATTBL_" WHERE DATE=:DATE")
			if dbtbl22.dtl do DELETE^SQL(MATDTBL_" WHERE DATE=:DATE")
		}
		
		else  do {
			
			type Boolean DEL = 0
			
			set %TAB("DEL") = ".DEL1"
			
			set %READ = "DEL"
			
			do ^UTLREAD
			
			quit:(VFMQ '= "F")
			
			do DELETE^SQL(MATTBL)
			if dbtbl22.dtl do DELETE^SQL(MATDTBL)
		}
	}
		
	if doCOMP do CREATE^SQLAG(AGID)
	
	if doHDR, (OPT = 0) do {
		
		// Aggregate table definition for ~p1 created
		write $$MSG^%TRMVT($$^MSG(5437, AGID), 0, 1)
	}

	quit


REPEAT(String AGID,	// Aggregate ID
       String COLROW)	// Columns or Rows

	/*
	Repeating screens for columns and rows
	*/

	type Boolean QUIT = 0
	
	for  do { quit:QUIT
		
		type Boolean DELETE = 0
		type String VFMQ
		
		if (COLROW = "COLUMNS") do {
			
			type String COL
			
			// Get next available column for default
			type ResultSet rs = Db.select("MAX(COL)", "DBTBL22C", "%LIBS='SYSDEV' AND AGID=:AGID")
			
			if rs.next() set COL = $$STRCOL^SQLAG($$NUMCOL^SQLAG(rs.getCol(1)) + 1))
			else  set COL = "A"
			
			type RecordDBTBL22C dbtbl22c = Class.new("RecordDBTBL22C", "%LIBS='SYSDEV', AGID=:AGID")
			
			do DRV^USID(0, "DBTBL22C", .dbtbl22c)
			
			if (VFMQ = "F") do {
				
				if DELETE do {
					
					do Db.delete("DBTBL22C", "%LIBS='SYSDEV' AND AGID=:AGID AND COL=:COL")
				}
				
				else  do dbtbl22c.save()
			}
		}
		else  do {
			
			type String ROW

			// Get next available row for default - increment by 10
			type ResultSet rs = Db.select("MAX(ROW)", "DBTBL22R", "%LIBS='SYSDEV' AND AGID=:AGID")
			
			if rs.next() set ROW = rs.getCol(1) + 10
			else  set ROW = 10
			
			type RecordDBTBL22R dbtbl22r = Class.new("RecordDBTBL22R", "%LIBS='SYSDEV', AGID=:AGID")
			
			do DRV^USID(0, "DBTBL22R", .dbtbl22r)
			
			if (VFMQ = "F") do {
				
				if 'DELETE do dbtbl22r.save()
				if DELETE do Db.delete("DBTBL22R", "%LIBS='SYSDEV' AND AGID=:dbtbl22r.agid AND ROW=:dbtbl22r.row")
			}
		}
		
		if (VFMQ '= "F"), '$$YN^DBSMBAR("",$$^MSG(603),1) set QUIT = 1
	}
	
	quit
	
	
public CHKDATA(String AGID)	// Aggregate ID

	/*
	Create table (see MENU section) post-processor and screen DBTBL22
	post-processor for DTP and GRP to determine if DQA tables contain 
	data.  Cannot change table structure if they do.
	*/
 
	type public Boolean ER
	type public String RM

	type String MATTBL, MATDTBL, TABLES
	
	do AGTBLS(AGID, .MATTBL, .MATDTBL)

	set TABLES = ""
	
	if $$HASDATA(MATTBL) set TABLES = MATTBL
	if $$HASDATA(MATDTBL) set TABLES = TABLES_","_MATDTBL
	
	if 'TABLES.isNull() do {
	
		if TABLES.extract(1) = "," set TABLES = TABLES.extract(2, 99)
 
		set ER = 1
		// Table(s) ~p1 contain data. Cannot create or change table structure. Delete data first.
		set RM = $$^MSG(5435, TABLES)
	}
	
	quit
	
	
HASDATA(String TABLE)	// Table to check to see if has data

	/*
	See if there is data in this table.
	
	Return 0 if not, 1 if does.
	*/
	
	if 'Db.isDefined("DBTBL1", "%LIBS='SYSDEV',FID=:TABLE") quit 0
	
	// Accept dynamic select
	#ACCEPT Date=10/11/05; Pgm=RussellDS; CR=17418
	type ResultSet rs = Db.select("ROW", TABLE)
	
	if rs.isEmpty() quit 0
	
	quit 1
	
	
public AGTBLS(String AGID,	// Aggregate ID
	      String AGTBL,	// Main aggregate data table	/MECH=REF:W
	      String AGTBLDTL)	// Aggregate detail table	/MECH=REF:W
	      
	/*
	Return table name(s) for an aggregate definition.  Note that will
	return names whether the tables have been defined or not, and will
	return a detail name, if requested, whether detail applies, or not.
	*/
	
	set AGTBL = "DQA"_AGID
	set AGTBLDTL = AGTBL_"DTL"
	
	quit


public RUN

	/*
	Run an aggregate stored procedure
	*/

	type Number OLNTB
	type String AGID
	
	set OLNTB = 6040
	
	set AGID = $$FIND^DBSGETID("DBTBL22", 0) quit:AGID.isNull()
	
	do RUN^SQLAG(AGID)

	quit
	
	
public DELETE

	/*
	Delete aggregate definitions - prompt first
	*/
	
	type public String %DB
	
	type Boolean DTL
	type Number MSG
	type String AGID
	
	if %DB.get().isNull() set %DB = $$GETDB
	
	set AGID = $$FIND^DBSGETID("DBTBL22", 0) quit:AGID.isNull()
	
	// Delete Definition ?
	set MSG = $$^DBSMBAR(163) quit:(MSG '= 2)
	
	do Runtime.start("CS")
	
	type RecordDBTBL22 dbtbl22 = Db.getRecord("DBTBL22", "%LIBS='SYSDEV', AGID=:AGID")
	
	if 'dbtbl22.rtn.isNull() do DEL^%ZRTNDEL(dbtbl22.rtn)
	set DTL = dbtbl22.dtl
	
	do DELMAT^SQLAG(AGID)
	
	// Delete aggregate definition tables	
	do Db.delete("DBTBL22C", "%LIBS='SYSDEV' and AGID=:AGID")
	do Db.delete("DBTBL22R", "%LIBS='SYSDEV' and AGID=:AGID")
	do Db.delete("DBTBL22", "%LIBS='SYSDEV' and AGID=:AGID")
	
	do Runtime.commit()
	
	if (%DB '= "GTM") do {
	
		type String MATTBL, MATDTBL
		
		do AGTBLS(AGID, .MATTBL, .MATDTBL)
	
		type String TABLES = MATTBL
		
		if DTL set TABLES = TABLES_","_MATDTBL
		
		// Delete table definition ~p1 from ~p2
		write $$MSG^%TRMVT($$^MSG(5433, TABLES, %DB), 0, 1)
	}
	
	quit


public COPY

	/*
	Copy aggregate definitions
	*/
	
	type String %READ, %TAB, COPYFROM, COPYTO, VFMQ
	
	set %TAB("COPYFROM") = ".COPYFROM/TBL=[DBTBL22]"
	set %TAB("COPYTO") = ".COPYTO/XPP=D COPYPP^DBSAG(X)"
	
	set %READ = "@@%FN,,,COPYFROM/REQ,COPYTO/REQ"
	do ^UTLREAD quit:(VFMQ '= "F")
	
	do Runtime.start("CS")
	
	type RecordDBTBL22 dbtbl22 = Db.getRecord("DBTBL22", "%LIBS='SYSDEV',AGID=:COPYFROM")
	
	type RecordDBTBL22 dbtbl22c = dbtbl22.copy()
	
	set dbtbl22c.agid = COPYTO
	set dbtbl22c.rtn = ""
	do dbtbl22c.setMode(0)
	
	do dbtbl22c.save()
	
	type DbSet dsc = Db.selectDbSet("DBTBL22C", "%LIBS='SYSDEV' AND AGID=:COPYFROM")
	
	while dsc.next() do {
		
		type RecordDBTBL22C dbtbl22c = dsc.getRecord("DBTBL22C")
		
		type RecordDBTBL22C copy = dbtbl22c.copy()
		
		set copy.agid = COPYTO
		do copy.setMode(0)
		
		do copy.save()
	}
	
	type DbSet dsr = Db.selectDbSet("DBTBL22R", "%LIBS='SYSDEV' AND AGID=:COPYFROM")
	
	while dsr.next() do {
		
		type RecordDBTBL22R dbtbl22r = dsr.getRecord("DBTBL22R")
		
		type RecordDBTBL22R copy = dbtbl22r.copy()
		
		set copy.agid = COPYTO
		do copy.setMode(0)
		
		do copy.save()
	}
	
	do Runtime.commit()

	quit
	
	
public COPYPP(String TO)

	/*
	COPY to aggregate ID post-processor
	Check to see if already exists
	*/
	
	type public Boolean ER
	type public String RM
	
	if Db.isDefined("DBTBL22", "%LIBS='SYSDEV',AGID=:TO") do {
		
		set ER = 1
		// Entry already exists
		set RM = $$^MSG(964)
	}
	
	quit
	
	
GETDB()	//

	/*
	Return database type
	*/
	
	type String DB
	
	set DB = $$SCAU^%TRNLNM("DB")
	if DB.isNull() set DB = "GTM"
	
	quit DB
 #OPTION ResultClass ON
public String vSIG()	quit "60913^31094^Dan Russell^9366"	// Signature - LTD^TIME^USER^SIZE
