DBSDF	//
		 
	/*
	Create, modify, inquire, delete table and column definitions.
	
	---- Revision History -------------------------------------------------
	01/21/2008 - RussellDS - CR30801
		Removed reference to DBTBL1.UDFILE.
	
	10/10/2007 - RussellDS - CR29695
		Eliminate use of setMode(3).  Being obsoleted in PSL.
	
	05/01/07 - GIRIDHARANB - CR 26587
		   Modified section VALIDCMP to mark as invalid only when 
		   the computed string contains a "$D" and not a "$$D".
		   
	01/24/07 - RussellDS - CRs 24902 / 24903 / 24974
		   Removed header comment about needing to release the .m
		   file for bootstrapping.  That is no longer needed.
	
	11/02/06 - RussellDS - CR22719
		   Modified order of setting key value and setMode(1) based
		   on changes to PSL.
		   
		   Added #ACCEPT for parameter mismatch on calls to DRV^USID.
	
	04/10/06 - RussellDS - CR20967
		   Converted to PSL.
		   
		   Eliminated unused code.  Moved remaining code that was in
		   DBSDF1.m and DBSDFPD.m into here.
		   
		   Moved MDD from obsoleted DBSMDD.
		   
		   Eliminated obsoleted use of conversion information -
		   DBTBL1D.CNV and STBLCONVFLG.

	-----------------------------------------------------------------------
	*/
	
	quit			// No entry from top
	
	
public CREATE

	/*
	Create Table Definition (Function DBSDFC)
	*/
	
	type public Boolean ER
	type public String RM

	type String FID
	
	set FID = $$FIND^DBSGETID("DBTBL1", 1) quit:FID.isNull()
	
	if 'FID.beginsWith("Z"), Db.isDefined("STBLRESERVED", "WORD=:FID") do { quit
	
		set ER = 1
		// SQL reserved word - not permitted for use
		set RM = $$^MSG(5259)
	}
	
	quit:'$$HEADER(0, FID)		// Table control page
	
	do COLUMNS(FID)			// Column definition
	
	quit
	

public MODIFY

	/*
	Modify File Definition (Function DBSDFM)
	*/
	
	type Boolean isDone = 0
	
	for  do { quit:isDone

		type Boolean %A1, %A2, %A3, %FRAME, DEDF
		type Number OLNTB
		type String %NOPRMT, %READ, %TAB(), FID, VFMQ, X

		set FID = $$FIND^DBSGETID("DBTBL1", 0)
		if FID.isNull() set isDone = 1 quit

		set (%A1, %A3, DEDF) = 0
		set %A2 = 1
		set OLNTB = 6040
		
		set %TAB("%A1") = ".%A2"
		set %TAB("%A2") = ".%A3"
		set %TAB("%A3") = ".%A4"
		set %TAB("DEDF") = ".DEDF"
		
		set %READ = "%A1,%A2,%A3,DEDF"
		set %NOPRMT = "F"
		set %FRAME = 1
		
		do ^UTLREAD quit:VFMQ="Q"
		
		if %A1 set X = $$HEADER(1, FID)	// File header
		if %A2 do COLUMNS(FID)	// Columns
		if %A3 do DOC(FID)		// Documentation
		if DEDF do DEDF(FID)		// Data entry definition
	}
	
	quit


HEADER(Number %ProcessMode,
       String FID)		// Table name

	/*
	File Control Page
	
	RETURNS:
		. $$	0 = error or QUIT
			1 = ok
	*/
	
	type String VFMQ
	
	type RecordDBTBL1 fDBTBL1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:FID", 1)
	
	// Set defaults for screen
	if (fDBTBL1.getMode() = 0) do {
		
		set fDBTBL1.syssn = "PBS"
		set fDBTBL1.netloc = 0
		set fDBTBL1.rectyp = 1
		set fDBTBL1.fsn = "f"_FID.extract(1, 7).replace("_", "z")
	}
	
	#ACCEPT Date=11/02/06; Pgm=RussellDS; CR=22719; Group=MISMATCH
	do DRV^USID(%ProcessMode, "DBTBL1", .fDBTBL1)
	
	if VFMQ="Q" quit 0
	
	do fDBTBL1.save()
	
	quit 1

	
DOC(String FID)

	/*
	Documentation
	*/
	
	type Number cnt, seq, WIDTH
	type String DATA(), MSG
	
	type ResultSet rs = Db.select("SEQ,DES", "DBTBL1TBLDOC", "%LIBS='SYSDEV' AND FID=:FID", "SEQ ASC")
	
	set WIDTH = 80
	set cnt = 0
	while rs.next() do {
		
		set cnt =  cnt + 1
		set DATA(cnt) = rs.getCol("DES")
		if DATA(cnt).length() > 78 set WIDTH = 132
	}

	// ~p1~p2] - File Documentation
	set MSG = $$^MSG(7082, "[", FID)
	do ^DBSWRITE("DATA", 3, 22, 99999, WIDTH, MSG)
	
	quit:'DATA.data()
	
	// Remove any old records
	do Db.delete("DBTBL1TBLDOC", "%LIBS='SYSDEV' AND FID=:FID")
	
	// Save new records
	set cnt = ""
	set seq = 1
	for  set cnt = DATA(cnt).order() quit:cnt.isNull()  do {
		
		type RecordDBTBL1TBLDOC tbldoc = Class.new("RecordDBTBL1TBLDOC", "%LIBS='SYSDEV',FID=:FID,SEQ=:seq")
		
		set tbldoc.des = DATA(cnt)
		do tbldoc.save()
		
		set seq = seq + 1
	}
	
	quit


public DELETE

	/*
	Delete File Definition
	*/
	
	type Boolean isDone = 0
	
	for  do { quit:isDone
	
		type public Boolean deldata, ER, stop
		type public String MSG, RM
	
		type Number I
		type String acckeys, FID, keys, p1

		set FID = $$FIND^DBSGETID("DBTBL1", 0)
		if FID.isNull() set isDone = 1 quit
	
		type ResultSet rsindex = Db.select("FID", "DBTBL8", "%LIBS='SYSDEV' AND FID=:FID")
		type ResultSet rsfkey = Db.select("FID", "DBTBL1F", "%LIBS='SYSDEV' AND FID=:FID")
	
		if rsindex.next() ! rsfkey.next() do { quit
		
			set ER = 1
			// Index or foreign key definition exists.  Delete before continuing.
			set RM = $$^MSG(744)
		}
	
		type ResultSet rsfkey2 = Db.select("DISTINCT FID", "DBTBL1F", "%LIBS='SYSDEV' AND TBLREF=:FID")
	
		if rsfkey2.next() do { quit
		
			set ER = 1
			// ~p1 foreign key definition references ~p2
			set RM = $$^MSG(906, rsfkey2.getCol("FID"), FID)
		}
		
		type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV', FID=:FID")
		
		set acckeys = dbtbl1.acckeys
		set keys = ""
		for I = 1:1:acckeys.length(",") do {
		
			type String key = acckeys.piece(",", I)
		
			if '(key.isLiteral() ! key.beginsWith("$")) set keys = keys_key_","
		}
		set keys = keys.extract(1, keys.length() - 1)
		
		#ACCEPT Date=04/11/06; Pgm=RussellDS; CR=20967
		type ResultSet rsdata = Db.select(keys, FID)
		
		if rsdata.isEmpty() set deldata = 0
		else  do { quit:stop
			
			type String MSG
			
			set deldata = 1
			set stop = 0
			
			// Table ~p1 contains data.  Deleting the table will also delete the data.  Continue?
			set MSG = $$^MSG(5735, FID)
			
			if ($$^DBSMBAR(2) <> 2) set stop = 1
		}

		set p1 = FID
		// Delete <<p1>> ... No Yes
		if ($$^DBSMBAR(164) <> 2) quit
		
		// Use SQL until we have a dynamic delete
		if deldata do {
			
			type String X
			
			set X = $$^SQL("DELETE "_FID)
		}
		
		do Db.delete("DBTBL1D", "%LIBS='SYSDEV' AND FID=:FID")
		do Db.delete("DBTBL1", "%LIBS='SYSDEV' AND FID=:FID")
	
		// Drop table from RDB 
		if $$rdb^UCDBRT(FID) do {

			type Number vER
			type String vRM
			
			set vER = $$EXECUTE^%DBAPI("", "DROP TABLE "_FID, 9.char(), "", .vRM)
			
			if (vER = 0) set vER = $$COMMIT^%DBAPI("", .vRM)
			
			if (vER <> 0) do {
				
				set ER = 1
				set RM = vRM
			}
		}

		// Done
		if 'ER  write $$MSG^%TRMVT($$^MSG(855), "", 1)
	}
	
	quit
	
	
public COPY

	/*
	Copy file definition
	*/
	
	type Boolean isDone = 0
	
	for  do { quit:isDone
	
		type Number OLNTB
		type String %NOPRMT, %READ, FID, TOFID, VFMQ
	
		set FID = $$FIND^DBSGETID("DBTBL1", 0)
		if FID.isNull() set isDone = 1 quit
	
		type RecordDBTBL1 fDBTBL1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:FID")
	
		set %NOPRMT = "Q"
		#ACCEPT Date=11/02/06; Pgm=RussellDS; CR=22719; Group=MISMATCH
		do DRV^USID(2, "DBTBL1", .fDBTBL1)
	
		set %READ = "TOFID/TBL=[DBTBL1]:NOVAL/XPP=D COPYPP^DBSDF"
	        set %READ = %READ_"/TYP=U/DES=To File Definition Name"

		set %NOPRMT = "F"
		set OLNTB = 22020		// Display below DBTBL1 screen
		do ^UTLREAD quit:(VFMQ '= "F")
		
		type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:FID")
		type RecordDBTBL1 dbtbl1c = dbtbl1.copy()
		
		set dbtbl1c.fid = TOFID
		set dbtbl1c.parfid = ""		// Supertype file
		
		do dbtbl1c.setMode(0)
		do dbtbl1c.save()
		
		type DbSet ds = Db.selectDbSet("DBTBL1D", "%LIBS='SYSDEV' AND FID=:FID")
		
		while ds.next() do {
			
			type RecordDBTBL1D dbtbl1d = ds.getRecord("DBTBL1D")
			type RecordDBTBL1D dbtbl1dc = dbtbl1d.copy()
			
			set dbtbl1dc.fid = TOFID
			
			// Key columns are created by DBTBL1 filer, so just update them
			if 'Db.isDefined("DBTBL1D", "%LIBS='SYSDEV',FID=:TOFID,DI=:dbtbl1d.di") do {
	
				do dbtbl1dc.setMode(0)
			}
			else  do dbtbl1dc.setMode(1)
			
			do dbtbl1dc.save()
		}
		
		type DbSet dsdoc = Db.selectDbSet("DBTBL1TBLDOC", "%LIBS='SYSDEV' AND FID=:FID")
	
		while dsdoc.next() do {
			
			type RecordDBTBL1TBLDOC tbldoc = dsdoc.getRecord("DBTBL1TBLDOC")
			type RecordDBTBL1TBLDOC tbldocc = tbldoc.copy()
			
			set tbldocc.fid = TOFID
			
			do tbldocc.setMode(0)
			do tbldocc.save()
		}
	}
	
	quit		
	
	
private COPYPP      // Copy to prompt post-processor

	type public Boolean ER
	type public String RM, X
	
	quit:X.isNull()

	if '$$VALIDKEY^DBSGETID(X) do {
	
		set ER = 1
		// // Alphanumeric format only
		set RM = $$^MSG(248)
	}
	
	else  if Db.isDefined("DBTBL1", "%LIBS='SYSDEV',FID=:X") do {
		
		set ER = 1
		// Already created
		set RM = $$^MSG(252)
	}
	
	else  if 'X.beginsWith("Z"), Db.isDefined("STBLRESERVED", "WORD=:X") do {
	
		set ER = 1
		// SQL reserved word - not permitted for use
		set RM = $$^MSG(5259)
	}
	
	quit
	
	
COLUMNS(String FID)		// Table name
	   
	/*
	Add/Modify Columns
	*/
	
	type Boolean DELETE, isDone
	type String nodpos(), DI, VFMQ
	
	set isDone = 0
	
	type RecordDBTBL1 fDBTBL1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:FID")
	
	for  do { quit:isDone
		
		type String RM
	
		set DELETE = 0
		set DI = ""
	
		type RecordDBTBL1D fDBTBL1D = Class.new("RecordDBTBL1D")

		#ACCEPT Date=11/02/06; Pgm=RussellDS; CR=22719; Group=MISMATCH
		do DRV^USID(0, "DBTBL1D", .fDBTBL1D, .fDBTBL1)
		
		if (VFMQ = "F") do {

			if DELETE do {
			
				do Db.delete("DBTBL1D", "%LIBS='SYSDEV' AND FID=:fDBTBL1D.fid AND DI=:fDBTBL1D.di")
			}
		
			else  do {
			
				if Db.isDefined("DBTBL1D", "%LIBS='SYSDEV',FID=:fDBTBL1D.fid,DI=:fDBTBL1D.di") do {
				
					do fDBTBL1D.setMode(1)
				}
				else  do fDBTBL1D.setMode(0)
	
				do fDBTBL1D.save()
			}
		}
		
		// Continue?
		if '$$YN^DBSMBAR("", $$^MSG(603), 1) set isDone = 1
	}
	
	quit
	
	
private PARCOPY(String PARFID,		// Parent table
		String CHILDFID)	// Child table
		
	/*
	Copy all columns from PARFID to CHILDFID
	
	If the column doesn't exist, create it.  If there are differences
	in selected attributes, change them to match the parent.
	*/
	
	type DbSet ds = Db.selectDbSet("DBTBL1D", "%LIBS='SYSDEV' AND FID=:PARFID")
		
	while ds.next() do {
			
		type String COLNAME
		
		type RecordDBTBL1D dbtbl1dp = ds.getRecord("DBTBL1D")
		
		set COLNAME = dbtbl1dp.di		
		
		type RecordDBTBL1D dbtbl1dc = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:CHILDFID,DI=:COLNAME", 1)
		
		if (dbtbl1dc.getMode() = 0) do {
			
			set dbtbl1dc = dbtbl1dp.copy()
			
			set dbtbl1dc.fid = CHILDFID
			
			do dbtbl1dc.setMode(0)
			do dbtbl1dc.save()
		}
		
		else  do {
			
			type Boolean hit = 0
			
			do dbtbl1dc.setAuditFlag(1)
			
			if dbtbl1dc.nod '= dbtbl1dp.nod do {
			
				set dbtbl1dc.nod = dbtbl1dp.nod
				set hit = 1
			}
			if dbtbl1dc.len '= dbtbl1dp.len do {
			
				set dbtbl1dc.len = dbtbl1dp.len
				set hit = 1
			}
			if dbtbl1dc.dft '= dbtbl1dp.dft do {
			
				set dbtbl1dc.dft = dbtbl1dp.dft
				set hit = 1
			}
			if dbtbl1dc.dom '= dbtbl1dp.dom do {
			
				set dbtbl1dc.dom = dbtbl1dp.dom
				set hit = 1
			}
			if dbtbl1dc.typ '= dbtbl1dp.typ do {
			
				set dbtbl1dc.typ = dbtbl1dp.typ
				set hit = 1
			}
			if dbtbl1dc.des '= dbtbl1dp.des do {
			
				set dbtbl1dc.des = dbtbl1dp.des
				set hit = 1
			}
			if dbtbl1dc.itp '= dbtbl1dp.itp do {
			
				set dbtbl1dc.itp = dbtbl1dp.itp
				set hit = 1
			}
			if dbtbl1dc.dec '= dbtbl1dp.dec do {
			
				set dbtbl1dc.dec = dbtbl1dp.dec
				set hit = 1
			}
			if dbtbl1dc.cmp '= dbtbl1dp.cmp do {
			
				set dbtbl1dc.cmp = dbtbl1dp.cmp
				set hit = 1
			}
			if dbtbl1dc.ismaster '= dbtbl1dp.ismaster do {
			
				set dbtbl1dc.ismaster = dbtbl1dp.ismaster
				set hit = 1
			}
			if dbtbl1dc.sfd '= dbtbl1dp.sfd do {
			
				set dbtbl1dc.sfd = dbtbl1dp.sfd
				set hit = 1
			}
			if dbtbl1dc.siz '= dbtbl1dp.siz do {
			
				set dbtbl1dc.siz = dbtbl1dp.siz
				set hit = 1
			}
			if dbtbl1dc.pos '= dbtbl1dp.pos do {
			
				set dbtbl1dc.pos = dbtbl1dp.pos
				set hit = 1
			}
			if dbtbl1dc.rhd '= dbtbl1dp.rhd do {
			
				set dbtbl1dc.rhd = dbtbl1dp.rhd
				set hit = 1
			}
			if dbtbl1dc.srl '= dbtbl1dp.srl do {
			
				set dbtbl1dc.srl = dbtbl1dp.srl
				set hit = 1
			}
			if dbtbl1dc.cnv '= dbtbl1dp.cnv do {
			
				set dbtbl1dc.cnv = dbtbl1dp.cnv
				set hit = 1
			}
			if dbtbl1dc.ltd '= dbtbl1dp.ltd do {
			
				set dbtbl1dc.ltd = dbtbl1dp.ltd
				set hit = 1
			}
			if dbtbl1dc.user '= dbtbl1dp.user do {
			
				set dbtbl1dc.user = dbtbl1dp.user
				set hit = 1
			}
			if dbtbl1dc.mdd '= dbtbl1dp.mdd do {
			
				set dbtbl1dc.mdd = dbtbl1dp.mdd
				set hit = 1
			}
			if dbtbl1dc.val4ext '= dbtbl1dp.val4ext do {
			
				set dbtbl1dc.val4ext = dbtbl1dp.val4ext
				set hit = 1
			}
			
			if hit do dbtbl1dc.save()
		}
	}
	
	quit


private PARDEL(String PARFID,		// Parent table
	       String CHILDFID)		// Child table	
	
	/*
	Delete all PARFID columns from CHILDFID
	*/
	
	type ResultSet rs = Db.select("DI", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:PARFID")
		
	while rs.next() do {
			
		type String COLNAME
		
		set COLNAME = rs.getCol("DI")
		
		do Db.delete("DBTBL1D", "%LIBS='SYSDEV' AND FID=:CHILDFID AND DI=:COLNAME")
	}
	
	quit
	

DEDF(String FID)

	/*
	Data Entry Definition
	*/
	
	type String VFMQ
	
	type RecordDBTBL1 fDBTBL1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:FID")
	
	#ACCEPT Date=11/02/06; Pgm=RussellDS; CR=22719; Group=MISMATCH
	do DRV^USID(1, "DBSDBE", .fDBTBL1) quit:(VFMQ = "Q")
	
	do fDBTBL1.save()
	
	quit
	
	
public VALIDCMP(String FID,	// Table name
		String DI,	// Column name
		String CMP,	// Computed expression [*]	/MECH-REFNAM:RW
		String RM)	// Error message or null	/NOREQ/MECH=REFNAM:W
		
	/*
	Check to see if computed is valid.
	
	Called by DB screens and column DBTBL1D.VALIDCMP.
	
	ARGUMENT NOTES:
		. CMP	Will return modified computed expression
	
	RETURNS:
		. $$	Error flag (0 = no error, 1 = error)
	*/

	type Boolean ER
	type Number ptr
	type String dels, CMPTOK, CMPUC, tok, v

	set ER = 0
	set RM = ""
	
	if CMP.isNull() quit 0
	
	if CMP.isLike("%^%"), 'CMP.isLike("%$$%"), 'CMP.isLike("%""^""%") do { quit ER
		
		set ER = 1
		// Invalid expression
		set RM = $$^MSG(8045)
	}
	
	set ptr = 0
	for  set ptr = CMP.find(" ", ptr) quit:(ptr = 0)  if (CMP.extract(1, ptr - 1).length("""") # 2 = 1) do { quit
		
		set ER = 1
		// Warning - invalid M expression (V 5.0)
		set RM = $$^MSG(2965)
	}
	
	if ER quit ER	
		
	// Add () around computed if necessary
	if '(CMP.beginsWith("(") & CMP.endsWith(")")), (CMP.translate("+-*/\_#=><","") '= CMP) set CMP = "("_CMP_")"
	
	if CMP.isLike(",%%,") do { quit 1
		
		// Change the % sign into $C(124)
		set RM = $$^MSG(7022)
	}

	if (CMP?1A.A1" "." "1A.A) do { quit 1
		
		// Can't have a space in the middle
		set RM = $$^MSG(7021)
	}
	
	if (CMP.length("(") <> CMP.length(")")) do { quit 1
		
		// Missing Parenthesis
		set RM = $$^MSG(7079)
	}

	if CMP.isLike("%$D%"),'CMP.isLike("%$$D%") do { quit 1
		
		// Invalid expression ~p1
		set RM = $$^MSG(8045, " - $D")
	}
	
	// Do not allow set or do in computed
	set CMPUC = CMP.upperCase()
	if (CMPUC.beginsWith("S ") ! CMPUC.beginsWith("SET ") ! CMPUC.beginsWith("D ") ! CMPUC.beginsWith("DO ")) do { quit 1
		
		// Invalid computed data item - 'di'
		set RM = $$^MSG(8316, $$^MSG(595), FID_"."_DI)
	}

	set CMPTOK = $$TOKEN^%ZS(CMP, .tok)
	set ptr = 0
        set dels = "[]+-*/\#_'=><(),!&:?"
        for  set v = $$ATOM^%ZS(CMPTOK, .ptr, dels, tok, 1) do {  quit:(ER ! (ptr = 0))
        	
        	if (v = "?") set v = $$ATOM^%ZS(CMPTOK, .ptr, dels, tok, 1) quit
        	
        	quit:(dels [ v)
        	
        	// System keyword
		if v.beginsWith("%"), Db.isDefined("STBLSYSKEYWD", "KEYWORD=:v") quit
		
		quit:(v.ascii() = 0)			// Tokenized literal
		quit:v.beginsWith("$")
		quit:v.isNumber()
		
		// Should be a valid column name at this point
		
		if (v = DI) do { quit
			
			set ER = 1
			// Invalid expression ~p1
			set RM = $$^MSG(8045, v)
		}
		
		if 'Db.isDefined("DBTBL1D", "%LIBS='SYSDEV',FID=:FID,DI=:v") do {
		
			set ER = 1
			// Invalid expression ~p1
			set RM = $$^MSG(8045)
        	}
        }

	quit ER
	
	
private MDD(FID)	// Table name

	/*
	Return Master dictionary pointed to by this FID
	*/

	type String SYSSN
	
	type SchemaTable tblrec = Db.getSchemaTable(FID)
	
	set SYSSN = tblrec.systemName
	if SYSSN.isNull() set SYSSN = "PBS"
	
	type RecordSCASYS scasys = Db.getRecord("SCASYS", "SYSSN=:SYSSN")
	
	quit scasys.dbsmdd
	
	
private DSTMDD(String MDDFID,	// Master Data Dictionary Table
	       String MDDREF)	// MDD column name
	       
	/*
	Distribute MDD changes to all affected 
	*/
	
	type RecordDBTBL1D mddrec = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:MDDFID,DI=:MDDREF")
	
	type ResultSet rs = Db.select("FID", "DBTBL1", "%LIBS='SYSDEV'")
	
	while rs.next() do {
		
		type String FID
		
		set FID = rs.getCol("FID")
		quit:($$MDD(FID) '= MDDFID)
		
		type DbSet ds = Db.selectDbSet("DBTBL1D", "%LIBS='SYSDEV' AND FID=:FID AND MDD=:MDDREF")
		
		while ds.next() do {
			
			type Boolean hit = 0
			
			type RecordDBTBL1D dbtbl1d = ds.getRecord("DBTBL1D")
			
			do dbtbl1d.setAuditFlag(1)
			
			if dbtbl1d.len '= mddrec.len do {
			
				set dbtbl1d.len = mddrec.len
				set hit = 1
			}
			if dbtbl1d.dom '= mddrec.dom do {
			
				set dbtbl1d.dom = mddrec.dom
				set hit = 1
			}
			if dbtbl1d.typ '= mddrec.typ do {
			
				set dbtbl1d.typ = mddrec.typ
				set hit = 1
			}
			if dbtbl1d.des '= mddrec.des do {
			
				set dbtbl1d.des = mddrec.des
				set hit = 1
			}
			if dbtbl1d.itp '= mddrec.itp do {
			
				set dbtbl1d.itp = mddrec.itp
				set hit = 1
			}
			if dbtbl1d.dec '= mddrec.dec do {
			
				set dbtbl1d.dec = mddrec.dec
				set hit = 1
			}
			if dbtbl1d.siz '= mddrec.siz do {
			
				set dbtbl1d.siz = mddrec.siz
				set hit = 1
			}
			if dbtbl1d.rhd '= mddrec.rhd do {
			
				set dbtbl1d.rhd = mddrec.rhd
				set hit = 1
			}
			if dbtbl1d.val4ext '= mddrec.val4ext do {
			
				set dbtbl1d.val4ext = mddrec.val4ext
				set hit = 1
			}
			
			if hit do dbtbl1d.save()
		}
	}
	
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61161^47911^Dan Russell^16932"	// Signature - LTD^TIME^USER^SIZE
