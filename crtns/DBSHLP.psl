public DBSHLP(String DINAM,	// Data item name
	      Number VPT,	// Top display margin		/NOREQ/DFT=10
	      Number VPB,	// Bottom display margin	/NOREQ/DFT=23
	      String VALUE,	// Table entry value		/NOREQ
	      String HDR)	// Header			/NOREQ
		 
	/*
	On-line help utility for screen based access.
	
	NOTE:  vZDOC is reserved for usage by this procedure and cannot be
	       passed in as the value of DINAM.

	---- Revision History -------------------------------------------------
	10/08/2008 - RussellDS - CR35918
		* Modified SEL to add .get() to VPB.
		* Removed old revision history.
		
	06/08/07 - Pete Chenard - 27451
		   Corrected RECNOF error when the table documentation name
		   does not match the table name.
	-----------------------------------------------------------------------
	*/
	
	type public Boolean ER
	type public Number E67
	type public String E8, I(), RM
	
	type public Number OLNTB	// Bottom most line of screen
	type public String %fkey()
	
	type Boolean doPrint, isDone
	type Number DSPROWS, RECORDS, zcx, zcy, zseq
	type String vZDOC()
	
	set ER = 0
	
	set HDR = HDR.get()
	
	if (DINAM ? 1"[*]@["1AN.AN1"]"1A.AN) set DINAM = DINAM.piece("@", 2)
	
	// Load from DBTBL11D
	if DINAM.beginsWith("[") do {
		
		type String COLUMN, DOCCOL, DOCTBL, TABLE
		
		if DINAM.isLike("%,%") set DINAM = "["_DINAM.piece(",", 2, DINAM.length())
	
		if '$$VER^DBSDD(.DINAM) do HDR(.HDR) quit
			
		set TABLE = DINAM.piece(".", 2) 
		set COLUMN = DINAM.piece(".", 3)
	
		type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:TABLE")
	
		if 'dbtbl1.fdoc.isNull() set DOCTBL = dbtbl1.fdoc
		else  set DOCTBL = TABLE
	
		set DOCCOL = COLUMN
	
		type ResultSet rs = Db.select("SEQ", "DBTBL11D", "%LIBS='SYSDEV' AND FID=:DOCTBL AND DI=:DOCCOL")
	
		if rs.isEmpty() do {
		
			type String MDDDI, MDDFID
		
			if 'Db.isDefined("DBTBL1","%LIBS='SYSDEV',FID=:DOCTBL") set MDDFID=""
			else  set MDDFID = $$MDD^DBSDF(DOCTBL)
		
			type RecordDBTBL1D mdddi = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:TABLE,DI=:COLUMN", 1)
			set MDDDI = mdddi.mdd
		
			if (MDDFID.isNull() ! MDDDI.isNull()) do {
			
				set DOCTBL = ""
				do HDR(DINAM,.HDR)
			
			}
			
			else  do {
			
				set DOCTBL = MDDFID
				set DOCCOL = MDDDI
			}
		}

		if 'DOCTBL.isNull() do {
		
			type Number SEQ
		
			type DbSet ds = Db.selectDbSet("DBTBL11D", "%LIBS='SYSDEV' AND FID=:DOCTBL AND DI=:DOCCOL", "SEQ ASC")
			
			set SEQ = 3
			while ds.next() do {
				
				type RecordDBTBL11D dbtbl11d = ds.getRecord("DBTBL11D")
				
				set vZDOC(SEQ) = dbtbl11d.doc
				set SEQ = SEQ + 1
			}
		
			// Define standard header - [FID]DI  description  format  size  table
			type RecordDBTBL1D hdrrec = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:DOCTBL,DI=:DOCCOL")
			set HDR = "["_DOCTBL_"]"_DOCCOL_"="_hdrrec.des
			set HDR = HDR_"  Format="_hdrrec.typ
			set HDR = HDR_"  Size="_hdrrec.siz
			set HDR = HDR_"  Table="
			if hdrrec.tbl.isNull() set HDR = HDR_"N"
			else  set HDR = HDR_"Y"
		}

	}
	
	// Load from a system file
	else  if (DINAM ? 1E.E1"."1E.E) do {
		
		type Number I
		
		type IO io = Class.new("IO")

		set io.fileName = DINAM
		set io.openParams = "READ"
		set io.timeout = 5

		catch ioxcpt {
			
			// if device has been opened, close it
			if 'io.device.isNull() do io.close()

			// if not an IO exception, it's not for us
			if 'ioxcpt.type.isLike("%%PSL-E-IO%") throw ioxcpt
			
			// handle the IO exceptions
			if ioxcpt.type.isLike("%IOEOF%") quit
			
			if ioxcpt.type.isLike("%IOOPEN%") do {
				
				set ER = 1
				// Error opening device ~p1
				set RM = $$^MSG(7878, DINAM)
			}
			
			else  do {
				
				set ER = 1
				// Error reading data
				set RM = $$^MSG(994)
			}
		}

		do io.open()
		
		for I = 3:1 set vZDOC(I) = io.read()
	}
	
	// Otherwise, dealing with an array, load it into vZDOC()
	else  if 'DINAM.isNull() do {
		
		type Number I
		type String array, N
		
		if VALUE.get().isNull() set array = DINAM_"N)"
		else  set array = DINAM_VALUE_",N)"
		
		set N = ""
		for I = 3:1 set N = @array.order() quit:N.isNull()  set vZDOC(I) = @array
	}
	
	quit:ER
	
	// No documentation	
	if 'vZDOC.data() do { quit
		
		set ER = 1
		set RM = HDR
	}
	
	if 'HDR.isNull() do {
	
		set vZDOC(1) = HDR
		set vZDOC(2) = ""
		set RECORDS = vZDOC("").order(-1)
	}
	else  set RECORDS = vZDOC("").order(-1) - 2
	
	if '%fkey.data() do ZBINIT^%TRMVT(.%fkey())
	
	if (+VPT.get() = 0) do {
		
		if OLNTB.exists() set VPT = (OLNTB \ 1000) + 1
		else  set VPT = 10
	}
	if (+VPB.get() = 0) set VPB = 23
	
	set DSPROWS = VPB - VPT
	
	if (RECORDS > DSPROWS) do {
		
		set VPT = VPB - RECORDS
		if (VPT < 1) set VPT = 1
	}
	
	//Clear display window and display underline
	do TERM^%ZUSE(0,"NOECHO/NOWRAP")
	write $$SCRAWOFF^%TRMVT
	write $$GREN^%TRMVT
	if (VPT = 1) write $$CLEAR^%TRMVT
	else  do {
		
		write $$CUP^%TRMVT(1, VPT)
		write $$VIDOFF^%TRMVT
		write $$LINE^%TRMVT(80)
		set VPT = VPT + 1
	}
	write $$LOCK^%TRMVT(VPT, VPB)
	
	set DSPROWS = VPB - VPT
	set zcy = VPT
	set zcx = 1
	set zseq = vZDOC("").order()
	
	set isDone = 0
	set doPrint = 1
	for  do { quit:isDone
	
		type Number ZB
		type String Z
	
		if doPrint do {
			
			do PRINT
			write $$CUP^%TRMVT(zcx, zcy)
			set doPrint = 0
		}
		
		read Z#1
		do ZB^%ZREAD
		
		// Display keyboard menu and choose option
		if (%fkey = "KYB") do {
			
			set ZB = $$EMULATE^DBSMBAR
			if ZB.isNull() do {
				
				set ZB = 13
				set %fkey = "ENT"
			}
			else  set %fkey = %fkey(ZB)
		}
		
		if (%fkey = "ESC") set isDone = 1 quit
		
		if (%fkey = "PDN") do PDN write $$CUP^%TRMVT(zcx, zcy) quit
		if (%fkey = "PUP") do PUP write $$CUP^%TRMVT(zcx, zcy) quit
		if (%fkey = "CUU") do CUU write $$CUP^%TRMVT(zcx, zcy) quit
		if (%fkey = "CUD") do CUD write $$CUP^%TRMVT(zcx, zcy) quit
		if (%fkey = "CUF") do CUF write $$CUP^%TRMVT(zcx, zcy) quit
		if (%fkey = "CUB") do CUB write $$CUP^%TRMVT(zcx, zcy) quit
		if (%fkey = "FND") do FND write $$CUP^%TRMVT(zcx, zcy) quit
		if (%fkey = "PRN") do PRN write $$CUP^%TRMVT(zcx, zcy) quit
		
		if (%fkey = "TOP") do { quit
			
			set zseq = 1
			set doPrint = 1
		}
		
		if (%fkey = "BOT") do { quit
			
			set zseq = vZDOC("").order(-1)
			set doPrint = 1
		}
		
		if (%fkey = "DSP") set doPrint = 1 quit
		
		write 7.char()
	}
	

	// Exit function - Erase table display - redisplay original form
	do TERM^%ZUSE(0,"ECHO")
	
	write $$LOCK^%TRMVT
	
	if (VPT > 1) set VPT = VPT - 1
	
	quit


PRINT	// Print a window

	type public Number DSPROWS, VPB, VPT, zend, zseq
	type public String vZDOC()
	
	type Number I
	
	set zend = zseq + DSPROWS
	
	if 'vZDOC(zend).exists() do {
	
		set zend = vZDOC(zend).order(-1)
		set zseq = zend - DSPROWS
	}
	if 'vZDOC(zseq).exists() do {
	
		set zseq = vZDOC(zseq).order()
		set zend = vZDOC(zseq + DSPROWS + 1).order(-1)
	}

	write $$CLR^%TRMVT(VPT, VPB+1)
	
	for I = zseq:1:zend do {
		
		write 13.char(), vZDOC(I)
		
		if ($X > 80) write $$GRON^%TRMVT_$C(96)_$$GROFF^%TRMVT
		
		write $$CUD^%TRMVT
	}
	
	do KEY
	
	quit


KEY	//
	type public Number zend, zseq
	type public String vZDOC()
	
	type String D()

	if vZDOC(zseq - 1).exists() set D(1) = "PUP"
	if vZDOC(zend + 1).exists() set D(2) = "PDN"
	set D(3) = "FND"
	set D(4) = "PRN"
	set D(5) = "ESC"
	
	write $$SHOWKEY^%TRMVT(.D())
	
	quit


PDN	//
	type public Number VPT, zcy, zend, zseq
	type public String vZDOC()
	
	if 'vZDOC(zend + 1).exists() do {
	
		set zcy = VPT + zend - zseq
		do WRITE(zend, zcy)
	}
	else  do {
		
		set zseq = zend + 1
		do PRINT
	}
	
	quit

PUP	//
	type public Number DSPROWS, VPT, zcy, zend, zseq
	type public String vZDOC()
	
	if 'vZDOC(zseq - 1).exists() do {
	
		set zcy = VPT
		do WRITE(zseq, zcy)
	}
	else  do {
		
		set zseq = zseq - DSPROWS
		do PRINT
	}
	
	quit


CUU	// Insert 1 line at the top of the window

	type public Number VPT, zcy, zend, zseq
	type public String vZDOC()

	if (zcy > VPT) do {
		
		set zcy = zcy - 1
		write $$CUU^%TRMVT
		do WRITE(zseq + zcy - VPT)
	}
	else  if vZDOC(zseq - 1).exists() do {
		
		set zseq = zseq - 1
		set zend = zend - 1
		write $$CUP^%TRMVT(1, VPT)
		write $$LININS^%TRMVT
		do WRITE(zseq)
		
		if 'vZDOC(zseq-1).exists() do KEY
	}
	
	quit
	
	
CUD	// Insert 1 line at the bottom of the window

	type public Number VPB, VPT, zcy, zend, zseq
	type public String vZDOC()

	if (zcy < VPB) do {
		
		if vZDOC(zseq + zcy - VPT + 1).exists() do {
			
			set zcy = zcy + 1
			write $$CUD^%TRMVT
			do WRITE(zseq + zcy - VPT)
		}
	}
	else  if vZDOC(zend + 1).exists() do {
	
		set zseq = zseq + 1
		set zend = zend + 1
		write $$CUP^%TRMVT(1, VPT + zend - zseq)
		write 10.char()
		do WRITE(zend)
	}
	
	quit


CUF	// Move cursor forward one position

	type public Number VPT, zcx, zcy, zseq
	type public String vZDOC()

	if (zcx < 80), (zcx < vZDOC(zseq + zcy - VPT).length()) do {
		
		set zcx = zcx + 1
		write $$CUF^%TRMVT
	}
	else  do {
		
		set zcx = 1
		do CUD
	}
	
	quit
	
	
CUB	// Insert 1 line at the bottom of the window

	type public Number VPT, zcx, zcy, zseq
	type public String vZDOC()

	if (zcx > 1) do {
		
		set zcx = zcx - 1
		write $$CUB^%TRMVT
	}
	else  do {
		
		set zcx = 9999
		do CUU
	}
	
	quit
	

WRITE(Number seq,
      Number Y)
      
	type public Number zcx
	type public String vZDOC()
      
	if Y.exists() write $$CUP^%TRMVT(1, Y)
	
	write 13.char()
	write vZDOC(seq)
	
	if ($X > 80) write $$GRON^%TRMVT_$C(96)_$$GROFF^%TRMVT
	
	if (zcx > $X) set zcx = $X
	
	quit
	

FND	// Find a string in the help documentation

	type public Number DSPROWS, VPT, zcx, zcy, zseq
	type public String vZDOC(), zfnd
	
	type Number I
	type String Y, Z

	// Find:
	set zfnd = $$PROMPT($$^MSG(1111), zfnd.get())
	
	write $$CUON^%TRMVT
	
	quit:zfnd.isNull()
	
	set Z = zfnd.upperCase()
	set Y = zcx + 1
	
	for I = zseq + zcy - VPT:1 quit:'vZDOC(I).exists()  set Y = vZDOC(I).upperCase().find(Z, Y) if (Y > 0) quit

	// Not found
	if (Y = 0) write $$MSG^%TRMVT($$^MSG(2042), 0, 1)
	else  do {
	
		set zcx = Y - zfnd.length()
		if (I - zseq '> DSPROWS) set zcy = VPT + I - zseq	// In window
		else  do {
		
			set zseq = I
			do PRINT					// Move window
			set zcy = VPT + I - zseq
		}
	}
	
	quit
	

PROMPT(String prompt,
       String default)
       
	/*
	Prompt for input
	*/
	
	type public String %fkey

	do TERM^%ZUSE(0,"ECHO")
	
	write $$BTM^%TRMVT
	write prompt, default
	
	if 'default.isNull() write $$CUB^%TRMVT(default.length())
	
	set default = $$TERM^%ZREAD(default)
	if (%fkey = "ESC") set default = ""
	
	write $$BTM^%TRMVT
	
	do TERM^%ZUSE(0,"NOECHO")
	
	quit default
	
	
PRN	// Print documentation to a device

	type public String HDR, vZDOC()

	type Number IOSL
	type String IO, N

	do ^DBSIO quit:IO.isNull()
	
	use IO

	if 'HDR.get().isNull() do {
	
		write !," ; "_HDR
		write !," ;",!
	}
	else  write !, #, "Help Documentation Listing", !!
		
	set N = ""
	for  set N = vZDOC(N).order() quit:N.isNull()  do {
		
		write vZDOC(N), !
		if ($Y > IOSL) write #, !
	}
	
	do CLOSE^SCAIO
	
	// Done
	write $$MSG^%TRMVT($$^MSG(855), "", 1)
	
	quit


private SEL(String DINAM,	// Column reference
	    Number VPT,		// Top margin		/MECH=REFNAM:RW
	    Number VPB,		// Bottom margin	/MECH=REFNAM:RW
	    String VALUE,	
	    Boolean ZREF)
	    
	/*
	Select from a table
	*/

	type public String %FN, I()
	
	type Number OP
	type String MASK()

	if ((I(1).get() ? 1"*"1A.E) ! ZREF.get()) set MASK(6) = ""
	
	if %FN.get().isNull() set MASK(4) = ""
	else  do {
		
		type ResultSet rs = Db.select("SEQ", "SCATBLDOC", "FN=:%FN")
		
		if rs.isEmpty() set MASK(4) = ""
	}

	set OP = $$^DBSMBAR(22, "", .MASK)
	
	if OP.isNull() set VPT = 0
	else  if (OP = 1) do DBSHLP(DINAM, .VPT, VPB.get(), VALUE.get())
	else  if (OP = 2) do {
		
		do DIHELP^DBSCRT8C(DINAM)
		set VPT = 1
		set VPB = 24
	}
	else  if (OP = 3) do {
		
		do STATUS^DBSCRT8C
		set VPT = 24
		set VPB = 24
	}
	else  if (OP = 4) do {
		
		type Number SEQ
		type String FUNCDOC()
		
		// Load function documentation then display
		type ResultSet rs = Db.select("SEQ,DOC", "SCATBLDOC", "FN=:%FN", "SEQ ASC")
		
		set SEQ = 1
		while rs.next() do {
			
			set FUNCDOC(SEQ) = rs.getCol("DOC")
			set SEQ = SEQ + 1
		}		
		
		do DBSHLP("FUNCDOC(")
		set VPT = 1
		set VPB = 24
	}
	else  if (OP = 5) do FKLIST()
	else  if (OP = 6) do REF(DINAM)
	
	quit


REF(String DINAM)

	/*
	Data item references
	*/
	
	type public Number VPB, VPT
	
	type String COLUMN, DQL(), DOC(), TABLE, txt, UL, X, zdoc()
	
	set X = $$DI^DBSDD(.DINAM, "") quit:X.isNull()
	
	set TABLE = DINAM.piece(".", 2)
	set COLUMN = DINAM.piece(".", 3)
	
	set UL = ""
	set UL.piece("-", 80) = ""

	set DQL(2) = "Screen"
	set DQL(5) = "Report"
	set DQL(6) = "QWIK Report"

	set txt = "Cross Reference Report for "_TABLE_"."_COLUMN_" ("_X.piece("|", 10)_")"

	do ADD(txt.justify(80, 0))
	do ADD("")

	set DQL = ""
	for  set DQL = DQL(DQL).order() quit:DQL.isNull()  do {
		
		type String NAM, txt
		
		type ResultSet rs = Db.select("INDEXID,IDNAME", "DBINDX", "LIBS='SYSDEV' AND DBOPT=:DQL AND FID=:TABLE AND DINAM=:COLUMN", "INDEXID ASC")
		
		quit:rs.isEmpty()
		
		set NAM = ""
		set txt = DQL(DQL).justify(15, 1)_": "
		do ADD(txt)
		
		while rs.next() do {
			
			set txt = "".justify(18, 1)_rs.getCol("INDEXID").justify(20, 1)
			set txt = txt_rs.getCol("IDNAME")
			do ADD(txt)
		}
	}

	do ADD("")
	
	do DBSHLP("DOC(", .VPT, VPB)
	
	quit


ADD(X)	//
	type public String DOC()

	set DOC(DOC("").order(-1) + 1) = X

	quit


FKLIST()	//
	/*
	List function key table
	*/
	
	type public Number VPB, VPT
	
	type Number C, I
	type String KBD, KBL, KBP, X, zfk()

	set KBL = $$KBL^%TRMVT
	set KBP = $$KBP^%TRMVT
	set KBD = $$KBD^%TRMVT	

	set zfk(1) = "Name  Keyboard            Description"
	set zfk(2) = "----  --------            -----------"
	set C = 3
	
	// Build display string based on logical keyname
	for I = 1:2 set X = KBL.piece("|", I) quit:X.isNull()  do {
		
		type String ALT, DES, KEY
		
		set KEY = X
		set ALT = ""
		set X = $$ZBL(KEY)
		
		if X.beginsWith("*") do {
			
			set X = X.extract(2, X.length())
			set ALT = "["_$$FKP($$ZBL("ALT"))_"]"
		}
		
		set X = $$FKP(X)
		set DES = KBD.piece(KEY_"|", 2).piece("|", 1)
		if (DES = KEY) set DES = ""
		set ALT = ALT_"["_X_"]"
		set zfk(C) = KEY.justify(6, -1)_ALT.justify(21, -1)
		if 'DES.isNull() set zfk(C) = zfk(C)_DES
		set C = C + 1
	}
	
	do DBSHLP("zfk(", VPT.get(), VPB.get())
		
	quit


ZBL(X)	//
	type public String KBL
	
	quit KBL.piece(X_"|", 2).piece("|", 1)


FKP(X)	//
	type public String KBP
	
	quit KBP.piece("|", KBP.piece("|"_X, 1).length("|"))
	

HDR(	String DINAM,
	String HDR)

	type Public String E67, E7, E8, I()
	if DINAM.beginsWith("SYSDEV.*.@") set HDR = "<"_DINAM.piece("@", 2)_">"
	else  set HDR = "<"_DINAM_">"
		
	set HDR = HDR_"  Format="
	if E8.exists() set HDR = HDR_E8
	else  set HDR = HDR_"T"
	set HDR = HDR_"  Size="_E67.get()
	set HDR = HDR_"  Table="
	if I(3).get().isNull() set HDR = HDR_"N"
	else  set HDR = HDR_"Y"
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61277^64016^Dan Russell^14060"	// Signature - LTD^TIME^USER^SIZE
