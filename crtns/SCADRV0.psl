private SCADRV0(FN,INPUT)
 	/*
 	 PROCEDURE ID:	SCADRV0
 	     Original:	Dan S. Russell
		 Date:	9/30/2002 - 12:27:30 PM
 	         Desc:	PROFILE System Driver, Part II

 	---- Comments --------------------------------------------------------
 		
	   This is the second half of the PROFILE driver.  It provides the menu
	   control, function initialization, access logging, and function
	   dispatch.
	
	   NOTE:  If function key remapping is done (which sets up %cmmd), it
	          is retained between function calls.  It is up to the
	          function to reset if desired.  Some tools require that
	          the remapping be persistent (e.g., I18N).
	
	   Arguments:
		. FN Direct function call  /TYP=T/NOREQ
			If null, call menu
	
		. INPUT Input to fn call  /TYP=T/NOREQ
	              %IPMODE["NOINT" = not interactive
	
	---- Revision History -------------------------------------------------
	
	05/22/07 - BeltranA - CR26822
		   Modified VALIDFN section to check on scatbl3.auth=1 instead 
		   of if 'Db.isDefined("SCATBL3","fn,%UserClass")
		   
	03/21/07 - RussellDS - CR25675
  		   Modified call to IPCMGR to use new SETATTS sub-routine.
	
	11/03/06 - RussellDS - CR22719
		   Protect ER and RM before call to FUNC^IPCMGR.
		   
		   Add CR to accepts to avoid warnings.
	
	09/25/06 - GiridharaB - CR23045
		   Modified section DOPGM to new %OPMODE.
	
	03/08/06 - RussellDS - CR19962
		   Change %ZTRAP reference in VSAV to %ZTPTRAP, which is now
		   used by UCGMR.m.
	
	01/26/06 - RussellDS - CR19164
		   Modified to correctly display ER="W" messages.
	
	01/04/06 - RussellDS - CR18765
		   Replace $ZVN reference with $ZVERSION.
		   
		   Fixed deprecated feature warnings around .data() method.

	10/24/05 - Sreeram Panyaram - CR17149
		   Removed all references to SPLITDAY processing Since
		   Split Day Processing has been made obsolete and
		   has been removed from the system.
		   	
	08/29/05 - Radhika CR 16870
	           Removed ORDER BY phrase which is being explicitly stated 
	           in SUBMENU^SCADRV0. 
	
	05/22/05 - Erik Scheetz - 15677
		   Modified code to update PROCESSID table with function
		   being executed.
	
	05/20/05 - Pete Chenard CR 14146
		   Modified PNTRM section to prevent both the IF and ELSE conditions
		   from executing due to $T changing inside MSG section.
		   
	05/11/05 - RussellDS - CR15943
		   Modified DISPATCH section to use new variables vVER and
		   vVRM to integrate changes to filers and save method to
		   deal with ER/RM handling under PSL.
		   
		   Cleaned up numerous PSL scope warnings.
		   
		   Removed old revision history.
	
	01/14/04 - RussellDS - CR 7514
		   Eliminated use of table SCATBL0 (obsoleted) and replaced
		   with table SCAMENU.
		   
		   Cleaned up PSL scope warnings.
		   
		   Removed old revision history.
	-----------------------------------------------------------------------
	*/

	// Compile procedure SCAUTL1 and build routine NOISO
	#XECUTE do COMPILE^DBSPROC("SCAUTL1")
	#XECUTE do BLDNOISO^SCAUTL1
	
	type public String ER
	
	type Boolean DISPLAY, EXIT, STATLIN
	type Number OLDTIME, VMSOPT
	type String %MSGS()
	
	// Do single function
	if $G(FN)'="" do ONEFUNC(FN,$G(INPUT)) quit 
	
	set STATLIN=0
	set DISPLAY=1
	set EXIT=0

 	while 'EXIT do NXTMENU quit:ER

	quit
	

ONEFUNC(FN,INPUT)
	// Single function - call from session or from %IPMODE non-interactive

	type public String %IPMODE

	type Boolean NOSUB	

	if $E(FN)'="@" set FN="@"_FN

	if $$UPPER^%ZFUNC($G(%IPMODE))["NOINT" set NOSUB=1
	else  set NOSUB=0

	do PROC(FN,INPUT,1,NOSUB)
	quit 


NXTMENU	// Next menu

	type public Boolean %AUTOMNU, DISPLAY, EXIT, STATLIN
	type public Number OLDTIME
	type public String %fkey, %MSGS(), ER, MENU(), RM, vcpr, vcps
	
	type Number MENUNO
	type String INPUT, PRMPT, RPTX, X
	
	set ER=0

	if '$G(MENU) set EXIT=1 quit 
	
	set MENUNO=$P(MENU(MENU),"|",1) 
	set PRMPT=$P(MENU(MENU),"|",2)

	if DISPLAY do DISPLAY
	if STATLIN do STATLIN
	
	// Check menu restrictions
	if MENU=1,$$CHKREST set ER=1 quit
	
	// Update time change
	if (%CurrentTime-$P($G(OLDTIME),"|",2))<60 do TIME

	do DSPMENU(MENU,PRMPT)
	
	// Get answer to prompt
	set %fkey=""

	if '%AUTOMNU set X=$$READ($G(RPTX)) kill RPTX
	if %AUTOMNU do {
		type Number %ProcessMode 
		set %ProcessMode=99
		write vcps 
		set X=$$SELECT^SCADRV2("") 
		write vcpr
		set X=$$READ($G(RPTX))
		kill RPTX
	}
	
	if %fkey="DSP" set RPTX=X do TERMSET^SCADRV,DISPLAY quit
	if %fkey="TIM" set EXIT=1 quit 
	
	// Clear any displayed messages
	if $D(%MSGS) do CLRMSGS

	// Must handle first
	if %fkey="KYB" do KYB^SCADRV2 do STATLIN
	
	// Save input for DUP
	if X'="" set $P(MENU(MENU),"|",3)=X
	if $E(X,$L(X))="?" set %fkey="SEL"
	
	if %fkey="CUU" do BACKUP quit
	if %fkey="DUP" set X=$P(MENU(MENU),"|",3) write X
	if %fkey="END" do CLRMENU quit
	if %fkey="ESC" set EXIT=1 quit 
	if %fkey="FND" do { quit:X=""
		set X=$$FIND^SCADRV2(X) 
		set STATLIN=1 
		do TIME 
		if X="" quit
		if $D(%MSGS) do CLRMSGS
	}
	if %fkey="HLP" do HELP^SCADRV2(X),TIME quit
	if %fkey="SEL" do { quit:X=""
		set X=$$SELECT^SCADRV2(X) 
		set STATLIN=1 
		do TIME
		if X="" quit 
		if $D(%MSGS) do CLRMSGS
	}
	// Use the UP ARROW key to return to the menu~p1
	if X="" set RM=$$^MSG(2842,$C(7)) do PNTRM(%AUTOMNU) quit
	//   Save input (again) for DUP
	set $P(MENU(MENU),"|",3)=X
	
	// Handle block mode type input
	set INPUT=""
	if $P(X,",",2,99)'="" set INPUT="/,"_$P(X,",",2,99) set X=$P(X,",",1)
	
	// Check input and dispatch if necessary
	do PROC(X,INPUT)
	if ER!(ER="W") do PNTRM(%AUTOMNU)

	set ER=0	

	quit
	

PROC(fn,INPUT,NOMENU,NOSUB)	// Check menu or function selection
	// Call function if valid, check for sub-functions and loop if selected.
	
	type public Boolean DISPLAY
	type public String %MSGS(), ER, MENU(), vcll
	
	type Boolean DISPEXIT, EXIT, SUB
	type Number SEQ
	type String %BLK
	
	set EXIT=0
	set DISPEXIT=0
	if $G(INPUT)'="" set %BLK=INPUT
	
	// Loop here for sub-functions
	while 'EXIT do { quit:ER
	
		type String %FN, DESC
	
		type RecordSCATBL scatbl
		set %FN=$$VALIDSEL(fn,.scatbl)
		if ER set EXIT=1 quit
	
		// Display choice if using menu and not at sub-menu
		if '$G(SUB)!$G(NOMENU) write $$CUP^%TRMVT(41,4+MENU),vcll,DESC
	
		// New menu selected
		if %FN?.N do NEWMENU set EXIT=1 quit

		// Call function
		do DISPATCH(.scatbl)
		if DISPEXIT set EXIT=1 quit
		// Force redisplay
		set DISPLAY=1
		if ER!$G(NOSUB) set EXIT=1 quit 
	
		// If no submenus, set up for display of ER=W messages
		type ResultSet rs=Db.select("FN","SCATBL4","FN=:%FN")
		if rs.isEmpty() do { quit
			
			set EXIT=1
			if (ER="W") set %MSGS(23) = ""
		}

		/* If submenus, display ER=W messages now and ask 
		for submenu selection */
		if ER="W" do PNTRM()
		// Select from submenu
		set fn=$$SUBMENU(%FN)
		if fn="" set EXIT=1 quit 
		set SUB=1
	}

	quit


DISPATCH(RecordSCATBL scatbl)	// Dispatch to selected function

	/* Note that variables vVER and vVRM are only used by the drivers,
	   UTLERR, and catch blocks.  They must not be newed by other
	   than the drivers.
	*/
	
	type public Boolean %ACRREST, %AUTOMNU, DISPEXIT
	type public Number OLDTIME
	type public String %ET, %FN, %MSGS(), %SN, %VSAVE, DESC, ER, MENU(), MENUNO
	type public String NEWPRMPT, PRMPT, RM
	
	type Boolean NOBRK, NOREST, NOSUB, vVER
	type Number %JRNL, I, JOB
	type String %ID, DRVVARS, PGM, PREP, SYSVARS, TFKDEF, vclear, vcpr
	type String vcps, vidinc, vidoff, vidrev, vstatus, vVRM, X

	// Check menu restrictions
	if $$CHKREST set (ER,DISPEXIT)=1 quit
	
	set %ID=$$SYSLOG			// Log function start
	set JOB=%ProcessID
	set %JRNL=0				// Journal count
	
	// Set system variables.   %sn - System name
	if scatbl.%sn'=%SN set %SN=scatbl.%sn do %SN quit:ER
	
	set NOREST=scatbl.restore
	set NOBRK=scatbl.break
	
	// Save variables
	type RecordSAVEVAR savevar=Db.getRecord("SAVEVAR","JOB",1)
	set savevar.menu=MENU
	set savevar.%id=%ID
	set savevar.%sn=%SN
	set savevar.%fn=%FN
	set savevar.pop=scatbl.pop
	set savevar.norest=NOREST
	set savevar.nobrk=NOBRK
	do savevar.bypassSave()

	// Save system variables
	type RecordSAVESYS savesys=Db.getRecord("SAVESYS","JOBNUM=:JOB",1)
	set savesys.sysvars=%VSAVE
	do savesys.save()
	
	// Save menu information
	for I=1:1:MENU do {
		type RecordTMPMENU tmpmenu=Db.getRecord("TMPMENU","JOB,I",1)
		set tmpmenu.fn=$P(MENU(I),"|",1)
		set tmpmenu.prmpt=$P(MENU(I),"|",2)
		set tmpmenu.uinp=$P(MENU(I),"|",3)
		set tmpmenu.des=$P(MENU(I),"|",4)
		do tmpmenu.bypassSave()
	}

	// Restrict restore of this process
	if NOREST do { quit:ER
		type RecordNOREST norest=Db.getRecord("NOREST","JOBNUM=:JOB",1)
		set norest.jobnum=JOB
		set norest.curtim=%CurrentTime
		set norest.curdt=%CurrentDate
		do norest.bypassSave()
	}
	
	if NOBRK do DISABLE^%ZBREAK		// Function not interruptable
	
	set ER=0 
	kill RM,%MSGS

	set PREP=scatbl.prp			// Pre-processor
	#accept pgm=spier;date=12/8/03; CR=unknown
	if PREP'="" xecute PREP 

	if $G(ER) do PNTRM(1) quit 

	set PGM=scatbl.pgm
	
	kill %ACRREST,%AUTOMNU,DESC,I,MENU,MENUNO,NEWPRMPT,NOBRK
	kill NOREST,OLDTIME,PREP,PRMPT,TFKDEF,%VSAVE,X
	
	// Add function to PROCESSID table
	do {
		
		type String IPCATTS()
		
		set IPCATTS("FUNC") = %FN
		
		do SETATTS^IPCMGR(.IPCATTS())
	}
	
	do {
		new $ZT
		set $ZT=$$SETZT^%ZT(%ET)
		do DOPGM
	}

	// Remove function from PROCESSID table - protect ER and RM
	do {
	
		type String ER, IPCATTS(), RM
		
		set IPCATTS("FUNC") = ""
		
		do SETATTS^IPCMGR(.IPCATTS())
	}
	
	// Based on trapping, ER may not be returned correctly, so also
	// need to examine vVER and vVRM, which will be returned from UTLERR.
	if (ER.get() = 0), vVER.get() set ER = 1
	if (ER.get() '= 0), RM.get().isNull(), 'vVRM.get().isNull() set RM = vVRM
	
	/* Control returned here after execution of PGM
	Reset all variabes back to saved values to continue original process */

	set JOB=%ProcessID

	type RecordSAVEDRV savedrv=Db.getRecord("SAVEDRV","JOB",1)
	set DRVVARS=savedrv.drvvars
	
	type RecordSAVESYS savesys2=Db.getRecord("SAVESYS","JOB",1)
	set SYSVARS=savesys2.sysvars
	
	lock

	use 0 do TERMSET^SCADRV			// Reset terminal
	if $G(ER) do PNTRM(ER) set ER=0		// Display ER=1 messages
	
	// Execute post procecessor
	type RecordSAVEVAR savevar2=Db.getRecord("SAVEVAR","JOB",1)
	#accept pgm=spier;date=12/8/03; CR=unknown
	if savevar2.getMode(),(savevar2.pop'="") xecute savevar2.pop
	if ('savevar2.getMode())!(savevar2.norest) do Db.fastDelete("NOREST","JOBNUM=:JOB") 
	if ('savevar2.getMode())!(savevar2.nobrk) do ENABLE^%ZBREAK
	
	// Reset variables
	if '$$RESET() set DISPEXIT=1 quit 
	do SYSLOGXT(%ID)                       // Log function completed
	
	quit 
	

DOPGM	// Call the program

	type public String %SFC, PGM

	type String fn, INPUT, vcll, %OPMODE
	
	kill %SFC 
	do @PGM
	
	quit 


READ(x)	// Read input and return it
	// Partition reads into 60 seconds portions and display time in between

	type public String %fkey, ER, vcpr, vcps

	type Boolean EXIT
	type Number TIMEREM, TIM
	
	set EXIT=0
	set TIMEREM=%InputTimeOut 
	set TIM=60 
	set x=$G(x)
	write vcps,x,vcpr

	while 'EXIT do { quit:ER	
		if TIMEREM<60 set TIM=TIMEREM
		set x=$$TERM^%ZREAD(x,38,""," ",TIM,1)
		if %fkey'="TIM" set EXIT=1 quit
		set TIMEREM=TIMEREM-60
		if TIMEREM'>0 set %fkey="TIM",EXIT=1,x="" quit  // Timeout
		do TIME					// Display time
		write vcpr				// Return cursor
	}

	quit x
 

SUBMENU(FN)	// Check for and select submenu options
	// Return function name or null
	
	type public String ER
	
	type Number I
	type String OPTION(), X

	set I=1
	type ResultSet rs=Db.select("SEQ,DESC,SUB","SCATBL4","FN=:FN","SEQ ASC")
	if 'rs.isEmpty() while rs.next() do { quit:ER
		set OPTION(I)=rs.getCol(2)_"|"_rs.getCol(3)
		set I=I+1
	}
	// Recall
	set OPTION(I)=$$^MSG(2321)_"|@"_FN
	
	set X=$$^DBSMBAR(39,"","","",.OPTION) 
	if X="" quit ""

	quit $P(OPTION(X),"|",2)
	

Public %SN	// Change to new system variables
	/* %SN must be defined
	Returns %VSAVE (system variables) */

	type public String %SN, %VSAVE, ER

	set ER=0
	do SYSVAR(.%VSAVE)

	// Execute Pre-processor
	type RecordSCASYS scasys=Db.getRecord("SCASYS","%SN",1)
	#accept pgm=spier;date=12/8/03; CR=unknown
	if scasys.getMode() xecute scasys.xecut
	if ER set %SN=""

	quit 
	

RESET()		// Reset variables for this session
	// Return 1 if successful, 0 if not
	
	type public Boolean %NET, DISPEXIT
	type public String %fkey(), %FN, %ID, %SN, %VSAVE, DRVVARS, ER, MENU, SYSVARS, vcll

	do KILL0()  // Kill useless variables & restore old ones

	type Boolean EXIT
	type Number I, JOB
	
	set JOB=%ProcessID

	type RecordSAVEVAR savevar=Db.getRecord("SAVEVAR","JOB",1)
	if 'savevar.getMode() quit 0

	// No variables defined.
	if DRVVARS="",SYSVARS="",savevar.jobnum="" quit 0
	if 'ER.exists() set ER=0
	set MENU=savevar.menu
	set %ID=savevar.%id 
	set %SN=savevar.%sn 
	set %FN=savevar.%fn
	set DISPEXIT=savevar.dispexit
	// Clear last function
	set savevar.%fn=""
	do savevar.save()
	
	set %VSAVE=SYSVARS

	for I=1:1:MENU do {
		if I="SAVTMP" quit 
		
		type RecordTMPMENU tmpmenu=Db.getRecord("TMPMENU","JOB,I")
		set $P(MENU(I),"|",1)=tmpmenu.fn
		set $P(MENU(I),"|",2)=tmpmenu.prmpt
		set $P(MENU(I),"|",3)=tmpmenu.uinp
		set $P(MENU(I),"|",4)=tmpmenu.des
		}

	type RecordDDPSTS ddpsts=Db.getRecord("DDPSTS",,1)
	set %NET=ddpsts.status

	if '%fkey.data() do ZBINIT^%TRMVT()
	if 'vcll.exists() set vcll=$$CLL^%TRMVT

	quit 1
	

CHKREST()	// Check menu restrictions and accrual restrictions
			// Return 1 if restricted, plus ET set
			
	type public Boolean %ACRREST, %NET
	type public String ET

	if '$G(%NET) quit 0                    // Network down

	// Accrual restriction
	if %ACRREST,Db.isDefined("TTRPA","'PA'") set ET="ACCRSTCT" quit 1
	
	// Unrestricted ucls
	if %UserClass="MGR"!(%UserClass="SCA") quit 0

	// Menu restriction
	#IF CUVAR.RESTRICT set ET="MENUREST" quit 1

	// No restrictions...
	quit 0
	

VALIDSEL(fn,RecordSCATBL scatbl)
	/* Return function selection or next menu, validated
	   MENUNO must be defined
	   On success, returns:  DESC     = description to be displayed
	                         NEWPRMPT = new menu prompt, for menus
	   On failure, returns:  ER = 1, RM = message
	   If error, ER=1,RM=message
	*/

	type public Number MENUNO
	type public String DESC, ER

	type String FNAME

	// Convert function name to upper case
	set fn=$$UPPER^%ZFUNC(fn) set FNAME="" set ER=0
	// Remove @ sign
	if $E(fn)="@" set fn=$E(fn,2,999) do VERAT(fn,.scatbl) quit FNAME
	if fn'?.N set fn=$$STRMTCH(MENUNO,fn)

	// Invalid choice. Press the Help key or the Select key for help.
	if fn="" do Runtime.setErrMSG("SCAMENU",1278) quit ""
	type RecordSCAMENU scamenu=Db.getRecord("SCAMENU","MENUNO,+fn",1)
	if 'scamenu.getMode() do Runtime.setErrMSG("SCAMENU",1278) quit ""
	set DESC=scamenu.mdesc
	set fn=scamenu.funmenu

	if fn?.N do VERMENU quit FNAME             // Next menu
	set FNAME=$$VALIDFN(fn,.scatbl)

	quit FNAME 

	
VERAT(fn,RecordSCATBL scatbl)	// Interpret @ input

	type public String DESC, ER, FNAME, RM

	// Function name or menu number required
	if fn="" set ER=1 set RM=$$^MSG(1138) quit
	set DESC="@"_fn
	if fn'?.N set FNAME=$$VALIDFN(fn,.scatbl) quit     // Function
	do VERMENU

	quit


VERMENU	// Check numeric (menu) @ input
	
	type public Number fn
	type public String FNAME, NEWPRMPT
	
	type String CHOICE

	type RecordSCAMENU0 scamenu0=Db.getRecord("SCAMENU0","MENU=:fn",1)
	set CHOICE=scamenu0.prmpt

	if CHOICE'="" set FNAME=fn set NEWPRMPT=CHOICE
	// Invalid menu ~p1
	else  do Runtime.setErrMSG("SCAMENU0",1405,fn) quit

	quit
	

STRMTCH(MENUNO,STR)	// Find first string match, return selection number

	type Boolean MATCH
	type Number LEN, SEQ
	type String DESC

	set MATCH=""
	set LEN=$L(STR) 
	set STR=$$UPPER^%ZFUNC(STR)

	type ResultSet rs=Db.select("SNUMB,MDESC","SCAMENU","MNUMB=:MENUNO") 
	if 'rs.isEmpty() while rs.next() do { quit:MATCH=1
		set DESC=$$UPPER^%ZFUNC(rs.getCol(2))
		if $E(DESC,1,LEN)=STR set MATCH=1 set SEQ=rs.getCol(1) 
		}
	
	quit:MATCH SEQ

	quit ""	


VALIDFN(fn,RecordSCATBL scatbl)	// Check validity of selected function
	/*
	   On success, returns:  SCA function name
	                         scatbl = ^SCATBL(1,fn)
	   On failure, returns:  "", ER = 1, RM = message
	
	   Call by:  S FN=$$VALIDFN(fn,.scatbl)
	   Requires %UCLS defined.  %NET should be defined.

		Arguments:
			fn     - Function Name
			scatbl - SCATBL record

	   This subroutine creates scatbl object defined previously.
	*/
	
	type public Boolean %NET, %UDFN
	type public String %LOGID, ER, RM
	
	type String OFN
	
	set ER=1
	set OFN=fn
	
	// If user defined function name, get SCA fn
	if %UDFN,Db.isDefined("CTBLUDFN","fn") do {
		type RecordCTBLUDFN ctbludfn=Db.getRecord("CTBLUDFN","fn")
		set fn=ctbludfn.pafn 
		if fn="" set fn=OFN
		}

	// Function ~p1 does not exist
	if (fn="")!('Db.isDefined("SCATBL","fn")) set RM=$$^MSG(1146,OFN) quit ""

	set scatbl=Db.getRecord("SCATBL","fn",1)
	
	// Userclass ~p1 not authorized for this function
	type RecordSCATBL3 scatbl3=Db.getRecord("SCATBL3","FN=:fn,UCLS=:%UserClass")
	
	if scatbl3.auth'=1 set RM=$$^MSG(2898,%UserClass) quit "" 
	
	// Invalid network function
	if scatbl.ddp,%LOGID set RM=$$^MSG(1409) quit ""
	
	// Invalid host function
	if scatbl.nohost,'%LOGID set RM=$$^MSG(1376) quit ""      
	
	// Invalid function when network is down
	if $G(%NET)=0,scatbl.ddp,scatbl.salon set RM=$$^MSG(1360) quit ""
	
	// Function invalid before ~p1
	if scatbl.timbeg,%CurrentTime<scatbl.timbeg set RM=$$^MSG(1132,$$TIM^%ZM(scatbl.timbeg)) quit ""
	
	// Function invalid after ~p1
	if scatbl.timend,%CurrentTime>scatbl.timend set RM=$$^MSG(1131,$$TIM^%ZM(scatbl.timend)) quit "" 

	set ER=0
	quit fn
	

Public KILL	// Kill variables between function calls and re-init variables
	// Note - This line tag called from a number of application routines
	do KILL0()
	quit 


KILL0()	// Call by: D KILL0(.TMP0)

	type public String %

	do XKILL()
	#accept pgm=spier;date=12/8/03; CR=unknown
	xecute $G(DRVVARS)			// Restore driver variables
	#accept pgm=spier;date=12/8/03; CR=unknown
	xecute $G(SYSVARS)			// Restore system variables
	set %="|"	
	
	// Redefine %SystemDate to today's system date.
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	#accept pgm=spier;date=12/8/03; CR=unknown
	set %SystemDate=cuvar.tjd

	quit 
	

public XKILL(x)	// Save system and selected application variables
	/*
	   Note - This line tag called from a number of application routines
	   'x' is string of variables to save in format ",var1,var2... varn"
	*/
	
	type String argv
	
	set argv="("_$$VSAV_$G(x)_",%BLK,%cmmd,DISPEXIT,DRVVARS,%DUP,EXIT,%ID,%JRNL,%MSGID,%MSGS,ER,RM,SYSVARS)"
	#ACCEPT Date=05/11/05; PGM=Dan Russell; CR=15943
	kill @argv

	quit 

	
Public VSAV()	// Standard variable save list
	// Note - This line tag called from a number of application routines
	
	quit "%,%CRCD,%DB,%EMUCRCD,%CSID,%fkey,%FN,%IDENT,%IPMODE,%LIBS,%LOGID,%MCP,%NET,%OPMODE,%RESPROC,%SN,%SVCHNID,%TO,%VN,%VNC,%ZTPTRAP"
	

Public SYSVAR(sysvar)
	/*
	   This subroutine initializes PROFILE system variables and optionally
	   returns an executable string that may be used to subsequently
	   reinitialize the system variables.
	
	   ARGUMENTS:
	       . sysvar System variable   /TYP=T/NOREQ
	    executable string  /MECH=REFNAM:W
	
	   RETURNS:
	       . % PROFILE field delimeter
	       . %CO Company name
	       . %CRCD System currency
	       . %DB Database type
	       . %EMUCRCD EMU currency code
	       . %ED System date (formatted)
	       . %IDENT  User Identification (host name identifier)
	       . %LIBS Library name
	       . %MCP Multicurrency flag
	       . %MSK* Format masks (currency, date, etc)
	       . %ODP Overdraft protection processing flag
	       . %RESPROC Residency Processing flag
	       . %SVCHNID Server Channel ID
	       . %VN PROFILE/Anyware version number (server)
	       . %VNC PROFILE/Anyware version number (client)
	       . TJD System date (internal format)
	*/

	//I18N=OFF
	#IF $ZVERSION.piece("GT.M V",2)'<4.2 do ^NOISO
	//I18N=ON
	
	type public Boolean %MCP, %ODP, %RESPROC
	type public Date %ED
	type public String %, %DB, %EMUCRCD, %LIBS
	
	type Number i
	type String list, x, y
	
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set list="%CO,%CRCD,%DB,%EMUCRCD,%ED,%IDENT,%LIBS,%MCP,%ODP,%RESPROC,%SVCHNID,%VN,%VNC,TJD"
	
	set %="|"
	set %LIBS="SYSDEV"
	do INIT^%ZM(.list)
	
	#accept pgm=spier;date=12/8/03; CR=unknown
	set %SystemDate=cuvar.tjd
	set %ED=$$DAT^%ZM(%SystemDate)
	#accept pgm=spier;date=12/8/03; CR=unknown
	set %CompanyName=cuvar.co
	set %ODP=cuvar.odp
	set %MCP=cuvar.%mcp
	#accept pgm=spier;date=12/8/03; CR=unknown
	set %SystemCurrency=cuvar.%crcd
	set %EMUCRCD=cuvar.emucrcd
	set %RESPROC=cuvar.resproc
	#accept pgm=spier;date=12/8/03; CR=unknown
	set %VersionID=cuvar.%vn
	#accept pgm=spier;date=12/8/03; CR=unknown
	set %ClientVersionID=$G(%ClientVersionID) if %ClientVersionID="" set %ClientVersionID=%VersionID
	#accept pgm=spier;date=12/8/03; CR=unknown
	set %Identifier=$$USERNAM^%ZFUNC
	#accept pgm=spier;date=12/8/03; CR=unknown
	set %ServerChannelID="PA"
	set %DB=$$TRNLNM^%ZFUNC("SCAU$DB")  // defined database type
	if %DB="" set %DB="GTM"		    // default DB type is GTM
	set sysvar="S %=$C(124)"
	for i=1:1:$L(list,",") do {
		set x=$P(list,",",i) 
		set y=@x
		set sysvar=sysvar_","_x_"="""_y_""""
		}
	quit 
	

BACKUP	// Backup one menu level

	type public String MENU(), vcll

	write $$CUP^%TRMVT(1,4+MENU),vcll
	kill MENU(MENU)
	set MENU=MENU-1
	quit 
	

NEWMENU	// New menu selected, set it up

	type public String %FN, DESC, MENU(), NEWPRMPT
	
	set $P(MENU(MENU),"|",4)=DESC set MENU=MENU+1
	set MENU(MENU)=%FN_"|"_NEWPRMPT

	quit 
	

SYSLOG()	// Log function started in SYSLOG
	/*
	   INPUTS:
	       . %FN Function name
	       . %LOGID Login information
	       . TLO Terminal location
	       . %UID User ID
	
	   RETURNS:
	       . $$ Log information
	
	   EXAMPLE:
	       S X=$$SYSLOG^SCADRV0
	*/

	type public String %FN, %LOGID

	type String LOGINF
	
	if $G(%LOGID)="" set %LOGID=$$LOGID^SCADRV
	
	set LOGINF=%UserID_$C(17)_%UserStation_$C(17)_$G(%FN)_$C(17)_%CurrentTime
	set $P(LOGINF,$C(17),7)=$P(%LOGID,"|",2)
	set $P(LOGINF,$C(17),9)=%CurrentDate

	quit LOGINF
	

Public SYSLOGXT(DATA)
	/*
	   INPUTS:
	       . CO Company name   /TYP=T
	       . %SN System name (GLS,PBS)  /TYP=T
	       . TJD System accounting date  /TYP=D
	
	   ARGUMENTS:
	       . DATA Data returned from $$SYSLOG /TYP=T
	*/

	type public String %LOGID, %SN, CO

	type Number TIME
	type String HLOG, NODE
	
	if $G(DATA)="" quit 

	set DATA=$TR(DATA,$C(17),"|")

	set HLOG=$H
		
	if $G(%SystemDate)="" do {
		type RecordCUVAR cuvar=Db.getRecord("CUVAR")
		#accept pgm=spier;date=12/8/03; CR=unknown
		set %SystemDate=cuvar.tjd
		#accept pgm=spier;date=12/8/03; CR=unknown
		if %SystemDate="" set %SystemDate=%CurrentDate
		}

	if $G(%LOGID)="" set %LOGID=$$LOGID^SCADRV
	set TIME=$$GETTIM^%ZFUNC 
	set NODE=$P(%LOGID,"|",3)
	
	// File locally only
	type RecordSYSLOG syslog=Class.new("RecordSYSLOG")
	set syslog.tjd=%SystemDate
	set syslog.time64=TIME
	set syslog.nodenam=NODE
	set syslog.job=%ProcessID
	set syslog.uid=$P(DATA,"|",1)
	set syslog.loc=$P(DATA,"|",2)
	set syslog.fn=$P(DATA,"|",3)
	set syslog.logon=$P(DATA,"|",4)
	set syslog.logoff=$P(HLOG,",",2)
	set syslog.username=$P(DATA,"|",7)
	set syslog.logoffdt=+HLOG
	set syslog.logondt=$P(DATA,"|",9)
	if $G(%SN)="GLS" set syslog.co=$G(CO)

	do syslog.bypassSave()

	quit
	

DISPLAY	// Display header and menu

	type public Boolean DISPLAY
	type public String %MSGS(), MENU(), vclear, vidrev
	
	type Number I
	
	set DISPLAY=0

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	write vclear,vidrev," ",cuvar.conam
	
	do DATE 
	do TIME

	if cuvar.drvmsg'="" do DRVMSG(cuvar.drvmsg)
	write $$LINE^%TRMVT(80,1,4)
	
	for I=1:1:MENU-1 do DSPMENU(I,$P(MENU(I),"|",2),$P(MENU(I),"|",4))

	if $D(%MSGS) do PNTRM()
	do STATLIN
	quit
	

DRVMSG(drvmsg)	// Display driver message

	type public String vidinc, vidoff
	
	write $$CUP^%TRMVT((80-$L(drvmsg))\2,3),vidinc
	write drvmsg,vidoff
	quit 
	
DATE	// Display current calendar date (and system date for IBS)

	type public String %MSKD

	type Date DATE
	
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	set DATE=$$DAT^%ZM(%CurrentDate)
	if (cuvar.tjd),(cuvar.tjd-%CurrentDate) set DATE="["_$$DAT^%ZM(cuvar.tjd,$G(%MSKD))_"]  "_DATE
	else  set DATE="["_%UserStation_"]  "_DATE
	write $J("",68-$L(cuvar.conam)-$L(DATE)),DATE

	quit 

	
TIME	// Display current time

	type public Number OLDTIME
	type public String vidoff, vidrev

	write vidrev,$$CUP^%TRMVT(70,1),$J($$TIM^%ZM,10)," ",vidoff

	set OLDTIME=%CurrentTime		// Last time displayed

	quit 
	

STATLIN	// Display status line

	type public Boolean %AUTOMNU, STATLIN
	type public String vstatus
	
	type String STAT
	
	set STATLIN=0

	quit:$G(%AUTOMNU) 
	if vstatus.exists() write vstatus quit 
	
	set STAT(1)="HLP" 
	set STAT(2)="SEL" 
	set STAT(3)="FND"
	set STAT(4)="END|Main_Menu" 
	set STAT(5)="ESC"
	set vstatus=$$SHOWKEY^%TRMVT(.STAT)
	write vstatus

	quit

 	
DSPMENU(menu,prmpt,ans)	// Display menu prompt and prior answer

	type public String vcll

	write $$CUP^%TRMVT(39-$L(prmpt),4+menu),prmpt,": ",$G(ans),vcll

	quit 

	
Public PNTRM(er)   // Display message(s) on next to bottom line(s) of screen
	/*
	   er indicates error not message, which control highlighting and wait
	   RM contains message and may be an array
	   Array %MSGS is returned with list of lines printed
	
	   Call by:  D PNTRM(er)
	*/
	
	type public String RM()
	
	type Boolean WAIT
	type Number DY, N
	
	quit:'RM.data() 

	set er=$G(er) 
	set N="" 
	set DY=23
	if RM.data()<9 do MSG(RM) if 1
	else  do {			// Get starting line number
		for  set N=$O(RM(N)) quit:N=""  set DY=DY-1
		for  set N=$O(RM(N)) quit:N=""  set DY=DY+1 do MSG(RM(N))
		}
	if 'er quit 
	do CLRMSGS

	quit
	
MSG(msg)	// Write message at line specified

	type public Boolean er, WAIT
	type public Number DY
	type public String %MSGS()
	
	// Only wait on error if last line
	if (DY=23),er set WAIT=1
	else  set WAIT=0
	write $$MSG^%TRMVT(msg,er,WAIT,1,DY,%InputTimeOut,1)
	set %MSGS(DY)=""	// Indicate line where message displayed

	quit 
	

CLRMSGS	// Clear any messages displayed

	type public String %MSGS(), RM, vcll

	type Number BTM, TOP, I
	
	if 'vcll.exists() set vcll=$$CLL^%TRMVT
	set TOP=$O(%MSGS("")) 
	set BTM=$O(%MSGS(""),-1)
	for I=TOP:1:BTM write $$CUP^%TRMVT(1,I),vcll
	kill %MSGS,RM

	quit 
	

CLRMENU	// Clear menus and return to top

	type public String MENU(), vcll
	
	type Number I
	type String X
	
	if MENU>1 for I=MENU:-1:2 write $$CUP^%TRMVT(1,4+I),vcll
	set X=MENU(1)
	kill MENU
	set MENU=1 set MENU(1)=X

	quit 
	

public EXT(%UserID,%FN)  // External function call from PROFILE function

	type public Number %JRNL
	type public String %, %ID, %LOGID, %SN, ER

	type String PGM
	
	type RecordSCATBL scatbl
	
	type RecordSCAU scau = Db.getRecord("SCAU", "%UserID", 1)

	do VALIDUID^SCADRV quit:ER 
	do LOADSCAU^SCADRV(scau) quit:ER 
	set %LOGID=$$LOGID^SCADRV
	
	set %FN=$$VALIDFN(%FN,.scatbl) if %FN="" quit 
	if $$CHKREST set ER=1 quit 
	
	set %SN=$G(%SN)
	if scatbl.%sn'=%SN set %SN=scatbl.%sn do %SN quit:ER 
	
	set %="|"
	set %JRNL=0
	set %ID=$$SYSLOG
	#accept pgm=spier;date=12/8/03; CR=unknown
	if scatbl.prp'="" set PGM=scatbl.prp xecute PGM if $G(ER) quit
	set PGM=scatbl.pgm do EXTPGM(PGM)
	#accept pgm=spier;date=12/8/03; CR=unknown
	if scatbl.pop'="" set PGM=scatbl.pop xecute PGM if $G(ER) quit 
	do SYSLOGXT(%ID) 
	do KILL

	quit
	

EXTPGM(PGM)	// Dispatch to PGM

	type String %ID
	
	do @PGM

	lock

	quit
 

Public NOISO	// Specify NoIsolation (M database feature only)
	/* 
	This label calls routine NOISO (compiled by procedure
	definition SCAUTL1) to turn the GT.M NOISOLATION
	feature 'on'.
	*/
	
	//I18N=OFF
	#IF $ZVERSION.piece("GT.M V",2)'<4.2 do ^NOISO
	//I18N=ON
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "60773^54266^Aries Beltran^26604"	// Signature - LTD^TIME^USER^SIZE
