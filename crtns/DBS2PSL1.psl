DBS2PSL1(RecordDBTBL2 dbtbl2)	//DBSDS5A DBS - U - V7.0 PSL Screen Compiler
	/*
	       ORIG:  BOB CHIANG (8447) - 07/11/86
	   I18N=QUIT: Exculded from I18N standards.

	  ---------- Revision History -------------------------------------------
	   10/16/06 - Pete Chenard - CR23555
	   	      Additional warning cleanup.
	   	      
	   03/24/05 - Pete Chenard - CR14146
	   	      Cleaned up some warnings.
	   	      
	   11/03/04 - Pete Chenard - CR 13058
		      Modified RPDTA section to correct operator precedence
		      warnings that occurred while compiling screens.
	   	 
	   12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	   10/02/02 - CHENARDP - 45497
		     Converted to PSL
		     Removed old revision history

	*/
	
	type Public String C(),D,OLNTB,RPTDA,RPTPR,SAVT,TMPC(),TMPD(),VDAOBJ,VPROBJ,VPB,VPT,XR,ZREPEAT
	type Number I
	type String X
	
	set TMPC(1)=" set VO="_""""_(+VPROBJ)_"||13|"_dbtbl2.curdsp_""""
	set C(1)=" kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab"
	set C(2)=" set %MAX="_(+SAVT)_",VPT="_VPT_",VPB="_VPB
	if dbtbl2.scrclr<2 set C(3)=$S(dbtbl2.repeat:" set OLNTB=VPB*1000",1:" set OLNTB="_OLNTB)
	else  set C(3)=" set:'OLNTB.exists() OLNTB=0 if VPB*1000>OLNTB set OLNTB=VPB*1000"
	if RPTPR.exists() do RPTPR(.dbtbl2)
	if RPTDA.exists() do RPTDA(.dbtbl2)
	set VDAOBJ=VPROBJ+1
	for I=2:1:D set X=TMPD(I) do OBJ1(X,I)
	if $G(RPTPR)="" set TMPD(1)=" set VO="""_(VDAOBJ-1)_"|"_(VPROBJ+1)_"|13|"_dbtbl2.curdsp_""""
	kill XR,ZREPEAT do ^DBS2PSL3(.dbtbl2)
	quit


private RPTPR(RecordDBTBL2 dbtbl2)	// Repeating prompts logic
	type Public String RPTPR,VPB
	type String X
	
	set X=" set VO=VO+"_(RPTPR-1)_",DY=DY+"_(VPB+1-dbtbl2.repeat)
	do ADDC(X)
	quit


private RPTDA(RecordDBTBL2 dbtbl2)	// Clean up coding for repeating data items
	type Public String %MOD,%OFF,BLKSIZ,C,D,RPTBLK,RPTCNT,RPTPR,TMPD(),VDAOBJ,VPB,VPT,VPROBJ
	type Number I
	type String REGION,X,Y
	
	set VDAOBJ=VPROBJ+1
	set D=$O(TMPD(""),-1)
	if $G(RPTPR)="" set TMPD(1)=" set VX="_VPROBJ
	else  do {
		set TMPD(1)=" set VX=$P(VO,""|"",2)" 
		set C=0 for I=2:1:D do {
			set X=TMPD(I) 
			set Y=$F(X,"(@)") 
			if Y set TMPD(I)=$E(X,1,Y-3)_"VX+"_C_$E(X,Y-1,999) set C=C+1
			}
		}
	if dbtbl2.repreq="A" set C(1)=C(1)_" set %REPREQ=%REPEAT*"_%MOD
	else  if dbtbl2.repreq>0 set C(1)=C(1)_" set %REPREQ="_((dbtbl2.repreq*%MOD)+%OFF)
	set REGION=VPB-dbtbl2.repeat
	if 'RPTCNT.exists() S RPTCNT=0
	set D=D+1 set TMPD(D)=" set DY=DY+"_(REGION+1)_",VX=VX+"_(RPTCNT-1)
	set C(1)=C(1)_" set %MODGRP="_(REGION+1)
	set C(2)=" set %MODOFF="_%OFF_",%MOD="_%MOD_",%MAX=(%MOD*%REPEAT)+%MODOFF,VPT="
	set C(2)=C(2)_VPT_",VPB="_(dbtbl2.repeat-1)_"+"_$S(REGION:"(%REPEAT*"_(REGION+1)_")",1:"%REPEAT")
	set C(2)=C(2)_",BLKSIZ=("_(BLKSIZ-RPTBLK)_"*%REPEAT)+"_RPTBLK
	quit


OBJ1(String X,Number I)
	// data item protection
	type Public String TMPD(),VDAOBJ
	type Number Z
	type String Y
	
	if X["VPTBL" set Z=1 do OBJ2(.X,Z) set TMPD(I)=X quit
	// convert VO(@) to next sequence number VO(n)
	set Y=$F(X,"(@)") if 'Y quit
	set TMPD(I)=$E(X,1,Y-3)_VDAOBJ_$E(X,Y-1,999) set VDAOBJ=VDAOBJ+1
	quit


OBJ2(String X,Number Z)
	//   Replace variable %MOD with constant
	type Number quit
	type String Y
	
	type Public String %MOD,VDAOBJ,VPTBL
	set quit=0
	for  quit:quit  do {
		set VPTBL=1
		if X["@%MOD" set X=$P(X,"@%MOD",1)_%MOD_$P(X,"@%MOD",2,99)

		set Y=$F(X,"(@)",Z) if 'Y set quit=1 quit
		set X=$E(X,1,Y-3)_(VDAOBJ-1)_$E(X,Y-1,999)
		}
	quit


private ADDC(String P)	// Add prompt lines of code
	type Public String C,TMPC()
	
	set C=C+1 
	set TMPC(C)=P 
	quit


private PP	// Merge post processor into compiled program
	type String EXTSID,NN,OM,Z
	type Public String PGM,PON,PP,PXSEQ,SID,TMP(),vobjlst()
	type Number N
	
	set EXTSID=SID 
	set Z=1 
	set NN=PP+19
	kill OM
	type DbSet ds=Db.selectDbSet("DBTBL2PP","LIBS='SYSDEV' AND SID=:SID and SEQ=:SEQ and PSEQ between :PP and :NN")
	while ds.next() do {
		new code,pseq
		type RecordDBTBL2PP dbtbl2pp=ds.getRecord("DBTBL2PP")
		set pseq=dbtbl2pp.pseq
		set code=dbtbl2pp.code 
		set OM(pseq)=code
		}  // while ...

	do PPLIB^DBS2PSL4(.OM)	// parse for PP Libs

	set PXSEQ=PXSEQ+1
	set PON=PON+1 set TMP("PO",PON)="VP"_PXSEQ_"("_vobjlst("formal")_") //"
	set N="" for  set N=$O(OM(N)) quit:N=""  set PON=PON+1 set TMP("PO",PON)=OM(N)
	set PP="do VP"_PXSEQ_"^"_PGM_"("_vobjlst("tab")_")"
	quit


private VARSUB(RecordDBTBL2 dbtbl2)	// Build correct variable syntax V

	type String I,V,var,X,Y
	type Public String CX,FID,NS,P(),PF,PRO,VDACX,VDAV1,VPRV1
	
	set V="" set Y=0 set X=P(11) set P(11)=""
	for  do { quit:Y=0
		set Y=$F(X,"<<",Y) quit:Y=0  
		if $P($E(X,Y+1,999),"<<",1)[">>" do {
			set var=$P($E(X,Y,999),">>",1)
			set X=$E(X,1,Y-3)_"""_"_$$DGET(var,.dbtbl2)
			set X=X_"_"""_$P($E(X,Y+1,999),">>",2,99)
			}
		}
		
	set NS=""""_X_""""
	// remove ""_
	if $E(NS,1,3)="""""_" set NS=$E(NS,4,999)
	// REMOVE _""
	if $E(NS,$L(NS)-2,999)="_""""" set NS=$E(NS,1,$L(NS)-3)
	set FID="" set VDACX=CX set PF="" set PRO=1 set VDAV1=VPRV1
	if (P(10)="$")!(P(10)="N") quit
	set P(10)="T"
	quit


private DGET(String X,
	     RecordDBTBL2 dbtbl2)	// Insert $G() around variable references
	
	type String Y
	type Number I

	if X[",%,",$L($P(X,",%,",1),"""")#2 set X=$P(X,",%,",1)_",""|"","_$P(X,",%,",2,99)

	// Global or /0
	if X?.E1"^".E!(X?.E1"/".E) quit "$S(%ProcessMode=5:"""",1:"_X_")"
	
	for I=1:1 set Y=$E(X,I) quit:Y=""  do {

		if '(Y?1A!(Y="%")) quit
		if "+-*/\#&!_(:,><"'[$E(X,I-1) quit
		if $L($E(X,1,I),"""")#2=0
		if $E(X,I-3,I-1)="$G(" quit
		if $E(X,I-3,I-1)="$O(" quit
		if $E(X,I-4,I-1)="$O(" quit
		do VAR(.dbtbl2,.X,.I)
		}
	quit X


private VAR(RecordDBTBL2 dbtbl2,
		String X,
		String I)	// Place $G() around variables

	type String ar,II,lvn,nlvn,z
	type Public String CY,lvns,vobject
	
	if vobject quit
	
	set ar=$S(dbtbl2.repeat&(CY'<dbtbl2.repeat):"rptlvns(lvn)",1:"lvns(lvn)")

	#ACCEPT DATE=10/01/03;PGM=Pete Chenard;CR=UNKNOWN;GROUP=SYNTAX
	if $E(X,I,$L(X))'["(" set lvn=$P($E(X,I,$L(X)),",",1) set:'$D(@ar) @ar=lvn quit
	set II=I
	for I=I+1:1:$L(X)+1 quit:$E(X,I)'?1AN
	if $E(X,I)="(" for  set I=$F(X,")",I) quit:'I  set z=$E(X,II,I-1) if $L(z,"(")=$L(z,")") quit
	if I=0 set I=$L(X)+1

	// Strip lvn from string
	set lvn=$E(X,II,I-1)

	// Not an array
	if lvn'["(" set:'$D(@ar) @ar=lvn quit
	set nlvn=$G(@ar)
	if nlvn="" set lvns=$G(lvns)+1 set nlvn="v"_lvns set @ar=nlvn
	set X=$E(X,1,II-1)_nlvn_$E(X,I,$L(X))
	set I=I+$L(lvn)-$L(nlvn)
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "60662^55394^Pete Chenard^6293"	// Signature - LTD^TIME^USER^SIZE
