DBSGETID	// DATA-QWIK Get ID(s)

	/*
	ORIG:	RussellDS - 09/323/04
	DESC:	DATA-QWIK Get ID(s)
	
	LIBRARY:
		. BANNER   - Convert function description to DQ banner, used
			     by screens, etc.
			     
		. FIND     - Prompt for single ID and return it
			 
		. LIST     - Prompt for mulitple IDs and build temporary table with
			     selections.  Allows wild cards and ranges.
			     
		. LISTBLD  - Build list based on input
		
		. LISTPP   - Screen post processer to validate list field entry
		
		. TBLPRMPT - Return %TAB DQ element prompt
		
		. VALIDKEY - Validate input as a valid key name
	
	
	 
	---- Revision History -------------------------------------------------
	
	12/19/2008 - Giridharanb - CR36952
	
		Modified section VALIDKEY to allow undescores in column names.
	
	09/12/2008 - RussellDS - CR30801
		Modified TBLPRMPT to allow mixed case for DBTBL25.
		
		Removed old revision history.
	*/

	quit			// No entry from top
	
	
public FIND(String DQTABLE,	// DATA-QWIK table [*]			/REQ/MECH=VAL
            Boolean NEW)	// 1 = new item, 0 = exists [*]		/REQ/MECH=VAL
     
	/*
	Present UTLREAD screen to prompt for DATA-QWIK ID name.
	
	ARGUMENT NOTES:
		. DQTABLE	Only DATA-QWIK tables with a single key are valid
		. NEW		If NEW, ID must not currently exist, otherwise,
				must already be defined

	RETURNS:
		. $$		ID of DQ element			/TYP=N
		. ER		Error flag				/TYP=L
		. RM		Error message				/TYP=T
	*/
	
	type public Boolean ER = 0
	type public String %FN, RM
	
	type Number %FRAME, OLNTB	
	type String %NOPRMT, %READ, %TAB(), NAME, VFMQ
	
	set %TAB("NAME")=$$TBLPRMPT(DQTABLE)_"/XPP=do PP^"_%RoutineName_"("""_DQTABLE_""","_NEW_")" if ER quit ""
	
	set %FRAME = 2
	set OLNTB = 40
	set %READ = "@@%FN,,NAME/REQ,"
	set %NOPRMT = "F"
	
	do ^UTLREAD if VFMQ = "Q" quit ""
	
	quit NAME


PP(String DQTABLE,	// DATA-QWIK table name				/REQ/MECH=VAL
   Boolean NEW)		// 1 = new item, 0 = exists			/REQ/MECH=VAL

	/*
	Screen post processor
	
	RETURNS:
		. ER		Error flag				/TYP=L
		. RM		Error message				/TYP=T
	*/

	type public Boolean ER
	type public String I(), RM, X
	
	if 'X.isNull() do {
		if '$$VALIDKEY(X) do {
			set ER=1
			// Alphanumeric format
			set RM=$$^MSG(248)
		}
		// If new, make sure doesn't already exist
		if NEW do {
			
			if $$ISDQELEM(X, DQTABLE) do {
				set ER = 1
				// Record already exists
				set RM=$$^MSG(2327)
			}
			
			else  set I(3)=""
		}
	}
	
	quit


public LIST(String DQTABLE,	// DATA-QWIK table [*]				/REQ/MECH=VAL
            String OPTION,	// "List", "Print", or nothing			/NOREQ/MECH=VAL
            String IO,		// Output device				/NOREQ/MECH=REF:W
            Boolean PNTDOC)	// Print documentation flag [*]			/NOREQ/MECH=REF:W
            
	/*
	Present UTLREAD screen to prompt for selection of DATA-QWIK element names, allowing
	wild cards and ranges.
	
	Build table TMPDQ with results.
	
	ARGUMENT NOTES:
		. DQTABLE	Only DATA-QWIK elements with a single key are valid
		. PNTDOC	Used only for screens

	RETURNS:
		. $$		Number of elements selected			/TYP=N
	*/
	
	type Number %FRAME, CNT, LEN, OLNTB
	type String %CTPRMT, %NOPRMT, %READ, %TAB(), DESC, HELP, VFMQ, X, ZSEL()
	
	do Db.delete("TMPDQ","PID = :%ProcessID")
	
	set CNT = 0
	set HELP = "* = All  AB* = From AB to ABz  AB-CD = From AB to CD  'AB = Not AB "

	set %TAB("IO")=$$IO^SCATAB($I)
	set %TAB("ZSEL")=$$TBLPRMPT(DQTABLE)
	
	set LEN = +%TAB("ZSEL").piece("/LEN=", 2)
	if 'LEN quit 0
	set LEN = LEN + (LEN \ 2)
	set %TAB("ZSEL") = %TAB("ZSEL")_"/LEN="_LEN

	set %TAB("ZSEL") = %TAB("ZSEL")_"/XPP=D LISTPP^"_%RoutineName_"("""_DQTABLE_""")"

	set DESC = %TAB("ZSEL").piece("/DES=", 2).piece("/", 1)
	set LEN=LEN + DESC.length()

	if LEN > 39 set X="ZSEL/REP=10/NOREQ"
        else  do {
        	set OLNTB = 18
        	set %CTPRMT = 2
        	set X = "ZSEL*20/NOREQ"		// Allow room to display filer executive
        }

	if OPTION.get() = "Print", DQTABLE = "DBTBL2" do {	// Documentation prompt for screens
		set %TAB("PNTDOC") = ".LS1"
		set PNTDOC = 1
		set %READ="@@%FN,,IO/REQ,,PNTDOC/NOREQ,,@HELP/CEN/INC,,"_X
	}
	else  if 'OPTION.get().isNull() do {	// List or Print
		set %READ="@@%FN,,IO/REQ,,@HELP/CEN/INC,,"_X
	}
	else  set %READ="@@%FN,,@HELP/CEN/INC,,"_X

	set %FRAME=2
	
	do ^UTLREAD
	
	if VFMQ '= "Q" do {
	
		type String LIST(), N
		
		set N = ""
		for  set N = ZSEL(N).order() quit:N.isNull()  if 'ZSEL(N).isNull() set CNT = CNT + $$LISTBLD(ZSEL(N), DQTABLE)
	
		if 'OPTION.get().isNull() do OPEN^SCAIO			// List or Print
	}
	
	quit CNT


public LISTPP(String DQTABLE)	// DATA-QWIK table name			/REQ/MECH=VAL

	/*
	Post-processer for list of DQ elements,  Validate entry.
		
	RETURNS:
		. ER		Error flag				/TYP=L
		. RM		Error message				/TYP=T
	*/

	type public Boolean ER
	type public String I(), RM, X

	quit:X.isNull()
	
	if X = "*" do {
		// All definitions
		set RM = $$^MSG(241)
		set I(3) = ""
	}
	
	
	else  if X.endsWith("*") do {
		if '$$RANGECHK(X, DQTABLE) do {
			set ER = 1
			// No matches found
			set RM = $$^MSG(1955)
		}
		set I(3) = ""
	}
	
	else  if X.isLike("%-%") do {
		if X.piece("-", 1) ]] X.piece("-", 2) do {
			set ER = 1
			// Invalid syntax
			set RM = $$^MSG(1475)
		}
		else  do {
			if '$$RANGECHK(X, DQTABLE) do {
				set ER = 1
				// No matches found
				set RM = $$^MSG(1955)
			}
			set I(3) = ""
		}
	}

	else  if '$$ISDQELEM(X, DQTABLE) do {
		set ER = 1
		// Invalid syntax/name
		set RM = $$^MSG(1480)
	}
	
	quit
	
	
public LISTBLD(String DQID,	// DATA-QWIK element ID, *, or range	/REQ/MECH=VAL
	       String DQTABLE)	// DATA-QWIK table			/REQ/MECH=VAL

	/*
	Add elements to table TMPDQ.  Allow element name, wild card (*) to
	select all, NAME*, or range.
	
	This function does not delete TMPDQ.  It is the responsibility of the caller
	to do so, if required, since this can be called multiple times to do adds.
	
	RETURNS:
		. $$		Number of elements added		/TYP=N
	*/

	type Number CNT
	type String KEY, LIST(), N, WHERE
	
	set KEY = $$GETKEY(DQTABLE)
	
	if DQID = "*" set WHERE = ""
	else  if DQID.isLike("%*") set WHERE = KEY_" LIKE '"_DQID.translate("*", "%")_"'"
	else  if DQID.isLike("%-%") set WHERE = KEY_" >= '"_DQID.piece("-", 1)_"' AND "_KEY_" <= '"_DQID.piece("-", 2)_"'"
	else  set WHERE = KEY_" = '"_DQID_"'"

	do DYNSEL(DQTABLE, WHERE, .LIST())
	
	set CNT = 0	
	set N = ""
	for  set N = LIST(N).order()  quit:N.isNull()  do {
		if 'Db.isDefined("TMPDQ", "PID=:%ProcessID,ELEMENT=:N") do {
			type RecordTMPDQ tmpdq = Class.new("RecordTMPDQ", "PID=:%ProcessID, ELEMENT=:N")
			
			do tmpdq.save()
			
			set CNT = CNT + 1
		}
	}
	
	quit CNT
	
	
public BANNER(String FUNCNAME,	// Function Name		/REQ/MECH=VAL
	      String ALTERNAT)	// Alternate if no function	/NOREQ/MECH=VAL
	      
	/*
	Get function description from function name and convert to DATA-QWIK banner
	
	RETURNS:
		.$$	Banner
	*/
	
	type String DESC = ""
	
	// Note - can't use Db.getRecord here since optimization appears to ignore 3rd parameter
	if 'FUNCNAME.isNull() do {
	
		type ResultSet rs = Db.select("DESC", "SCATBL", "FN = :FUNCNAME")
	
		if rs.next() set DESC = rs.getCol("DESC")
	}
	
	if DESC.isNull() set DESC = ALTERNAT.get()
	
	quit DESC.justify(80, 0)			// Center in 80 character field
	

RANGECHK(String X,		// Input string				/REQ/MECH=VAL
	 String DQTABLE)	// DATA-QWIK table			/REQ/MECH=VAL
	 
	 /*
	 Check to see if there are any elements selected in range provided
	 
	 RETURNS:
	 	. $$		0 = no elements selected		/TYP=L
	 			1 = elements selected
	 */

	type Boolean return = 0
	type String KEY, LIST(), WHERE
	
	set KEY = $$GETKEY(DQTABLE)
	
	if X.isLike("%*") set WHERE = KEY_" LIKE '"_X.translate("*", "%")_"'"
	else  if X.isLike("%-%") set WHERE = KEY_" >= '"_X.piece("-", 1)_"' AND "_KEY_" <= '"_X.piece("-", 2)_"'"

	do DYNSEL(DQTABLE, WHERE, .LIST())
	
	if LIST.data() set return = 1
	
	quit return

	
TBLPRMPT(Number DQTABLE)	// DATA-QWIK table		/REQ/MECH=VAL

	/*
	Return DATA-QWIK Prompt for this table
	*/
	
	type public Boolean ER
	type public String RM
	
	type String KEY, LIB, return
	
	set return = ""
	
	type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS = ""SYSDEV"", FID = :DQTABLE")
			
	set KEY = dbtbl1.acckeys
	set LIB = KEY.piece(",",1)
	set KEY = KEY.piece(",", KEY.length(","))
	
	type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS = ""SYSDEV"", FID = :DQTABLE, DI = :KEY", 1)
	
	if dbtbl1d.getMode() = 0 do {
		set ER = 1
		// Missing reference
		set RM = $$^MSG(1766)
	}
	else  do {
		
		type String typ = "U"
		
		/* Procedures can be mixed case.  We can't just change this to use
		   dbtbl1d.typ unless we modify all the typ values for the keys in
		   the various DBTBL tables, so do this for now.  */
		if (DQTABLE = "DBTBL25") set typ = "T"
		
		set return = return_"/DES="_dbtbl1d.des_"/TYP="_typ_"/LEN="_+dbtbl1d.len
		set return = return_"/TBL=["_DQTABLE_"]:QUERY ""["_DQTABLE_"]"_LIB_"=""""SYSDEV"""
		
		if 'dbtbl1d.xpo.isNull() set return = return_"/XPP="_dbtbl1d.xpo
		if 'dbtbl1d.xpr.isNull() set return = return_"/XPR="_dbtbl1d.xpr
	}
	
	quit return
	

public VALIDKEY(String X)	// Value to validate		/REQ/MECH=VAL
	
	/*
	Validate X as a valid key string
	
	RETURNS:
		. $$	0 = Not valid, 1 = valid		/TYP=L
		. ER		Error flag			/TYP=L
		. RM		Error message			/TYP=T
	*/
	
	type String char1 = X.extract()
	
	if '(char1 = "%" ! (char1 = "$") ! (char1 ? 1U)) quit 0
	// Allow underscores CR36952
	// if X.isLike("%_") quit 0
	
	set X = X.extract(2,X.length())
	if X.translate(" `~!@#$%^&*()-+={}[]:;|\,.?/<>vx", "") = X quit 1	// OK
	
	quit 0
	
	
ISDQELEM(String DQID,		// DATA-QWIK element ID		/REQ/MECH=VAL
	 String DQTABLE)	// DATA-QWIK table name		/REQ/MECH=VAL
	 
	 /*
	 Determine if DQID exists in DQTABLE
	 
	 RETURNS:
	 	. $$		0 = Does not exist		/TYP=L
	 			1 = Does exist
	 */
	
	type Boolean return = 0		
	type String LIST(), WHERE
	
	set WHERE = $$GETKEY(DQTABLE)_"='"_DQID_"'"
	
	do DYNSEL(DQTABLE, WHERE, .LIST())
	
	if LIST.data() set return = 1
	
	quit return
	
	
GETKEY(String DQTABLE)	// DATA-QWIK table name			/REQ/MECH=VAL

	/*
	Return the bottom level key (file ID, screen ID, etc.) from the
	specific DATA-QWIK table
	
	RETURNS:
		. $$	Key name				/TYP=T
	*/
	
	type String ACCKEYS
	
	type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS = ""SYSDEV"", FID = :DQTABLE")
	
	set ACCKEYS = dbtbl1.acckeys
			
	quit ACCKEYS.piece(",", ACCKEYS.length(","))
	
	
DYNSEL(String DQTABLE,	// DATA-QWIK table			/REQ/MECH=VAL
       String WHERE,	// Where clause				/NOREQ/MECH=VAL
       String LIST())	// List of selected values		/NOREQ/MECH=REF:W
       
       /*
       Dynamic select to build and return list of DQ elements.  This code is specialized
       for this procedure.  Only the key column for the element name for an appropriate
       DATA-QWIK table is selected.
       
       Only one dynamic select allowed per procedure.
       */
       
       type String KEY = $$GETKEY(DQTABLE)
       			
	#ACCEPT Date=09/27/04; PGM=Dan Russell; CR=12334
	type ResultSet rs = Db.select(KEY, DQTABLE, WHERE.get())
	
	while rs.next() set LIST(rs.getCol(1)) = ""
	
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61349^37709^Badrinath Giridharan^10589"	// Signature - LTD^TIME^USER^SIZE
