V00S058(Number %ProcessMode,RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)   //DBS -  - SID= <DBTBL1E> Files Definition - Detail
 ;;Copyright(c)2010 Sanchez Computer Associates, Inc.  All Rights Reserved - 02/24/2010 18:33 - pip
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/18/07 - Pete Chenard - CR23555
		   Corrected compiler warnings.
		   
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'%ProcessMode.exists() %ProcessMode=5
 if (%ProcessMode = 5) do {
  if 'fDBTBL1D.exists() set fDBTBL1D = Class.new("RecordDBTBL1D")
  if 'fDBTBL1.exists() set fDBTBL1 = Class.new("RecordDBTBL1")
 }
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab,DI,DELETE",VSID="DBTBL1E",VPGM=$T(+0),VSNAME="Files Definition - Detail"
 set VFSN("DBTBL1")="zfDBTBL1",VFSN("DBTBL1D")="zfDBTBL1D"
 set vPSL=1
 set KEYS(1)=fDBTBL1.%LIBS
 set KEYS(2)=fDBTBL1.FID
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 do VPR(.fDBTBL1D,.fDBTBL1),VDA1(.fDBTBL1D,.fDBTBL1),^DBSPNT() quit

 if '%ProcessMode do VNEW(.fDBTBL1D,.fDBTBL1),VPR(.fDBTBL1D,.fDBTBL1),VDA1(.fDBTBL1D,.fDBTBL1)
 if %ProcessMode do VLOD(.fDBTBL1D,.fDBTBL1) quit:$G(ER)  do VPR(.fDBTBL1D,.fDBTBL1),VDA1(.fDBTBL1D,.fDBTBL1)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=XECUTE
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fDBTBL1D,.fDBTBL1)
	quit


VNEW(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) // Initialize arrays if %O=0
 
 do VDEF(.fDBTBL1D,.fDBTBL1)
 do VLOD(.fDBTBL1D,.fDBTBL1)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
VDEF(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)
 quit:fDBTBL1D.%LIBS.isNull() ! fDBTBL1D.FID.isNull() ! fDBTBL1D.DI.isNull() 
 quit:%ProcessMode  set ER=0 if (fDBTBL1D.%LIBS="")!(fDBTBL1D.FID="")!(fDBTBL1D.DI="") set ER=1,RM=$$^MSG(1767,"%LIBS,FID,DI") Q
 if Db.isDefined("DBTBL1D","DBTBL1D.%LIBS=:fDBTBL1D.%LIBS AND DBTBL1D.FID=:fDBTBL1D.FID AND DBTBL1D.DI=:fDBTBL1D.DI") S ER=1,RM=$$^MSG(2327) Q
 do fDBTBL1D.setAuditFlag(1)
 if fDBTBL1D.ITP="" set fDBTBL1D.ITP="S"
 if fDBTBL1D.NULLIND="" set fDBTBL1D.NULLIND=0
 if fDBTBL1D.TYP="" set fDBTBL1D.TYP="T"
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
 ;
VLOD(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) // Load data from disc - %O = (1-5)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) // Display screen prompts
 set VO="68||13|0"
 set VO(0)="|0"
 set VO(1)=$C(2,1,80,0,0,0,0,0,0,0)_"11Tlqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk"
 set VO(2)=$C(3,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(3)=$C(3,2,11,1,0,0,0,0,0,0)_"01T Data Item:"
 set VO(4)=$C(3,36,7,0,0,0,0,0,0,0)_"01TDelete:"
 set VO(5)=$C(3,47,11,0,0,0,0,0,0,0)_"01TUpdated By:"
 set VO(6)=$C(3,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(7)=$C(4,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(8)=$C(4,49,9,0,0,0,0,0,0,0)_"01TMDD Name:"
 set VO(9)=$C(4,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(10)=$C(5,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(11)=$C(5,43,15,0,0,0,0,0,0,0)_"01TData Type Name:"
 set VO(12)=$C(5,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(13)=$C(6,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(14)=$C(6,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(15)=$C(7,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(16)=$C(7,8,11,1,0,0,0,0,0,0)_"01T Data Type:"
 set VO(17)=$C(7,26,8,1,0,0,0,0,0,0)_"01T Length:"
 set VO(18)=$C(7,45,13,0,0,0,0,0,0,0)_"01TDisplay Size:"
 set VO(19)=$C(7,65,8,0,0,0,0,0,0,0)_"01TDecimal:"
 set VO(20)=$C(7,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(21)=$C(8,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(22)=$C(8,6,13,1,0,0,0,0,0,0)_"01T Description:"
 set VO(23)=$C(8,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(24)=$C(9,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(25)=$C(9,3,16,1,0,0,0,0,0,0)_"01T Column Heading:"
 set VO(26)=$C(9,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(27)=$C(10,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(28)=$C(10,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(29)=$C(11,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(30)=$C(11,8,11,0,0,0,0,0,0,0)_"01TTable Name:"
 set VO(31)=$C(11,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(32)=$C(12,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(33)=$C(12,5,14,0,0,0,0,0,0,0)_"01TPattern Check:"
 set VO(34)=$C(12,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(35)=$C(13,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(36)=$C(13,5,14,0,0,0,0,0,0,0)_"01TDefault Value:"
 set VO(37)=$C(13,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(38)=$C(14,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(39)=$C(14,5,14,0,0,0,0,0,0,0)_"01TMinimum Value:"
 set VO(40)=$C(14,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(41)=$C(15,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(42)=$C(15,5,14,0,0,0,0,0,0,0)_"01TMaximum Value:"
 set VO(43)=$C(15,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(44)=$C(16,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(45)=$C(16,31,25,0,0,0,0,0,0,0)_"01TDefault Screen Processors"
 set VO(46)=$C(16,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(47)=$C(17,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(48)=$C(17,5,14,0,0,0,0,0,0,0)_"01TPre-Processor:"
 set VO(49)=$C(17,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(50)=$C(18,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(51)=$C(18,4,15,0,0,0,0,0,0,0)_"01TPost-Processor:"
 set VO(52)=$C(18,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(53)=$C(19,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(54)=$C(19,25,46,0,0,0,0,0,0,0)_"01TData Entry (UTBL001,STBL001,CTBL001 functions)"
 set VO(55)=$C(19,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(56)=$C(20,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(57)=$C(20,5,14,0,0,0,0,0,0,0)_"01TPre-Processor:"
 set VO(58)=$C(20,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(59)=$C(21,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(60)=$C(21,4,15,0,0,0,0,0,0,0)_"01TPost-Processor:"
 set VO(61)=$C(21,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(62)=$C(22,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(63)=$C(22,2,9,0,0,0,0,0,0,0)_"01TRequired:"
 set VO(64)=$C(22,15,21,0,0,0,0,0,0,0)_"01TValid for Extraction:"
 set VO(65)=$C(22,40,25,0,0,0,0,0,0,0)_"01TSame Order as Access Key:"
 set VO(66)=$C(22,69,5,0,0,0,0,0,0,0)_"01TNull:"
 set VO(67)=$C(22,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(68)=$C(23,1,80,0,0,0,0,0,0,0)_"11Tmqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VDA1(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)  // Display screen data
 new V
 if %ProcessMode=5 new DELETE,DI
 if  set (DELETE,DI)=""
 else  set DELETE=$G(DELETE),DI=$G(DI)
 
 s DELETE=$G(DELETE)
 s DI=$G(DI)
 //
 set VO="94|69|13|0"
 set VO(69)=$C(1,1,80,1,0,0,0,0,0,0)_"01T"_$S(%ProcessMode=5:"",1:$$BANNER^UTLREAD($G(%FN)))
 set VO(70)=$C(3,14,12,2,0,0,0,0,0,0)_"00U"_DI.get()
 set VO(71)=$C(3,44,1,2,0,0,0,0,0,0)_"00L"_$S(DELETE.get():"Y",1:"N")
 set VO(72)=$C(3,59,10,2,0,0,0,0,0,0)_"01T"_$E(fDBTBL1D.USER,1,10)
 set VO(73)=$C(3,70,10,2,0,0,0,0,0,0)_"01D"_$$DAT^%ZM(fDBTBL1D.LTD)
 set VO(74)=$C(4,59,12,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1D.MDD,1,12)
 set VO(75)=$C(5,59,20,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1D.DOM,1,20)
 set VO(76)=$C(7,20,1,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1D.TYP,1,1)
 set VO(77)=$C(7,35,5,2,0,0,0,0,0,0)_"00N"_fDBTBL1D.LEN
 set VO(78)=$C(7,59,3,2,0,0,0,0,0,0)_"00N"_fDBTBL1D.SIZ
 set VO(79)=$C(7,74,2,2,0,0,0,0,0,0)_"00N"_fDBTBL1D.DEC
 set VO(80)=$C(8,20,40,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.DES,1,40)
 set VO(81)=$C(9,20,40,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.RHD,1,40)
 set VO(82)=$C(11,20,60,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.TBL,1,60)
 set VO(83)=$C(12,20,60,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.PTN,1,60)
 set VO(84)=$C(13,20,58,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.DFT,1,58)
 set VO(85)=$C(14,20,25,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.MIN,1,25)
 set VO(86)=$C(15,20,25,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.MAX,1,25)
 set VO(87)=$C(17,20,58,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.XPR,1,58)
 set VO(88)=$C(18,20,58,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.XPO,1,58)
 set VO(89)=$C(20,20,58,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.DEPREP,1,58)
 set VO(90)=$C(21,20,58,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.DEPOSTP,1,58)
 set VO(91)=$C(22,12,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL1D.REQ:"Y",1:"N")
 set VO(92)=$C(22,37,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL1D.VAL4EXT:"Y",1:"N")
 set VO(93)=$C(22,66,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL1D.SRL:"Y",1:"N")
 set VO(94)=$C(22,75,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL1D.NULLIND:"Y",1:"N")
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
	
VTAB(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab
 set %MAX=25,VPT=1,VPB=23,PGM=$T(+0),DLIB="SYSDEV",DFID="DBTBL1D,DBTBL1"
 set OLNTB=23001
 
 set VFSN("DBTBL1")="zfDBTBL1",VFSN("DBTBL1D")="zfDBTBL1D"
 //
 // 
	
	
 set %TAB(1)=$C(2,13,12)_"01U|*DI|[*]@DI|@SELDI^DBSFUN(FID,.X)||do VP1^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(2)=$C(2,43,1)_"00L|*DELETE|[*]@DELETE|||do VP2^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(3)=$C(2,58,10)_"20T12426|1|[DBTBL1D]USER|||||||||40"
 set %TAB(4)=$C(2,69,10)_"20D12425|1|[DBTBL1D]LTD"
 set %TAB(5)=$C(3,58,12)_"00U12427|1|[DBTBL1D]MDD|@SELDI^DBSFUN($$MDD^DBSDF(FID),.X)||do VP3^V00S058(.fDBTBL1D,.fDBTBL1)|do VP4^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(6)=$C(4,58,20)_"00U12404|1|[DBTBL1D]DOM|[DBSDOM]||do VP5^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(7)=$C(6,19,1)_"01U12409|1|[DBTBL1D]TYP|[DBCTLDVFM]||do VP6^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(8)=$C(6,34,5)_"01N12402|1|[DBTBL1D]LEN|||do VP7^V00S058(.fDBTBL1D,.fDBTBL1)||||||7"
 set %TAB(9)=$C(6,58,3)_"00N12419|1|[DBTBL1D]SIZ|||do VP8^V00S058(.fDBTBL1D,.fDBTBL1)||1"
 set %TAB(10)=$C(6,73,2)_"00N12414|1|[DBTBL1D]DEC|||||0|18"
 set %TAB(11)=$C(7,19,40)_"01T12410|1|[DBTBL1D]DES|||do VP9^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(12)=$C(8,19,40)_"01T12422|1|[DBTBL1D]RHD"
 set %TAB(13)=$C(10,19,60)_"00T12405|1|[DBTBL1D]TBL|||do VP10^V00S058(.fDBTBL1D,.fDBTBL1)||||||255"
 set %TAB(14)=$C(11,19,60)_"00T12406|1|[DBTBL1D]PTN|||do VP11^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(15)=$C(12,19,58)_"00T12403|1|[DBTBL1D]DFT|||do VP12^V00S058(.fDBTBL1D,.fDBTBL1)|do VP13^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(16)=$C(13,19,25)_"00T12412|1|[DBTBL1D]MIN|||do VP14^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(17)=$C(14,19,25)_"00T12413|1|[DBTBL1D]MAX|||do VP15^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(18)=$C(16,19,58)_"00T12408|1|[DBTBL1D]XPR"
 set %TAB(19)=$C(17,19,58)_"00T12407|1|[DBTBL1D]XPO"
 set %TAB(20)=$C(19,19,58)_"00T12429|1|[DBTBL1D]DEPREP|||||||||255"
 set %TAB(21)=$C(20,19,58)_"00T12430|1|[DBTBL1D]DEPOSTP|||||||||255"
 set %TAB(22)=$C(21,11,1)_"00L12415|1|[DBTBL1D]REQ|||do VP16^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(23)=$C(21,36,1)_"00L12428|1|[DBTBL1D]VAL4EXT|||do VP17^V00S058(.fDBTBL1D,.fDBTBL1)|do VP18^V00S058(.fDBTBL1D,.fDBTBL1)"
 set %TAB(24)=$C(21,65,1)_"00L12423|1|[DBTBL1D]SRL"
 set %TAB(25)=$C(21,74,1)_"00L12431|1|[DBTBL1D]NULLIND"
 do VTBL(.fDBTBL1D,.fDBTBL1)
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VTBL(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


  //user-defined post procs
 //
VP1(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean DELETE, DOMREQ, MDDREQ, ER
	type public String DI, MDDFID, PARFID, RM, V, X
	
	type String FID
	
	quit:X.isNull()
	
	set FID = fDBTBL1.fid
	
	// Don't allow new column name that is reserved word
	if 'FID.beginsWith("Z"),'X.beginsWith("Z"), 'Db.isDefined("DBTBL1D", "%LIBS='SYSDEV' AND FID=:FID AND DI=:X"), Db.isDefined("STBLRESERVED", "WORD=:X") do { quit

		set ER = 1
		// SQL reserved word - not permitted for use
		set RM = $$^MSG(5259)
	} 
	
	if (X = V) do { quit
		
		do CHANGE^DBSMACRO("TBL", "")
		do ZSUPRTYP(fDBTBL1, X, .PARFID)
	}
	
	if '$$VALIDKEY^DBSGETID(X) do { quit
		
		set ER = 1
		// Alphanumeric format only
		set RM = $$^MSG(248)
	}

	/* allow underscore chanracters
	CR 36952
	if X.isLike("%_%") do { quit
 
                set ER = 1
                // Alphanumeric format only
                set RM = $$^MSG(248)
        }
	*/

	do CHANGE^DBSMACRO("TBL", "")
	do UNPROT^DBSMACRO("ALL")

	set DI = X
	
	set fDBTBL1D = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:FID,DI=:DI", 1)
	
	if (fDBTBL1D.getMode() = 0) do {
		
		if (fDBTBL1.rectyp = 1) do {
			
			type String keys = fDBTBL1.acckeys
			
			set fDBTBL1D.nod = keys.piece(",", keys.length(","))
		}
		
		set %ProcessMode = 0
		// Create new data item
		set RM = $$^MSG(639)
		
		do GOTO^DBSMACRO("DBTBL1D.MDD")		// Skip Delete prompt field
	}
	else  set %ProcessMode = 1
	
	set DELETE = 0

	do DISPLAY^DBSMACRO("ALL")
	
	do ZSUPRTYP(fDBTBL1, DI, .PARFID)
	do ZPROT1(fDBTBL1, .MDDFID, .DOMREQ, .MDDREQ)
	
	quit

 
ZSUPRTYP(RecordDBTBL1 fDBTBL1,
	 String DI,
	 String PARFID)		// Supertype table name	/MECH=REFNAM:W

	/*
	Check for supertype linkage
	*/
	
	set PARFID = fDBTBL1.parfid
	quit:PARFID.isNull()
	
	type RecordDBTBL1D pardi = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:PARFID,DI=:DI", 1)
	
	quit:(pardi.getMode() = 0)		// Not in parent table
	
	// Copy and display Supertype attributes
	do DEFAULT^DBSMACRO("DBTBL1D.NOD", pardi.nod)
	do PROTECT^DBSMACRO("DBTBL1D.NOD")
	do DEFAULT^DBSMACRO("DBTBL1D.LEN", pardi.len)
	do PROTECT^DBSMACRO("DBTBL1D.LEN")
	do DEFAULT^DBSMACRO("DBTBL1D.DFT", pardi.dft)
	do PROTECT^DBSMACRO("DBTBL1D.DFT")
	do DEFAULT^DBSMACRO("DBTBL1D.DOM", pardi.dom)
	do PROTECT^DBSMACRO("DBTBL1D.DOM")
	do DEFAULT^DBSMACRO("DBTBL1D.TYP", pardi.typ)
	do PROTECT^DBSMACRO("DBTBL1D.TYP")
	do DEFAULT^DBSMACRO("DBTBL1D.DES", pardi.des)
	do PROTECT^DBSMACRO("DBTBL1D.DES")
	do DEFAULT^DBSMACRO("DBTBL1D.ITP", pardi.itp)
	do PROTECT^DBSMACRO("DBTBL1D.ITP")
	do DEFAULT^DBSMACRO("DBTBL1D.DEC", pardi.dec)
	do PROTECT^DBSMACRO("DBTBL1D.DEC")
	do DEFAULT^DBSMACRO("DBTBL1D.ISMASTER", pardi.ismaster)
	do PROTECT^DBSMACRO("DBTBL1D.ISMASTER")
	do DEFAULT^DBSMACRO("DBTBL1D.SFD", pardi.sfd)
	do PROTECT^DBSMACRO("DBTBL1D.SFD")
	do DEFAULT^DBSMACRO("DBTBL1D.SIZ", pardi.siz)
	do PROTECT^DBSMACRO("DBTBL1D.SIZ")
	do DEFAULT^DBSMACRO("DBTBL1D.POS", pardi.pos)
	do PROTECT^DBSMACRO("DBTBL1D.POS")
	do DEFAULT^DBSMACRO("DBTBL1D.RHD", pardi.rhd)
	do PROTECT^DBSMACRO("DBTBL1D.RHD")
	do DEFAULT^DBSMACRO("DBTBL1D.SRL", pardi.srl)
	do PROTECT^DBSMACRO("DBTBL1D.SRL")
	do DEFAULT^DBSMACRO("DBTBL1D.CNV", pardi.cnv)
	do PROTECT^DBSMACRO("DBTBL1D.CNV")
	do DEFAULT^DBSMACRO("DBTBL1D.MDD", pardi.mdd)
	do PROTECT^DBSMACRO("DBTBL1D.MDD")
	do DEFAULT^DBSMACRO("DBTBL1D.VAL4EXT", pardi.val4ext)
	do PROTECT^DBSMACRO("DBTBL1D.VAL4EXT")
	
	do DISPLAY^DBSMACRO("ALL", "", 0)
	
	// Exists in Supertype Entity ~p1
	set RM = $$^MSG(7294, PARFID)
	
	quit
        
        
ZPROT1(RecordDBTBL1 fDBTBL1,
       String MDDFID,		// Master Data Dictionary	/MECH=REFNAM:W
       Boolean DOMREQ,		// SCASYS.DBSDOMREQ		/MECH=REFNAM:W
       Boolean MDDREQ)		// SCASYS.DBSMDDREQ		/MECH=REFNAM:W

	/*
	Master Data Dictionary
	*/

	type String SYSSN
	
	set SYSSN = fDBTBL1.syssn
	
	if SYSSN.isNull() set SYSSN = "PBS"

	type RecordSCASYS scasys = Db.getRecord("SCASYS", "SYSSN=:SYSSN", 1)
	
	set MDDFID = scasys.dbsmdd
	set DOMREQ = scasys.dbsdomreq
	set MDDREQ = scasys.dbsmddreq
	
	if ((fDBTBL1.fid = MDDFID) ! MDDFID.isNull()) D PROTECT^DBSMACRO("DBTBL1D.MDD")

	quit
VP2(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER, X
	type public String DI, RM
	
	quit:'X

	// Don't allow delete if the column is in use
	
	type ResultSet rs = Db.select("DINAM", "DBINDX", "LIBS='SYSDEV' AND FID=:fDBTBL1.fid AND DINAM=:DI")

	if rs.next() do {
		
		set ER = 1
		// Remove data item references first
		set RM = $$^MSG(2363)
	}
	
	else  do GOTO^DBSMACRO("END")
	
	quit
VP3(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean DOMREQ, MDDREQ, ER
	type public String MDDFID, PARFID, RM, V, X
	
	quit:(X.isNull() & V.isNull())
	
	if MDDREQ do CHANGE^DBSMACRO("REQ")

	do CHANGE^DBSMACRO("TBL", "")
	
	// Remove old MDD reference
	if X.isNull(), PARFID.isNull() do UNPROT^DBSMACRO("ALL")
	
	quit:X.isNull()
	
	if ((fDBTBL1.fid = MDDFID) ! MDDFID.isNull()) do { quit
		
		set ER = 1
		// Invalid master dictionary name for this system
		set RM = $$^MSG(1402)
	}
	
	type RecordDBTBL1D mdddi = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:MDDFID,DI=:X", 1)
	
	if (mdddi.getMode() = 0) do { quit
		
		set ER = 1
		// Invalid master dictionary name
		set RM = $$^MSG(1401)
	}
	
	do DEFAULT^DBSMACRO("DBTBL1D.DES", mdddi.des)
	do DEFAULT^DBSMACRO("DBTBL1D.RHD", mdddi.rhd)
	do DEFAULT^DBSMACRO("DBTBL1D.LEN", mdddi.len)
	do DEFAULT^DBSMACRO("DBTBL1D.TYP", mdddi.typ)
	do DEFAULT^DBSMACRO("DBTBL1D.SIZ", mdddi.siz)
	do DEFAULT^DBSMACRO("DBTBL1D.DEC", mdddi.dec)
	
	do PROTECT^DBSMACRO("DBTBL1D.DES")
	do PROTECT^DBSMACRO("DBTBL1D.RHD")
	do PROTECT^DBSMACRO("DBTBL1D.LEN")
	do PROTECT^DBSMACRO("DBTBL1D.TYP")
	do PROTECT^DBSMACRO("DBTBL1D.SIZ")
	do PROTECT^DBSMACRO("DBTBL1D.DEC")
	
	quit
VP4(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean DOMREQ, MDDREQ
	type public String MDDFID, PARFID

	if PARFID.isNull() do UNPROT^DBSMACRO("ALL")

	do ZPROT1(fDBTBL1, .MDDFID, .DOMREQ, .MDDREQ)	// In post-processor for DI

	quit
VP5(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean DOMREQ, ER
	type public String V, X
	
	type String SYSSN
	
	if DOMREQ do CHANGE^DBSMACRO("REQ")
	
	quit:X.isNull()
	
	set SYSSN = fDBTBL1.syssn
	
	type RecordDBSDOM dbsdom = Db.getRecord("DBSDOM", "SYSSN=:SYSSN,DOM=:X", 1)
	quit:(dbsdom.getMode() = 0)
	
	if (X = V) do ZPROT(dbsdom) quit
	
	do DEFAULT^DBSMACRO("DBTBL1D.DES", dbsdom.des)
	do DEFAULT^DBSMACRO("DBTBL1D.TYP", dbsdom.typ)
	do DEFAULT^DBSMACRO("DBTBL1D.SIZ", dbsdom.siz)
	do DEFAULT^DBSMACRO("DBTBL1D.LEN", dbsdom.len)
	do DEFAULT^DBSMACRO("DBTBL1D.TBL", dbsdom.tbl)
	do DEFAULT^DBSMACRO("DBTBL1D.RHD", dbsdom.rhd)
	do DEFAULT^DBSMACRO("DBTBL1D.MIN", dbsdom.min)
	do DEFAULT^DBSMACRO("DBTBL1D.MAX", dbsdom.max)
	do DEFAULT^DBSMACRO("DBTBL1D.PTN", dbsdom.ptn)
	do DEFAULT^DBSMACRO("DBTBL1D.DFT", dbsdom.dft)
	do DEFAULT^DBSMACRO("DBTBL1D.DEC", dbsdom.dec)
	
	do ZPROT(dbsdom)
	do DISPLAY^DBSMACRO("ALL")
	
	quit


ZPROT(RecordDBSDOM dbsdom)	//
	
	if dbsdom.prdes do PROTECT^DBSMACRO("DBTBL1D.DES")
	if dbsdom.prtyp do PROTECT^DBSMACRO("DBTBL1D.TYP")
	if dbsdom.prsiz do PROTECT^DBSMACRO("DBTBL1D.SIZ")
	if dbsdom.prlen do PROTECT^DBSMACRO("DBTBL1D.LEN")
	if dbsdom.prtbl do PROTECT^DBSMACRO("DBTBL1D.TBL")
	if dbsdom.prrhd do PROTECT^DBSMACRO("DBTBL1D.RHD")
	if dbsdom.prmin do PROTECT^DBSMACRO("DBTBL1D.MIN")
	if dbsdom.prmax do PROTECT^DBSMACRO("DBTBL1D.MAX")
	if dbsdom.prptn do PROTECT^DBSMACRO("DBTBL1D.PTN")
	if dbsdom.prdft do PROTECT^DBSMACRO("DBTBL1D.DFT")
	if dbsdom.prdec do PROTECT^DBSMACRO("DBTBL1D.DEC")
	
	quit
VP6(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String DI, RM, X
	
	quit:X.isNull()
	
	if ((X = "M") ! (X = "B")) do { quit:ER

		if (fDBTBL1.rectyp = 1) do { quit:ER
		
			type ResultSet rs = Db.select("DI", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:fDBTBL1.fid AND (TYP='M' OR TYP='B') AND DI <> :DI")
		
			if rs.next() do { quit
			
				set ER = 1
				// Memo or binary field already assigned to ~p1
				set RM = $$^MSG(800, rs.getCol("DI"))
			}
		}
		
		// Create default computed expression for memo/blob fields
		set fDBTBL1D.nod = ""
		set fDBTBL1D.pos = ""
		set fDBTBL1D.cmp = " "
	}
	
	type RecordDBCTLDVFM dvfm = Db.getRecord("DBCTLDVFM", "TYP=:X", 1)
	
	quit:(dvfm.getMode() = 0)
	
	do UNPROT^DBSMACRO("DBTBL1D.DEC")
	
	if (%ProcessMode = 0) do {
		
		if fDBTBL1D.itp.isNull() do DEFAULT^DBSMACRO("DBTBL1D.ITP", dvfm.itp)
		if fDBTBL1D.len.isNull() do DEFAULT^DBSMACRO("DBTBL1D.LEN", dvfm.len)
		if fDBTBL1D.ptn.isNull() do DEFAULT^DBSMACRO("DBTBL1D.PTN", dvfm.ptn)
	}
	
	if (X = "$"), fDBTBL1D.dom.isNull(), (fDBTBL1D.dec <> 2) do DEFAULT^DBSMACRO("DBTBL1D.DEC", 2)

	if '((X = "N") ! (X = "$")) do DELETE^DBSMACRO("DBTBL1D.DEC")
	
	if (X '= "N") do PROTECT^DBSMACRO("DBTBL1D.DEC")
	
	if (X = "L") do {
		
		do DEFAULT^DBSMACRO("DBTBL1D.LEN", 1)	
		do DEFAULT^DBSMACRO("DBTBL1D.SIZ", 1)	

		/* Logicals can only have a value of 0 or 1, therefore, must be
		   required and have a default value - only apply if not already
		   defined as a logical since don't want to force change
		*/
		
		quit:(V = "L")		// Already defined as logical
		
		if fDBTBL1D.dft.isNull() do DEFAULT^DBSMACRO("DBTBL1D.DFT", 0)
		do CHANGE^DBSMACRO("DBTBL1D.DFT", "REQ")
		do DEFAULT^DBSMACRO("DBTBL1D.REQ", 1)
	}
	
	quit

VP7(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public Number X
	type public String RM
	
	if (fDBTBL1D.typ = "D"), (X < 10) do { quit
		
		set ER = 1
		// Length must be at least ~p1
		set RM = $$^MSG(1602, 10)
	}
	
	if (fDBTBL1D.typ = "L"), (X <> 1) do { quit
		
		set ER = 1
		// Length cannot exceed ~p1
		set RM = $$^MSG(1601, 1)
	}
	
	quit
VP8(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	do CHANGE^DBSMACRO("MAX", fDBTBL1D.len)

	quit
VP9(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public String V, X
	
	type String HDR
	
	quit:'V.isNull()
	quit:X.isNull()
	quit:(X = V)
	
	set HDR = ""

	// Split heading into two lines  LINE1@LINE2
	if (fDBTBL1D.len < X.length()), (X?1A.E1" "1E.E) do {
		
		type Number I, ptr
	
		set ptr = X.length() \ 2
		
		if X.extract(ptr) = " " set HDR = X.extract(1, ptr - 1)_"@"_X.extract(ptr + 1, X.length())
		
		else  for I = 1:1:ptr do { quit:'HDR.extract(I).isNull()
			
			if X.extract(ptr + I) = " " set HDR = X.extract(1, ptr + I - 1)_"@"_X.extract(ptr + I + 1, X.length())
			else  if X.extract(ptr - I) = " " set HDR = X.extract(1, ptr - I - 1)_"@"_X.extract(ptr - I + 1, X.length())
		}
	}
	
	if HDR.isNull() set HDR = X

	do DEFAULT^DBSMACRO("DBTBL1D.RHD", HDR, 1, 0)
	
	quit
VP10(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, V, X
	
	quit:X.isNull()
	quit:(X = V)
	
	if X.beginsWith("^") do { quit
		
		set ER = 1
		// Invalid syntax ~p1
		set RM = $$^MSG(1477, "^")
	}
	
	if X.beginsWith("[") do { quit:ER
		
		type String FID
		
		set FID = X.piece("[", 2).piece("]", 1)
		
		if FID.isNull() do { quit
			
			set ER = 1
			// Invalid syntax
			set RM = $$^MSG(1475)
		}
		
		if 'Db.isDefined("DBTBL1", "%LIBS='SYSDEV',FID=:FID") do { quit
		
			set ER = 1
			// Invalid file ~p1
			set RM = $$^MSG(1334, FID)
		}
	}
	
	quit
VP11(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public String X

	quit:X.isNull()

	if 'X.isLike("%X?%") set X = "X?"_X

	quit
VP12(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X
	
	quit:X.isNull()

	if X.beginsWith("<<"), X.endsWith(">>") do {
		
		// Variable format
		set RM = $$^MSG(2929)
	}
	
	if X.beginsWith("["), X.endsWith("]") do { quit
		
		set ER = 1
		// Invalid syntax
		set RM = $$^MSG(1475)
	}

	if (fDBTBL1D.typ = "L"), '((X = 0) ! (X = 1)) do {
	
		// Only apply check on insert or if changing to a logical
		if ((%ProcessMode = 0) ! fDBTBL1D.isChanged("TYP")) do {
			
			set ER = 1
			set RM = "Logical data type must have a default of either 0 or 1"
		}
	}
	
	quit
VP13(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	do CHANGE^DBSMACRO("TBL", "[STBLJRNFUNC]:NOVAL")

	quit
VP14(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X
	
	quit:X.isNull()
	
	quit:(X.beginsWith("<<") & X.endsWith(">>"))
	
	quit:Db.isDefined("STBLJRNFUNC", "FUNC=:X")
	
	if (X.length() > fDBTBL1D.len) do { quit
		
		set ER = 1
		// Maximum length allowed - ~p1
		set RM = $$^MSG(1690, fDBTBL1D.len)
	}
	
	if ((fDBTBL1D.typ = "D") ! (fDBTBL1D.typ = "C")) do {
		
		type String retval
		
		// Validate format - will return ER/RM if bad		
		set retval = $$INT^%ZM(X, fDBTBL1D.typ)
	}
	
	quit
VP15(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X
	
	quit:X.isNull()
	
	quit:(X.beginsWith("<<") & X.endsWith(">>"))
	
	quit:Db.isDefined("STBLJRNFUNC", "FUNC=:X")
	
	if (X.length() > fDBTBL1D.len) do { quit
		
		set ER = 1
		// Maximum length allowed - ~p1
		set RM = $$^MSG(1690, fDBTBL1D.len)
	}
	
	if ((fDBTBL1D.typ = "D") ! (fDBTBL1D.typ = "C")) do {
		
		type String retval
		
		// Validate format - will return ER/RM if bad		
		set retval = $$INT^%ZM(X, fDBTBL1D.typ)
	}
	
	quit
VP16(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER, X
	type public String RM
	
	if 'X, (fDBTBL1D.typ = "L") do {
	
		// Only apply check on insert or if changing to a logical
		if ((%ProcessMode = 0) ! fDBTBL1D.isChanged("TYP")) do {
			
			set ER = 1
			set RM = "Logical data type must be required"
		}
	}
	
	quit
VP17(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER, X
	type public String RM
	
	if X do { quit:ER
		
		if (fDBTBL1D.typ '= "T") do { quit
			
			set ER = 1
			set RM = "Text Fields Only"
		}
		
		else  if fDBTBL1D.nod.isLike("%*%") do {
			
			set ER = 1
			set RM = "Can not translated key fields"
		}
	}
	
	// Skip next prompt
	if (fDBTBL1D.typ '= "D") do GOTO^DBSMACRO("NEXT")
	
	quit
VP18(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	if 'fDBTBL1D.req, (fDBTBL1D.nod ? 1N1"*") do DEFAULT^DBSMACRO("DBTBL1D.REQ", 1)
	
	quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordDBTBL1D fDBTBL1D
 type Public RecordDBTBL1 fDBTBL1
 do VPR(.fDBTBL1D,.fDBTBL1)
 do VDA1(.fDBTBL1D,.fDBTBL1)
 do ^DBSPNT()
 quit

VW(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)
 do VDA1(.fDBTBL1D,.fDBTBL1)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)
 do VDA1(.fDBTBL1D,.fDBTBL1)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordDBTBL1D fDBTBL1D
 type Public RecordDBTBL1 fDBTBL1
 do VDA1(.fDBTBL1D,.fDBTBL1)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
 
vSET(sn,di,X)
 type Public RecordDBTBL1D fDBTBL1D
 if sn="DBTBL1D" do vSET1(.fDBTBL1D,di,X)
 type Public RecordDBTBL1 fDBTBL1
 if sn="DBTBL1" do vSET2(.fDBTBL1,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
vSET1(RecordDBTBL1D fDBTBL1D,di,X)
 do fDBTBL1D.setAuditFlag(1)
 set fDBTBL1D.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
vSET2(RecordDBTBL1 fDBTBL1,di,X)
 do fDBTBL1.setAuditFlag(1)
 set fDBTBL1.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
vREAD(fid,di)
 type Public RecordDBTBL1D fDBTBL1D
 if fid="DBTBL1D" quit $$vREAD1(.fDBTBL1D,di)
 type Public RecordDBTBL1 fDBTBL1
 if fid="DBTBL1" quit $$vREAD2(.fDBTBL1,di)
 quit ""
vREAD1(RecordDBTBL1D fDBTBL1D,di)
 quit fDBTBL1D.@di
vREAD2(RecordDBTBL1 fDBTBL1,di)
 quit fDBTBL1.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
