public SCADRV
	/*
	ORIG: Vitaliy Antonov - 6/13/2002
        DESC: PROFILE System Driver, Part I
        PROCEDURE ID: SCADRV

	
	This is the first half of the PROFILE driver.  It provides the main
	header screen, copyright data, and user id validation.
	
	There are three access methods to PROFILE - a standard, prompted
	user id and password, the use of the VMS username to determine the
	PROFILE user id, and the ability to attach from a current process.
	If using the VMS access method, this main screen information
	provided by this routine will only be displayed once per day per user.
	
	When successfully complete, this routine dispatches to ^SCADRV0, the
	second half of the driver.
	
	---- Revision History -------------------------------------------------
	
	11/03/06 - RussellDS - CR22719
		   Added private to labels called from SCADRV0.
		   
		   Fixed undefined in VMSUID section.
		   
		   Cleaned up various warnings.

        07/28/05 - SkariahV- CR16679
	           Removed #WARN and #OPTIMIZE directives.
	              	
	05/22/05 - Erik Scheetz 15677
		   Modified code to register and unregister user processes in
		   the PROCESSID table.
	
	04/23/04 - GIRIDHARANB - 9554
		   Removed two references to table SUBPROC from the procedure
	
	02/26/04 - GIRIDHARANB - 8045
		   Modified section INIT to define %DB
	
	12/08/03 - Spier 7403
		psl compiler warning cleanup
		
	10/31/03 - Spier 51640
		Changed use of bypassSave to save method for tables
		that have memos and therefore require filers. Also
		commented out calls to IPCMGR since it represents
		unfinished code.

	08/01/03 - Allan Mattson - 51351
                   Added calls to REGISTER^IPCMGR and CLOSE^IPCMGR to support
                   interrupt processing.
	
	06/20/03 - Erik Scheetz - 51349
		   Modified code to correctly pass parameters to SCAUCDI.
	-----------------------------------------------------------------------
	*/

	#ACCEPT Date=11/3/06; Pgm=RussellDS; CR=22719; Group=BYPASS
	#BYPASS
	KILL
	#ENDBYPASS

	type Boolean EXIT=0
	type String %ET,CONAM,drvlist,MENU,UIDLOC,USERNAME
	type String vidinc,vidoff,vcll,vcps,vcpr,vclear,vidrev

	#IF CUVAR.USERNAME 
	// Use VMS username to get UID
	while 'EXIT do VMSUID
	#ELSE
	while 'EXIT do UID
	#ENDIF
	
	quit


UID	// Standard PROFILE username access

	type Public Number %ZTHANG,ER
	type Public String %fkey,ET

	do INIT					// Init screen and key variables

	do PAINTSCR				// Paint screen
	
	// Get user id
	set %UserID=$$GETUID()
	// No user id entered		
	if %UserID.isNull() do EXIT quit

	type RecordSCAU scau=Db.getRecord("SCAU","%UserID",1)

	// Invalid user ID
	if 'scau.getMode() do Runtime.setErrMSG("SCAU",1504) do EXIT quit

	do LOADSCAU(.scau)
	do CHKSTAT(.scau) if ER do EXIT quit	// Disallow Access if User is Revoked
	
	/* Get password  If ER, or timeout, or password is NULL,
	Update SCAU with unsuccessful login info and exit. */
	do GETPWD(.scau) 
	if ER do scau.save() do EXIT quit
	if %fkey.get()="TIM" do scau.save() do EXIT quit

	if ER.get()="W" do {					// WVB - 43805
		if ET.get()'="" set %ZTHANG=60 do DSPBP^UTLERR quit 
		do PNTRM^SCADRV0(1)
		}
	
	do VALIDUID if ER do EXIT quit		// Validate user

	// Update SCAU with successful login info.
	set scau.pwdfail=0 
	set scau.lsgn=%CurrentDate
	do scau.save()

	do VARSET(.scau)			// Set variables

	do REGISTER^IPCMGR("USER")		// Register process
	do ^SCADRV0()				// Dispatch
	do CLOSE^IPCMGR()			// Unregister process
	
	if ER do EXIT quit
	
	quit


VMSUID	// Private -  VMS username access

	type Public Number ER
	type Public String %fkey

	do INIT				// Init screen and key variables

	// Get PROFILE user id
	set %UserID=$$GETUID()

	type RecordSCAU scau=Db.getRecord("SCAU","%UserID",1)

	// Invalid user ID
	if 'scau.getMode() do Runtime.setErrMSG("SCAU",1504) do EXIT quit

	do LOADSCAU(.scau)
	do VALIDUID if ER do EXIT quit		// Validate user
	
	// First sign-on of the day
	if (scau.lsgn '= %CurrentDate) do PAINTSCR quit:$$PROMPT	

	do VARSET(.scau)			// Set variables

	do REGISTER^IPCMGR("USER")		// Register process
	do ^SCADRV0()				// Dispatch
	do CLOSE^IPCMGR()			// Unregister process

	if %fkey.get()="ESC" do EXIT quit		// Escape key
	if %fkey.get()="CUU" do EXIT quit		// Up-Arrow
	if %fkey.get()="TIM" do EXIT quit		// Time-out
	if ER do EXIT quit
	
	quit


public ATTACH(pid,fn,input)
	/* Attach from an existing PROFILE job pid is calling job's process ID
	This subroutine is called from ^DBSSPAWN */

	type Public Number ER
	type Public String %TO,MENU(),RM

	#ACCEPT Date=11/3/06; Pgm=RussellDS; CR=22719; Group=BYPASS
	#BYPASS
	new (%TO,pid,fn,input,ER,RM)
	#ENDBYPASS

	type Number JOB=%ProcessID	
	
	catch error {
		#IF CUVAR.%ET.curVal.extract()="*"
		type Literal String mcmd=CUVAR.%ET.curVal.extract(2,999)
		#ACCEPT Date=11/3/06; Pgm=RussellDS; CR=22719; Group=XECUTE
		xecute mcmd
		#ELSE
		do @CUVAR.%ET
		#ENDIF
		}
	
	// Init screen and key variables
	do INIT

	type RecordTMP tmp=Db.getRecord("TMP","JOBNUM=:pid",1)

	// Init user specific variables
	#ACCEPT PGM=Erik Scheetz;DATE=01/03/03;CR=unknown
	if tmp.getMode() xecute tmp.svar

	// Invalid process ID
	else  do Runtime.setErrMSG("TMP",1427) quit

	// Reset driver variables
	type RecordSAVEDRV savedrv=Db.getRecord("SAVEDRV","JOBNUM=:JOB",1)
	set savedrv.jobnum=JOB
	set savedrv.drvvars=""
	do savedrv.bypassSave()

	// Load menu data
	type RecordTMPMENU tmpmenu=Db.getRecord("TMPMENU","JOBNUM=:pid,SEQ=1",1)
	set MENU=1
	set MENU(1)=tmpmenu.fn_"|"_tmpmenu.prmpt_"|"_tmpmenu.uinp_"|"_tmpmenu.des

        // Save menu data
	type RecordTMPMENU newmenu=tmpmenu.copy()
	set newmenu.jobnum=JOB
	do newmenu.bypassSave()
	
	do ^SCADRV0(fn.get(),input.get())

	// Delete all driver info
	do Db.fastDelete("TMP","JOBNUM=:JOB")

	// Delete all saved driver variables from SAVEDRV table
	do Db.fastDelete("SAVEDRV","JOBNUM=:JOB")

	quit
	

INIT	// Initialization and terminal setting
	
	type Public String %,%DB,%LOGID,%NET,%SN,drvlist
	type Public String vidinc,vidoff,vcll,vcps,vcpr,vclear,vidrev	
	
	type Number JOB=%ProcessID

	catch error {
		#IF CUVAR.%ET.curVal.extract()="*"
		type Literal String mcmd=CUVAR.%ET.curVal.extract(2,999)
		#ACCEPT Date=11/3/06; Pgm=RussellDS; CR=22719; Group=XECUTE
		xecute mcmd
		#ELSE
		do @CUVAR.%ET
		#ENDIF
		}

	do Db.fastDelete("TMP","JOB")
	do Db.fastDelete("NOREST","JOB")

	set drvlist="%TO|300,CONAM,%ET"
	set %DB=$$TRNLNM^%ZFUNC("SCAU_DB")
	do LIST^CUVAR(drvlist)
	do INIT^%ZM(.drvlist)

	set %LOGID=$$LOGID 
	type RecordDDPSTS ddpsts=Db.getRecord("DDPSTS")
	set %NET=ddpsts.status

	if %NET.isNull() set %NET=1
	
	set %="|" 
	set %SN=""

	set %UserStation=$$TLO^UTLO
	
	do ZBINIT^%TRMVT()
	set vidinc=$$VIDINC^%TRMVT 
	set vidoff=$$VIDOFF^%TRMVT
	set vcll=$$CLL^%TRMVT 
	set vcps=$$CPS^%TRMVT 
	set vcpr=$$CPR^%TRMVT
	set vclear=$$SCR80^%TRMVT_$$CLEAR^%TRMVT 
	set vidrev=$$VIDREV^%TRMVT
	
	do TERMSET                             // Set terminal characteristics
	// I18N=OFF
 	write $$INSMOFF^%TRMVT                 // Turn off insert mode
	write vclear                           // Clear screen
	// I18N=ON

	quit 
	

Public STFENABL(%fn)
	/* Return 0/1 if function offline STF enabled

	KEYWORDS: Client/Server
	
	DESC: Determines if offline Store and Forward is enabled
		for a given function.  If [SCATBL]SALON = 1 and
		$P(%LOGID,"|",1) = 2 then STF processing will be
		considered enabled.  This is to accomodate the VLOD
		section of the DQ screens of non financial transactions
		(ie. CIF001 - CIF create, etc.).

	ARGUMENTS:
		. %fn PROFILE Function Name /REQ/TYP=T/REFNAM/MECH:R

	RETURNS:
		. $$ Indicator - STF enabled /TYP=L
	*/

	type RecordSCATBL scatbl=Db.getRecord("SCATBL","FN=%fn",1)
	if 'scatbl.getMode() quit 0

	quit scatbl.salon

	
private LOGID()
	/* Get login information

	%LOGID = Client type|VMS username|Node name|HOST global directory-
	|Re-connect timer|Client/server token|Client message ID-
	|Language ID

	Client Types:
		0 = Client on host machine (HOST)
		

	RETURNS:
		. %LOGID  Login information  /TYPE=T
		(returns positions 1-4 only)
	*/

	type String LOGID
	
	set LOGID=0
	set LOGID.piece("|",2)=$$USERNAM^%ZFUNC
	set LOGID.piece("|",3)=$$NODENAM^%ZFUNC()
	set LOGID.piece("|",4)=$$GBLDIR^DDPUTL($$HOSTLOG^DDPUTL)

	quit LOGID

	
PAINTSCR		// Paint header, copyright, and message
		
	type Public Number UIDLOC
	type Public String vidinc,vidoff,vcll,vcps,vcpr,vclear,vidrev
	type Number I
	type String CO(),LOGINMSG,X

	set UIDLOC=10	// Default UID prompt location

	// I18N=OFF
	write vclear
	#IF CUVAR.SYSABR="" set X="PROFILE/IBS"
	#IF CUVAR.SYSABR'="" set X="PROFILE/"_CUVAR.SYSABR

	write vidinc
	write $$CUP^%TRMVT((40-X.length())\2,1),$$DBLH^%TRMVT(X)
	write vidoff

	#IF CUVAR.PROWNR set X=CUVAR.PROWNR
	#IF 'CUVAR.PROWNR set X="Sanchez Computer Associates"

	write $$CUP^%TRMVT((80-$L(X))\2,3),X
	
	#IF CUVAR.DISTNAM'="" write $$CUP^%TRMVT(40-CUVAR.DISTNAM.curVal.length()\2,5),$$DBLW^%TRMVT(CUVAR.DISTNAM)
	#IF CUVAR.CONAM'="" write $$CUP^%TRMVT((40-CUVAR.CONAM.curVal.length())\2,7),$$DBLH^%TRMVT(CUVAR.CONAM)
	
	// Get copyright notice
	do COPYRT(.CO)		
	for I=1:1:4 if CO(I)'="" write $$CUP^%TRMVT((80-CO(I).length())\2,19+I),CO(I)

	// Daily login message
	set LOGINMSG=CUVAR.LOGINMSG1_"|"_CUVAR.LOGINMSG2_"|"_CUVAR.LOGINMSG3
	if LOGINMSG.translate("|").isNull()

	write $$LINE^%TRMVT(60,10,13)
	for I=1:1:3 write $$CUP^%TRMVT(10,13+I),LOGINMSG.piece("|",I)
	write $$LINE^%TRMVT(60,10,17)
	// I18N=ON	

	quit 
	

COPYRT(X)

	type String CUVVN

	#IF CUVAR.CPRTLN1_CUVAR.CPRTLN2_CUVAR.CPRTLN3_CUVAR.CPRTLN4'=""
	set X(1)=CUVAR.CPRTLN1
	set X(2)=CUVAR.CPRTLN2
	set X(3)=CUVAR.CPRTLN3
	set X(4)=CUVAR.CPRTLN4
	#ELSE	
	// I18N=OFF
	set X(1)="PROFILE(R) is a registered trademark of Sanchez Computer Associates, Inc."
	set X(2)="DATA-QWIK is a trademark of Sanchez Computer Associates, Inc."
	set X(3)="Copyright(C)"_$$YEAR^SCADAT(+%CurrentDate,1)_" by Sanchez Computer Associates, Inc."
	set X(4)="All Rights Reserved."
	if CUVAR.%VN'="" set X(4)=X(4)_"    Version "_CUVAR.%VN
	// I18N=ON
	#ENDIF

	quit
	
	
GETUID()
	/*
	If 'VMSOPT then use standard PROFILE prompted option.
	If VMSOPT then VMS options are (len=$L(VMS_username)):

	^CUVAR("USERNAME")=n      =>  use $E(VMS_username,n,len)
		=n,m    =>  use $E(VMS_username,n,m)
		=-n     =>  use $E(VMS_username,len-n,len)
		=-n,-m  =>  use $E(VMS_username,len-n,len-m)
	*/

	type Public String %LOGID
	type Number E1,E2,L,VMSNLNG
	type String VMSNAME

	if 'CUVAR.USERNAME do SCAUID(.VMSNAME) quit VMSNAME 

	set E1=CUVAR.USERNAME.curVal.piece(",",1)
	set E2=CUVAR.USERNAME.curVal.piece(",",2)
	
	set VMSNAME=%LOGID.piece("|",2)
	if 'VMSNAME.data() set VMSNAME=$$USERNAM^%ZFUNC
	set VMSNLNG=VMSNAME.length()
	if E1>0 set:'E2 E2=VMSNLNG
	else  set E1=VMSNLNG+E1+1 set E2=VMSNLNG+E2+1
	if E2<E1 set E2=VMSNLNG

	// Return user id
	quit VMSNAME.extract(E1,E2)
	
	
SCAUID(USERID)
	/* Get PROFILE user id based on prompt

	Arguments:
		. USERID	User ID		TYP=T/MECH=REFNAM/NOREQ

	Returns:
		. USERID	User ID		TYP=T
	*/

	type Public Number UIDLOC
	 
	catch error {
		do ZE^UTLERR
		set USERID=""
		}
	
	// User Identification:
	write $$CUP^%TRMVT(20,UIDLOC),$$^MSG(7137)
	set USERID=$$TERM^%ZREAD("",20,"","",60,1)

	// UID is not case sensitive
	set USERID=$$UPPER^%ZFUNC(USERID)
	
	quit
	
	
PROMPT()	// Continue prompt for VMS username access
	// Return 0 if success, 1 if failure
	
	type Public String %fkey
	
	write $$MSG^%TRMVT("",0,1,1,24,%InputTimeOut,1)
	if %fkey.get()="TIM" quit 1

	quit 0
	
	
private LOADSCAU(RecordSCAU scau)	// Load ^SCAU variables

	type Public String %ACRREST,%AUTOMNU
	
	set %AUTOMNU=scau.automenu
	set %UserClass=scau.%ucls

	// Restrict Userclass During Accruals
	type RecordSCAU0 scau0=Db.getRecord("SCAU0","%UserClass",1) 
	set %ACRREST=scau0.rstrct

	quit

	
GETPWD(RecordSCAU scau)		// Get password
		
	type Public Number ER,UIDLOC
	type Public String %fkey,ET,vcps
	
	type Number PWDTRY,TRY
	type String ENC,X
	
	// Maximum Number Of Retries
	type RecordSCAU0 scau0=Db.getRecord("SCAU0","%UserClass",1)
	set PWDTRY=scau0.pwdtry

	if (scau.pswd="*")!(scau.pswd.curVal.isNull()) set ER=1,ET="INVLDPWD" do ^UTLERR quit
	
	// Enter your password:
	write $$CUP^%TRMVT(20,UIDLOC+1),$$^MSG(7135),vcps      
	for TRY=1:1 do PWDTRY(.scau) quit:('ER)!(scau.pwdfail=PWDTRY)
	if %fkey.get()="TIM" quit 
	if ER set ET="ACCVIO" quit 
	
	// Allow entry of new password
	if (scau.newpwdreq)!(%CurrentDate>scau.pexpr) do { if ER quit 
		// Password has expired
		write $$MSG^%TRMVT($$^MSG(2138),0,1,1,24,60,1)
		if %fkey="TIM"!(%fkey="ESC") set ER=1,ET="ACCVIO" quit 
	
		do NEWPWD(.scau)

		if %CurrentDate>scau.pexpr set ER=1,ET="PWDEXP" quit 
		if scau.newpwdreq set ER=1,ET="SV_NEWPWREQ" quit 
		}

	do CHKEXP(.scau)

	quit 
	
	
PWDTRY(RecordSCAU scau)	// Try to get Password
	
	type Public Number ER,PWDTRY,TRY
	type Public String RM,vcpr
	type Number ENCMETH,TIMEOUT=30

	// I18N=OFF
	write vcpr				// Reposition cursor
	set ER=$$PWD(.scau,TIMEOUT) quit:'ER

	set scau.pwdfail=scau.pwdfail+1	   // Increment Password Failures count

	// Don't display for last time
	if TRY=PWDTRY quit
	
	write $$MSG^%TRMVT(RM,1,0,1,24)
	// I18N=ON

	quit 
	
	
Public PWD(RecordSCAU scau,%TO)
	/* Read the password

	ARGUMENTS:
		.scau	Record of SCAU		TYP=RecordSCAU/REQ
		.%TO	Timeout			TYP=N/MECH=VAL/NOREQ

	RETURNS:
		.$$ 	0 if successful
			1 if fails (plus RM)
	*/
	
	type Number RETURN

	do PWDCHECK(.scau,%TO)

	quit RETURN

	
PWDCHECK(RecordSCAU scau,%TO)

	type Public Number ENCMETH,ER,RETURN
	type Public String %fkey,RM
	type String argv,PSWDAUT,PWDENC,X

	catch error {
		// Error trap for password input - restore echo
		set $ZT="G ^%ET"
		do TERM^%ZUSE(0,"ECHO")

		// Invalid - Re-enter
		set RM=$$^MSG(8301)
		set RETURN=1
		}

	do TERM^%ZUSE(0,"NOECHO") 

	if '%TO.get() set %TO=30

	// Read input (password) from user
	set argv="X:%TO" 
	#ACCEPT PGM=Erik Scheetz;DATE=01/03/03;CR=unknown
	read @argv
	if X.isNull() set %fkey="TIM" set RETURN=0 quit

	do TERM^%ZUSE(0,"ECHO")
	
	// Code to handle being called from other routines
	if scau.pswdaut'="" set PWDENC=scau.pswdaut,ENCMETH=1
	else  set PWDENC=scau.pswd,ENCMETH=0
	
	// Invalid - Re-enter
	if X.extract().ascii()=1 set RM=$$^MSG(8301),RETURN=1 quit

	// Valid Password
	set ER=$$ENC^%ENCRYPT(X,.PSWDAUT)
	if +ENCMETH.get()=0,PWDENC'="",PWDENC=$$ENC^SCAENC(X) do { quit
		set scau.pswdaut=PSWDAUT
		set RETURN=0
		}

	if +ENCMETH.get()=1,PWDENC.get()'="",PSWDAUT=PWDENC set RETURN=0 quit
	
	// Invalid - Re-enter
	set RM=$$^MSG(8301)
	set RETURN=1

	quit
	
	
PWDET	// Error trap for password input - restore echo
		
	type Public String RM
	set $ZT="G ^%ET"
	
	do TERM^%ZUSE(0,"ECHO")
	// Invalid - Re-enter
	set RM=$$^MSG(8301)
	quit 1
	
	
NEWPWD(RecordSCAU scau)	// Allow entry of new password

	type Public Number ER
	type Public String ET
	
	do VPG0^SCADRV1(.scau) if ER quit
	do TERMSET

	// Create new one failed
	if ER!(scau.pswd="*") set ER=1,ET="ACCVIO"

	quit

	
CHKEXP(RecordSCAU scau)		// Check password expiration for warning
		
	type String MSG
	if scau.pexpr>(%CurrentDate+7) quit	// Not expiring in next 7 days
	if scau.lsgn=%CurrentDate quit		// Already logged for today
	
	// Your password expires on ~p1
	set MSG=$$^MSG(7136,$$DAT^%ZM(scau.pexpr))
	// I18N=OFF
	write $$MSG^%TRMVT(MSG,0,1,1,24,60,1)
	// I18N=ON

	quit 
	
	
private VALIDUID	// Validate %UID and device restrictions
		
	type Public Number ER=0
	type Public String ET,IO,RM=""

	if %UserID.isNull() set ER=1,ET="ACCVIO" quit 
	if 'Db.isDefined("SCAU","%UserID") set ER=1,ET="ACCVIO" quit

	// Check to see if device is restricted from this user then quit
	type RecordDEVICE device=Db.getRecord("DEVICE","%UserStation",1)
	if device.rest'=1 quit

	// Valid for this userclass
	#IF CUVAR.SBINSTNO'=""
	if Db.isDefined("DEVICER","%UserStation,CUVAR.SBINSTNO,%UserClass") quit
	set ER=1
	set ET="UNAUTIO"
	set IO=%UserStation
	#ENDIF

	quit 


VARSET(RecordSCAU scau)

	type Public Number %ACRREST,%AUTOMNU,%UDFN
	type Public String drvlist,MENU
	
	type Number JOB=%ProcessID
	type String DRVVARS,I,MNUM,MPRMPT,v

	type ResultSet rs=Db.select("USERFN","CTBLUDFN")
	if 'rs.isEmpty() set %UDFN=1
	else  set %UDFN=0
	
	set DRVVARS="S %ACRREST="_(+%ACRREST)
	set DRVVARS=DRVVARS_",%AUTOMNU="_(+%AUTOMNU)
	set DRVVARS=DRVVARS_",TLO="""_%UserStation_""""
	set DRVVARS=DRVVARS_",%UCLS="""_%UserClass_""""
	set DRVVARS=DRVVARS_",%UDFN="_%UDFN
	set DRVVARS=DRVVARS_",%UID="""_%UserID_""""
	
	// Add previously defined variables
	for I=1:1:drvlist.length(",") do { 
		set v=drvlist.piece(",",I).piece("|",1)
		set DRVVARS=DRVVARS_","_v_"="""_@v_""""
		}

	// Save driver variables
	type RecordSAVEDRV savedrv=Db.getRecord("SAVEDRV","JOBNUM=:JOB",1)
	set savedrv.drvvars=DRVVARS
	do savedrv.save()
	
	// Load menu data
	set MENU=1 

	type RecordSCAU0 scau0=Db.getRecord("SCAU0","%UserClass",1)
	set MNUM=scau0.menu

	if MNUM.isNull() set MNUM=1

	type RecordSCAMENU0 scamenu0=Db.getRecord("SCAMENU0","MNUM",1)
	set MPRMPT=scamenu0.prmpt

	set MENU(1)=MNUM_"|"_MPRMPT

	// Save menu data
	type RecordTMPMENU tmpmenu=Db.getRecord("TMPMENU","JOBNUM=:JOB,SEQ=1",1)
	set tmpmenu.fn=MNUM
	set tmpmenu.prmpt=MPRMPT
	do tmpmenu.bypassSave()
	
	quit
	
	
private TERMSET	// Open terminal with necessary parameters - also called by SCADRV0
		
	do TERM^%ZUSE(0,"ECHO/ESCAPE/CHARACTERS/NOEDIT/NOIMAGE/WIDTH=81/TERMINATOR=$C(11,13,16,23)")
	write $$GREN^%TRMVT                    // Enable graphics
	write $$CUON^%TRMVT                    // Turn on cursor
	quit 
	
	
CLOSE	// Reset terminal with necessary parameters
		
	do TERM^%ZUSE(0,"ECHO/ESCAPE/EDIT/NOCHARACTERS/NOIMAGE/WIDTH=80/TERMINATOR=""""")
	write $$SCRAWON^%TRMVT                 // Enable auto wrap
	quit 
	
	
EXIT	// Report any error, and exit

	type Public Boolean EXIT
	type Public Number %ZTHANG,ER
	type Public String ET,RM	
	
	type Number JOB=%ProcessID
	
	// Delete all driver information 
	do Db.fastDelete("TMP","JOBNUM=:JOB")

	if ER.get() do {
		if ET.get()'="" set %ZTHANG=60 do DSPBP^UTLERR quit 
		do PNTRM^SCADRV0(1)
		}

	do CLOSE write $$CLP^%TRMVT

	// Delete all saved driver variables
	do Db.fastDelete("SAVEDRV","JOBNUM=:JOB")

	// Delete all saved general use variables
	do Db.fastDelete("SAVEVAR","JOBNUM=:JOB")

	// Delete all saved system variables
	do Db.fastDelete("SAVESYS","JOBNUM=:JOB")

	//do CLOSE^IPCMGR(%ProcessID)
	
	set EXIT=1

	kill ER,ET,RM

	quit 

	
CHKSTAT(RecordSCAU scau)	// Check User STATUS
	
	type Public Number ER
	type Public String RM

	type Number STATUS
	
	// Get User Status
	set STATUS=$$STATUS^SCAUCDI(scau.%ucls,scau.lsgn,scau.mrstat,scau.pwdfail)

	// User ID revoked
	if STATUS=3 set ER=1,RM=$$^MSG(4249)

	quit 
 #OPTION ResultClass ON
public String vSIG()	quit "60723^27201^SSethy^17858"	// Signature - LTD^TIME^USER^SIZE
