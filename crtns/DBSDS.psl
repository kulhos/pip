DBSDS

	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.  The M routine from the     *
	// * crtns directory should be used for this purpose.                *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other during an upgrade,    *
	// * an mrtns version of this routine should not exist.              *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
		 
	/*
	Main Screen Definition Driver

	---- Revision History -------------------------------------------------
	09/28/07 - Pete Chenard - CR29499
		   Modified COPYSID to use bypassSave to prevent the updating 
		   of last modification date and user id.
		   
	11/02/06 - RussellDS - CR22719
		   Modified order of setting key value and setMode(1) based
		   on changes to PSL.
		   
		   Added #ACCEPT for parameter mismatch on calls to DRV^USID.
		   
	05/01/06 - RussellDS - CR20967
		   Converted to PSL.

	-----------------------------------------------------------------------
	*/
	
	quit				// No entry from top
	
	
public CREATE

	type String SID, VFMQ

	set SID = $$FIND^DBSGETID("DBTBL2", 1) quit:SID.isNull()
	
	if $$YN^DBSMBAR("", "Create screen linkage procedure") do PROCDUR(0, SID) quit
	
	type RecordDBTBL2 DBTBL2 = Class.new("RecordDBTBL2", "LIBS='SYSDEV',SID=:SID")
	
	set DBTBL2.cscmp = 1
	set DBTBL2.resflg = 0
	set DBTBL2.curdsp = 0
	set DBTBL2.repeat = 0
	set DBTBL2.repreq = 0
	set DBTBL2.scrclr = 1
	set DBTBL2.scrmod = 0

	// Accept for parameter mismatch warning
	#ACCEPT Date=07/05/06; PGM=RussellDS; CR=20967; GROUP=MISMATCH
	do DRV^USID(0, "DBTBL2", .DBTBL2) quit:(VFMQ = "Q")
	
	set DBTBL2.desc2 = DBTBL2.desc
	
	do DBTBL2.save()

	do ^FORMDQ2(SID)
	
	quit


public MODIFY

	/*
	Modify screen definition
	*/

	type String SID, VFMQ
	 
	set SID = $$FIND^DBSGETID("DBTBL2", 0) quit:SID.isNull()
	
	type RecordDBTBL2 DBTBL2 = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:SID")
	
	// Linked screen
	if 'DBTBL2.lnk1.isNull() do {
	
		do MODLINK(SID)
	}
	else  do ^FORMDQ2(SID)
	
	quit
	
	
public LIST

	/*
	List screen definition
	*/
	
	type Public Number ER = 0
	type Public String RM

	type Number CNT, TEMP, VRWOPT()
	type String IO, PGM, PGMLNK, RID
	
	quit:'$$LIST^DBSGETID("DBTBL2", "List", .IO)

	set RID="DBSSCRLSTLNK"
	do ^URID quit:PGM.get().isNull()
	set PGMLNK = PGM

	set RID = "DBSSCRLST"
	do ^URID quit:PGM.get().isNull()

	do OPEN^SCAIO quit:ER

	type ResultSet tmpdqrs=Db.select("ELEMENT", "TMPDQ", "PID=:%ProcessID")

	set CNT = 0
        while tmpdqrs.next() do { quit:ER
        	
		type String SID, vudwhere

		// If interactive, prompt to continue
		if CNT, (IO = $P) do { quit:ER
			
			type String MSG

			set MSG = ""
			if ($$^DBSMBAR(161) '= 1) set ER = 1 ,RM = ""
		}

		set SID = tmpdqrs.getCol("ELEMENT")
		set VRWOPT("NOOPEN") = 1
		set VRWOPT("NOCLOSE") = 1

		type RecordDBTBL2 dbtbl2=Db.getRecord("DBTBL2", "LIBS=""SYSDEV"",SID=:SID")

		if dbtbl2.lnk1="" do {		// Not linked screen
			
			set vudwhere = "LIBS='SYSDEV' AND SID=:SID AND SEQ>0"
			do @("V0^"_PGM)
		}

		else  do {			// Linked screen
			
			set vudwhere = "LIBS='SYSDEV' AND SID=:SID"
			do @("V0^"_PGMLNK)
		}

		set CNT=CNT+1
		}

	do CLOSE^SCAIO
	
	do Db.delete("TMPDQ","PID=:%ProcessID")

	quit


public PRINT	

	/*
	Print screen
	*/
	
	type Boolean printDoc
	type Number CNT
	type String IO
	
	set CNT = $$LIST^DBSGETID("DBTBL2", "Print", .IO, .printDoc) quit:(CNT '> 0)
	
	// IO opened by DBSGETID
	use IO
	
	type ResultSet rs = Db.select("ELEMENT", "TMPDQ", "PID=:%ProcessID", "ELEMENT ASC")
	
	while rs.next() do {
		
		type String SID 
		
		set SID = rs.getCol("ELEMENT")
		
		type RecordDBTBL2 dbtbl2 = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:SID")
		
		if dbtbl2.lnk1.isNull() do {
			
			do PRINTSID(SID, printDoc)
		}
		else  do {
			
			do PRINTSID(dbtbl2.lnk1, 0)	// Skip documentaton for linked screens
			if 'dbtbl2.lnk2.isNull() do PRINTSID(dbtbl2.lnk2, 0)
			if 'dbtbl2.lnk3.isNull() do PRINTSID(dbtbl2.lnk3, 0)
			if 'dbtbl2.lnk4.isNull() do PRINTSID(dbtbl2.lnk4, 0)
			if 'dbtbl2.lnk5.isNull() do PRINTSID(dbtbl2.lnk5, 0)
			if 'dbtbl2.lnk6.isNull() do PRINTSID(dbtbl2.lnk6, 0)
			if 'dbtbl2.lnk7.isNull() do PRINTSID(dbtbl2.lnk7, 0)
			if 'dbtbl2.lnk8.isNull() do PRINTSID(dbtbl2.lnk8, 0)
			if 'dbtbl2.lnk9.isNull() do PRINTSID(dbtbl2.lnk9, 0)
			if 'dbtbl2.lnk10.isNull() do PRINTSID(dbtbl2.lnk10, 0)
			if 'dbtbl2.lnk11.isNull() do PRINTSID(dbtbl2.lnk11, 0)
			if 'dbtbl2.lnk12.isNull() do PRINTSID(dbtbl2.lnk12, 0)
			if 'dbtbl2.lnk13.isNull() do PRINTSID(dbtbl2.lnk13, 0)
			if 'dbtbl2.lnk14.isNull() do PRINTSID(dbtbl2.lnk14, 0)
			if 'dbtbl2.lnk15.isNull() do PRINTSID(dbtbl2.lnk15, 0)
			if 'dbtbl2.lnk16.isNull() do PRINTSID(dbtbl2.lnk16, 0)
			if 'dbtbl2.lnk17.isNull() do PRINTSID(dbtbl2.lnk17, 0)
			if 'dbtbl2.lnk18.isNull() do PRINTSID(dbtbl2.lnk18, 0)
			if 'dbtbl2.lnk19.isNull() do PRINTSID(dbtbl2.lnk19, 0)
			if 'dbtbl2.lnk20.isNull() do PRINTSID(dbtbl2.lnk20, 0)
			if 'dbtbl2.lnk21.isNull() do PRINTSID(dbtbl2.lnk21, 0)
			if 'dbtbl2.lnk22.isNull() do PRINTSID(dbtbl2.lnk22, 0)
			if 'dbtbl2.lnk23.isNull() do PRINTSID(dbtbl2.lnk23, 0)
			if 'dbtbl2.lnk24.isNull() do PRINTSID(dbtbl2.lnk24, 0)
			if 'dbtbl2.lnk25.isNull() do PRINTSID(dbtbl2.lnk25, 0)
			if 'dbtbl2.lnk26.isNull() do PRINTSID(dbtbl2.lnk26, 0)
			if 'dbtbl2.lnk27.isNull() do PRINTSID(dbtbl2.lnk27, 0)
			if 'dbtbl2.lnk28.isNull() do PRINTSID(dbtbl2.lnk28, 0)
		}
	}
	
	do CLOSE^SCAIO
	
	do Db.delete("TMPDQ", "PID=:%ProcessID")
	
	quit
	
	
PRINTSID(String SID,
	 Boolean printDoc)
	 
	/*
	Print this screen.
	*/

	type Boolean %NOCLOSE = 1

	// Accept for parameter mismatch warning
	#ACCEPT Date=07/05/06; PGM=RussellDS; CR=20967; GROUP=MISMATCH	
	do DRV^USID(5, SID)
	
	write !

	if printDoc do {
		
		type Number XCOPY = 1
		
		type String DLIB = "SYSDEV"
		
		do ENTRY^DBSDOC1
	}
	
	quit
	
	
public COPY

	/*
	Copy screen definition
	*/
	
	type Boolean isDone = 0
	
	for  do { quit:isDone
	
		type Number OLNTB
		type String %NOPRMT, %READ, SID, TOSID, VFMQ
	
		set SID = $$FIND^DBSGETID("DBTBL2", 0)
		if SID.isNull() set isDone = 1 quit
	
		type RecordDBTBL2 DBTBL2 = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:SID")
	
		set %NOPRMT = "Q"
		// Accept for parameter mismatch warning
		#ACCEPT Date=07/05/06; PGM=RussellDS; CR=20967; GROUP=MISMATCH
		do DRV^USID(2, "DBTBL2", .DBTBL2)
	
		set %READ = "TOSID/TBL=[DBTBL2]:NOVAL/XPP=D COPYPP^DBSDS"
	        set %READ = %READ_"/TYP=U/DES=To Screen Definition Name"

		set %NOPRMT = "F"
		set OLNTB = 22020		// Display below DBTBL2 screen
		do ^UTLREAD quit:(VFMQ '= "F")
		
		do COPYSID(SID, TOSID, 1)
	}
	
	quit
	
	
private COPYSID(String FROMSID,		// Screen ID to copy from
		String TOSID,		// Screen ID to copy to
		Boolean nullPGM)	// Set DBTBL2.PGM to null

	/*
	Copy screen FROMSID to screen TOSID.
	
	Also called by FORMDQ2.
	*/
	
	type RecordDBTBL2 dbtbl2 = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:FROMSID")
	type RecordDBTBL2 dbtbl2c = dbtbl2.copy()
		
	set dbtbl2c.sid = TOSID
	if nullPGM set dbtbl2c.vpgm = ""
	
	do dbtbl2c.setMode(0)
	do dbtbl2c.bypassSave()	// Avoid problems with existing wrong values, e.g. DBTBL2.SYS
	
		
	type DbSet ds = Db.selectDbSet("DBTBL2D", "LIBS='SYSDEV' AND SID=:FROMSID")
		
	while ds.next() do {
		
		type RecordDBTBL2D dbtbl2d = ds.getRecord("DBTBL2D")
		type RecordDBTBL2D dbtbl2dc = dbtbl2d.copy()
			
		set dbtbl2dc.sid = TOSID
			
		do dbtbl2dc.setMode(1)

		do dbtbl2dc.bypassSave()
	}
		
	type DbSet ds2 = Db.selectDbSet("DBTBL2PP", "LIBS='SYSDEV' AND SID=:FROMSID")
		
	while ds2.next() do {
			
		type RecordDBTBL2PP tbl2pp = ds2.getRecord("DBTBL2PP")
		type RecordDBTBL2PP tbl2ppc = tbl2pp.copy()
		
		set tbl2ppc.sid = TOSID
			
		do tbl2ppc.setMode(1)
			
		do tbl2ppc.bypassSave()
	}
	
	quit		
	
	
private COPYPP      // Copy to prompt post-processor

	type public Boolean ER
	type public String RM, X
	
	quit:X.isNull()

	if '$$VALIDKEY^DBSGETID(X) do {
	
		set ER = 1
		// // Alphanumeric format only
		set RM = $$^MSG(248)
	}
	
	else  if Db.isDefined("DBTBL2", "LIBS='SYSDEV',SID=:X") do {
		
		set ER = 1
		// Already created
		set RM = $$^MSG(252)
	}
	
	quit
	

public DELETE

	/*
	Delete Screen Definition
	*/
	
	type Boolean isDone = 0
	
	for  do { quit:isDone
	
		type public Boolean ER, stop
		type public String MSG, RM
	
		type Number I
		type String SID, p1

		set SID = $$FIND^DBSGETID("DBTBL2", 0)
		if SID.isNull() set isDone = 1 quit
	
		set p1 = SID
		// Delete <<p1>> ... No Yes
		if ($$^DBSMBAR(164) <> 2) quit
		
		do DELSID(SID)
		
		// Done
		write $$MSG^%TRMVT($$^MSG(855), "", 1)
	}
	
	quit
	
	
private DELSID(String SID)	// Screen ID

	/*
	Delete screen SID
	*/
	
	do Db.delete("DBTBL2PP", "LIBS='SYSDEV' AND SID=:SID")
	do Db.delete("DBTBL2D", "LIBS='SYSDEV' AND SID=:SID")
	do Db.delete("DBTBL2", "LIBS='SYSDEV' AND SID=:SID")
	
	quit


private GTPGM

	/*
	Get screen program name

	Returns screen name in PGM
	*/
	
	type public String PGM
	
	type String DBTBL(,), libno, scrnno
	
	// Avoid warning on lock
	set DBTBL("SYSDEV", 0) = ""
	
	lock +DBTBL("SYSDEV", 0)
	
	type RecordDBTBL0 lib = Db.getRecord("DBTBL0", "%LIBT='SYSDEV',TYP='L'", 1)
	type RecordDBTBL0 screen = Db.getRecord("DBTBL0", "%LIBT='SYSDEV',TYP='S'", 1)
	
	set screen.desc = screen.desc + 1
	do screen.save(0)
	
	lock -DBTBL("SYSDEV", 0)
	
	set libno = {String}(lib.desc)
	set libno = libno.justify(2, 1, "0")
	
	if (screen.desc < 1000) do {
		
		set scrnno = {String}(screen.desc)
		set scrnno = scrnno.justify(3, 1, "0")
	}
	else  set scrnno = {String}(screen.desc)
	
	set PGM = "V"_libno_"*"_scrnno
	
	quit


private PROCDUR(Number %ProcessMode,
		String SID)

	/*
	Create a screen link procedure
	*/
	
	type String VFMQ
	
	type RecordDBTBL2 DBTBL2 = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:SID", 1)
	
	if (%ProcessMode = 0) do {
		
		type String PGM
		
		do GTPGM
		
		set DBTBL2.vpgm = PGM
		set DBTBL2.cscmp = 1		// Default to PSL compiler
	}
	
	// Accept for parameter mismatch warning
	#ACCEPT Date=07/05/06; PGM=RussellDS; CR=20967; GROUP=MISMATCH
	do DRV^USID(%ProcessMode, "DBSDSMP", .DBTBL2) quit:(VFMQ = "Q")
	
	do DBTBL2.save()
	
	// Compile run-time routine?
	if ($$^DBSMBAR(167) = 1) do {

		do ^DBSDSMP
		
		write "Done"
	}
	
	quit
	
	

MODLINK(String SID)

	/*
	Modify linked screen definition
	*/
	
	type Boolean %A2, %A7, %A8, %A9, %A10
	type Number %FRAME, OLNTB
	type String %READ, %TAB(), MSG, VFMQ
	
	set (%A2, %A8, %A9, %A10) = 0
	set,%A7 = 1

	// Modify Linked Screen Definitions~
	set MSG = $$^MSG(3345)

	set %READ = "@MSG/CEN/REV,,%A2/NOREQ"	// Screen Control Page
	
	do bldRead(.%READ, "%A8", 61)		// Screen Pre-Processor
	do bldRead(.%READ, "%A9", 101)		// User-Defined VLOD Section
	do bldRead(.%READ, "%A10", 121)		// Screen Display Pre-Processor
	
	set %READ = %READ_",%A7/NOREQ,"		// Build Run-Time Program
	
	set %TAB("%A2") = ".%A8"
	set %TAB("%A7") = ".%A16"
        set %TAB("%A8") = ".%A9"
        set %TAB("%A9") = ".%A10"
        set %TAB("%A10") = ".%A28"

	set OLNTB = 40
	set %FRAME = 2

	do ^UTLREAD quit:(VFMQ '= "F")

	if %A8 do SCRPRE(SID)
	if %A9 do SCRVLOD(SID)
	if %A10 do MODDSP(SID)
	
	if %A7, '%A2 do {
		
		write $$BTM^%TRMVT
		do ^DBS2PSL(SID, 1)		// Compile screen
	}
	
	if %A2 do PROCDUR(1, SID)		// Control page & compile
	
	quit
	
	
bldRead(String %READ,	// %READ string			/MECH=REFNAM:RW
        String %ASTR,	// %A string
        Number PSEQ)	// DBTBL2PP PSEQ level

	/*
	Add %ASTR to %READ with appropriate /REQ or /NOREQ based on
	whether data is already defined, or not
	*/
	
	type String REQ
	
	set %READ = %READ_","_%ASTR_"/"
	
	if Db.isDefined("DBTBL2PP", "LIBS='SYSDEV' AND SID=:SID AND SEQ=0 AND PSEQ=:PSEQ") set REQ = "REQ"
	else  set REQ = "NOREQ"
	
	set %READ = %READ_REQ
	
	quit


private MODPRE(String SID)	// Screen ID

	/*
	Data Entry Pre-Processor - called by FORMDQ2C
	*/
	
	// Data Entry Pre-Processor
	do EDT(SID, 1, $$^MSG(3339))

	quit


private MODPP(String SID)	// Screen ID

	/*
	Data Entry Post Processor - called by FORMDQ2C
	*/
	
	// Data entry post-processor
	do EDT(SID, 21, $$^MSG(3338))
	
	quit


private MODREQ(String SID)	// Screen ID

	/*
	Required data item set definitions - called by FORMDQ2C
	*/
	
	// Required Data Item Set Definition
	do EDT(SID, 41, $$^MSG(6952))
	
	quit


private MODDOC(String SID)	// Screen ID

	/*
	Screen Documentation - called by FORMDQ2C
	*/
	
	// Screen Documentation
	do EDT(SID, 81, $$^MSG(3342))
	
	quit


private SCRPRE(String SID)	// Screen ID
	
	/*
	Screen Pre-Processor - called by FORMDQ2C
	*/
	
	// Screen Pre-Processor
	do EDT(SID, 61, $$^MSG(3343))
	
	quit


private SCRVLOD(String SID)	// Screen ID
	
	/*
	Screen VLOD section - called by FORMDQ2C
	*/
	
	// Screen VLOD section
	do EDT(SID, 101, $$^MSG(3344))
	
	quit


MODDSP(String SID)	// Screen ID

	/*
	Screen Display Pre-Processor - called by FORMDQ2C
	*/
	
	// Screen Display Pre-Processor
	do EDT(SID, 121, $$^MSG(3341))
	
	quit


EDT(String SID,		// Screen ID
    Number START,	// Starting DBTBL2PP.PSEQ value
    String MESSAGE)	// Header display
    
	/*
	Edit screen section
	*/
	
	type Number END, PSEQ, SEQ, WIDTH
	type String DATA()
	
	set END = START + 20
	
	type DbSet ds = Db.selectDbSet("DBTBL2PP", "LIBS='SYSDEV' AND SID=:SID AND SEQ=0 AND PSEQ>=:START AND PSEQ<:END", "PSEQ ASC")
	
	set WIDTH = 80
	set SEQ = 0
	while ds.next() do {
		
		type RecordDBTBL2PP rec = ds.getRecord("DBTBL2PP")
		
		set SEQ = SEQ + 1
		set DATA(SEQ) = rec.code
		if DATA(SEQ).length() > 78 set WIDTH = 132
	}
	
	do ^DBSWRITE("DATA", 3, 22, 99999, WIDTH, SID_" - "_MESSAGE)
		
	quit:'DATA.data()
	
	// Delete existing data
	do Db.delete("DBTBL2PP", "LIBS='SYSDEV' AND SID=:SID AND SEQ=0 AND PSEQ>=:START AND PSEQ<:END")
	
	// Add new data
	set PSEQ = START
	set SEQ = ""
	for  set SEQ = DATA(SEQ).order() quit:SEQ.isNull()  do {
		
		type RecordDBTBL2PP rec = Class.new("RecordDBTBL2PP", "LIBS='SYSDEV',SID=:SID,SEQ=0,PSEQ=:PSEQ")
		
		set rec.code = DATA(SEQ)
		set PSEQ = PSEQ + .001
		
		do rec.save()
	}

	/* FSCW, 2008-10-24, CR35741:
	   The code below needs attention. A Record is instantiated and columns
	   are modified, but the changes are not saved. Because a quit follows
	   nothing happens. In P01 the changes were saved, but it is uncertain,
	   given the context where this subroutine executres, if the save was OK
	   or not. If it turns out it was, it should be added back. If not, the
	   following three statements can be removed as well.
	   */
	// Update Date and username field
	type RecordDBTBL2 dbtbl2 = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:SID")
	
	set dbtbl2.date = %CurrentDate
	set dbtbl2.uid = $$USERNAM^%ZFUNC
	
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61293^41913^Frans S.C. Witte^14644"	// Signature - LTD^TIME^USER^SIZE
