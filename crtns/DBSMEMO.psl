DBSMEMO	//	

	// **********************************************************************
	// * IMPORTANT NOTE:                                                    *
	// * According to the rules that apply to PSL compiler upgrades,        *
	// * the generated M routine associated with this procedure must be     *
	// * checked into StarTeam and released with the procedure whenever     *
	// * changes are made to this procedure.                                *
	// *                                                                    *
	// * The mrtns version will be used during upgrades and will then be    *
	// * removed from the mrtns directory.  Therefore, other than in a      *
	// * development environment, or during an upgrade, an mrtns version of *
	// * this routine should not exist.                                     *
	// *                                                                    *
	// * Keep these comments as single line to ensure they exist in the     *
	// * generated M code.                                                  *
	// **********************************************************************
		 
	/*
	Library functions to manage memo field
	
	LIBRARY:
		. BUF       - Insert memo field into output buffer
		. EDIT      - Edit notes with VMS editor
		. PARSE     - Return internal expression of a memo field
		. READ      - Return memo field data 

	---- Revision History -------------------------------------------------
	02/05/2009 - RussellDS - CRs 37665/35741
		* Fix PARSE section for handling of record type 1 tables.
		* Removed old revision history.
		
	06/06/08 - Pete Chenard - CR34196
		   Modified PARSE section to accept nod as a parameter.  nod
		   is used to build the reference to the data inthe global.
	-----------------------------------------------------------------------
	*/
	
	quit


public BUF(String fid,		// Table name
	   String memo,		// Memo data
	   String membuf(),	// Memo split		/MECH=REFARR:W
	   Number bsize)	// Buffer size		/NOREQ/DEF=450
	   
	   
	/*
	Break memo data into chunks and return in membuf() 

	EXAMPLE:

		do BUF^DBSMEMO("NOTESACN","abcdefg .... xyz",.fsn(),,.fNOTEACN())

			fNOTEACN(1)="abcdefg ..."
		                (2)=" ..."
		                (n)="... xyz"
	*/
	
	type Number seq
	
	if (bsize.get() < 1) set bsize = 450
	
	for seq = 1:1 quit:memo.isNull()  do {
		
		set membuf(seq) = memo.extract(1, bsize)
		set memo = memo.extract(bsize + 1, memo.length())
	}
	
	quit


private READ(String ref)	// Global reference

	/*	
	Read memo data from M database.
	
	This is only used by DQ, PSL, and SQL utilities and then only for M
	databases.  It should never be called directly by application code.
	
	Memo internal reference (^gbl(key1,key2,...)

	FIX EUROEFD.
	
	EXAMPLES:

		set data = $$READ^DBSMEMO("^NOTES(""ACN"",123,2)")
	*/

	type Number seq
	type String memo
	
	set memo = ""
	set seq = 0
	
	// Add seq as bottom level key
	set ref = ref.extract(1, ref.length() - 1)_",seq)"

	#ACCEPT Date=10/24/05; Pgm=RussellDS; CR=17834
	for  set seq = $O(@ref) quit:seq.isNull()  set memo = memo_@ref

	quit memo
	

private PARSE(String fid,	// Table Name
	      Number nod)	// Node

	/*
	Return internal reference format for reading a memo field from an M
	database.  Sets up the internal reference used by READ.
	
	This is only used by DQ, PSL, and SQL utilities and then only for M
	databases.  It should never be called directly by application code.
	
	EXAMPLES:

	      $$PARSE^DBSMEMO("NOTES") returns
	
	      	$$READ^DBSMEMO("^NOTES("_$c(34)_[NOTES]FILE_$c(34)_","_[NOTES]CID_","_[NOTES]NUM_")")
	*/
	
	type Number I
	type String acckeys, global, ref
	
	type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:fid")
	
	set global = "^"_dbtbl1.global
	set acckeys = dbtbl1.acckeys
	
	set ref = ""
	for I = 1:1:acckeys.length(",") do {
		
		type String key
		
		set key = acckeys.piece(",", I)
		
		if key.extract(1) = """" set key = key.addQuotes()
		else  if 'key.isNumber() do {
		
			type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:fid,DI=:key")
			
			set key = "["_fid_"]"_key
			
			if ("N$LDC" '[ dbtbl1d.typ) set key = "$c(34)_"_key_"_$c(34)"
		}
		
		set ref = ref_key_"_"",""_"
	}
		
	set ref = ref.extract(1, ref.length() - 3)
	if (dbtbl1.rectyp <> 1), 'nod.get().isNull() set ref = ref_","_nod
	
	set ref = ref_")"""
	set ref = "$$READ^DBSMEMO("""_global_"(""_"_ref_")"
	
	quit ref


public EDIT(String memoin,	// Input memo field
	    String memoout)	// Output/modified memo field	/MECH=REF:W

	/*
	Edit memo field using system editor
	
	RETURNS:
		. $$	0 - did not file, memoout should not be used
			1 - filed, memoout has new value
			
	EXAMPLE:
	
		if $$EDIT^DBSMEMO(min, .mout) ...
	*/
	
	type Boolean RETURN
	type Number i, j, seq
	type String line, VFMQ, vmemo()
	
	set RETURN = 0
	
	// Break up memo by CR/LF, and make sure no lines longer than 80
	set seq = 1
	for i = 1:1:memoin.length($C(13, 10)) do {
		
		set line = memoin.piece($C(13, 10), i)
		
		for j = 1:1 do { quit:line.isNull()
			
			set vmemo(seq) = line.extract(1, 80)
			set line = line.extract(81, line.length())
			set seq = seq + 1
		}
	}

	do ^DBSWRITE("vmemo")			// Access editor
	
	if (VFMQ '= "Q") do {
		
		// Add CR/LF after each line
		set (seq, memoout) = ""
		for  set seq = vmemo(seq).order() quit:seq.isNull()  set memoout = memoout_vmemo(seq)_$C(13, 10)

		set RETURN = 1
	}

	quit RETURN
 #OPTION ResultClass ON
public String vSIG()	quit "61397^49911^Dan Russell^5233"	// Signature - LTD^TIME^USER^SIZE
