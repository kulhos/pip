
	/*
	Original: Jaywant Khairnar - 2009-06-12
	
	-------- Comments -----------------------------------------------------
	DESC: TBX autobuild
	pass the arguments array for pack installation and receives the status
		

	-------- Revision History ----------------------------------------------
	2009-06-12, Jaywant Khairnar, CR 40964
	* provide support for TBX autobuild ,FP installation
	*/
	#OPTION ResultClass ON
	// Display any error and then quit, which will exit back to shel
	catch err {
		
		type Integer retStat
		
		type String errmsg = err.type_ ", "_ err.thrownAt_ ", "_ err.description
		
		if 'err.context.isNull() set errmsg = errmsg_ err.context
		
		set retStat = $$errormsg(errmsg)
		
		#ACCEPT Date=02/22/2009; Pgm=RussellDS; CR=35741; Group=BYPASS
       		#BYPASS
	        set $ZTRAP="" ZMESSAGE 2	; Indicates uncontrolled error
        	#ENDBYPASS
	}
		
	type Number status
	type String cmdline
	
	#ACCEPT DATE=2009-06-15; Pgm=JaywantK; CR=40964; Group=BYPASS
        #BYPASS
        ; Parse the command line
	SET cmdline=$ZCMDLINE
	#ENDBYPASS
	
	set status = $$run(cmdline)
	
	// pass the status of pack installation to command line
	#ACCEPT DATE=2009-06-15; Pgm=JaywantK; CR=40964; Group=BYPASS
        #BYPASS
        SET $ZTRAP="" ZMESSAGE:status status
        #ENDBYPASS

	quit
	
	//---------------------------------------------------------------------
public Number run(String cmdline)  // wrapper around the call to TBXABIN.pslmain(). 
	//---------------------------------------------------------------------
	/* 
		 It decomposes the single command line string into a PSL Tree as expected 
		 by TBXABIN.pslmain(), passes that tree and returns the value of 
		 TBXABIN.pslmain().
	
	*/
	type String args()
	
	// captures the arguments in args array from command line 
	
        do cmdline( cmdline, args())
	
	type Number status = $$pslmain( args())
	
	quit status
	
	//---------------------------------------------------------------------
public Number pslmain(String args())	
	//---------------------------------------------------------------------
	/*
	  translate the entries in the cmdline() tree into parameters that will 
	  be passed to TBXINST.install().
	
	  ARGUMENTS:
		* dir=installroot - installation root directory. 
		The auto build to be installed will reside in an immediate subdirectory 
		of this installation root. Defualt value is /profile_install/ab/ 
		
		* local=integer  - value of the "overlay local customization" parameter. 
		0 (never overlay)
		1 (always overlay) 
		2 (always ask for overlay confirmation). 
		
		Note that for the automatic builds the value 2 shall never be supplied.
		
		* autobuild   - name of the directory that contains the Profile build
		It is a required parameter. 
		The directory structure named by autobuild shall conform to the structure 
		used for Profile Fix Packs (a CR_contents.txt file in the autobuild directory itself).
	 RETURN PARAMETERS:
		* status
			0 - sucess
			1 - failure
	*/
	type Number stat = 0 	// 0 = success, anything else = failure
	
	do {
		
		type String instdir,autobuild()
		type Number overlayval
		type String errmsg = ""
	
		catch err {
		
			set errmsg = err.type_ ", "_ err.thrownAt_ ", "_ err.description
		
			if 'err.context.isNull() set errmsg = errmsg_ err.context
		
			set stat = $$errormsg(errmsg)
		}
		// pass the status of pack installation to command line
		
		if 'args(1).exists() set stat = $$errormsg("No build is available for install") quit
		if 'args("local").exists() set stat = $$errormsg("Missing --local option") quit
		if args("local") = 2 set stat = $$errormsg("Incorrect overlay value for fix pack element --local option") quit
		// pass the status of pack installation to command line
		// simulate a Fix Pack install, so use PRIO=0
		set autobuild(0) = args(1)
		set instdir = args("dir").get("/profile_install/ab/")
		set overlayval = args("local")
		
		#ACCEPT GROUP=ACCESS;CR=40964;DATE=2009-06-15;PGM=Jaywant Khairnar	
		set stat=$$install^TBXINST(autobuild(), false, instdir, 1, overlayval)	
		
	}
	
	quit stat

	// ---------------------------------------------------------------------
public void cmdline(String cmdStr,	// Command string
		    String args())	// Decomposed command line arguments/options

	/* ---------------------------------------------------------------------
	// Command string
	String args())	// Decomposed command line arguments/options

	Decompose a string of space and/or tab delimited command line options,
	and return in args() array.
	
	A command string may use spaces and/or tabs as delimiters between
	options and arguments.  If either spaces or tabs are part of the input,
	they must be quoted.  The quote character is the double quote (").
	Values will have one layer of quotes removed, e.g., input of ABC, 
	"ABC", or AB"C will all be treated as the string ABC.  To input a
	quoted string, it is necessary to use the standard double-quoting
	convention.  E.g., input """ABC""" to produce "ABC".
	
	The command strings supported must follow a sub-set of the Unix
	conventions:

	  - required arguments are position dependent, and are specified
	    directly, i.e., without a leading dash
	    
	  - options and optional arguments are position independent, may
	    appear before, after, or intermixed with arguments, and are
	    specified with two leading dashes.  If there is an associated
	    value, an equals sign followes the option, then the value.
	    An option or optional argument identifier cannot be a number.
	    Examples:

		--option
		--option=abc
		
	  - the single dash is not supported and entries of that form will
	    be ignored

	The parsed command string will be returned as a single level array
	of type void args(String).

	Position dependent arguments will be return with numeric subscripts, 
	starting at 1, indicating their relative position (i.e., without gaps,
	even if options or optional arguments appear between them on input).
	
	Options and option arguments will be returned in the array with the
	option identifier as the subscript and any value as the array value.

	For example, the command string shown will return the array shown:
	
		funcName file1 file2 --output --opt=A file3

		args(1)= complete path of build to be installed
		args("dir")= installation directory
		args("local")= overlay value for fix pack element
	
	All values are Strings.  It is up to the receiving method to cast
	them into other appropriate data types.
	
	Where input is from the shell (versus input to the RPC methods),
	consideration of the shell's pre-processing must be taken into account
	if input will include spaces, tabs, or quotes.  In those cases it may
	be necessary to use the shell's escape character.
	
	For instance, to produce the command string input shown, it may be
	necessary to enter the command line as shown:
	
	  To produce:	one "tw o"
	  Enter:	one \"tw o\"
	  As arguments: args(1) = "one"
	  		args(2) = "tw o"
	  
	  To produce:	one tw"o
	  Enter:	one two\"o
	  As arguments: args(1) = "one"
	  		args(2) = "two"	- since a layer of quotes is stripped
	  		
	  To produce argument:	tw"o
	  Enter:		two\"\"\"o
	  As arguments: 	args(1) = "tw""o"
	  
	  To produce option value:	This is "just" a test
	  Enter:			-text=\"This is \"\"\"just\"\"\" a test\"
	  As argumens:			args(1)="This is ""just"" a test"
	  
	It is recommended that input involving embedded spaces, tabs, or quotes
	be tested to ensure it is properly formed when received from the shell
	command line.
	*/
	
	type Number argCnt = 0
	type String elem, tok
	
	#ACCEPT GROUP=ACCESS;CR=40964;DATE=2009-06-15;PGM=Jaywant Khairnar
	set cmdStr = $$TOKEN^%ZS(cmdStr, .tok)
	
	// Replace TAB by SPACE and reduce multiple space to single space
	set cmdStr = cmdStr.translate(9.char(), " ").trim().replace("  ", " ")

	while 'cmdStr.isNull() do {
	
		set elem = cmdStr.piece(" ", 1)
		set cmdStr = cmdStr.piece(" ", 2, cmdStr.length())
		
		if 'elem.beginsWith("-") do {
		
			set argCnt = argCnt + 1
			
			#ACCEPT GROUP=ACCESS;CR=40964;DATE=2009-06-15;PGM=Jaywant Khairnar
			set args(argCnt) = $$UNTOK^%ZS(elem, tok).stripQuotes()
		}
		else  if elem.beginsWith("--") do {
			
			type String opt = elem.piece("=", 1)
			type String value = elem.piece("=", 2, elem.length())
			
			#ACCEPT GROUP=ACCESS;CR=40964;DATE=2009-06-15;PGM=Jaywant Khairnar
			set args(opt.extract(3, opt.length())) = $$UNTOK^%ZS(value, tok).stripQuotes()
		}
	}

	quit
	
	//
private Number errormsg(String errMsg)	// Message associated with failure
		  
	/*
	Write error message to stderr and return error indicator 
	*/
	
	// Direct to stderr once we are able to     
	write errMsg, !
	
	quit 1		// Error indicator
	
 #OPTION ResultClass ON
public String vSIG()	quit "61544^27162^Jaywant Khairnar^8419"	// Signature - LTD^TIME^USER^SIZE
