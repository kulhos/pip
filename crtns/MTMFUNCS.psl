MTMFUNCS	//Library;PROFILE Message Transport Manager Functions
	/*
	ORIG:  RUSSELL - 28 JUL 1992

	This routine contains the various MTM functions that are used at a
	PROFILE level to control the Message Transport Manager functionality.

	LIBRARY:
		. START   - Start Message Transport Manager
		. STOP    - Stop Message Transport Manager
		. SVSTATS - Display Message TM Server Stats
		. CLSTATS - Display Message TM Client Stats
		. PENDING - Display Message TM Pending Message Info
		. DELSRV  - Delete Message TM Server
		. JRNLON  - Message Transport Manager Journaling On
		. JRNLOFF - Message Transport Manager Journaling Off
		. CLLOG   - Close Log File
		. VERSION - Get MTM Version Information
		. PARAM   - Get MTM Startup Parameter Information
		. SVCLEAN - Cleanup MTM Inactive or Zombie Processes
		. GETSTAT - Get MTM Statistics
		. STRTSTAT - Start MTM Statistics Gathering
		. STOPSTAT - Stop MTM Statistics Gathering

	---- Revision History ------------------------------------------------
	02/20/07 - Pete Chenard - CR 25317
		   Added new functions for collection MTM statistics/
	  
	02/04/06 - RussellDS - CR19390
		   Added coding to START and STOP sections to include the
		   new cursor pool functionality for non-M databases.

	03/03/05 - KELLYP - CR 13664
		   Modified VERSION section to prevent an undefined error
		   from occurring.  Code was referencing %Currentdate instead
		   of %CurrentDate.  Also modified VERSION section to conform 
		   to curent PSL standards & removed pre-2003 revision history.
	*/

	quit
 

START   //;Start Message Transport Manager
 
	/*
	   This function (PROFILE function MTMSTART) prompts for input of a
	   valid MTM ID, then start the MTM in detached mode.  This is done
	   by calling the startup file indicated by [CTBLMTM]DESC.  The
	   process name for the started process is MTM_mtmid.
	*/
	
	type public String ER, RM
	
	type String %READ, %TAB(), MTMID, STARTUP, X
 
	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
	
	#IF '(($$TRNLNM^%ZFUNC("SCAU_DB")="")!($$TRNLNM^%ZFUNC("SCAU_DB")="GTM"))
	// Add prompt for number of cursor pool processes
	
	type Number CPCNT
	type String QNAME
	
	set QNAME = $$TRNLNM^%ZFUNC("SCA_CS_ST_SCA_IBS")
	if QNAME.isNull() do { quit
		
		set ER=1
		// ~p1 - Logical not defined
		set RM = $$^MSG(7146,"SCA_CS_ST_SCA_IBS")
	}

	set CPCNT = 1				// Default
	set %TAB("CPCNT") = "/DES=Number of CP Processes/TYP=N/LEN=2"
	set %READ = "CPCNT/REQ"
	
	#ENDIF
		
	set MTMID=$$GETMTMID(0) quit:MTMID=""
 
	// Get startup file and test to be sure it is valid and readable
	type RecordCTBLMTM ctblmtm=Db.getRecord("CTBLMTM","MTMID=:MTMID")
	set STARTUP=ctblmtm.startup
	set X=$$FILE^%ZOPEN(STARTUP,"READ",2)
 
	// Unable to open start-up file ~p1
	if (+X = 0) set ER=1 set RM=$$^MSG(2802,STARTUP) quit
	close STARTUP
 
	write $$CUP^%TRMVT(1,21)
	
	#IF '(($$TRNLNM^%ZFUNC("SCAU_DB")="")!($$TRNLNM^%ZFUNC("SCAU_DB")="GTM"))
	// Create cursor pool queue
	do CREATEQ^PBSCURS quit:ER
	
	if (CPCNT > 0) do STARTEXT^PBSCURS(QNAME, CPCNT) quit:ER
	
	// If successful, don't return RM messages with names
	kill RM
	
	#ENDIF
 
	set ER=$$MTMSTART^%OSSCRPT(STARTUP,MTMID)
	set X=$$^DBSMBAR(30)
	quit
 
 
STOP    //;Stop Message Transport Manager
 
	/*
	   This function (PROFILE function MTMSTOP) prompts for input of a
	   valid MTM ID, then stops the MTM.  This is done by sending a message
	   to the MTM's control mailbox.  A reply is sent by the MTM.
	*/
	
	type public String ER, RM
	
	type Boolean CNTRLD
	type String %READ, %TAB(), MTMID
 
	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
 
	set %TAB("CNTRLD")=".CNTRLD" 
	set CNTRLD=1
	set %READ="CNTRLD"
 
	set MTMID=$$GETMTMID(1) 
	quit:MTMID=""
	
	#IF '(($$TRNLNM^%ZFUNC("SCAU_DB")="")!($$TRNLNM^%ZFUNC("SCAU_DB")="GTM"))
	// Stop all cursor pool processes.  If any issue, continue to stop MTM anyway
	
	type String QNAME
	
	set QNAME = $$TRNLNM^%ZFUNC("SCA_CS_ST_SCA_IBS")
	
	if 'QNAME.isNull() do {
	
		type ResultSet rs=Db.select("COUNT(PID)","SVCTRLCP","QNAME=:QNAME")
		
		if rs.next() do {
			
			type Number CPCNT = rs.getCol(1)
	
			do STOPEXT^PBSCURS(QNAME, CPCNT)
		}
	}

	#ENDIF
	 
	set ER=$$EXCHMSG^%OSSCRPT("STOP",'CNTRLD,MTMID,.RM,0)
	if 'ER set ER="W"
	quit
 
 
SVSTATS //;Request Message Tranport Manager Server Statistics
 
	/*
	   This function (PROFILE function MTMSVSTATS) prompts for input of a
	   valid MTM ID, then request the MTM to download current statistics.
	   An option to zero the statistics is provided.
	*/
	
	type public String ER, ET, RM
 
	type Boolean UPDTDB, ZERO
	type Date DATE
	type Number %MODS, %PAGE, %PG, %REPEAT, I, SVTYPS, TIME
	type String %READ, %TAB(), DATA(), IO, MTMID, MTMSVST(,), SID, VFMQ, VPG(), X
	
	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
 
	// Zero Stats
	set %TAB("ZERO")=".ZEROS" 
	set ZERO=0
 
	// Save stats in database
	set %TAB("UPDTDB")=".SAVESTAT"
	set UPDTDB=0
	set %TAB("IO")=$$IO^SCATAB 
	set IO=$I
	set %READ="ZERO,UPDTDB,IO"
 
	set MTMID=$$GETMTMID(1) 

	quit:MTMID=""
 
	set ER=$$EXCHMSG^%OSSCRPT("SVSTAT",+ZERO,MTMID,.RM,0) 

	quit:ER
 
	if RM'["|" set ER="W" quit	     // No servers connected
 
	// Display stats and update database
 
	kill DATA
	set DATE=%CurrentDate
	set TIME=%CurrentTime
       
	if UPDTDB lock +MTMSVST(DATE,MTMID):2 else  set ER=1 set ET="RECLOC" quit
 
	for I=1:1 set X=$P(RM,$$FS,I) quit:X=""  do {
		
		type Number ACTIVE, AVG, MIN, MAX, REQ, RESP, TRACKED
		type String SVTYP
		
		set SVTYP=$P(X,"|",1) 
		set TRACKED=$P(X,"|",2)\1000 
		set ACTIVE=$P(X,"|",3)
		set REQ=$P(X,"|",4) 
		set RESP=$P(X,"|",5) 
		set AVG=$P(X,"|",6)/1000
		set MIN=$P(X,"|",7)/1000 
		set MAX=$P(X,"|",8)/1000

		do DFORMAT(.SVTYP,.ACTIVE,.REQ,.RESP)      

		set DATA(I)=SVTYP_"|"_$$TIM^%ZM(TRACKED,"24:60")_"|"_ACTIVE_"|"
		set DATA(I)=DATA(I)_REQ_"|"_RESP_"|"_MIN_"|"_MAX_"|"_AVG

		if UPDTDB,ACTIVE=+ACTIVE do {
			
			type Number SEQ
			type String SAVE
			
			set SAVE=TIME_"|"_TRACKED_"|"_ACTIVE_"|"_REQ_"|"_RESP_"|"
			set SAVE=SAVE_AVG_"|"_MIN_"|"_MAX
 
			type ResultSet rs=Db.select("SEQ","MTMSVSTATS","DATE=:DATE AND MTMID=:MTMID AND SVTYPE=:SVTYP","SEQ DESC")
			if 'rs.isEmpty(),rs.next() set SEQ=rs.getCol(1)
			else  set SEQ=0
			set SEQ=SEQ+1
 
			type RecordMTMSVSTATS mtmsvstats=Class.new("RecordMTMSVSTATS")
			set mtmsvstats.date=DATE
			set mtmsvstats.mtmid=MTMID
			set mtmsvstats.svtype=SVTYP
			set mtmsvstats.seq=SEQ
			set mtmsvstats.time=TIME
			set mtmsvstats.stattime=TRACKED
			set mtmsvstats.actsvs=ACTIVE
			set mtmsvstats.reqmsgs=REQ
			set mtmsvstats.respmsgs=RESP
			set mtmsvstats.avgresp=AVG
			set mtmsvstats.minresp=MIN
			set mtmsvstats.maxresp=MAX
 
			do mtmsvstats.bypassSave()
 
		}
	}
 
	if UPDTDB lock -MTMSVST(DATE,MTMID)
 
	// No servers active for MTM ~p1
	if I=1 set ER=1,RM=$$^MSG(1985,MTMID) quit
 
	set SVTYPS=I-1
	set SID="MTMSVSTATS" 
 
	set %ProcessMode=2
	if IO'=$I do OPEN^SCAIO if ER quit
	set %PG=1
	set %PAGE=SVTYPS\15 
	if SVTYPS#15 set %PAGE=%PAGE+1
 
	// Stats - Page ~p1
	for I=1:1:%PAGE set VPG(I)=$$^MSG(4316,I)

	for  do { quit:VFMQ="Q"
		set %MODS=((%PG-1)*15)+1
		set %REPEAT=$S(%ProcessMode=4:SVTYPS,1:15)
		if %MODS+15>SVTYPS set %REPEAT=SVTYPS#15
		do DRV^USID(%ProcessMode,SID)

		quit:VFMQ="Q"
		set %PG=%PG+1
	}
 
	kill RM
	quit
 
 
CLSTATS //;Request Message Tranport Manager Client Statistics
 
	/*
	   This function (PROFILE function MTMCLSTATS) prompts for input of a
	   valid MTM ID, then request the MTM to download current statistics.
	*/

	type public String ER, RM
	
	type Date DATE
	type Number %MODS, %PAGE, %PG, %REPEAT, I, MAXCNCT, TIME
	type String %READ, %TAB(), CLCNCT, CLIENTS(), DATA(), IO, MTMID, SID, VFMQ, VPG(), X

	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
 
	set %TAB("IO")=$$IO^SCATAB 
	set IO=$I
	set %READ="IO"
	set MTMID=$$GETMTMID(1) 

	quit:MTMID=""
 
	set ER=$$EXCHMSG^%OSSCRPT("CLSTAT","",MTMID,.RM,0)
	quit:ER
 
	// Display stats
	kill DATA
	set DATE=%CurrentDate
	set TIME=%CurrentTime
	set CLCNCT=$P(RM,$$FS,1)
	set MAXCNCT=$P(RM,$$FS,2)
	set RM=$P(RM,$$FS,3,9999)
 
	for I=1:1 set X=$P(RM,$$FS,I) quit:X=""  do {
		
		type Number CNCTTIM, REQ, REQACT, RESP, SRVID, TIMLAST
		type String CLID
		
		set CLID=$P(X,"|",1)
		set CNCTTIM=$P(X,"|",2)\1000
		set TIMLAST=$P(X,"|",3)/1000
		set REQ=$P(X,"|",4)
		set RESP=$P(X,"|",5)
		set REQACT=$P(X,"|",6)
		set SRVID=$P(X,"|",7)
		set REQACT=$S(REQACT=1:"Q",REQACT=2:"S",1:"N")
		set SRVID=$S(SRVID<0:"",1:$J(SRVID,2))
		set DATA(I)=$E(CLID,1,25)_"|"_$$DISPTIM(CNCTTIM)_"|"
		set DATA(I)=DATA(I)_$$DISPTIM(TIMLAST)_"|"
		set DATA(I)=DATA(I)_REQ_"|"_RESP_"|"_REQACT_"|"_SRVID
	}
 
	set CLIENTS=I-1
	set SID="MTMCLSTATS" 

	set %ProcessMode=2
	if IO'=$I do OPEN^SCAIO if ER quit

	set %PG=1
	set %PAGE=CLIENTS\15
	if CLIENTS#15 set %PAGE=%PAGE+1
	if '%PAGE set %PAGE=1
 
	// Stats - Page ~p1
	for I=1:1:%PAGE set VPG(I)=$$^MSG(4316,I)
 
	for  do { quit:VFMQ="Q"
		set %MODS=((%PG-1)*15)+1
		set %REPEAT=$S(%ProcessMode=4:CLIENTS,1:15)
		if %MODS+15>CLIENTS set %REPEAT=CLIENTS#15
		do DRV^USID(%ProcessMode,SID)

		quit:VFMQ="Q"
		set %PG=%PG+1
	}
 
	kill RM
	quit
 
 
PENDING //;Request Message Tranport Manager Pending Message Info
 
	/*
	   This function (PROFILE function MTMPENDING) prompts for input of a
	   valid MTM ID, then request the MTM to download information related
	   to currently connected servers.  The pending message indicator
	   shows a message that has been sent to a server but not yet responded
	   to.
	*/

	type public String ER, RM
	
	type Date DATE
	type Number %MODS, %PAGE, %PG, %REPEAT, I, SERVERS, TIME
	type String %READ, %TAB(), DATA(), IO, MTMID, SID, VFMQ, VPG(), X

	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
 
	set %TAB("IO")=$$IO^SCATAB 
	set IO=$I
	set %READ="IO"
	set MTMID=$$GETMTMID(1) quit:MTMID=""
 
	set ER=$$EXCHMSG^%OSSCRPT("PEND","",MTMID,.RM,0) quit:ER
 
	if RM'["|" set ER="W" quit	     // No servers connected
 
	// Display pending messages
	kill DATA
	set DATE=%CurrentDate
	set TIME=%CurrentTime
 
	for I=1:1 set X=$P(RM,$$FS,I) quit:X=""  do {
		
		type Number CONNECT, WAIT
		type String CLIENT, PRCNM, SVID, SVTYP
		
		set SVID=$P(X,"|",1)
		set SVTYP=$P(X,"|",2)
		set PRCNM=$P(X,"|",3)
		set CONNECT=$P(X,"|",4)\1000
		set CLIENT=$P(X,"|",5)
		set WAIT=$P(X,"|",6)\1000
		set WAIT=$S(WAIT:$$DISPTIM(WAIT),1:"")
		set DATA(I)=SVID_"|"_PRCNM_"|"_SVTYP_"|"_$$DISPTIM(CONNECT)_"|"
		set DATA(I)=DATA(I)_CLIENT_"|"_WAIT
	}
 
	set SERVERS=I-1
	set SID="MTMPENDING" 
 
	set %ProcessMode=2
	if IO'=$I do OPEN^SCAIO if ER quit

	set %PG=1
	set %PAGE=SERVERS\8
	if SERVERS#8 set %PAGE=%PAGE+1
 
	// Servers - Page ~p1
	for I=1:1:%PAGE set VPG(I)=$$^MSG(4313,I)
	for  do { quit:VFMQ="Q"
		set %MODS=((%PG-1)*8)+1
		set %REPEAT=$S(%ProcessMode=4:SERVERS,1:8)
		if %MODS+8>SERVERS set %REPEAT=SERVERS#8
		do DRV^USID(%ProcessMode,SID)
		quit:VFMQ="Q"
		set %PG=%PG+1
	}
	kill RM
	quit
 
 
DELSRV  //;Delete Server from Message Transport Manager
 
	/*
	   This function (PROFILE function MTMDELSRV) prompts for input of a
	   valid MTM ID and a server ID, then deletes the server data structures
	   from the MTM.  The server ID number can be found with the MTMPENDING
	   function.
 
	   This function should only be used if a server is not responding to
	   a client request AND has been stopped (deleted from the system), but
	   is still recognized by the MTM.
	*/
	
	type public String ER, RM

	type String %READ, %TAB(), MTMID, SVID
 
	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
 
	// Server ID
	set %TAB("SVID")=".SRVID1/XPP=D DELSRVPP^MTMFUNCS/XPR=D DELSRVPR^MTMFUNCS"
	set %READ="SVID/REQ"
	set MTMID=$$GETMTMID(1) quit:MTMID=""
 
	set ER=$$EXCHMSG^%OSSCRPT("DELSRV",SVID,MTMID,.RM,0) quit:ER
 
	/*
	 RM returned with leading 0 (success) or 1 (failure) used for
	 messages to a server.  Strip it for RM display in driver.
	*/
	set RM=$E(RM,2,99)
	set ER="W"
	quit
 
 
DELSRVPR // Pre-processor to Server ID prompt.
 
	/*
	   Builds list of valid server IDs, based on reply to PENDING request.
	*/
	
	type public String ER, MTMID, VALID()
	
	type Number I
	type String INFO, X
 
	quit:(VALID.data() > 0)
	set ER=$$EXCHMSG^%OSSCRPT("PEND","",MTMID,.INFO,1) quit:ER
 
	quit:INFO'["|"			 // No servers connected
	for I=1:1 do { quit:X=""
		set X=$P(INFO,$$FS,I) 
		if X'="" set VALID($P(X,"|",1))=$P(X,"|",3)
		}
	quit
 
 
DELSRVPP // Post processor to Server ID prompt.
 
	/*
	   Ensure that the server process is no longer running.  Do not
	   allow a running server process to be deleted from the MTM.
	*/
	
	type public String ER, RM, VALID(), X
	
	type String PRCNAM
 
	quit:X=""
	set PRCNAM=$G(VALID(X))
 
	// Invalid server ID
	if PRCNAM="" set ER=1 set RM=$$^MSG(1467) quit
	if '$$VALIDNM^%OSSCRPT(PRCNAM,1) quit
 
	// Process ~p1 is still running.  Stop the server process first.
	set ER=1 
	set RM=$$^MSG(2240,PRCNAM)
 
	quit
 
 
JRNLON  //;Message Transport Manager Journaling On
 
	/*
	   This function (PROFILE function MTMJRNLON) prompts for input of a
	   valid MTM ID, a service type, and an RMS file to journal to.
	   Journaling is then turned on for the service type(s) selected.
 
	   Selection may either be a single service type or * for all.
	*/
	
	type public String ER, RM
	
	type String %READ, %TAB(), FILE, MSG, MTMID, POST, SVTYP
 
	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
 
	// Service Type (* = ALL)
	set %TAB("SVTYP")=".SVTYP"
 
	// Invalid file
	set POST="S %EXT=1 D ^SCAIO I 'ER,IOTYP'=""RMS"" S ER=1,RM=$$^MSG(1332)"       //Invalid file
 
	// Journal to File
	set %TAB("FILE")=".JRNDEV2/XPP="_POST
	set %READ="SVTYP/REQ,FILE/REQ"
	set MTMID=$$GETMTMID(1) quit:MTMID=""
 
	set MSG="1"_$$FS_SVTYP_$$FS_FILE
	set ER=$$EXCHMSG^%OSSCRPT("JRNL",MSG,MTMID,.RM,0) quit:ER
	set ER="W"
	quit
 
 
JRNLOFF //;Message Transport Manager Journaling Off
 
	/*
	   This function (PROFILE function MTMJRNLOFF) prompts for input of a
	   valid MTM ID and a service type.  Journaling is then turned off for
	   the service type(s) selected.
 
	   Selection may either be a single service type of * for all.
	*/
	
	type public String ER, RM
	
	type String %READ, %TAB(), MSG, MTMID, SVTYP
 
	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
 
	// Service Type (* = ALL)
	set %TAB("SVTYP")=".SVTYP"
	set %READ="SVTYP/REQ"
	set MTMID=$$GETMTMID(1) 
	quit:MTMID=""
 
	set MSG="0"_$$FS_SVTYP
	set ER=$$EXCHMSG^%OSSCRPT("JRNL",MSG,MTMID,.RM,0)
	quit:ER

	set ER="W"
	quit
 
 
CLLOG   //;Close Log File for Message Transport Manager
 
	/*
	   This function (PROFILE function MTMCLOG) prompts for input of a
	   valid MTM ID, then sends a message to the MTM to close its current
	   log file and open a new log file.
	*/
	
	type public String ER, RM
	
	type String MTMID
 
	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
 
	set MTMID=$$GETMTMID(1) 
	quit:MTMID=""
 
	set ER=$$EXCHMSG^%OSSCRPT("CLLOG","",MTMID,.RM,0) 
	quit:ER

	set ER="W"
	quit
 
 
GETMTMID(RUNNING) //Private;Prompt for a valid MTM ID
 
	/*
	   Display a UTLREAD screen to prompt for a single MTM ID, with
	   with validation as to whether the selected MTM ID is currently
	   running or not.  I.e., only allow selection of running or non-
	   running MTMs.  Return the ID or null if none selected.
 
	   Also prompt for any other %TAB variable defined.
 
	   ARGUMENTS:
	   . RUNNING MTM running indicator /TYP=L/DFT=0/MECH=VAL
		/NOREQ
	     0 = select only if not running
	     1 = select only if running
 
	   INPUTS:
	   . %TAB  Other prompts  /TYP=larray
 
	   . %READ  Prompt order list /TYP=T
 
	   RETURNS:
	   . $$ MTM ID or null   /DDREF=[CTBLMTM]MTMID
 
	   EXAMPLE:
	   S MTMID=$$GETMTMID("Function Header",RUNNING,%READ)
	*/
	
	type public String %READ, %TAB()
	
	type Number %PG
	type String MTMID, VFMQ
 
	if $G(%READ)'="" set %READ=","_%READ
	set %TAB("MTMID")=".MTMID/TBL=[CTBLMTM]/XPP=D MTMIDPP^MTMFUNCS(X,$G(RUNNING))"
	set %READ="@@%FN,,MTMID/REQ"_$G(%READ)
	set %PG=-1

	do ^UTLREAD
	if VFMQ="Q" set MTMID=""
	quit MTMID
 
 
MTMIDPP(MTMID,RUNNING) //Private;Post processor for MTMID prompt
 
	/*
 
	   ARGUMENTS:
	   . MTMID  ID of MTM requested /TYP=T
 
	   . RUNNING Indicator if requesting  /TYP=L
	     running (1) or non-running (0)
	     MTMs.
 
	   OUTPUT:
	   . ER  Error flag  /TYP=L
 
	   . RM  Error message  /TYP=T
 
 
	*/
	
	type public Boolean ER
	type public String RM
	
	type String ctrlmbx

	set ER='$$RUNNING(MTMID,RUNNING)
	quit:ER!'RUNNING
 
	if $$UICOK^%OSSCRPT(MTMID) quit
	set ER=1 
	set RM=$$^MSG(2779)  
	quit
 
 
RUNNING(MTMID,RUNNING) //Private;Determine if a specific MTMID is running
 
	/*
 
	   This function determines if a particular MTM is currently running,
	   or not.  The process
 
	   If RUNNING=1, request is to see if the MTM is running, in which case
	   return of 1 is Yes, 0 is no.
 
	   If RUNNING=0, request is to see if the MTM is not running, in which
	   case return of 1 is Yes, 0 is no.
 
	   ARGUMENTS:
	   . MTMID  ID of MTM requested /TYP=T
 
	   . RUNNING 1 = Is it running? /TYP=L
	     0 = Is it not running?
 
	   RETURNS:
	   . $$  Status   /TYP=L
 
	   . RM  Message on status = 0 /TYP=T
 
	   EXAMPLE:
	   S X=$$RUNNING("ABC",1) - to see if MTM ID ABC is running
	   S X=$$RUNNING("ABC",0) - to see if MTM ID ABC is not running
 
 
	*/
	
	type public String ER, RM
	
	type String X

	set X=$$VALIDNM^%OSSCRPT($$PRCNAM(MTMID),RUNNING)
	if 'RUNNING,'X quit 1
	if RUNNING,X quit 1
 
	// MTM ~p1 is not running
	if RUNNING set RM=$$^MSG(1786,MTMID)
 
	// MTM ~p1 is already running
	else  set RM=$$^MSG(1785,MTMID)

	quit 0
 
 
PRCNAM(MTMID) //Private;Return process name for an MTM ID (MTM_mtmid)
 
	/*
 
	   ARGUMENTS:
	   . MTMID  ID of MTM  /TYP=T
 
	   RETURNS:
	   . $$  Process name   /TYP=T
	     MTM_mtmid
 
	   EXAMPLE:
	   S NAM=$$PRCNAM("ABC") - to return MTM_ABC
	*/

	quit "MTM_"_MTMID
 
 
DISPTIM(TIME) //Private;Return standard displayable time (hh:mm:ss)
 
	/*
 
	   ARGUMENTS:
	   .TIME  Time in seconds  /TYP=N
 
	   RETURNS:
	   . $$  Displayable time /TYP=T
 
	   EXAMPLE:
	   S X=$$DISPTIM(12345)
 
 
	*/
 
	if $G(TIME)<1 quit "00:00:00"
	quit $$TIM^%ZM(TIME,"24:60:SS")
 
 
FS() 	//Field separator constant
	quit $C(28)
 

DFORMAT(SVTYP,ACTIVE,REQ,RESP) //
 
	/*
 
	   *** LYH 01/17/00 ***
	   Added a new section to reformat the data to be displayed on screen
 
	   ACTIVE can be used for slot state
 
	*/
 
	if ACTIVE'=+ACTIVE do {
		set SVTYP="  "_SVTYP		  // Indent a few spaces for server pid
		if ACTIVE="U" set ACTIVE="IN_USE" quit
		if ACTIVE="F" set ACTIVE="FREE" quit
		set ACTIVE="???"
	}
 
	// REQ can be used for server state
 
	if REQ'=+REQ do {
		if REQ="P" set REQ="WAIT" quit
		if REQ="B" set REQ="BUSY" quit
		set REQ="???"
	}
 
	// RESP can be used for process state
 
	if RESP'=+RESP do {
		if RESP="A" set RESP="ACTIVE" quit
		if (RESP="?")!(RESP="O") set RESP="INACTIVE" quit
		if RESP="W" set RESP="SWAPPED" quit
		if RESP="I" set RESP="IDLE" quit
		if RESP="Z" set RESP="ZOMBIE" quit
		if RESP="T" set RESP="STOPPED" quit
		set RESP="???"
	}
 
	// Pre-format the data fields
 
	set ACTIVE=$J(ACTIVE,6)
	set REQ=$J(REQ,9)
	set RESP=$J(RESP,9)
	quit
 
 
public VERSION // Request Message Tranport Manager Version Info
 
	/*
	   This function (PROFILE function MTMVERSION) prompts for input of a
	   valid MTM ID, then request the MTM to download information related
	   to the specified running MTM.
	*/
 
 	type Public String ER,RM
 
 	type Date DATE
 	type Number I,%MODS,%PAGE,%PG,%REPEAT,SERVERS
 	type String DATA(),IO,MTMID,%READ,SID,%TAB(),VFMQ,VPG(),X
 	type Time TIME
 
	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
 
	set %TAB("IO")=$$IO^SCATAB 
	set IO=$I
	set %READ="IO"
	set MTMID=$$GETMTMID(1) quit:MTMID.isNull()
 
	set ER=$$EXCHMSG^%OSSCRPT("GETVER","",MTMID,.RM,0) quit:ER
 
	if RM'["|" set ER="W" quit	     // No servers connected
 
	// Display version information
	set DATE=%CurrentDate
	set TIME=%CurrentTime
	for I=1:1 set X=RM.piece("|",I) quit:X.isNull()  set DATA(I)=X
 
	set SERVERS=I-1
	set SID="MTMVERSION"
 
	set %ProcessMode=2
	if IO'=$I do OPEN^SCAIO if ER quit

	set %PG=1
	set %PAGE=SERVERS\8 
	if SERVERS#8 set %PAGE=%PAGE+1
 
	// Servers - Page ~p1
	for I=1:1:%PAGE set VPG(I)=$$^MSG(4313,I)

	for  do { quit:VFMQ="Q"
		set %MODS=((%PG-1)*8)+1
		set %REPEAT=$S(%ProcessMode=4:SERVERS,1:8)
		if %MODS+8>SERVERS set %REPEAT=SERVERS#8
		do DRV^USID(%ProcessMode,SID)

		quit:VFMQ="Q"
		set %PG=%PG+1
	}
	kill RM
	quit
 
 
PARAM   //;Request Message Tranport Manager Startup Parameter Info
 
	/*
	   This function (PROFILE function MTMVERSION) prompts for input of a
	   valid MTM ID, then request the MTM to download information related
	   to the specified running MTM.
	*/
	
	type public String ER, RM
	
	type Date DATE
	type Number %MODS, %PAGE, %PG, %REPEAT, I, TIME
	type String %READ, %TAB(), DATA, IO, MTMID, SID, VFMQ, VPG()
 
	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
 
	set %TAB("IO")=$$IO^SCATAB set IO=$I
	set %READ="IO"
	set MTMID=$$GETMTMID(1) quit:MTMID=""
 
	set ER=$$EXCHMSG^%OSSCRPT("GETPARAM","",MTMID,.RM,0) quit:ER
 
	// No servers connected
	if RM'["|" set ER="W" quit  
 
	// Display MTM parameters
	set DATE=%CurrentDate
	set TIME=%CurrentTime
	set DATA=RM
	set SID="MTMPARAM" 

	set %ProcessMode=2
	if IO'=$I do OPEN^SCAIO if ER quit

	set %PG=1
	set %PAGE=1
	set %MODS=1
	set %REPEAT=1
 
	// Servers - Page ~p1
	for I=1:1:%PAGE set VPG(I)=$$^MSG(4313,I)  
	for  do { quit:VFMQ="Q"
		do DRV^USID(%ProcessMode,SID)

		quit:VFMQ="Q"

		set %PG=%PG+1
	}
	kill RM
	quit
 
SVCLEAN //;Cleanup Server Slots in Message Tranport Manager
 
	/*
	   This function (PROFILE function MTMSVCLEAN) prompts for input of a
	   valid MTM ID, then requests the MTM to clean up inactive or zombie
	   server process.
	*/
	
	type public String ER, RM
	
	type Date DATE
	type Number %MODS, %PAGE, %PG, %REPEAT, I, SVTYPS, TIME
	type String %READ, %TAB(), DATA(), IO, MTMID, SID, VFMQ, VPG(), X
 
	kill RM
 
	if '$$PRIVMTM^%ZFUNC set ER=1 quit
 
	// Zero Stats
	set %TAB("IO")=$$IO^SCATAB 
	set IO=$I
	set %READ="IO"
 
	set MTMID=$$GETMTMID(1) quit:MTMID=""
 
	set ER=$$EXCHMSG^%OSSCRPT("SVCLEAN","",MTMID,.RM,0) 
	quit:ER
 
	if RM'["|" set ER="W" quit	     // No servers connected
 
	// Display stats and update database
	kill DATA
	set DATE=%CurrentDate
	set TIME=%CurrentTime
	for I=1:1 set X=$P(RM,$$FS,I) quit:X=""  do {
		set DATA(I)=X
	}
 
	// No servers active for MTM ~p1
	if I=1 set ER=1 set RM=$$^MSG(1985,MTMID) quit	 
	set SVTYPS=I-1
	set SID="MTMSVCLEAN" 

	set %ProcessMode=2
	if IO'=$I do OPEN^SCAIO if ER quit

	set %PG=1
	set %PAGE=SVTYPS\15 
	if SVTYPS#15 set %PAGE=%PAGE+1
 
	// Stats - Page ~p1
	for I=1:1:%PAGE set VPG(I)=$$^MSG(4316,I)
	for  do { quit:VFMQ="Q"
		set %MODS=((%PG-1)*15)+1
		set %REPEAT=$S(%ProcessMode=4:SVTYPS,1:15)
		if %MODS+15>SVTYPS set %REPEAT=SVTYPS#15

		do DRV^USID(%ProcessMode,SID)

		quit:VFMQ="Q"

		set %PG=%PG+1
	}
 
	kill RM
	quit
	
	//----------------------------------------------------------------------
GETSTAT	// Get MTM Statistics
	//----------------------------------------------------------------------
	
	type Public String ER, RM
	type String %READ, %TAB(), MTMID, SVTYP
	
	if '$$PRIVMTM^%ZFUNC set ER = 1 quit

	// Service Type (* = ALL)
	set %TAB("SVTYP")=".SVTYP"
	set %READ="SVTYP/REQ"
	set MTMID = $$GETMTMID(1) quit:MTMID.isNull()
	
	set ER = $$EXCHMSG^%OSSCRPT("GETSTAT",SVTYP,MTMID,.RM,0)
	if ER quit
	
	type Number AVGREQ, AVGRPLY, MAXREQ, MAXRPLY, MINREQ, MINRPLY, NUMSRV, SEQ, TOTREQ, TOTRPLY
	type String ETIME, I, REC, STIME, X
	
	for I = 1:1 set X = RM.piece($$FS,I) quit:X.isNull()  do {

		set SVTYP = X.piece("|",1)
		set SEQ = Db.nextKey("MTMSTAT","+$H,:MTMID,:SVTYP")
		type RecordMTMSTAT mtmstat = Class.new("RecordMTMSTAT","EFD=+$H,MTMID=:MTMID,SVTYP=:SVTYP,SEQ=:SEQ")
		set mtmstat.numsrv = X.piece("|",2)
		set mtmstat.timestart = X.piece("|",3)
		set mtmstat.timeend = X.piece("|",4)
		set mtmstat.numreply = X.piece("|",5)
		set mtmstat.minreply = $$^SCARND((X.piece("|",6)/1000),,,,5)
		set mtmstat.maxreply = $$^SCARND((X.piece("|",7)/1000),,,,5)
		set mtmstat.avgreply = $$^SCARND((X.piece("|",8)/1000),,,,5)
		set mtmstat.nummsg = X.piece("|",9)
		set mtmstat.mintime = $$^SCARND((X.piece("|",10)/1000),,,,5)
		set mtmstat.maxtime = $$^SCARND((X.piece("|",11)/1000),,,,5)
		set mtmstat.avgtime = $$^SCARND((X.piece("|",12)/1000),,,,5)
	
		do mtmstat.save()
		}
		
	set ER = "W", RM = "MTM statistics Updated"
	quit
	
	//----------------------------------------------------------------------
STRTSTAT	// Start MTM Stats Collecting
	//----------------------------------------------------------------------
	
	type Public String ER, RM
	type String %READ, %TAB(), MTMID, SVTYP
	
	if '$$PRIVMTM^%ZFUNC set ER = 1 quit
	
	// Service Type (* = ALL)
	set %TAB("SVTYP")=".SVTYP"
	set %READ="SVTYP/REQ"
	set MTMID=$$GETMTMID(1) quit:MTMID.isNull()
	
	set ER=$$EXCHMSG^%OSSCRPT("STARTSTAT",SVTYP,MTMID,.RM,0)
	if 'ER set ER = "W", RM = "MTM statistics started"
	quit
	
	//----------------------------------------------------------------------
STOPSTAT	// Stop MTM Stats Collecting
	//----------------------------------------------------------------------

	type Public String ER, RM
	type String %READ, %TAB(), MTMID, SVTYP
	
	if '$$PRIVMTM^%ZFUNC set ER = 1 quit
	
	// Service Type (* = ALL)
	set %TAB("SVTYP") = ".SVTYP"
	set %READ = "SVTYP/REQ"
	set MTMID = $$GETMTMID(1) quit:MTMID.isNull()
	
	set ER=$$EXCHMSG^%OSSCRPT("STOPSTAT",SVTYP,MTMID,.RM,0)
	if 'ER S ER = "W", RM = "MTM statistics stopped"
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "60682^34115^Pete Chenard^24296"	// Signature - LTD^TIME^USER^SIZE
