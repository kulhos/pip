public ULODTMPL(String TEMPLATE,String ARRAY,Number START,String XTAGS())
	/*
	ORIG: RUSSELL - 01/03/2002
	DESC: Template loader
	PROCEDURE ID:  ULODTMPL

	---- Comments ---------------------------------------------------------
	
	This procedure loads a template into the specified array.
	Templates contain code that is used as a base for building code
	based on combining the template with other data to create a complete
	procedure.

	Notes:
		- Because line tags are identified, only line tags, not
		  comments, should begin in the first column for templates

		- Within the template being loaded, line tag %STOPLOD
		  is used to signal the end of the loading section.
		  Any line from %STOPLOD and below will not be loaded.

		- It is the callers responsiblity to ensure that the
		  initial state of array is correct, e.g., killed if
		  necessary.

		- Because there may be upbar characters in the template
		  code, and due to the way that the data is loaded from
		  table DBTBL25D, the delimiter in the file definition
		  for DBTBL25D is $C(12), not the standard upbar.

		- Templates are currently loaded from PSL procedure
		  definitions, however this could change in the future.
		  This is immaterial to the caller.

	ARGUMENTS:

		. TEMPLATE	Name of template	/TYP=T/REQ/MECH=VAL

		. ARRAY		Local array name to be	/TYP=T/REQ/MECH=VAL
				used for storing code
				of the template to
				be returned to the caller

		. START		Starting subscript for 	/TYP=N/MECH=VAL/NOREQ
				load to ARRAY.  If not
				defined, adds to end.

		. XTAGS		Cross reference array	/TYP=T/MECH=REFARR:W
				for lines with tags	/NOREQ

	RETURNS:
	
		. ARRAY		With code loaded


	EXAMPLE:
		set array="CODE(1,"
		do ^ULODTMPL("test",array,"",.xtags)
	---- Revision History -------------------------------------------------
	03/15/06 - RussellDS - CR20135
		   Correct issue with parameter passing to LINE.
	
	03/24/05 - Pete Chenard - CR 14146
		   Cleaned up scope warnings.
		
	*/

	type String %I,LINE,%START,STOP,TAG

	if $E(ARRAY,$L(ARRAY))=")" set ARRAY=$E(ARRAY,1,$L(ARRAY)-1)
	if $E(ARRAY,$L(ARRAY))="," set ARRAY=$E(ARRAY,1,$L(ARRAY)-1)
	if ARRAY'["(" S ARRAY=ARRAY_"("

	if $P(ARRAY,"(",2)="" set %START=ARRAY_""""")",ARRAY=ARRAY_"%I)"
	else  set %START=ARRAY_","""")",ARRAY=ARRAY_",%I)"

	if $G(START)="" set %I=$O(@%START,-1)
	else  set %I=START-1

        type ResultSet db25rs=Db.select("CODE","DBTBL25D","%LIBS='SYSDEV' AND PROCID=:TEMPLATE","SEQ")
 
        if db25rs.isEmpty() quit
 
	set STOP=0
	while db25rs.next() quit:STOP  do {
		set LINE=db25rs.getRow()
		do LINE(LINE,.%I)
	}

	quit

LINE(String LINE,
     Number %I)

	// Work with line of code

	type Public String ARRAY,STOP,XTAGS()
	
	type String TAG
	
	set %I=%I+1,TAG=""
	if LINE?1AN.e!(LINE?1"%".e) set TAG=$P($TR(LINE,$C(9)," ")," ",1)
	if TAG="%STOPLOD" set STOP=1
	else  do {
		set @ARRAY=LINE
		if TAG'="" set XTAGS($P(TAG,"(",1))=%I
	}
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "60339^35081^Dan Russell^2814"	// Signature - LTD^TIME^USER^SIZE
