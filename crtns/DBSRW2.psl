private DBSRW2(RecordDBTBL5H dbtbl5h,String ddmap(),String RPTINFO(,,,),String PQINFO())	/* Private - Part 2 of DBSRW
	ORIG: CHIANG
	PROCEDURE ID: DBSRW2
	DESC: DATA-QWIK Report Compiler - Part 2
	
	---- Comments ----------------------------------------------------------
	ARGUMENTS:
		. dbtbl5h	Report header		/REQ/NONULL/MECH=REF:R

		. ddmap		Variable's used map	/NOREQ/MECH=REF:RW

		. RPTINFO	Report attributes	/REQ/MECH=REF:W
				Put global info here to
				minimize parameter passing

	------ Revision History ------------------------------------------------
	2009-03-11 - RussellDS - CRs 35741/38660
		* Modified to replace $C(128) with "|" when load variable from
		  RPTINFO("FMT").  128 is substituted by FORMDQ5* to avoid
		  problems with "|" in the record.
	
	10/15/2008 - RussellDs - CR35918
		Corrected PSL warnings in generated code.
		
	03/01/2008 - RussellDS - CR32657/32339
		Added coding, here and in DBSRW and DBSRW3 to correct problems
		with use of data in summary sections.  Was using data from the
		last row fetched, which was the next row passed the data the
		summary was for.  Now save old versions of data prior to new
		fetch and make these available in summary section for use as
		data or pre/post-processors.
		
		Cleaned up PSL warnings.
		
		Removed old revision history.
	------------------------------------------------------------------------

	I18N=QUIT Excluded from I18N standards
	*/

	type public Number ER

	type Number LVL
	type String RID,TABCHR,vclist

	set TABCHR=9.char()
	set RID=dbtbl5h.rid

	// Repeat Field Definition (from|to|size|count)
	// Only a single repeat region definition will exist for a report

	type ResultSet rs=Db.select("GRP,RPTFROM,RPTTO,RPTSIZE,RPTCNT","DBTBL5DGC","LIBS='SYSDEV' AND RID=:RID AND RPTSIZE > 0")
	if rs.isEmpty() do {
		set RPTINFO("LINECNT")=0
		set RPTINFO("REPEATSIZE")=0
		set RPTINFO("REPEATGRP")=""
		set RPTINFO("REPEATCNT")=0
		}
	else  while rs.next() do { quit
		set RPTINFO("LINECNT")=rs.getCol("RPTTO")-rs.getCol("RPTFROM")+1
		set RPTINFO("REPEATSIZE")=rs.getCol("RPTSIZE")
		set RPTINFO("REPEATGRP") = rs.getCol("GRP")
		set RPTINFO("REPEATCNT")=rs.getCol("RPTCNT")
		}

	set RPTINFO("RID")=RID
	set RPTINFO("PAGESIZE")=dbtbl5h.psize

	// Get last key level
	do {
		if dbtbl5h.seq10'="" do {
			set RPTINFO("LASTLVL")=10
			if RPTINFO("REPEATGRP") = dbtbl5h.seq10 set RPTINFO("REPEATGRPLVL") = 10
		}
		else  if dbtbl5h.seq9'="" do {
			set RPTINFO("LASTLVL")=9
			if RPTINFO("REPEATGRP") = dbtbl5h.seq9 set RPTINFO("REPEATGRPLVL") = 9
		}
		else  if dbtbl5h.seq8'="" do {
			set RPTINFO("LASTLVL")=8
			if RPTINFO("REPEATGRP") = dbtbl5h.seq8 set RPTINFO("REPEATGRPLVL") = 8
		}
		else  if dbtbl5h.seq7'="" do {
			set RPTINFO("LASTLVL")=7
			if RPTINFO("REPEATGRP") = dbtbl5h.seq7 set RPTINFO("REPEATGRPLVL") = 7
		}
		else  if dbtbl5h.seq6'="" do {
			set RPTINFO("LASTLVL")=6
			if RPTINFO("REPEATGRP") = dbtbl5h.seq6 set RPTINFO("REPEATGRPLVL") = 6
		}
		else  if dbtbl5h.seq5'="" do {
			set RPTINFO("LASTLVL")=5
			if RPTINFO("REPEATGRP") = dbtbl5h.seq5 set RPTINFO("REPEATGRPLVL") = 5
		}
		else  if dbtbl5h.seq4'="" do {
			set RPTINFO("LASTLVL")=4
			if RPTINFO("REPEATGRP") = dbtbl5h.seq4 set RPTINFO("REPEATGRPLVL") = 4
		}
		else  if dbtbl5h.seq3'="" do {
			set RPTINFO("LASTLVL")=3
			if RPTINFO("REPEATGRP") = dbtbl5h.seq3 set RPTINFO("REPEATGRPLVL") = 3
		}
		else  if dbtbl5h.seq2'="" do {
			set RPTINFO("LASTLVL")=2
			if RPTINFO("REPEATGRP") = dbtbl5h.seq2 set RPTINFO("REPEATGRPLVL") = 2
		}
		else  do {
			set RPTINFO("LASTLVL")=1
			if RPTINFO("REPEATGRP") = dbtbl5h.seq set RPTINFO("REPEATGRPLVL") = 1
		}
	}

	do direfs^DBSRWUTL(.dbtbl5h,RPTINFO(,,,),ddmap())		// Map columns to variables

	// Define report statistics
	//   RPTINFO("STAT",SEQ)=Source|fmt|Target|Increments
	do SETSTATS(.dbtbl5h,RPTINFO(,,,))

	/* Format logic.  Also sets up column pre/post-processor code in
	   RPTINFO("VPSUBS",#,seq)=data.  SEQ=0 includes description and
	   any parameters.  1-n = code lines.
	*/

	do format^DBSRWUTL(.dbtbl5h,RPTINFO(,,,),ddmap()) quit:ER	// Format logic
	
	// Are there summary sections?
	set RPTINFO("SUM") = false
	for LVL=RPTINFO("LASTLVL"):-1:2 if (RPTINFO("FMT",LVL,"T").data() > 0) set RPTINFO("SUM") = true quit
	
	/* If summary, need to add all vc variables as vo (old) versions, not
	   just the keys.*/
	   
	if RPTINFO("SUM") do {
		
		type Number I
		type String TC
	
		set vclist = ""
		for I=1:1:ddmap(0)-1 do {
				
			set TC=ddmap(I)
			do addvars^DBSRWUTL("V0TYPE","vo"_ddmap(TC),RPTINFO(,,,))
			set vclist = vclist_ddmap(TC)_","
		}
		
		set vclist = vclist.extract(1, vclist.length() - 1)
	}

	do CONV(RPTINFO(,,,),ddmap())				// Convert to print format

	// Add code to initialize variables
	do {
		type Number I
		type String CODE

		do addcode^DBSRWUTL(1,"// Initialize variables")

		// Initialize column data (vcn variables) and protection flags,
		// if they exist(vpn variables) to null
		set CODE = ""
		for I=1:1:ddmap(0)-1 do {
			
			set CODE=CODE_ddmap(ddmap(I))_","
			if RPTINFO("VPTYPE","vp"_I).exists() set CODE = CODE_"vp"_I_","
		}
		set CODE = CODE.extract(1, CODE.length() - 1)
		for  do { quit:CODE.isNull()
			do addcode^DBSRWUTL(1, "set ("_CODE.piece(",", 1, 100)_")=""""")
			set CODE = CODE.piece(",", 101, CODE.length())
		}

		do addcode^DBSRWUTL(1,"set (VFMQ,vlc,VLC,VOFFLG,VPN,VRG)=0")
		if 'RPTINFO("SUBS","FPOST","").order().isNull() do addcode^DBSRWUTL(1,"set VHIT = 0")
		do addcode^DBSRWUTL(1,"set VNEWHDR=1")
		do addcode^DBSRWUTL(1,"set VLOF=""""")
		do addcode^DBSRWUTL(1,"set %TIM=$$TIM^%ZM")
		do addcode^DBSRWUTL(1,"set vrundate=%CurrentDate.toString(),vsysdate=%SystemDate.toString()")
		do addcode^DBSRWUTL(0,"")

		do addcode^DBSRWUTL(1,"do {")
		do addcode^DBSRWUTL(2,"type Number I,J,K")
		do addcode^DBSRWUTL(2,"for I=0:1:"_(+RPTINFO("FMT",0).piece("|",1))_" do {")
		do addcode^DBSRWUTL(3,"set (vh(I),VD(I))=0,vs(I)=1"_9.char()_"// Group break flags")
		do addcode^DBSRWUTL(3,"set VT(I)=0"_9.char()_"// Group count")
		do addcode^DBSRWUTL(3,"for J=1:1:"_(+RPTINFO("FMT",0).piece("|",2))_" do {")
		do addcode^DBSRWUTL(4,"for K=1:1:3 set VT(I,J,K)="""""_9.char()_"// Initialize function stats")
		do addcode^DBSRWUTL(4,"}")
		do addcode^DBSRWUTL(3,"}")
		do addcode^DBSRWUTL(2,"}")
		do addcode^DBSRWUTL(0,"")

		if RPTINFO("LINECNT") do {
			if RPTINFO("LINECNT")=1 do addcode^DBSRWUTL(1,"set VRF=""""")
			do addcode^DBSRWUTL(1,"set (VR,VRG)=""""")
			do addcode^DBSRWUTL(1,"for vI=1:1:"_(+RPTINFO("LINECNT"))_" set VRF(vI)="""""_9.char()_"// Initialize print buffers")
			}
		}

	// Report browser data
	do addcode^DBSRWUTL(1,"do Db.delete(""TMPRPTBR"",""JOBNO=:%ProcessID"")"_9.char()_"// Report browser data")

	// Report Pre-processor (after query)
	if 'RPTINFO("SUBS","PREAQ","").order().isNull() do {
		type String CODE
		set CODE="if VDISTKEY.get()="""" do { quit:VFMQ"
		set CODE=CODE_TABCHR_"// Report Pre-processor (after query)"
		do addcode^DBSRWUTL(1,CODE)
		do addcode^DBSRWUTL(2,"do VPREAQ")
		// If flagged to exit, don't print header
		do addcode^DBSRWUTL(2,"if VFMQ set vh(0)=1 do VEXIT(0)")
		do addcode^DBSRWUTL(2,"}")
		do addcode^DBSRWUTL(0,"")
		}

	do addcode^DBSRWUTL(1,"set vh(0)=0")
	do addcode^DBSRWUTL(0,"")

	/* Report Access Options - three possible methods:
		1 - Extract data to report table for distribution
		2 - Run from distribution table
		3 - Run directly

	   Only set up options 1 and 2 if enabled by distribution key being defined.
	*/

	if RPTINFO("DISTKEY")'="" do {
	
		type String CODE

		// Make sure distribution key is selected
		do addtomap^DBSRWUTL(RPTINFO("DISTKEY"),ddmap())

		do addcode^DBSRWUTL(1,"// Create report table")
		do addcode^DBSRWUTL(1,"if VTBLNAM.exists() do {")
		do addcode^DBSRWUTL(2,"type Number VSEQ=0")
		do addcode^DBSRWUTL(2,"type String V,VDIST,VI")
		do BLDSELCT(ddmap(),RPTINFO(,,,),2)			// Add Db.select
		do addcode^DBSRWUTL(2,"if rwrs.isEmpty() do {")
		do addcode^DBSRWUTL(3,"do VEXIT(1)")
		do addcode^DBSRWUTL(3,"}")
		do addcode^DBSRWUTL(2,"else  while rwrs.next() do { quit:VFMQ")
		if 'RPTINFO("SUBS","FPRE","").order().isNull() do addcode^DBSRWUTL(3,"do VFPRE quit:VFMQ")
		do addcode^DBSRWUTL(3,"set VDIST=rwrs.getCol("""_RPTINFO("DISTKEY")_""")")
		do addcode^DBSRWUTL(3,"quit:VDIST=""""")
		do addcode^DBSRWUTL(3,"set V=rwrs.getRow().toString()")
		do addcode^DBSRWUTL(3,"set VSEQ=VSEQ+1")
		do addcode^DBSRWUTL(3,"type RecordTMPRPTDS tmprptds=Class.new(""RecordTMPRPTDS"")")
		do addcode^DBSRWUTL(3,"set tmprptds.jobno=%ProcessID")
		do addcode^DBSRWUTL(3,"set tmprptds.distkey=VDIST")
		do addcode^DBSRWUTL(3,"set tmprptds.seq=VSEQ")
		do addcode^DBSRWUTL(3,"set tmprptds.data=V")
		if RPTINFO("RESFLG") do addcode^DBSRWUTL(3,"set tmprptds.protmask=rwrs.getRowProt()")
		do addcode^DBSRWUTL(3,"do tmprptds.bypassSave()")
		do addcode^DBSRWUTL(3,"}")
		do addcode^DBSRWUTL(2,"}")
		do addcode^DBSRWUTL(0,"")

		// Set up code to run report from report table

		do addcode^DBSRWUTL(1,"// Run report - input from report table")
		do addcode^DBSRWUTL(1,"else  if VDISTKEY.get()'="""" do {")
		if 'RPTINFO("SUBS","FPOST","").order().isNull() do addcode^DBSRWUTL(2, "type Boolean VSKIPREC = 0")
		do addcode^DBSRWUTL(2,"type String V,VI")
		do addcode^DBSRWUTL(2,"do VINILAST")
		do addcode^DBSRWUTL(2,"type DbSet ds=Db.selectDbSet(""TMPRPTDS"",""DISTKEY=:VDISTKEY"")")
		do addcode^DBSRWUTL(2,"while ds.next() do { quit:VFMQ")
		do addcode^DBSRWUTL(3,"set V=ds.getRecord().data")
		if RPTINFO("RESFLG") do {
			do addcode^DBSRWUTL(3,"set VI=ds.getRecord().protmask")
		}
		else  do addcode^DBSRWUTL(3,"set VI=""""")
		do addcode^DBSRWUTL(3,"do VGETDATA(V,VI)")
		if 'RPTINFO("SUBS","FPOST","").order().isNull() do addcode^DBSRWUTL(3,"do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1")
		do addcode^DBSRWUTL(3,"do VPRINT quit:VFMQ")
		do addcode^DBSRWUTL(3,"do VSAVLAST")
		do addcode^DBSRWUTL(3,"}")
	
		if 'RPTINFO("SUBS","FPOST","").order().isNull() do {
			do addcode^DBSRWUTL(2,"do VEXIT('VHIT)")
		}
		else  do addcode^DBSRWUTL(2,"do VEXIT(0)")
		do addcode^DBSRWUTL(2,"}")
		do addcode^DBSRWUTL(0,"")
		}

	// Set up code to run report directly.  If this in only code, no need for else
	do {
		type Number TABLVL
		type String CODE

		do addcode^DBSRWUTL(1,"// Run report directly")

		if RPTINFO("DISTKEY")="" set TABLVL=0
		else  set TABLVL=1

		if TABLVL do addcode^DBSRWUTL(1,"else  do {")
		do addcode^DBSRWUTL(TABLVL+1,"do VINILAST")
		do BLDSELCT(ddmap(),RPTINFO(,,,),TABLVL+1)		// Add Db.select
		do addcode^DBSRWUTL(TABLVL+1,"if rwrs.isEmpty() do VEXIT(1) quit")
		do addcode^DBSRWUTL(TABLVL+1,"while rwrs.next() do { quit:VFMQ")
		if 'RPTINFO("SUBS","FPOST","").order().isNull() do addcode^DBSRWUTL(TABLVL+1, "type Boolean VSKIPREC = 0")
		do addcode^DBSRWUTL(TABLVL+2,"type String V,VI")
		if 'RPTINFO("SUBS","FPRE","").order().isNull() do addcode^DBSRWUTL(TABLVL+2,"do VFPRE quit:VFMQ")
		do addcode^DBSRWUTL(TABLVL+2,"set V=rwrs.getRow().toString()")
		if RPTINFO("RESFLG") set CODE="set VI=rwrs.getRowProt()"_9.char()_"// Data item protection"
		else   set CODE="set VI="""""
		do addcode^DBSRWUTL(TABLVL+2,CODE)
		do addcode^DBSRWUTL(TABLVL+2,"do VGETDATA(V,VI)")
		if 'RPTINFO("SUBS","FPOST","").order().isNull() do addcode^DBSRWUTL(TABLVL+2,"do VFPOST quit:(VFMQ ! VSKIPREC)  set VHIT = 1")
		do addcode^DBSRWUTL(TABLVL+2,"do VPRINT quit:VFMQ")
		do addcode^DBSRWUTL(TABLVL+2,"do VSAVLAST")
		do addcode^DBSRWUTL(TABLVL+2,"}")
		
		if 'RPTINFO("SUBS","FPOST","").order().isNull() do {
			do addcode^DBSRWUTL(TABLVL+1,"do VEXIT('VHIT)")
		}
		else  do addcode^DBSRWUTL(TABLVL+1,"do VEXIT(0)")
		if TABLVL do addcode^DBSRWUTL(2,"}")
		do addcode^DBSRWUTL(0,"")
		}

	do addcode^DBSRWUTL(1,"quit")
	do addcode^DBSRWUTL(0,"")

	// Set up code to save last access keys values -- used for key breaks
	do {
		type String CODE1,CODE2,X

		set (CODE1,CODE2)=""
		do BLDLOAD(dbtbl5h.seq,.CODE1,.CODE2,RPTINFO(,,,),ddmap())
		do BLDLOAD(dbtbl5h.seq2,.CODE1,.CODE2,RPTINFO(,,,),ddmap())
		do BLDLOAD(dbtbl5h.seq3,.CODE1,.CODE2,RPTINFO(,,,),ddmap())
		do BLDLOAD(dbtbl5h.seq4,.CODE1,.CODE2,RPTINFO(,,,),ddmap())
		do BLDLOAD(dbtbl5h.seq5,.CODE1,.CODE2,RPTINFO(,,,),ddmap())
		do BLDLOAD(dbtbl5h.seq6,.CODE1,.CODE2,RPTINFO(,,,),ddmap())
		do BLDLOAD(dbtbl5h.seq7,.CODE1,.CODE2,RPTINFO(,,,),ddmap())
		do BLDLOAD(dbtbl5h.seq8,.CODE1,.CODE2,RPTINFO(,,,),ddmap())
		do BLDLOAD(dbtbl5h.seq9,.CODE1,.CODE2,RPTINFO(,,,),ddmap())
		do BLDLOAD(dbtbl5h.seq10,.CODE1,.CODE2,RPTINFO(,,,),ddmap())

		/* Only need to save key info if no summary data.  If summary
		   data, then we save all variables, not just keys. */
		if 'RPTINFO("SUM") do {
		
			do addcode^DBSRWUTL(0,"")
			do addcode^DBSRWUTL(0,"VINILAST"_TABCHR_"// Initialize last access key values")
			set X=CODE1.extract(2,CODE1.length())
			do addcode^DBSRWUTL(1,"type public String "_X.translate("="""))
			do addcode^DBSRWUTL(1,"set "_X)
			do addcode^DBSRWUTL(1,"quit")
			do addcode^DBSRWUTL(0,"")
			do addcode^DBSRWUTL(0,"VSAVLAST"_TABCHR_"// Save last access keys values")
			set X=CODE2.extract(2,CODE2.length())
			do addcode^DBSRWUTL(1,"type public String "_X.translate("=",","))
			do addcode^DBSRWUTL(1,"set "_X)
			do addcode^DBSRWUTL(1,"quit")
			do addcode^DBSRWUTL(0,"")
		}
		else  do {
			
			type Number I
			
			set (CODE1, CODE2) = ""
			
			for I = 1:1:vclist.length(",") do {
				
				set CODE1 = CODE1_ "vo"_ vclist.piece(",", I)_ "="""","
				set CODE2 = CODE2_ "vo"_ vclist.piece(",", I)_ "="_ vclist.piece(",", I)_ ","
			}
			set CODE1 = CODE1.extract(1, CODE1.length() - 1)
			set CODE2 = CODE2.extract(1, CODE2.length() - 1)
			
			do addcode^DBSRWUTL(0,"")
			do addcode^DBSRWUTL(0,"VINILAST"_TABCHR_"// Initialize old values")
			
			while 'CODE1.isNull() do {
			
				do addcode^DBSRWUTL(1,"type public String "_ CODE1.piece(",", 1, 100))
				set CODE1 = CODE1.piece(",", 101, CODE1.length())
			}
			do addcode^DBSRWUTL(1,"quit")
			do addcode^DBSRWUTL(0,"")
	
			do addcode^DBSRWUTL(0,"VSAVLAST"_TABCHR_"// Save old values")
			set X=vclist
			
			while 'X.isNull() do {
			
				do addcode^DBSRWUTL(1, "type public String "_ X.piece(",", 1, 100))
				do addcode^DBSRWUTL(1, "type public String "_ X.piece(",", 1, 100).replace("vc", "vovc"))
				set X = X.piece(",", 101, X.length())
			}
			while 'CODE2.isNull() do {
			
				do addcode^DBSRWUTL(1, "set "_ CODE2.piece(",", 1, 50))
				set CODE2 = CODE2.piece(",", 51, CODE2.length())
			}
			do addcode^DBSRWUTL(1,"quit")
			do addcode^DBSRWUTL(0,"")
		}
	}

	do addcode^DBSRWUTL(0,"")

	// Set up to data load retrieved into variables
	do BLDGETD(ddmap(),RPTINFO(,,,))

	// Set up user-defined pre/post-processor code
	if 'RPTINFO("SUBS","").order().isNull() do {
		type String SUB=""

		do addcode^DBSRWUTL(1,"// User-defined pre/post-processor code")
		do addcode^DBSRWUTL(0,"")

		for  set SUB=RPTINFO("SUBS",SUB).order() quit:SUB=""  do {
			type Number N=1

			do addcode^DBSRWUTL(-1,"V"_SUB_9.char()_RPTINFO("SUBS",SUB,1))
			for  set N=RPTINFO("SUBS",SUB,N).order() quit:N=""  do addcode^DBSRWUTL(-1,RPTINFO("SUBS",SUB,N))
			do addcode^DBSRWUTL(1,"quit")
			do addcode^DBSRWUTL(0,"")
			}
		}

	// Set up pre/post-processor library
	if 'RPTINFO("PPLIBS","").order().isNull() do {
		type String LIB=""

		do addcode^DBSRWUTL(1,"// Pre/post-processor library code")
		do addcode^DBSRWUTL(0,"")

		for  set LIB=RPTINFO("PPLIBS",LIB).order() quit:LIB=""  do {
			type Number N=1

			do addcode^DBSRWUTL(0,RPTINFO("PPLIBS",LIB,1))
			for  set N=RPTINFO("PPLIBS",LIB,N).order() quit:N=""  do addcode^DBSRWUTL(1,RPTINFO("PPLIBS",LIB,N))
			do addcode^DBSRWUTL(1,"quit")
			do addcode^DBSRWUTL(0,"")
			}
		}


	// Set up code to save data to print buffer for report browser
	do {
		do addcode^DBSRWUTL(0,"VBRSAVE(Number LINE,String DATA)"_TABCHR_"// Save for report browser")
		do addcode^DBSRWUTL(1,"type RecordTMPRPTBR tmprptbr=Class.new(""RecordTMPRPTBR"")")
		do addcode^DBSRWUTL(1,"set tmprptbr.jobno=%ProcessID")
		do addcode^DBSRWUTL(1,"set tmprptbr.lineno=LINE")
		do addcode^DBSRWUTL(1,"set tmprptbr.pageno=0")
		do addcode^DBSRWUTL(1,"set tmprptbr.seq=0")
		do addcode^DBSRWUTL(1,"set tmprptbr.data=DATA")
		do addcode^DBSRWUTL(1,"do tmprptbr.bypassSave()")
		do addcode^DBSRWUTL(1,"quit")
		}

	do addcode^DBSRWUTL(0,"")
	
	// Set up code to print memo fields, if any on report
	if RPTINFO("MEMOS").get() do MEMO

	// Set up code to handle exit
	do {
		type Number I
		type String CODE

		set CODE="set "
		for I=1:1:RPTINFO("LASTLVL")-1 set CODE=CODE_"vs("_I_")=0,"
		set CODE=CODE_"vs("_RPTINFO("LASTLVL")_")=0"
		do addcode^DBSRWUTL(0,"VEXIT(NOINFO)"_TABCHR_"// Exit from report")
		do addcode^DBSRWUTL(1,"type public Number IOSL,vcrt,VFMQ,vh(),VLC,VPN,VRWOPT,VSTATS()")
		do addcode^DBSRWUTL(1,"type public String IO,VTBLNAM")
		do addcode^DBSRWUTL(1,"type Number I,PN,vs(),z")
		do addcode^DBSRWUTL(1,"type String VL=""""")
		// Flush print bufer
		if RPTINFO("REPEATCNT") do addcode^DBSRWUTL(1,"if 'VFMQ do VOM2")
		// Reset group summary
		do addcode^DBSRWUTL(1,CODE)

		if RPTINFO("LASTLVL")>1 do addcode^DBSRWUTL(1,"if 'VFMQ do VSUM")

		if 'RPTINFO("DSP",92,"H","").order().isNull() set CODE="if 'VFMQ do VRSUM"	// Report summary
		else  set CODE="if 'vh(0) do VHDG0"				// Last Page
		do addcode^DBSRWUTL(1,CODE)

		do addcode^DBSRWUTL(1,"if 'VFMQ do {")
		// NOINFO=1 indicates there was no data and displays message to that effect
		do addcode^DBSRWUTL(2,"// No information available to display")
		do addcode^DBSRWUTL(2,"if NOINFO=1 set VL=$$^MSG(4655) do VOM")

		// Final page trailer
		if 'RPTINFO("DSP",90,"T","").order().isNull() do addcode^DBSRWUTL(2,"do VTRL0")

		do addcode^DBSRWUTL(2,"if vcrt set VL="""" for z=VLC+1:1:IOSL do VOM")
		do addcode^DBSRWUTL(0,"")
		if 'RPTINFO("STAT","").order().isNull() do {
			do addcode^DBSRWUTL(2,"set PN=VPN")
			do addcode^DBSRWUTL(2,"do ^DBSRWSTS(VSTATS())"_TABCHR_"// Print statistics")
			do addcode^DBSRWUTL(2,"quit:VFMQ")
			do addcode^DBSRWUTL(0,"")
			}
		do addcode^DBSRWUTL(2,"if 'VTBLNAM.exists() do {")
		do addcode^DBSRWUTL(3,"set vs(2)=0")
		// If sorted
		if $$SORTFLG^DBSRWUTL(dbtbl5h) do addcode^DBSRWUTL(3,"do VBREAK,stat^DBSRWUTL(2)")
		// Report Post-processor
		if RPTINFO("SUBS","RPOST").data() do addcode^DBSRWUTL(3,"do VRPOST"_TABCHR_"// Report Post-Processor")
		do addcode^DBSRWUTL(3,"}")
		do addcode^DBSRWUTL(2,"}")

		do addcode^DBSRWUTL(0,"")

		do addcode^DBSRWUTL(1,"if 'VFMQ,vcrt set PN=-1 do ^DBSRWBR(2)")
		do addcode^DBSRWUTL(1,"if 'VRWOPT(""NOCLOSE"").get() do CLOSE^SCAIO")
		do addcode^DBSRWUTL(1,"do Db.delete(""TMPRPTBR"",""JOBNO=:%ProcessID"")"_9.char()_"// Report browser data")
		
		do addcode^DBSRWUTL(0,"")

		do addcode^DBSRWUTL(1,"quit")
		do addcode^DBSRWUTL(0,"")

		}

	// Set up code for print section
	do {
		type Number I
		type String CODE,SEC

		set CODE=""
		for I=1:1:10 if RPTINFO("FMT",I).data() set CODE=CODE_",vskp("_I_")=1"
		do addcode^DBSRWUTL(0,"VPRINT"_TABCHR_"// Print section")
		do addcode^DBSRWUTL(1,"type public Number VD(),VFMQ,VH0,vh(),VNEWHDR,VR,VRG,VRWOPT,VSEQ")
		
		do addcode^DBSRWUTL(1,"type Number vskp()")
		do addcode^DBSRWUTL(0,"")
		if CODE'="" do addcode^DBSRWUTL(1,"if VRWOPT(""NODTL"").get() set "_CODE.extract(2,CODE.length())_TABCHR_"// Skip detail")
		do addcode^DBSRWUTL(1,"do VBREAK")
		if RPTINFO("LASTLVL")>1 do addcode^DBSRWUTL(1,"do VSUM quit:VFMQ")
		do addcode^DBSRWUTL(0,"")

		// PRINT Pre-Processor
		if RPTINFO("SUBS","PRNT").data() do addcode^DBSRWUTL(1,"do VPRNT quit:VFMQ"_TABCHR_"// Print pre-processor")

		do addcode^DBSRWUTL(1,"if VH0.get() set vh(0)=0,VNEWHDR=1 kill VH0"_TABCHR_"// Page Break")
		do addcode^DBSRWUTL(1,"if 'vh(0) do VHDG0 quit:VFMQ")

		for I=1:1:RPTINFO("LASTLVL") for SEC="H","D" if RPTINFO("DSP",I,SEC).data() do {
			if SEC="H" do {				// VHDGn
				do addcode^DBSRWUTL(1,"do VHDG"_I_" quit:VFMQ")
			} 
			else  do {
								// VDTLn
				if RPTINFO("REPEATSIZE"), (RPTINFO("REPEATGRPLVL") = I) do addcode^DBSRWUTL(1,"set VR=VR+1,(VRG,VSEQ)=1"_TABCHR_"// Repeat field")
				do addcode^DBSRWUTL(1,"if 'vskp("_I_").get() do VDTL"_I_" quit:VFMQ")
			}
		}

		do addcode^DBSRWUTL(1,"do VSTAT")
		
		do addcode^DBSRWUTL(1,"quit")
		do addcode^DBSRWUTL(0,"")
	}
	
	quit

CONV(	String RPTINFO(,,,),		// Private - Generate PSL code
	String ddmap())

	/* From RPTINFO("FMT" array, convert into PSL code to be inserted into generated
	   source code.  Return PSL code in RPTINFO("DSP" array.

		RPTINFO("FMT",0)=total levels | total unique data item functions
		RPTINFO("FMT",0,DINAM)=stat
		RPTINFO("FMT",level,section,linecol)=fmt|size|variable|prep seq|postp seq
	*/

	type Number LINE
	type String LVL,SEC

	set (LINE,LVL,SEC)="",LVL=0
	for  set LVL=RPTINFO("FMT",LVL).order() quit:LVL=""  do {
		set RPTINFO("DSP",LVL)=RPTINFO("FMT",LVL)
		for  set SEC=RPTINFO("FMT",LVL,SEC).order() quit:SEC=""  do {
			for  set LINE=RPTINFO("FMT",LVL,SEC,LINE).order() quit:LINE=""  do {
				type Number DECIMALS,ISCONST,ISDINAM,LN,POST,PREP,TAB
				type String CODE,FMAT,REF,SIZE,VAR,VAR1,X,Z
				set LN=LINE\1000,TAB=LINE#1000
				set X=RPTINFO("FMT",LVL,SEC,LINE)
				set FMAT=X.piece("|",1)
				set SIZE=X.piece("|",2)
				set VAR=X.piece("|",3).translate(128.char(),"|")	// Restore "|"
				set PREP=X.piece("|",4)
				set POST=X.piece("|",5)

				if FMAT="M" set RPTINFO("MEMOS")=1

				set ISDINAM=$$isdi^DBSRWUTL(VAR)
				set VAR1=VAR.extract(1)

				// ~ = variable  @ = function  [ = data item
				set ISCONST=1
				if "+-"[VAR1,VAR?.E1"["1A.AN1"]"1E.E set ISCONST=0
				if VAR1="[",ISDINAM set ISCONST=0		// dinam
				else  if VAR1="@" do {				// @function
					set (ISCONST,ISDINAM)=0
					set REF="V"
					}
				else  if VAR1="~" do {				// ~variable
					set (ISCONST,ISDINAM)=0
					set REF=VAR.extract(2,VAR.length())
					if REF'?.E1"_["1E.E1"]"1E.E quit	// ~variable
					set REF=$$MIXED(REF,ddmap())		// convert [FID]DI
					}
				if ISDINAM set REF=$$map^DBSRWUTL(VAR,ddmap(),1)	// [fid]di -> vn

				set DECIMALS=""
				if FMAT="$" set DECIMALS=2

				if ISCONST do {					// String data
					set CODE=""""_VAR_""""
					set REF=CODE
					}
				else  do {
					if '$$ISVAR(VAR),FMAT'="M" set CODE=REF
					else  set CODE=$$FMT(FMAT,SIZE,LINE,DECIMALS,REF)
					}
				if CODE.extract(1)="~" set CODE=CODE.extract(2,Z.length())
				set Z=CODE					// Formatted reference
				if PREP!POST do {				// Save value in V and VO
					set Z=""
					if REF?1"vc".E do {
						set Z="set V="_REF_",VO=V "
						// Formatted reference to V
						set CODE=CODE.piece(REF,1)_"V"_CODE.piece(REF,2,9)
						}
					if PREP set Z=Z_"do VP"_PREP_" quit:VFMQ!verror.get()  "
					// Data item protection
					if RPTINFO("RESFLG") set CODE=$$PROT(VAR,SIZE,CODE,RPTINFO(,,,),ddmap())
					set Z=Z_"set V="_CODE_" "		// Formatted value
					if POST set Z=Z_"do VP"_POST_" quit:VFMQ!verror.get()  "
					}
				// Data item protection, if no pre/post-processor
				else  if RPTINFO("RESFLG") set Z=$$PROT(VAR,SIZE,Z,RPTINFO(,,,),ddmap())
				set RPTINFO("DSP",LVL,SEC,LN,TAB)=Z
				}
			}
		}
	quit


PROT(	String DINAM,		// Private - Data item protection logic
	Number LENGTH,
	String CODE,
	String RPTINFO(,,,),
	String ddmap())

	/* Notes on protection:

	   If protection option (DBTBL5H.RESFLG) = 1, then the data is returned
	   so that it can be used in totals, etc., but displays as *****'s.
	   If protection option = 2, then the data is returned as null and
	   displays as *****'s.

	   This section returns code to display a protected column as *****'s.
	*/

	type String ASTRSKS,TC,VARNAM,X

	set ASTRSKS="",ASTRSKS.piece("*",LENGTH+1)=""		// Display ******
	if '$$validtcr^DBSRWUTL(DINAM,.TC) quit CODE		// Leave it alone if not data
	do STATUS^UPID(TC.piece(".",1),TC.piece(".",2),.X)	// Check protection status
	if 'X quit CODE						// No protection on this data
	set VARNAM="vp"_ddmap(TC).extract(3,8)			// Variable name for protection flag
	do addvars^DBSRWUTL("VPTYPE",VARNAM,RPTINFO(,,,))
	set X="$S("_VARNAM_"=3:"_""""_ASTRSKS.extract(1,LENGTH)_""""_",1:"_CODE_")"

	quit X


FMT(	String TYP,				// Private - Format Value
	Number L,
	Number LINE,
	Number DEC,
	String VAL)

	type String CODE
	
	if TYP="M" quit "$$MEMO("_VAL_","_LINE_","_L_")"

	if TYP["$",'DEC.get() set DEC=2
	set CODE=$$fmtstr^DBSRWUTL(L,TYP,DEC)
	quit $$replace^DBSRWUTL(CODE,"V",VAL)	// Replace V with VAL


MEMO	// Private - Set up code to print memo - break across lines if necessary

	/* If displaying a memo field and want to use blank line suppress, it
	   is necessary to use a pre-processor on the memo field and set the
	   value of V to null.  Simply setting the line to null on a post-
	   processor on the last column won't work as the memo field is printed
	   over multiple lines.
	*/

	type String CODE,TABCHR
	
	set TABCHR=9.char()
	
	set CODE="MEMO(String MEMO,Number LINE,Number SIZE)"
	set CODE=CODE_TABCHR_"// Print all lines of memo, except last - return it in V"
	
	do addcode^DBSRWUTL(0,CODE)
	
	do addcode^DBSRWUTL(0,"")

	do addcode^DBSRWUTL(1,"type public Number IOSL,VFMQ,VLC")
	do addcode^DBSRWUTL(1,"type public String VL")
	do addcode^DBSRWUTL(1,"type Number I,TAB,VLLEN")
	do addcode^DBSRWUTL(1,"type String X")
	
	do addcode^DBSRWUTL(0,"")
	
	do addcode^DBSRWUTL(1,"set TAB=(LINE#1000)-1"_TABCHR_"// Location")
	
	do addcode^DBSRWUTL(1,"set MEMO=MEMO.trim()")
	
	// If fits as is, just return it
	do addcode^DBSRWUTL(0,"")
	do addcode^DBSRWUTL(1,"if MEMO.length()'>SIZE quit MEMO")
	do addcode^DBSRWUTL(0,"")
		
	// Otherwise, break into SIZE pieces, at spaces -- return last part
	// VLLEN ensure correct leading padding for returned value
	do addcode^DBSRWUTL(2,"set VLLEN = VL.length()")
	
	do addcode^DBSRWUTL(1,"for  do { quit:VFMQ!(MEMO="""")")
	do addcode^DBSRWUTL(2,"set X=MEMO.extract(1,SIZE)")
	do addcode^DBSRWUTL(2,"if X["" "" do {")
	do addcode^DBSRWUTL(3,"for I=SIZE:-1:1 quit:X.extract(I)="" """)
	do addcode^DBSRWUTL(3,"set X=X.extract(1,I-1)")
	do addcode^DBSRWUTL(2,"}")
	do addcode^DBSRWUTL(2,"set MEMO=MEMO.extract(X.length()+1,MEMO.length())")
	do addcode^DBSRWUTL(2,"set X=X.trim()")
	do addcode^DBSRWUTL(2,"set MEMO=MEMO.trim() quit:MEMO.isNull()")
	do addcode^DBSRWUTL(2,"// Print this portion")
	do addcode^DBSRWUTL(2,"if VLC+1>IOSL do VHDG0 if VFMQ set VFMQ=1 quit")
	do addcode^DBSRWUTL(2,"set VL=VL_"""".justify(TAB-VL.length())_X do VOM")
	do addcode^DBSRWUTL(2,"set VL="""".justify(TAB)")
	do addcode^DBSRWUTL(1,"}")
	do addcode^DBSRWUTL(1,"set VL="""".justify(VLLEN)")
	do addcode^DBSRWUTL(1,"quit X")
	
	do addcode^DBSRWUTL(0,"")
	
	quit 


SETSTATS(RecordDBTBL5H dbtbl5h,		// Private - return STAT array
	String RPTINFO(,,,))

	type String trgt

	set trgt=dbtbl5h.stattrgt1 quit:trgt=""
	do SETSTAT(1,dbtbl5h.statsrc1,trgt,dbtbl5h.statinc1,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt2 quit:trgt=""
	do SETSTAT(2,dbtbl5h.statsrc2,trgt,dbtbl5h.statinc2,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt3 quit:trgt=""
	do SETSTAT(3,dbtbl5h.statsrc3,trgt,dbtbl5h.statinc3,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt4 quit:trgt=""
	do SETSTAT(4,dbtbl5h.statsrc4,trgt,dbtbl5h.statinc4,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt5 quit:trgt=""
	do SETSTAT(5,dbtbl5h.statsrc5,trgt,dbtbl5h.statinc5,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt6 quit:trgt=""
	do SETSTAT(6,dbtbl5h.statsrc6,trgt,dbtbl5h.statinc6,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt7 quit:trgt=""
	do SETSTAT(7,dbtbl5h.statsrc7,trgt,dbtbl5h.statinc7,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt8 quit:trgt=""
	do SETSTAT(8,dbtbl5h.statsrc8,trgt,dbtbl5h.statinc8,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt9 quit:trgt=""
	do SETSTAT(9,dbtbl5h.statsrc9,trgt,dbtbl5h.statinc9,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt10 quit:trgt=""
	do SETSTAT(10,dbtbl5h.statsrc10,trgt,dbtbl5h.statinc10,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt11 quit:trgt=""
	do SETSTAT(11,dbtbl5h.statsrc11,trgt,dbtbl5h.statinc11,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt12 quit:trgt=""
	do SETSTAT(12,dbtbl5h.statsrc12,trgt,dbtbl5h.statinc12,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt13 quit:trgt=""
	do SETSTAT(13,dbtbl5h.statsrc13,trgt,dbtbl5h.statinc13,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt14 quit:trgt=""
	do SETSTAT(14,dbtbl5h.statsrc14,trgt,dbtbl5h.statinc14,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt15 quit:trgt=""
	do SETSTAT(15,dbtbl5h.statsrc15,trgt,dbtbl5h.statinc15,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt16 quit:trgt=""
	do SETSTAT(16,dbtbl5h.statsrc16,trgt,dbtbl5h.statinc16,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt17 quit:trgt=""
	do SETSTAT(17,dbtbl5h.statsrc17,trgt,dbtbl5h.statinc17,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt18 quit:trgt=""
	do SETSTAT(18,dbtbl5h.statsrc18,trgt,dbtbl5h.statinc18,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt19 quit:trgt=""
	do SETSTAT(19,dbtbl5h.statsrc19,trgt,dbtbl5h.statinc19,RPTINFO(,,,))
	set trgt=dbtbl5h.stattrgt20 quit:trgt=""
	do SETSTAT(20,dbtbl5h.statsrc20,trgt,dbtbl5h.statinc20,RPTINFO(,,,))
	quit
		
SETSTAT(Number SEQ,		// Private - Return STAT array
	String SRC,
	String TRGT,
	String INC,
	String RPTINFO(,,,))

	// Returns STAT(SEQ) = Source | Format | Target | Increments

	type String DATA=""

	quit:TRGT=""

	set DATA.piece("|",1)="["_SRC.piece(",",2)	// Remove library
	set DATA.piece("|",2)=$$TYP^DBSDD(SRC)		// Get format
	set DATA.piece("|",3)="["_TRGT.piece(",",2)
	set DATA.piece("|",4)=INC.translate(",","|")
	set RPTINFO("STAT",SEQ)=DATA

	quit

MIXED(String INPUT,	// input string with mixed string and [fid]di
	String ddmap())	// data item map
	/*  Private - Convert mixed format
	Convert "string"_[fid]di,fmt,len_"string" or 
	"string"_table.column,fmt,len_"string" to internal reference, i.e.,
	replace [fid]di or table.column with variable name and with proper 
	formatting.

	ARGUMENTS:
		. INPUT		Input string with	/REQ/MECH=VAL
				mixed string and [fid]di

		. ddmap		Data item map		/REQ/MECH=REF:RW

	RETURN:
		. $$        	Converted string

	EXAMPLE:
		original string   "ACCOUNT"_[DEP]CID_" CLOSED"
		converted format  "ACCOUNT"_vc1_" CLOSED"
	*/

	type Number I,LEN
	type String FMT,REF,RETURN,TYPE,X

	set RETURN=""
	for I=1:1:INPUT.length("_") do {
		set X=INPUT.piece("_",I) quit:X=""
		set FMT=X.piece(",",3,X.length()),X=X.piece(",",1)
		if '$$validtcr^DBSRWUTL(X) set RETURN=RETURN_X		// String
		else  do {
			set REF=$$map^DBSRWUTL(X,ddmap(),1)
			if FMT'="" do {
				set TYPE=X.piece(",",2)
				set LEN=X.piece(",",3)
				set REF=$$FMT(TYPE,LEN,"","",X)
				}
			set RETURN=RETURN_REF
			}
		set RETURN=RETURN_"_"
		}

	quit RETURN.extract(1,RETURN.length()-1)


BLDGETD(String ddmap(),		// Private - Build VGETDATA section
	String RPTINFO(,,,))

	// Creates code to load data for a single row into mapped variables

	type Number I,LINENO
	type String CODE,TC,TYPE,VARNAME,X

	do addcode^DBSRWUTL(0,"VGETDATA(String V,String VI)"_9.char()_"//")

	do addcode^DBSRWUTL(1,"// Placeholder for type public",.LINENO)
	set TYPE=""

	for I=1:1:ddmap(0)-1 do {
		set TC=ddmap(I)
		set VARNAME=ddmap(TC)
		set TYPE=TYPE_VARNAME_","
		set CODE="set "_VARNAME_"=V.piece(9.char(),"_I_")"_9.char()_"// "_TC
		do addcode^DBSRWUTL(1,CODE)
		// If protection logic on, set protection indicator variables
		if RPTINFO("RESFLG") do {
			// Check protection status for this column
			do STATUS^UPID(TC.piece(".",1),TC.piece(".",2),.X)
			if X do {
				set VARNAME="vp"_VARNAME.extract(3,8)
				set TYPE=TYPE_VARNAME_","
				do addvars^DBSRWUTL("VPTYPE",VARNAME,RPTINFO(,,,))
				set CODE="set "_VARNAME_"=VI.extract("_I_")"_9.char()_"// Protection indicator"
				do addcode^DBSRWUTL(1,CODE)
				}
			}
		}

	do addcode^DBSRWUTL(1,"quit")
	do addcode^DBSRWUTL(0,"")
	
	set CODE = TYPE.extract(1,TYPE.length()-1)
	for  do { quit:CODE.isNull()
		do addcode^DBSRWUTL(1,"type public String "_CODE.piece(",", 1, 100), LINENO)
		set CODE = CODE.piece(",", 101, CODE.length())
		set LINENO = LINENO + .01
	}

	quit


BLDLOAD(String TCREF,		// Private - Build code to save last access keys
	String CODE1,
	String CODE2,
	String RPTINFO(,,,),
	String ddmap())

	type String TC

	quit:TCREF=""
	quit:'$$validtcr^DBSRWUTL(TCREF,.TC)
	quit:'ddmap(TC).exists()
	set CODE1=CODE1_",vo"_ddmap(TC)_"="""""		// voc = v "old"
	set CODE2=CODE2_",vo"_ddmap(TC)_"="_ddmap(TC)
	do addvars^DBSRWUTL("V0TYPE","vo"_ddmap(TC),RPTINFO(,,,))
	quit


BLDSELCT(String ddmap(),	// Build Db.select code
	 String RPTINFO(,,,),
	 Number TABLVL)

	type Number DYNWHERE,I
	type String CODE,FILES(),FROM,ORDER,PARAMS,SELECT,WHERE

	for I=1:1:RPTINFO("TABLES").length(",") set FILES(RPTINFO("TABLES").piece(",",I))=""

	// Build order by
	set ORDER=""
	for I=1:1:RPTINFO("LASTLVL") do {
		type String COLUMN,TABLE,TC,X

		set X=RPTINFO("SEQBY",I,"COL")
		quit:'$$validtcr^DBSRWUTL(X,.TC) 
		set ORDER=ORDER_","_TC
		if RPTINFO("SEQBY",I,"SORTORD")="D" set ORDER=ORDER_" DESC"
		}

	set RPTINFO("ORDERBY")=ORDER.extract(2,ORDER.length())

	set SELECT=""
	for I=1:1 quit:'ddmap(I).exists()  do {
		type String TC
		set TC=ddmap(I)
		if 'FILES(TC.piece(".",1)).data() write !,"Invalid column: ",ddmap(I)
		set SELECT=SELECT_TC_","
		}
	set SELECT=SELECT.extract(1,SELECT.length()-1)
	set RPTINFO("SELECT")=SELECT

	set FROM=ddmap.addQuotes()

	// WHERE="" => dynamic query, i.e., will construct at run-time
	set WHERE=RPTINFO("WHERE")

	set CODE="type ResultSet rwrs=Db.select("
	// dynamic SQL
	if ((WHERE="")&RPTINFO("QUERIES"))!RPTINFO("DYNORDERBY")!RPTINFO("DYNWHERE") do {
		set CODE=CODE_"VSELECT,"_FROM_",VWHERE,"
		set DYNWHERE=1
		}
	else  do {
		set CODE=CODE_""""_SELECT_""","_FROM_","_WHERE.addQuotes()_","
		set DYNWHERE=0
		}

	if 'RPTINFO("DYNORDERBY") set CODE=CODE_""""_RPTINFO("ORDERBY")_""""
	else  set CODE=CODE_"vorder"

	set PARAMS="DQMODE=1"						// Handle joins
	// Data item protection
	if RPTINFO("RESFLG") set PARAMS=PARAMS_"/PROTECTION="_RPTINFO("RESFLG")

	set CODE=CODE_","""","""_PARAMS_""")"

	// Open pre-processor
	if 'RPTINFO("SUBS","OPRE","").order().isNull() do addcode^DBSRWUTL(TABLVL,"do VOPRE if VFMQ do VEXIT(0) quit")

	// If generating dynamic SQL set up SELECT list at run time to avoid line
	// getting too long in routine.

	if DYNWHERE do {
		type String VSELECT=SELECT

		do addcode^DBSRWUTL(0,"")

		if VSELECT.length()'>50 do addcode^DBSRWUTL(TABLVL,"set VSELECT="_VSELECT.addQuotes())
		else  do {
			do addcode^DBSRWUTL(TABLVL,"set VSELECT=""""")
			for  do { quit:VSELECT=""
				do addcode^DBSRWUTL(TABLVL,"set VSELECT=VSELECT_"_VSELECT.extract(1,50).addQuotes())
				set VSELECT=VSELECT.extract(51,VSELECT.length())
				}
			}
		do addcode^DBSRWUTL(0,"")
		}

	// If dynamic order by or user input where clause, set up default WHERE clause
	// and make sure vorder is defined
	if RPTINFO("DYNORDERBY")!RPTINFO("DYNWHERE") do {
		type String WHERE=RPTINFO("WHERE")

		if WHERE.length()'>50 do addcode^DBSRWUTL(TABLVL,"set VWHERE="_WHERE.addQuotes())
		else  do {
			do addcode^DBSRWUTL(TABLVL,"set VWHERE=""""")
			for  do { quit:WHERE=""
				do addcode^DBSRWUTL(TABLVL,"set VWHERE=VWHERE_"_WHERE.extract(1,50).addQuotes())
				set WHERE=WHERE.extract(51,WHERE.length())
				}
			}
		if RPTINFO("DYNORDERBY") do addcode^DBSRWUTL(TABLVL,"if 'vorder.exists() set vorder="""_RPTINFO("ORDERBY")_"""")
		if RPTINFO("DYNWHERE") do addcode^DBSRWUTL(TABLVL,"if vudwhere.exists() set VWHERE=vudwhere")
		}

	// Add accept to avoid compiler warning on dynamic where clause
	if DYNWHERE do addcode^DBSRWUTL(TABLVL,"#ACCEPT DATE="_%CurrentDate.toString()_";PGM=Report Writer Generator;CR=20967")

	do addcode^DBSRWUTL(TABLVL,CODE)
	do addcode^DBSRWUTL(TABLVL,"#ACCEPT Date=10/13/2008;Pgm=RussellDS;CR=35741;Group=READ")
	do addcode^DBSRWUTL(TABLVL,"if ER.get() use 0 write $$MSG^%TRMVT(RM.get(),"""",1)"_9.char()_"// Debug Mode")
	// Open post-processor
	if 'RPTINFO("SUBS","OPOST","").order().isNull() do addcode^DBSRWUTL(TABLVL,"do VOPOST if VFMQ do VEXIT(0) quit")
	quit


ISVAR(String X)	// Private - Return 1 if X is a valid variable name

	type Number OK=0

	if X.extract(1)'="~" set OK=1
	else  do {
		if X["(",X[")",X'["$" set X=X.piece("(",1)
		if X?1"~"1AN.AN!(X?1"~%".AN) set OK=1
		}
	quit OK
 #OPTION ResultClass ON
public String vSIG()	quit "61431^64028^Dan Russell^34906"	// Signature - LTD^TIME^USER^SIZE
