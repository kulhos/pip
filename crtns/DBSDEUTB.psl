DBSDEUTB	// General Purpose Screen Driver
	/*
	DESC:  Generates procedure DBSDEUTA - compiled table maintenance
	
	---- Comments ---------------------------------------------------------
	This procedure generates DBSDEUTA which has two purposes.
	
	Entry from the top of DBSDEUTA, for screens that use the generic
	screen driver DBSDEUTL. DBSDEUTA contains the necessary code to load the 
	data from the database for all tables defined on the screen control page, call
	the screen, and perform the necessary updates.
	
	
	This procedure can be run independently to build DBSDEUTA, and is also
	rebuilt whenever DBSDEUTL is rebuilt through an XECUTE command in that
	procedure.
	      
	RETURNS:
		. ER		Error indicator		/TYP=L
				 0 = no error
				 1 = no error
				 
		. RM		Error message		/TYP=T
		
	
	---- Notes ------------------------------------------------------------
	
	The following is the argument definition section for the generated
	procedure DBSDEUTA if entered at the top.
	
	ARGUMENTS:
		. SID		DQ Screen Name		/REQ/MECH=VAL:R
				
		. ProcMode	Process mode (0,1,3)	/REQ/MECH=VAL:R
		
		. KEY()		List of values for the	/REQ/MECH=REF:R
				keys to the table
				
		. FPRE		Filer Pre-processor	/NOREQ/MECH=VAL:R
 
	RETURNS:
		. $$		Error message,		/TYP=T
				null indicates
				no error
				
				
	------ Revision History -----------------------------------------------
	
	06/19/2008 - RussellDS - CR30801
		Removed call to BUILDRTN^UCGM and replaced cmpA2F^PSLC.
		
		Modify use of SCATBL to ResultSet to avoid bootstrap
		problems.
		
		Fixed numerous PSL warnings in generated code.
		
		Removed use of ^MSG to avoid bootstrap issues.
		
		Removed old revision history.
	
	03/04/07 - RussellDS - CR25558
		   Added check of ER in generated code when return from screen
		   call in generated.
		   
		   Fixed PSL warnings in generated code.
	-----------------------------------------------------------------------
	*/
	
	// I18N=OFF


	/* Build array of screen names that are called by DBSDEUTL.  This will be
	   based on the Profile function table, SCATBL, and will include all screen
	   names that are called by the DQ utility program DBSDEUTL.  */
	   
	type public String fsn()
	type String pgm,sid,sidarray()
	type Number ID = 0
	type Number i
	
	type ResultSet rs = Db.select("PGM", "SCATBL", "PGM LIKE '%DBSDEUTL%'")
	while rs.next() do {
		
		set pgm = rs.getCol("PGM")
		set sid = pgm.piece(",",2).piece(")",1)
		set sid = sid.stripQuotes()
		if sid.isNull() quit
		if 'Db.isDefined("DBTBL2","LIBS='SYSDEV',SID=:sid") quit
		set sidarray(sid) = ""
	}
 
 	/* In addition to these screens that are called explicitly by functions, 
 	   there are some other screens that use DBSDEUTL but are not called directly
 	   from a function - these are mainly DATA-QWIK screens such as DBTBL25.  Add
 	   these to this sidarray.  */
 	set sidarray("DBTBL25")=""	// DQ Procedure Screen
	 
 	type public Number ER = 0
	type public String RM = ""
		
	type String CMPERR(),CODE,FILES,pfid,pslcode(),TAB,TBLLIST()
	
	set ID = 1
	set TAB = 9.char()

	do addcode(0 ,"private DBSDEUTA(String SID, Number ProcMode, String KEY(),String FPRE)"_TAB_"// Generic Screen Driver")
	do addcode(1, "// Last compiled:  "_%CurrentDate.toString()_" "_%CurrentTime.toString()_" - "_%UserName)
	do addcode(0, "")
	do addcode(1, "// THIS IS A COMPILED ROUTINE.  Compiled by procedure DBSDEUTB")
	do addcode(0, "")
	do addcode(1, "// See DBSDEUTB for argument definitions")
	do addcode(0, "")
	
	do addcode(1, "type String ERMSG, SCREEN, TABLE")
	do addcode(1, "set FPRE = FPRE.get()")
	do addcode(0, "")
	do addcode(0, "")
	
	// Assign IDs and build call section
	set sid = ""
	set ID=0
	for  set sid = sidarray(sid).order() quit:sid.isNull()  do {
		
		set ID = ID + 1		
		set CODE = "if SID = """_sid_""" quit $$gf"_ID_"(ProcMode, .KEY(), FPRE)"
		if (ID > 1) set CODE = "else  "_CODE
		do addcode(1, CODE)
	}
	
	do addcode(0, "")
	do addcode(1, "quit ""Screen ""_SID_"" not permitted to run via this function""")
	do addcode(0, "")
	do addcode(1, "// Generic Functions for each screen")
	
	// Build section for each screen.
	
	set ID = 0
	set sid = ""
	for  set sid = sidarray(sid).order() quit:sid.isNull()  do {
		
		type Number I, KEYCNT
		type String ACCKEYS, fid, KEYLIST, KEYLISTA(), KEYLISTG, objects(), objparms, TABLE
		
		do addcode(0, "")
		do addcode(0, "")
		
		type RecordDBTBL2 dbtbl2 = Db.getRecord("DBTBL2","LIBS = ""SYSDEV"", SID = :sid")
		set ID = ID + 1

		do addcode(0, "")
		do addcode(0, "")
		do addcode(0, "gf"_ID_"(ProcMode, String KEY(), String FPRE)  // "_sid_" - "_dbtbl2.desc)
		do addcode(0, "")
		do addcode(1, "type public String VFMQ")
		do addcode(0, "")
		do addcode(1, "type Number ER = 0")
		do addcode(1, "type String ERMSG, RM")
		do addcode(0, "")
		do addcode(1, "set (ERMSG, RM, VFMQ) = """"")
		do addcode(0,"")
		
		set pfid = dbtbl2.pfid.piece(",",1)	// primary file def
		if 'Db.isDefined("DBTBL1","%LIBS='SYSDEV',FID=:pfid") do { quit
			do addcode(1, "set ER=1")
			do addcode(1, "quit ""Invalid Table: "_pfid_"""")
		}
		
		type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1","%LIBS=""SYSDEV"",FID=:pfid")

		// Build access key list
		set KEYCNT = $$KEYINFO(dbtbl1.acckeys, "", "", .KEYLIST)
		set KEYLISTG = KEYLIST.replace(" AND", ", ")

		do addcode(1, "type RecordDBTBL2 dbtbl2 = Db.getRecord(""DBTBL2"",""LIBS='SYSDEV',SID='"_sid_"'"",1)")
		do addcode(1, "if 'dbtbl2.getMode() set ER = 1,ERMSG=""Invalid Screen Name"" quit ERMSG")
		do addcode(1, "if 'dbtbl2.cscmp set ER = 1, ERMSG = ""Screen must be converted to PSL"" quit ERMSG") 

		
		set FILES = dbtbl2.pfid
		set objects = ""
		
		/* Note that the logic below assumes that the generic screen driver only prompts
		   for the keys of the highest level table on the screen definition (i.e., the primary
		   file def).  If there are additional tables on the screen with descending level keys,
		   these objects must be instantiated using selectDbSet and getRecord into an array
		   of objects prior to calling the screen.						*/

		 set objects = objects_",."_dbtbl1.fsn
		 set objparms = objects
		 do addcode(1, "type Record"_pfid_" "_dbtbl1.fsn_" = Db.getRecord("""_pfid_""","""_KEYLISTG_""",1)")
		 
		 if FILES.length(",") > 1 do {		// instantiate descending level tables
		 	
		 	do addcode(1, "type Number i")
		 	
		 	for i=2:1:FILES.length(",") do {
		 		
		 		type String keylista, X
		 		
		 		set fid = FILES.piece(",",i)
		 		type RecordDBTBL1 dbtbl1a = Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:fid")
				set objects = objects_",."_dbtbl1a.fsn
				set objparms = objparms_",."_dbtbl1a.fsn_"1a()"
				set X = $$KEYINFO(dbtbl1a.acckeys, "", "", .keylista)
				set KEYLISTA(fid)=keylista.piece(" AND ", 1, KEYCNT) 
				do addcode(1, "type Record"_fid_" "_dbtbl1a.fsn_"1a()")
				do addcode(1, "set i = 0")
				do addcode(1, "type DbSet ds"_i_" = Db.selectDbSet("""_fid_""","""_KEYLISTA(fid)_""")")
				do addcode(1, "while ds"_i_".next() do {")
				do addcode(2, "set i = i + 1")
				do addcode(2, "set "_dbtbl1a.fsn_"1a(i) = ds"_i_".getRecord()")
				do addcode(1, "}")
		 	}
		 }
				
		
		if objects.extract(1) = "," do {
			set objects = objects.extract(2,9999)
			set objparms = objparms.extract(2,9999)
		}
	
		do addcode(1, "#ACCEPT Date=03/04/07; Pgm=RussellDS; CR=25558; Group=MISMATCH")
		do addcode(1, "do DRV^USID(ProcMode, """_sid_""", "_objparms_")")
		do addcode(0, "")
		do addcode(1, "if 'ER, (VFMQ '= ""Q"") do {")
		do addcode(0, "")
		do addcode(2, "#ACCEPT Date=01/20/05;PGM=Screen Compiler;CR=14146")
		do addcode(2, "if 'FPRE.isNull() xecute FPRE if ER quit")
		do addcode(0, "")
		type String objptr
		set objptr = objects.piece(",",1).extract(2,9999)
		do addcode(2, "if ProcMode < 2,"_objptr_".isChanged() do "_objptr_".save()")
		do addcode(2, "if ProcMode = 3 do Db.delete("""_FILES.piece(",",1)_""","""_KEYLIST_""")")

		
		// Now save all repeat region objects to disk
		for i=2:1:objects.length(",") do {
						
			type String bkey,fid,keys,objptr
			
			if (i = 2) do addcode(2, "type Number done")
			
			set fid = FILES.piece(",",i)
			do fsn^DBSDD(fsn(),fid)
			set keys = fsn(fid).piece("|",3)
			set bkey = keys.piece(",",keys.length(","))	//bottom level key

			set objptr = objects.piece(",",i).extract(2,9999)_ "1a"
			// delete all rows first, then refresh database from object array
			do addcode(2, "do Db.delete("""_FILES.piece(",",i)_""","""_KEYLISTA(FILES.piece(",",i))_""")")
			do addcode(2, "set done = 0")
			do addcode(2, "set i = """"")
			do addcode(2, "for  set i = "_objptr_"(i).order() quit:i.isNull()  do {")
			/*do addcode(3, "if '"_objptr_"(i).exists() set done = 1 quit") */
			/* if bottom level key is not defined, don't process this one */
			do addcode(3, "#ACCEPT Date=06/19/2008; Pgm=Russellds; CR=30801; Group=SCOPE")
			do addcode(3, "if "_objptr_"(i)."_bkey.lowerCase()_" = """" quit")
			do addcode(3, "if ProcMode < 2 do "_objptr_"(i).setMode(0) do "_objptr_"(i).save()")
			do addcode(3, "if ProcMode = 3 do Db.delete("""_FILES.piece(",",i)_""","""_KEYLISTA(FILES.piece(",",i))_""")")
			do addcode(2, "}")
		}


		do addcode(1, "}")
		do addcode(0, "")
		do addcode(1, "if ER set ERMSG = RM.get()")
		do addcode(0, "")
		do addcode(1, "quit ERMSG")
	}
	
	set CMPERR=$$cmpA2F^PSLC(pslcode(), , "DBSDEUTA", CMPERR(), "")
	if CMPERR.data() do {
		
		type String N = ""

		for  set N=CMPERR(N).order() quit:N=""  do {
			if 'ER set ER = 1, RM = CMPERR(N)
			write CMPERR(N),!
		}
	}
	
	quit
	
 
 
private KEYINFO(String acckeys,		// Get key information
	String fid,
	String select,
	String where)
	
	/*
	ARGUMENTS:
		. acckeys	DBTBL1.ACCKEYS		/REQ/MECH=VAL
		. fid		DQ table name		/NOREQ/MECH=VAL
		. select	Select list		/NOREQ/MECH=REF:W
		. where		Where clause		/NOREQ/MECH=REF:W
		
	If don't pass fid, won't append to select and where.  Don't pass if
	building those for Db.delete or Db.delete or Db.getRecord
	*/
	
	type Number I, keycnt
	type String key
	
	if 'fid.get().isNull() set fid = fid_"."
	
	set keycnt = 0
	set (select, where) = ""
	
	set acckeys=$$TOKEN^%ZS(acckeys)
	for I=1:1:acckeys.length(",") do {
		
		set key = acckeys.piece(",",I)
		quit:key?1.N				// Ignore numeric keys
		quit:key.extract(1)=0.char()		// Ignore literal strings
			
		set keycnt = keycnt + 1
		
		// Note:  Append fid to avoid problems with column names,
		//   e.g., STBLIRSTAPE2.GROUOP
		set select = select_fid_key_","
		set where = where_fid_key_" = :KEY("_keycnt_") AND "
	}
	
	set select = select.extract(1, select.length()-1)
	set where = where.extract(1,where.length()-5)
				
	quit keycnt


private addcode(Number TABS,		// Add new line to CODE array
	String CODE)
		
	/*
	ARGUMENTS:
		. TABS		Number of tabs to add		/REQ/MECH=VAL
		
		. CODE		Code to add to array		/REQ/MECH=VAL
	*/

	type public String pslcode()
	
	type Number I, LINENO
	
	set LINENO = pslcode("").order(-1) + 1 	// Add to end
	
	if TABS for I = 1:1:TABS set CODE=9.char()_CODE
	
	set pslcode(LINENO) = CODE

	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61239^41321^Dan Russell^10630"	// Signature - LTD^TIME^USER^SIZE
