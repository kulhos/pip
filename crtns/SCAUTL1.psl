	/*
	ORIG: Allan Mattson
	DESC: Sanchez Utilities
	 
	This procedure builds a list of global names that qualify
	for GT.M NOISOLATION and compiles program NOISO.  ^NOSIO
	turns the NOISOLATION feature 'on' for the qualifying
	globals.
	
	Refer to the 'GT.M Programmer's Guide' for a discussion on
	the performance benefits of NOISOLATION. 

	---- Revision History ------------------------------------------------
 
 	01/04/06 - RussellDS - CR18765
		   Replace $ZVN reference with $ZVERSION.
		   
		   Added #ACCEPT in COMPILE section to avoid warning on #BYPASS.
 
	12/20/04 - KELLYP - CR 13667
		   Removed reference to XTRN.  This table has been obsoleted.
 
	----------------------------------------------------------------------
	*/
	
	quit
	
	
public BLDNOISO

	/*
	Build routine NOISO.  This routine turns the NOISOLATION
	feature 'on' for the list of globals returned from sub-
	routine GETGBLS.
	*/

	type String GBLS
	
	do GETGBLS(.GBLS)
	do COMPILE(.GBLS)
	quit
	
	
public GETGBLS(String GBLS,String GLOBAL())

	/*
	Get list of globals that qualify for NOISOLATION
	
	ARGUMENTS:
	     . GBLS	NOISO Globals		/REQ/MECH=REF:W
	     . GLOBAL	Table/Index Map		/NOREQ/MECH=REF:W
	     
	     		GLOBAL(global)=NOISO
	     		0 = does not qualify
	     		1 = qualifies for NOISO
	     		
	     		GLOBAL(global,1,fid)=table access keys
	     		GLOBAL(global,8,fid,indxnm)=index access keys
	*/

	type Number KEYNUM,NOISO
	type String ACCKEYS,FID,KEY
	
	// Table Definition
	type DbSet ds1=Db.selectDbSet("DBTBL1","%LIBS='SYSDEV'")
	
	while ds1.next() do {
		type RecordDBTBL1 dbtbl1=ds1.getRecord()
		
		set FID=dbtbl1.fid
		set GLOBAL=dbtbl1.global
		set ACCKEYS=dbtbl1.acckeys
		
		if dbtbl1.netloc=1 quit
		if GLOBAL.isNull() quit
		
		/*
		Determine if the global associated with the table
		qualifies for NOISOLATION.  Note that if multiple
		tables are mapped to the same global, each of the
		tables must meet the criteria for NOISOLATION.
		
		Notes/Assumptions:
		
		  > DATA-QWIK file definitions exist for "tables"
		    that are actually indeces.  These tables are
		    treated as exceptions and hard-coded to set
		    the NOISOLATION flag.
		  
		  > Globals TMP* and TEMP* automatically qualify

		  > Tables that are "process-specific" (i.e., keyed
		    by 'PID', 'JOB', 'JOBNO', $J[OB], TOKEN or 
		    %TOKEN) qualify.

		*/
		
		set NOISO=0

		// Indeces improperly defined as tables
		if GLOBAL="XCLS" set NOISO=1
		else  if GLOBAL="XIRA" set NOISO=1
		else  if GLOBAL="XREF" set NOISO=1
		else  if GLOBAL="XCRCD" set NOISO=1
		
		// Temporary tables
		else  if GLOBAL.extract(1,3)="TMP" set NOISO=1
		else  if GLOBAL.extract(1,4)="TEMP" set NOISO=1
		
		// "Process-specific" tables
		else  for KEYNUM=1:1:ACCKEYS.length(",") do { quit:NOISO
			set KEY=ACCKEYS.piece(",",KEYNUM)

			if KEY="$J" set NOISO=1 quit
			if KEY="PID" set NOISO=1 quit
			if KEY="JOB" set NOISO=1 quit
			if KEY="JOBNO" set NOISO=1 quit
			
			/*
			With the exception of TOKEN (pre-V7.0) and
			TOKENL (V7.0 and above), tables that have
			'TOKEN' or '%TOKEN' for an access key are
			considered "process-specific" and qualify
			for NOISOLATION on VMS.  (The UNIX version
			of the MTM supports a single, point-to-point
			communication method that prohibits globals
			keyed by 'TOKEN' from qualifying for NOISO).
			*/
			
			#IF $ZVERSION["VMS"

			if KEY="TOKEN"!(KEY="%TOKEN") do {
			
				#IF CUVAR.%VN<7
				if GLOBAL'="TOKEN" set NOISO=1

				#ELSE
				if GLOBAL'="TOKENL" set NOISO=1

				#ENDIF
				}
			#ENDIF

			}

		if GLOBAL(GLOBAL).get()'=0 set GLOBAL(GLOBAL)=NOISO
		set GLOBAL(GLOBAL,1,FID)=ACCKEYS
		}


	// Index Definition
	type DbSet ds2=Db.selectDbSet("DBTBL8","%LIBS='SYSDEV'")
	
	while ds2.next() do {
		type RecordDBTBL8 dbtbl8=ds2.getRecord()

		set FID=dbtbl8.fid
		set GLOBAL=dbtbl8.global

		if GLOBAL(GLOBAL).get()'=0 set GLOBAL(GLOBAL)=1
		set GLOBAL(GLOBAL,8,FID,dbtbl8.indexnm)=dbtbl8.orderby
		}
	
	// Build list of globals (variable GBLS) that qualify for NOISO
	
	set (GBLS,GLOBAL)=""
	for  set GLOBAL=GLOBAL(GLOBAL).order() quit:GLOBAL.isNull()  do {
		if GLOBAL(GLOBAL) set GBLS=GBLS_"^"_GLOBAL_","
		}

	set GBLS=GBLS.extract(1,GBLS.length()-1)
	quit


public COMPILE(GBLS)	//

	type String PSL()
	type Number LEN,X,Y
	
	set PSL(PSL("").order(-1)+1)="NOISO // NoIsolation (Compiled by procedure SCAUTL1)"
	set PSL(PSL("").order(-1)+1)="	#IF $ZVERSION.piece(""GT.M V"",2)'<4.2"
	
	/*
	#BYPASS qualifier required; PSL does not [currently] support
	arguments for the 'VIEW' command.
	*/
	
	set PSL(PSL("").order(-1)+1)="	#ACCEPT Date=01/04/06; Pgm=SCAUTL1.PROC"
	set PSL(PSL("").order(-1)+1)="	#BYPASS"

	set X=1
	set LEN=GBLS.length()
	
	/*
	To avoid the possibility of exceeding the maximum length of
	a line of GT.M code (2048 bytes), split the list of globals
	that qualify for NOISOLATION into 1K blocks and build
	multiple lines of code that turn NOISOLATION 'on'.
	*/
	
	for  do { if X>LEN quit
		set Y=GBLS.find(",",X+999)
		if 'Y set Y=LEN+2

		
		set PSL(PSL("").order(-1)+1)="	view ""NOISOLATION"":""+"_GBLS.extract(X,Y-2)_""""
		set X=Y
		}
		
	set PSL(PSL("").order(-1)+1)="	#ENDBYPASS"

	set PSL(PSL("").order(-1)+1)="	#ENDIF"
	set PSL(PSL("").order(-1)+1)="	quit"

	// Compile routine NOISO
	do BUILDRTN^UCGM(.PSL,"NOISO")

	quit
 #OPTION ResultClass ON
public String vSIG()	quit "60269^47694^Dan Russell^5067"	// Signature - LTD^TIME^USER^SIZE
