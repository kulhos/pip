public SCAIO	// Select IO Device
	/*
	   ORIG: Dan S. Russell

	   DESC: IO Device handler.

	   KEYWORDS: Device Handling


	   General purpose SCA device selection


	   I18N=QUIT
	---- Revision History ------------------------------------------------
	
	10/25/06 - RussellDS - CR23778
		   Modified handling of character set input in RMSQUAL section
		   and FILE to match changes to GT.M.
	
	07/16/06 - RussellDS - CR22121
		   Allow input of character sets as qualifiers for files to
		   support Unicode.
		   
		   Code clean-up to eliminate warnings.
		   
		   Removed old revision history.
	*/

	// Entry point for WN default on files

	type Boolean READDEF

	do START

	quit


public READ	// Entry point for READ default on files

	type Boolean READDEF

	set READDEF = 1

	do START

	quit


START

	type public Boolean %EXT, ER
	type public String %fkey(), IO, POP, X
	
	type String IOINPUT, QPARAMS, SAVIO

	set ER = 0

	if '%InputTimeOut.get() do {
	
		#ACCEPT DATE=12/29/03;PGM=John Carroll;CR=unknown
		set %InputTimeOut = CUVAR.%TO
		#ACCEPT DATE=12/29/03;PGM=John Carroll;CR=unknown
		if '%InputTimeOut set %InputTimeOut = 60
	}

	if POP.exists() do { quit
		
		set (IO,IOINPUT) = POP
		do DEVICE
		if '%EXT.get() do OPEN
	}

	if '%EXT.get() do { quit
	
		type Boolean killfkey, PROMPT
		
		set killfkey = 0
		set PROMPT = 1
		
		if '%fkey.data() do {
	
			set killfkey = 1
			do ZBINIT^%TRMVT()
		}
		
		while PROMPT do PROMPT
		
		if killfkey kill %fkey
	}

	// %EXT=1, call from screen, X=answer to screen prompt for device
	set SAVIO = IO.get()
	set (IO,IOINPUT) = X

	do DEVICE
	if '%EXT.get() do OPEN

	if 'ER set X = IO
	else  set IO = SAVIO

	quit


PROMPT	// Prompt for device

	type public Boolean %EXT, ER, PROMPT
	type public String %fkey(), IO, RM
	
	type String IOINPUT, X

	set PROMPT = 0

	use 0

	// Device:
	write !, $$^MSG(829)

	set X = $$TERM^%ZREAD("", 70, "", "", %InputTimeOut, 1)

	// Timeout, continue with current device
	if (%fkey = "TIM") set X = ""

	if (%fkey = "HLP") do { quit

		// Enter a ? or press the Select key for a list of valid options
		write $$^MSG(911)

		set PROMPT = 1
	}

	if ((%fkey = "SEL") ! X.isLike("%?%")) do { if X.isNull() set PROMPT=1 quit

		type String HDG, TBL

		set TBL = "[DEVICE]"
		set X = $$^DBSTBL(TBL, "", "T")

		write $$LOCK^%TRMVT, $$CLEAR^%TRMVT, $$SCR80^%TRMVT
	}

	if X.isNull() do {

		set X = $I

		write X
	}

	if (X = 0) do {

		set X = $I

		write $$CUB^%TRMVT, X
	}

	set (IO, IOINPUT) = X

	do DEVICE
	if '%EXT.get() do OPEN

	if ER do { quit

		if 'RM.get().isNull() write !, "        ", $$VIDERR^%TRMVT, " ", RM, " ", $$VIDOFF^%TRMVT

		set RM = ""
		set ER = 0

		set PROMPT = 1
	}

	quit


DEVICE	// Validate device and load device parameters

	/*
	Local variable, IODEL, is determined by the platform and is used to
	delimit the actual device with a qualifier list.
	*/

	type public Boolean AUXPTR, ER
	type public Number IORM
	type public String IO, IOPAR, IOSUB, IOTYP, POP, RM

	type String DEV, IODEL, N0, QUAL

	if (IO = 0) set IO = $I
	if IO.isNull() do { quit
		
		type String ET
		
		set ER = 1
		set ET = "INVLDIO"
		do ^UTLERR
	}

	// Platform specific device delimiter
	set IODEL = $$IODEL^%ZFUNC()

	// Default delimiter for qualifiers
	if IODEL.isNull() set IODEL = "/"

	// IO device qualifiers
	set QUAL = IO.piece(IODEL, 2, 99)

	if IO.piece(IODEL, 1).isNull() do { quit
		
		type String ET
		
		set ER = 1
		set ET = "INVLDIO"
		do ^UTLERR
	}

	// Strip off qualifiers
	set IO = IO.piece(IODEL, 1)

	// Load node 0
	type RecordDEVICE device = Db.getRecord("DEVICE", "DEVNAME=:IO", 1)

	if (device.getMode() = 0) set N0 = ""
	else  set N0 = device.device_"|"_device.type_"|"_device.subtype_"|"_device.exttype_"|"_device.extsubt_"|"_device.loccode_"|"_device.loc_"|"_device.par_"|"_device.rest

	// Initialize device type
	set IOTYP = N0.piece("|", 2)

	// No entry in table, determine
	if N0.isNull() do { quit:ER

		// device type  (TRM,FILE,MT)
		set IOTYP = $$DEVTYP^%ZFUNC(IO)

		if IOTYP.isNull() do {

			type String ET
			
			set ER = 1
			set ET = "INVLDIO"
			do ^UTLERR
		}
	}
	// Get actual device from table
	else  set IO = N0.piece("|", 1)

	if (IOTYP = "TRM") do {

		set N0 = $I_"|TRM"

		#IF 'CUVAR.DEVPTR
		// Suppress printer prompt
		set N0.piece("|", 4) = "PTR"
		#ENDIF
	}

	if (IOTYP = "FILE") do {

		// Must include an extension
		if 'IO.isLike("%.%") set IOTYP = "" quit

		// Ensure full path is included
		set IO = $$FULLIO^%ZFUNC(.IO)
		set N0 = IO_"|RMS"
	}

	// If not a terminal or file, must be pre-defined in the table
	if IOTYP.isNull() do { quit
		
		type String ET
		
		set ER = 1
		set ET = "INVLDIO"
		do ^UTLERR
	}

	if N0.piece("|", 9), $$NOAUTH do { quit
		
		type String ET
		
		set ER = 1
		set ET = "UNAUTIO"
		do ^UTLERR
	}

	set IOSUB = N0.piece("|", 3)
	set IOPAR = N0.piece("|", 8)
	set IORM = 132
	set AUXPTR = 0

	// Slave printer prompt
	if (IOTYP = "PTR") set AUXPTR = $$AUXPTR quit:ER

	// Slave printer prompt
	if 'N0.piece("|", 4).isNull() set AUXPTR = $$AUXPTR quit:ER

	// Type specific params
	do @IOTYP quit:ER

	kill POP

	quit


	// IO-Type Specific Parameters


TRM	// Output to terminal

	type public Number IORM, IOSL
	type public String IOHDG

	set IOSL = 22
	set IOHDG = "^SCAV100"
	set IORM = 80

	quit


PTR	// Slave printer

	type public Number IOSL
	type public String IOHDG

	set IOSL = 60
	set IOHDG = "^SCAHDG"

	quit


MT	// Output to tape

	type public Number IOSL
	type public String IOHDG,IOPAR

	type Number OP
	type String MSG

	set IOHDG = "^SCAHDG"
	set IOSL = 60

	do PAR

	// Rewind tape?
	set MSG = $$^MSG(2424)
	set OP = $$^DBSMBAR(2, "", "", 1)

	if (OP = 2) do {
		
		if IOPAR.isNull() set IOPAR = "REWIND"
		else  set IOPAR = IOPAR_"/REWIND"
	}

	quit


PNTQ	// Output to print queue

	type public Boolean ER
	type public Number IOSL
	type public String IO, IOHDG, IOINPUT, IOPAR, IOQ, IOQPARAM, IOTYP, QUAL

	type Boolean PROMPT

	// Ask for prompt screen
	if (QUAL.get() = "*") do {

		set PROMPT = 1
		set QUAL = ""

		// Use prior input
		if IOQPARAM.exists() set QUAL = IOQPARAM
	}

	// Get parameters
	set IOQPARAM = $$^SCAIOQ(QUAL.get(), PROMPT.get()) quit:ER

	set IOSL = 60
	set IOHDG = "^SCAHDG"
	set IOTYP = "PNTQ"
	set IOPAR = "WRITE/NEWV"
	// Retain input
	set IOQ = IO
	if IOINPUT.get() set IO = IOINPUT

	quit


FILE	// Disk file

	type public Boolean APPEND, READDEF
	type public Number IOSL
	type public String IOHDG, IOPAR, IOTYP, QUAL

	type String CHSET

	if 'QUAL.isNull() do RMSQUAL(QUAL, .CHSET)

	set IOSL = 60
	set IOHDG = "^SCAHDG"
	set IOTYP = "RMS"
	if READDEF.get() set IOPAR = "R"
	else  if APPEND.get() set IOPAR = "WA"
	else  set IOPAR = "WN"

	do PAR

	// Translate "short-hand" parameters to full parameters
	if (IOPAR.length() < 4) do {

		type String X
		
		set X = ""
		
		if IOPAR.isLike("%R%") set X = "READ/"
		if IOPAR.isLike("%W%") set X = X_"WRITE/"
		if IOPAR.isLike("%N%") set X = X_"NEWV/"
		if IOPAR.isLike("%A%") set X = X_"APPEND/"

		if X.endsWith("/") set X = X.extract(1, X.length() - 1)
		set IOPAR=X
	}
	
	if 'CHSET.get().isNull() set IOPAR = IOPAR_"/CHSET="_CHSET.addQuotes()
	
	if IOPAR.beginsWith("/") set IOPAR = IOPAR.extract(2, IOPAR.length())

	quit


public RMSQUAL(String QUAL,	// Qualifiers
	       String CHSET)	// Character set	/MECH=REFNAM:W
	/*
	Also called by SCAFICHE

	Modify IO (name of RMS file) based on qualifiers, or set up RECSIZ variable

	     USER   - to add %UID or USERNAME
	     DATE+  - to add date
	     RECSIZ - record_size to open file with specified record size
	     APPEND - Append to an existing file
	     RDIST  - Report distribution key name
	                   Example, File_name/RDIST=...
	     CHSET=  - Character set name - valid values are:
	     		M, UTF-8, UTF-16, UTF-32, UTF-16BE, and	UTF-16LE
	                   
	If a character set qualifier is specified, set CHSET to return that
	value.
	  
	Only the first occurance of a qualifier is used
	*/
	
	type public Boolean APPEND
	type public Number RECSIZ
	type public String IO
	
	type Boolean haveUser
	type Number I, OFF, recsiz
	type String date, P1, P2, Q, QTR, X, user
	
	set haveUser = 0

	for I = 1:1 set Q = QUAL.piece("/", I) quit:Q.isNull()  do {
		
		// Character sets
		if CHSET.get().isNull(), Q.upperCase().beginsWith("CHSET=") do { quit
		
			type String val = Q.piece("=", 2).upperCase().stripQuotes()
			
			if ({List}"M,UTF-8,UTF-16,UTF-32,UTF-16BE,UTF-16LE").contains(val) set CHSET = val
		}

		// User ID
		if Q = "USER".extract(1, Q.length()) do { quit

			// Only get the first use
			if 'haveUser do {

				if '%UserID.get().isNull() set IO = IO_"_"_%UserID
				else  set IO = IO_"_"_$$USERNAM^%ZFUNC

				set haveUser = 1
			}
		}

		set QTR = Q.translate("+-", "==")
		set P1 = QTR.piece("=", 1)
		set P2 = QTR.piece("=", 2)

		// Date
		if (P1 = "DATE".extract(1, P1.length())) do { quit

			// Subsequent occurence
			quit:date.exists()

			type RecordCUVAR cuvar = Db.getRecord("CUVAR")
			
			if Q.isLike("%+%") set OFF = P2
			else  if Q.isLike("%-%") set OFF = -2
			else  set OFF = 0

			set IO = IO_"_"_$$DAT^%ZM(cuvar.tjd + OFF, "DDMONYEAR")
			set date = Q
		}

		// Record size
		if (P1 = "RECSIZ".extract(1, P1.length())) do { quit

			// Subsequent occurence
			quit:recsiz.exists()

			if (P2 > 512) set RECSIZ = P2
			set recsiz = Q
		}

		if (P1 = "APPEND".extract(1, P1.length())) set APPEND = 1
		if (P1 = "RDIST".extract(1, P1.length())) set IO = IO_"_RDIST_"_P2
	}

	quit


SPL	// Output to spool file

	type public Boolean ER
	type public Number IOSL
	type public String IOHDG, N0

	// Valid for this MUMPS?
	do VALID^%ISSPL quit:ER

	set IOSL = 60
	set IOHDG = "^SCAHDG"

	if N0.piece("|", 3).isNull() do { quit
		
		do CLOSE^%ISSPL
		do ^%ISSPL
	}

	do OPEN^%ISSPL

	quit


PAR	// Prompt for open parameters if interactive

	type public Boolean %EXT
	type public String IOPAR, POP
	
	type String X
	
	quit:(POP.exists() ! %EXT.exists())

	// Enter open parameters
	write "  ", $$^MSG(4820), ":  "

	if 'IOPAR.isNull() do {
	
		write " ", IOPAR, "=> "

		set X = $$TERM^%ZREAD("", 70, "", "", %InputTimeOut, 1)
	}

	if X.isNull() set X = IOPAR

	set IOPAR = X

	quit


public OPEN	// Open the device - Can be called from external programs

	/*
	IO must be defined.  Other IO* variables should be as well
	If %OPMODE is defined and contains OUTPUT parameter, attempt
	to redirect output to device specified.
	This subroutine will 'open' device or return ER=1,RM=message.

	INPUTS:
	   . IO	 	I/O device name			/TYP=T/REQ

	   . %OPMODE	Output mode			/TYP=T/NOREQ
			Defines redirection of output
			to a device other than the input
			device (ie. Terminal when input from
			a device other than the keyboard)

	   . %TO	Timeout in seconds		/TYP=N/NOREQ/DFT=60

	   . IOTYP	Device type, defined		/TYP=T/NOREQ
			as part of validation or device open

	   . %IPMODE	Block mode indicator		/TYP=T/NOREQ

	   . IOPAR	I/O parameters			/TYP=T/NOREQ
	     		List of params used on open
	*/
	
	type public Boolean AUXPTR, ER
	type public Number RECSIZ
	type public String %IPMODE, %OPMODE, IO, IOPAR, IOTYP
	
	type Boolean Z
	type String ET

	if %OPMODE.exists() do REDIRECT quit:ER

	if '%InputTimeOut.get() do {
	
		#ACCEPT DATE=12/29/03;PGM=John Carroll;CR=unknown
		set %InputTimeOut = CUVAR.%TO
		#ACCEPT DATE=12/29/03;PGM=John Carroll;CR=unknown
		if '%InputTimeOut set %InputTimeOut = 60
	}

	// Don't open for SPL
	quit:(IOTYP.get() = "SPL")

	// Block mode, no access
	quit:%IPMODE.get().isLike("%NOINT%")

	// Own device
	if (IO = $P) do { quit

		if 'IOTYP.exists() do {
		
			set IOTYP = "TRM"
			do TRM
		}

		// OPEN aux port
		if AUXPTR.get() do {
			write $$PRNTON^%TRMVT
			do TERM^%ZUSE(IO,"WIDTH=133")
		}
	}

	if 'IOTYP.exists() do { quit:ER

		type Boolean %EXT

		set %EXT = 1

		do DEVICE
	}

	// Don't open for SPL
	quit:(IOTYP = "SPL")

	set IOPAR = IOPAR.get()

	// Save queue characteristics and change to FILE
	if (IOTYP = "PNTQ") do QSET

	if ((IOTYP = "RMS") ! (IOTYP = "PNTQ")) do {
		
		set Z = $$FILE^%ZOPEN(IO, IOPAR, 10, RECSIZ.get())
	}
	else  if (IOTYP = "MT") do {
		
		set Z = $$TAPE^%ZOPEN(IO, IOPAR, 10)
	}
	else  set Z = $$TERM^%ZOPEN(IO, 10)

	// Open succeeded
	if Z, (IO '= $I) set %ProcessMode=4 quit

	// Device currently in use
	if ((IOTYP = "PTR") ! (IOTYP = "TRM")) do Runtime.setErrMSG("DEP", 822) quit

	set ER = 1
	set ET = "NOTOPEN"
	do ^UTLERR

	quit


QSET
	/*
	  Opening queue output device.  Use file, and save queue
	  characteristics so that on close can direct to proper queue.
	*/
	
	type public String IO, IOQ, IOQPARAM
	
	type Date DATE
	type Number TIME

	set DATE = $$DAT^%ZM(+%CurrentDate, "DDMONYEAR")
	set TIME = %CurrentTime
	set IO = $$FILE^%TRNLNM(DATE_"_"_TIME_"_"_(%ProcessID # 100000)_".TMP_PNTQ", $$SPLDIR)

	type RecordTMPPNTQ tmppntq = Class.new("RecordTMPPNTQ")

	set tmppntq.jobno = %ProcessID
	set tmppntq.io = IO
	set tmppntq.pntq = IOQ
	set tmppntq.params = IOQPARAM.get()

	do tmppntq.save()

	quit


REDIRECT	// Redirect output device based on %OPMODE

	/*
	If %OPMODE contains parameter OUTPUT and device, redirect output.
	Format is %OPMODE="OUTPUT device".  If device contains ":", must
	enslose with quotes, e.g., %OPMODE="OUTPUT ""DIR:FILE.TMP""".

	Any other %OPMODE parameters are ignored.

	INPUTS:
	   . %OPMODE	Output mode parameters

	OUTPUTS:
	   . IO		New output device
	*/
	
	type public Boolean ER
	type public String %OPMODE, IO
	
	type Number EXPR
	type String CMD, OUTPUT, tree()

	do INIT^DBSPNT
	do ^DBSINT(%OPMODE, "CMD(")
	
	quit:ER

	for EXPR = 1:1 quit:'tree(EXPR).exists()  do {

		type String X

		set X = tree(EXPR).piece("(", 1)

		if (X = "OUTPUT") set OUTPUT = tree(EXPR)
	}

	// Redirect
	if 'OUTPUT.get().isNull() do @OUTPUT

	quit


OUTPUT(DEVICE)	// Assign IO

	type public String IO, IOTYP

	set IO = DEVICE

	kill IOTYP

	quit


public CLOSE	// Close device
	/*
	INPUTS:
	   . %IPMODE	Block mode indicator		/TYP=T/NOREQ

	   . IO		I/O device name			/TYP=T/REQ

	   . IOSUB	I/O subtype name		/TYP=T/NOREQ
			Used to handle CRADEN and
			OKIDATA printer devices

	   . AUXPTR	Auxiliary printer flag		/TYP=T/NOREQ
			Used to identify device as another printer
			device and initiate send of escape sequence
			to the auxiliary device, if required to
			'close' printer
	*/
	
	type public Boolean AUXPTR
	type public String %IPMODE, IO, IOSUB
	
	type Boolean QUIT

	// Don't do for block mode
	quit:%IPMODE.get().isLike("%NOINT%")

	// Assume own device
	quit:'IO.exists()

	set QUIT = 0

	do {
		catch error {
			
			set QUIT=1
		}
		
		use IO
	}

	quit:QUIT

	// Reset printer
	if 'IOSUB.get().isNull(), ({List}"OKD,CRADEN").contains(IOSUB) do @IOSUB

	if AUXPTR.get() do {

		// Form feed
		write $$PRNTFF^%TRMVT()

		// Close aux port
		write $$PRNTOFF^%TRMVT()

		do TERM^%ZUSE(IO, "WIDTH=81")
	}

	// Not own device
	if (IO '= $P) do CLOSEIT

	use 0

	quit


CLOSEIT	// If not own terminal, handle final form feed, queueing routing, and close device

	type public String IO, IOQ, IOTYP

	// Write form feed
	do {
		// No FF for RMS or PNTQ
		quit:({List}"RMS,PNTQ").contains(IOTYP.get())

		// FILE or PNTQ
		quit:IO.isLike("%.%")

		write #
	}

	// Dispatch to queue
	if ('IOQ.get().isNull() ! (IOTYP.get() = "PNTQ")) do CLOSEQ

	close IO

	quit


CLOSEQ	// If queued job, dispatch to proper print queue

	type public Boolean ER
	type public String IO, RM()
	
	type Boolean X

	// Not right IO file
	quit:'IO.isLike("%.TMP_PNTQ%")

	type RecordTMPPNTQ tmppntq = Db.getRecord("TMPPNTQ", "JOBNO=:%ProcessID,IO=:IO", 1)

	// No queue information
	quit:(tmppntq.getMode() = 0)

	// Delete tmp info
	do Db.fastDelete("TMPPNTQ","JOBNO=:%ProcessID, IO=:IO")

	// Send to queue
	set X = $$SEND^%ZQUEUE(IO, tmppntq.pntq, tmppntq.params, 1)

	if 'X do {
		set ER=1
		
		// Output failed in dispatch to print queue
		set RM(1) = $$^MSG(2116)
		
		// Error ~p1
		set RM(2) = $$^MSG(979,tmppntq.params)
		
		// Output remains in file:  ~p1
		set RM(3) = $$^MSG(2118,IO)
		
		// Print using operating system capabilities
		set RM(4) = $$^MSG(2227)
		
		set RM(5)=""
	}
	
	quit


	// Reset Printer Parameters

CRADEN	// Craden printer
	/*
	Printing complete
	$C(19) Will direct the out to the craden upper display window
	$C(12) Will eject the document
	*/

	// Completed
	write $C(19), $$^MSG(3267), $C(12)

	quit


OKD	// OKIDATA printer

	// 10 <acters per inch
	write $C(30)

	// 6 Lines per inch
	write $C(27)_6

	// 66 Lines per page
	write $C(27)_"F66"

	quit


SPLDIR()	// Return spool directory

	#IF 'CUVAR.SPLDIR.isNull()
	quit CUVAR.SPLDIR
	#ELSE

	type String SPL

	// Directory specific, logically defined
	set SPL = $$SCAU^%TRNLNM("SPOOL")

	// System specific spooler
	if SPL.isNull() set SPL = $$SYS^%TRNLNM("SPOOL")

	quit SPL
	#ENDIF


NOAUTH()	// Check device authorization

	// Return 0 if OK, 1 if not
	
	type public String IO
	
	type String INST, UTLO

	// No user id, no authorization checking
	if %UserID.get().isNull() quit 0

	type RecordSCAU scau=Db.getRecord("SCAU","UID=:%UserID")
	
	#IF CUVAR.SBINSTNO.isNull()
	quit 1
	#ELSE
	set INST=CUVAR.SBINSTNO

	// Use TLO value own device
	if (IO = $P) do {
		
		if %UserStation.exists() set UTLO = %UserStation
		else  do ^UTLO
	}
	else  set UTLO = IO

	if 'Db.isDefined("DEVICER","DEVNAME=:UTLO AND INST=:INST AND UCLS=:scau.%ucls") quit 1

	quit 0
	#ENDIF


AUXPTR()	// Prompt for slave printer

	type public String %IPMODE, IO, IOSUB, IOTYP, N0, POP

	type Number OP

	// Not principal device
	if (IO '= $I) quit 0

	// Defaulted device
	if POP.exists() quit 0

	// In Block Mode?
	if %IPMODE.get().piece(":", 1).beginsWith("NOINT") quit 0

	set OP = $$^DBSMBAR(32, "", "", 1)

	// To terminal
	if (OP = 1) quit 0

	// Printer is not ready
	if '$$PRNTRDY^%TRMVT do Runtime.setErrMSG("DEP",2231) quit 0

	set IOTYP = N0.piece("|", 4)
	set IOSUB = N0.piece("|", 5)

	quit 1
 #OPTION ResultClass ON
public String vSIG()	quit "60603^44096^Dan Russell^16867"	// Signature - LTD^TIME^USER^SIZE
