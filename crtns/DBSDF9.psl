public DBSDF9

	// **********************************************************************
	// * IMPORTANT NOTE:                                                    *
	// * According to the rules that apply to PSL compiler upgrades,        *
	// * the generated M routine associated with this procedure must be     *
	// * checked into StarTeam and released with the procedure whenever     *
	// * changes are made to this procedure.                                *
	// *                                                                    *
	// * The mrtns version will be used during upgrades and will then be    *
	// * removed from the mrtns directory.  Therefore, other than in a      *
	// * development environment, or during an upgrade, an mrtns version of *
	// * this routine should not exist.                                     *
	// *                                                                    *
	// * Keep these comments as single line to ensure they exist in the     *
	// * generated M code.                                                  *
	// **********************************************************************
		 
	/*
	Rebuild DQ node/column cross reference
	
	Called at top by function DBSDF9

	---- Revision History -------------------------------------------------
	02/12/2009- RussellDS - CR38215/35741
		* Modified creation of DBINDX to use the correct null character
		  substitute to prevent unicode problems.
	
	01/20/2008 - RussellDS - CR30801
		Removed reference to DBTBL1.UDFILE.

		Added section DBSUTL9.
		
		Modified BLDINDX to use BYPASS - necessary for bootstrap.
		
		Removed old revision history.
	
	05/30/06 - RussellDS - CR21551
		   Add /NOLOG to save of DBTBL1 when updating LISTDFT and 
		   LISTREQ to prevent problems during clean install.
	-----------------------------------------------------------------------
	*/

	// Prompt for list of tables
	quit:'$$LIST^DBSGETID("DBTBL1")
	
	type ResultSet rs = Db.select("ELEMENT", "TMPDQ", "PID=:%ProcessID", "ELEMENT ASC")
	
	while rs.next() do BLDINDX(rs.getCol("ELEMENT"))

	do Db.delete("TMPDQ", "PID=:%ProcessID")
	
	// Done
	#ACCEPT DATE=03/11/2008; PGM=Dan Russell; CR=30801; Group=ACCESS
	write $$MSG^%TRMVT($$^MSG(855), "", 1)

	quit
	

public BUILDALL
	
	/*
	Mass rebild all the control files
	*/
	
	type ResultSet rs = Db.select("FID", "DBTBL1", "%LIBS='SYSDEV'", "FID ASC")
	
	while rs.next() do BLDINDX(rs.getCol("FID"))
	
	quit
	

private BLDINDX(String TABLE)	// Table name

	/*
	Build DBTBL1 and DBTBL1D indexes for TABLE
	
	Because this function is used during bootstrapping, when the RecordTABLE
	classes may not yet exist, all data references are direct, using BYPASS.
	
	IMPORTANT NOTE:  Changes to indexes for tables DBTBL1, DBTBL1D, and
			 DBTBL1F must be considered here as well as in index
			 definitions since the changes generated into the
			 RecordTABLE classes won't be used here.
	*/
	
	type Number %ProcessMode
	type String LISTDFT, LISTREQ, nullChar
	
	set %ProcessMode = 0
	set (LISTDFT, LISTREQ) = ""
	set nullChar = $$BYTECHAR^SQLUTL(254)
	
	// Rebuild indexes if not relational database
	if '$$rdb^UCDBRT("DBTBL1") do {
	
		#ACCEPT Date=06/11/2008; Pgm=RussellDS; CR=30801; Group=BYPASS
		#BYPASS
		N N,TYPE
		;
		; Delete existing entries before rebuild
		; ^XDBREF entries
		F TYPE="DBTBL1.FSN","DBTBL1.GLOBAL" D
		.	S N=""
		.	F  S N=$O(^XDBREF(TYPE,"SYSDEV",N)) Q:N=""  K ^XDBREF(TYPE,"SYSDEV",N,TABLE)
		; ^DBINDX entries
		F TYPE="FKPTR","MDD","PARFID" D
		.	S N=""
		.	F  S N=$O(^DBINDX("SYSDEV",TYPE,N)) Q:N=""  K ^DBINDX("SYSDEV",TYPE,N,TABLE)
		S N=""
		F  S N=$O(^DBINDX("SYSDEV","DOM","PBS",N)) Q:N=""  K ^DBINDX("SYSDEV","DOM","PBS",N,TABLE)
		K ^DBINDX("SYSDEV","STR",TABLE)
		;
		; Rebuild DBTBL1 indexes - refer to dbtbl1.rebuildIndexes("*")
		; FSN
		N FSN S FSN=$P($G(^DBTBL("SYSDEV",1,TABLE,12)),"|",1)
		I FSN="" S FSN=nullChar
		S ^XDBREF("DBTBL1.FSN","SYSDEV",FSN,TABLE)=""
		; GLOBAL
		N GLOBAL S GLOBAL=$P($G(^DBTBL("SYSDEV",1,TABLE,0)),"|",1)
		I GLOBAL="" S GLOBAL=nullChar
		S ^XDBREF("DBTBL1.GLOBAL","SYSDEV",GLOBAL,TABLE)=""
		; PARFID
		N PARFID S PARFID=$P($G(^DBTBL("SYSDEV",1,TABLE,10)),"|",4)
		I PARFID="" S PARFID=nullChar
		S ^DBINDX("SYSDEV","PARFID",PARFID,TABLE)=""
		;
		; Rebuild DBTBL1D indexes, and create DFT and REQ lists
		N DI S DI=""
		F  S DI=$O(^DBTBL("SYSDEV",1,TABLE,9,DI)) Q:DI=""  D
		.	N DBTBL1D S DBTBL1D=$G(^DBTBL("SYSDEV",1,TABLE,9,DI))
		.	; DOMAIN
		.	N DOM S DOM=$P(DBTBL1D,"|",4)
		.	I DOM="" S DOM=nullChar
		.	S ^DBINDX("SYSDEV","DOM","PBS",DOM,TABLE,DI)=""
		.	; MDD
		.	N MDD S MDD=$P(DBTBL1D,"|",27)
		.	I MDD="" S MDD=nullChar
		.	S ^DBINDX("SYSDEV","MDD",MDD,TABLE,DI)=""
		.	; NODEPOS
		.	N NOD S NOD=$P(DBTBL1D,"|",1)
		.	I NOD="" S NOD=nullChar
		.	N POS S POS=$P(DBTBL1D,"|",21)
		.	I POS="" S POS=nullChar
		.	S ^DBINDX("SYSDEV","STR",TABLE,NOD,POS,DI)=""		
		.	;
		.	; If not literal or computed, add to required and default lists, if appropriate
		.	I '$$isLit^UCGM(DI),$TR($P(DBTBL1D,"|",16)," ")="" D
		..		I $P(DBTBL1D,"|",15) S LISTREQ=LISTREQ_DI_","
		..		E  I (NOD'=nullChar),(NOD["*") S LISTREQ=LISTREQ_DI_","
		..		I $P(DBTBL1D,"|",3)'=""	S LISTDFT=LISTDFT_DI_","
		;		
		; Rebuild DBTBL1F indexes
		N FKEYS S FKEYS=""
		F  S FKEYS=$O(^DBTBL("SYSDEV",19,TABLE,FKEYS)) Q:FKEYS=""  D
		.	; FKPTR
		.	N TBLREF S TBLREF=$P($G(^DBTBL("SYSDEV",19,TABLE,FKEYS)),"|",5)
		.	I TBLREF="" S RBLREF=nullChar
		.	S ^DBINDX("SYSDEV","FKPTR",TBLREF,TABLE,FKEYS)=""
		;
		; Update LISTREQ and LISTDEF
		S $P(^DBTBL("SYSDEV",1,TABLE,101),"|",1)=$E(LISTDFT,1,$L(LISTDFT)-1)
		S $P(^DBTBL("SYSDEV",1,TABLE,102),"|",1)=$E(LISTREQ,1,$L(LISTREQ)-1)
		#ENDBYPASS
	}
	
	// If DBTBL is in RDB, then just build LISTDFT and LISTREQ
	else  do {
		
		type ResultSet rs = Db.select("DI,DFT,NOD,REQ", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:TABLE", "DI ASC")
		
		while rs.next() do {
			
			if 'rs.getCol("DI").isLiteral() do {
			
				if rs.getCol("REQ") ! rs.getCol("NOD").isLike("%*%") set LISTREQ = LISTREQ_ rs.getCol("DI")_ ","
				if 'rs.getCol("DFT").isNull() set LISTDFT = LISTDFT_ rs.getCol("DI")_ ","
			}
		}
	
		set LISTDFT = LISTDFT.extract(1, LISTDFT.length() - 1)
		set LISTREQ = LISTREQ.extract(1, LISTREQ.length() - 1)
	
		// Only save if changed to avoid always having filer reset last user and date
		type ResultSet rs2 = Db.select("LISTDFT,LISTREQ", "DBTBL1", "%LIBS='SYSDEV' AND FID=:TABLE")
		
		if rs2.next() do {
			
			/* Because this is used during bootstrap, need to bypass
			   generated code and use %DBAPI directly */
			
			if (rs2.getCol("LISTDFT") '= LISTDFT) do {
			
				#ACCEPT Date=06/11/2008; Pgm=RussellDS; CR=30801; Group=BYPASS
				#BYPASS
				N ret
				S ret=$$EXECUTESQL^%DBAPI(0,"UPDATE DBTBL1 SET LISTDFT=:HV1 WHERE S_LIBS=:V1 AND FID=:V2",$C(124),LISTDFT_$C(124)_"'SYSDEV'"_$C(124)_TABLE_$C(124))
				I ($TL=0) D commit^vRuntime(0)
				#ENDBYPASS
			}
			
			if (rs2.getCol("LISTREQ") '= LISTREQ) do {
	
				#ACCEPT Date=06/11/2008; Pgm=RussellDS; CR=30801; Group=BYPASS
				#BYPASS
				N ret
				S ret=$$EXECUTESQL^%DBAPI(0,"UPDATE DBTBL1 SET LISTREQ=:HV1 WHERE S_LIBS=:V1 AND FID=:V2",$C(124),LISTREQ_$C(124)_"'SYSDEV'"_$C(124)_TABLE_$C(124))
				I ($TL=0) D commit^vRuntime(0)
				#ENDBYPASS
			}
		}
	}
	
	quit
	
	
public DBSUTL9

	/*
	Called by function DBSUTL9 for prompted rebuild
	*/

	// No Yes
	#ACCEPT DATE=03/11/2008; PGM=Dan Russell; CR=30801; Group=ACCESS
	quit:($$^DBSMBAR(166) <> 2)
	
	do %EXT
	
	quit



private %EXT

	/*
	External interface to reset global reference
	
	Called by DBSUTL9
	*/

	// Rebuild field ID index file 
	write !!, $$^MSG("3221"), !!
	write %CurrentDate.toString(), "  ", %CurrentTime.toString(), !!
	
	type DbSet ds = Db.selectDbSet("DBTBL1", "%LIBS='SYSDEV'", "FID ASC")
	
	while ds.next() do {
		
		type String glref
		
		type RecordDBTBL1 dbtbl1 = ds.getRecord("DBTBL1")
		
		if dbtbl1.global.isNull() set glref = ""
		
		else  set glref = "^"_dbtbl1.global_"("_dbtbl1.acckeys
		
		if (dbtbl1.glref '= glref) do {
			
			set dbtbl1.glref = glref
	
			do dbtbl1.save()
		}
	}	

	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61413^60987^Dan Russell^7797"	// Signature - LTD^TIME^USER^SIZE
