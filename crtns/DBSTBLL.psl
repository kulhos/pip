DBSTBLL(String TABLETYP)	// Table type (CTBL, STBL, or UTBL)
		 
	/*
	List All The Tables of the type specified
	
	---- Revision History -------------------------------------------------
	01/29/07 - RussellDS - CR25081
		   Modified IO device handling to deal with it all here and
		   to append to output for tables 2-n.
	
	10/24/05 - RussellDS - CR17834
		   Converted to PSL.

		   Removed old revision history.
	-----------------------------------------------------------------------
	*/
	
	type Boolean append
	type String %BLK, N, RPTIO, tables, tbllist

	write $$MSG^%TRMVT($$^MSG(5624), 0, 0)		// Please wait ...

	do LOOKUP^DBSTBLM(TABLETYP, .tbllist())		// Get list of tables
	
	do GETLIST(.tables(), .tbllist(), TABLETYP, .RPTIO)
	quit:'tbllist.exists()
	
	set append = 0
	set N = ""
	for  set N = tables(N).order() quit:N.isNull()  do {
		
		type Number I
		type String acckeys, btmkey, desc, sellist, TABLE
		
		set TABLE = tbllist(N).piece(" ", 1)
		
		type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:TABLE")
		
		set acckeys = dbtbl1.acckeys
		set sellist = ""
		for I = 1:1:acckeys.length(",") do {
			
			type String key = acckeys.piece(",", I)
			
			if 'key.isLiteral() set sellist = sellist_key_","
		}
		
		set sellist = sellist.extract(1, sellist.length() - 1)
		
		// Table ~p1 can not be listed
		if sellist.isNull() write $$MSG^%TRMVT($$^MSG(5627, TABLE), 0, 1) quit
		
		// Select the keys and the first item associated with the bottom key
		set btmkey = sellist.piece(",", sellist.length(","))
		
		type ResultSet rs = Db.select("DI,POS", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:TABLE AND NOD=:btmkey", "POS ASC")
		
		if rs.next() set sellist = sellist_","_rs.getCol("DI")
		
		// Table List ~p1
		set desc = $$^MSG(5626, TABLE)_"  "_dbtbl1.des
		
		// Don't append on first call since want to open new file,
		// but append on all subsequent calls
		set %BLK = "/,"_RPTIO_$$IODEL^%ZFUNC()
		if append set %BLK = %BLK_"APPEND"
		else  set append = 1
		
		do ^DBSRPT(TABLE, sellist, "", "", desc)
	}
	
	do CLOSE^SCAIO
	
	quit
	
	
GETLIST(String tables(),	// Selected tables	/MECH=REFARR:W
	String tbllist(),	// All tables		/MECH=REFARR:R
	String TABLETYP,	// Table type
	String IO)		// Output device	/MECH=REF:W

	/*
	Return array of selected tables
	*/
	
	type Number %FRAME, N
	type String %READ, %TAB, DESC, HELP, VFMQ, vhdg, ZSEL(), ZZSEL
	
	kill tables
	
	set HELP=" * = All  AB* = From AB to ABz  AB-CD = From AB to CD  'AB = Not AB "

	set %TAB("IO") = $$IO^SCATAB($I)                      
	
	if TABLETYP = "UTBL" set DESC = $$^MSG(8205)		// User Table
	else  if TABLETYP = "STBL" set DESC = $$^MSG(8200)	// System Table
	else  set DESC = $$^MSG(8188)				// Common Table
	
	set %TAB("ZSEL") = "/DES="_DESC_"/TYP=T/LEN=256/TBL=tbllist(:NOVAL/XPP=D LISTPP^DBSTBLL(X)"
	
	set ZZSEL = "ZSEL/REP=10/NOREQ"

	set vhdg = "Table         File Name           Description"
	set %READ = "@@%FN,,IO,,@HELP/CEN/INC,,"_ZZSEL  

	set %FRAME=2

	do ^UTLREAD
	quit:VFMQ = "Q"
	
	set N = ""
	for  set N = ZSEL(N).order() quit:N.isNull()  if 'ZSEL(N).isNull() do {
	
		type String X = ZSEL(N)
		
		if (X = "*") do {
			
			type String M = ""
			
			for  set M = tbllist(M).order() quit:M.isNull()  set tables(M) = ""
		}
		else  if tbllist(X).exists() set tables(X) = ""
		else  if X.isLike("'%") kill tables(X.extract(2, X.length()))
		else  if X.isLike("%*") do {
		
			type Number len
			type String MATCH, XTBL
			
			set XTBL = X.extract(1, X.length() - 1)
			set MATCH = XTBL
		
			if tbllist(XTBL).exists() set tables(XTBL) = ""
		
			set len = XTBL.length()
			for  set XTBL = tbllist(XTBL).order() quit:(XTBL.isNull() ! (XTBL.extract(1, len) '= MATCH))  set tables(XTBL) = ""
		}
		else  if X.isLike("%-%") do {
		
			type String END, START
		
			set START = X.piece("-", 1)
			set END = X.piece("-", 2)
			
			if tbllist(START).exists() set tables(START) = ""
			for  set START = tbllist(START).order() quit:(START.isNull() ! (START ]] END))  set tables(START) = ""
		}
	}
	
	quit


public LISTPP(String X)	// Input value

	/*
	Post-processor for file name
	
	This is public only to allow call from UTLREAD.  Not to be
	used for anything else.
	*/
	
	type public Boolean ER = 0
	type public String RM,tbllist()

	quit:X.isNull()
	
	if (X = "*") set RM = $$^MSG(241)	// All definitions
	
	else  if tbllist(X).exists() do {
		
		type String TABLE
		
		set TABLE = tbllist(X).piece(" ", 1)
		
		type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:TABLE")
		
		set RM = TABLE_"    "_dbtbl1.des
	}
	
	else  if X.isLike("'%") do {
		
		type String XTBL = X.extract(2, X.length())
		
		if 'tbllist(XTBL).exists() set ER = 1
	}
	
	else  if X.isLike("%*") do {
		
		type Number len
		type String XTBL = X.extract(1, X.length() - 1)
		
		quit:tbllist(XTBL).exists()
		
		set len = XTBL.length()
		set XTBL = tbllist(XTBL).order()
		
		quit:XTBL.extract(1, len) = X.extract(1, X.length() - 1)
		
		set ER = 1
	}
	
	else  if X.isLike("%-%") do {
		
		type String END, START, XTBL
		
		set START = X.piece("-", 1)
		set END = X.piece("-", 2)
		
		if (START ]] END) do {
			
			set ER = 1
			// 
			set RM = $$^MSG(1475)
		}
		
		quit:tbllist(START).exists()
		quit:tbllist(END).exists()
		
		set XTBL = tbllist(START).order()
		quit:(XTBL ']] END)
		
		set ER = 1
	}
	
	else  set ER = 1

	if ER set RM = $$^MSG(1480)	// Invalid syntax/name
	
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "60659^41656^Dan Russell^5170"	// Signature - LTD^TIME^USER^SIZE
