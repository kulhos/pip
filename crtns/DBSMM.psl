DBSMM	
		 
	/*
	PSL interactive editor
	
	Allows input of PSL code and displays compiled code.

	---- Revision History -------------------------------------------------
	11/29/05 - RussellDS - CR
		   Created.

	-----------------------------------------------------------------------
	*/
	
	type String cmd(), hlp(), initfl, key(), par()
	
	write $$CLEAR^%TRMVT

	set cmd("RUN") = "D RUN^DBSMM(rec),REF^EDIT"	// D key processing
	set cmd("LIST") = "D LIST^DBSMM,REF^EDIT"	// List class & method
	set cmd("HELP") = "D HELP^DBSMM,REF^EDIT"
	set cmd("?") = "D HELP^DBSMM,REF^EDIT"		// Display valid options
	set cmd("CONVERT") = "D CONVERT^DBSMM(1/REQ),REF^EDIT" 

	set par("DIRECTORY") = $$HOME^%TRNLNM		// Default directory
	set par("EXTENSION") = "PROC"			// Default file type
	set par("SOURCE") = "PSL"			// PSL mode
	set par("STATUS") = "SOURCE,EXTENSION"		// status option

	set key("END") = "RUN" 
	set initfl = $$HOME^%TRNLNM("DBSMM.INI")	// Parameter init file

	set par = "DIRECTORY,EXTENSION,SOURCE"
	
	do command(.hlp())
	
	do ^EDIT(,,,,,.cmd(),.key,.par,"PSL Interactive Editor","hlp(",initfl) 
	
	quit
	
	
RUN(String rec)	// Compile PSL code (PF1 key)

	type Number i, ln, zln
	type String %fkey, msrc(), src()

	use 0
	
	set zln = rec.length($C(13, 10)) + 1
	set ln = zln
	if (zln > 12) set zln = 12	// Allocate room for error messages
	
	write $$CLRXY^%TRMVT(zln, 24)
	write !, "----------------------------- Error Message ------------------------------",!
	
	for i = 1:1:ln set src(i) = rec.piece($C(13, 10), i)
	
	do TOPSL
	
	// disply M code

	write !,$$MSG^%TRMVT("Display M code",0,1),!
	
	write $$CLEAR^%TRMVT
	write $$LOCK^%TRMVT
	
	do ^DBSHLP("msrc(",,,,"Converted PSL procedural code")	// Display M code
	
	write $$MSG^%TRMVT("")
	
	set %fkey="ENT"				// Reset F11 key
	
	quit


TOPSL	

	type public String msrc(), src()

	do SYSVAR^SCADRV0()
	
	do cmpA2A^UCGM(.src(), .msrc())
	
	quit
	
	
LIST	// List object table (class, method, description, and script file name)

	type public String %fkey

	type Number i
	type String buf(), last
	// list system keywords

	set buf(1) = " Keyword                  Description"
	set buf(2) = " --------------------     -----------"
	set i = 3
	
	type DbSet dskw = Db.selectDbSet("STBLSYSKEYWD", "", "KEYWORD ASC")
	
	while dskw.next() do {
		
		type String keyword
		
		type RecordSTBLSYSKEYWD keywd = dskw.getRecord("STBLSYSKEYWD")
		
		set keyword = keywd.keyword
		
		set buf(i) = " "_keyword.justify(25, -1)_keywd.des
		set i = i + 1
	}
	
	write $$CLEAR^%TRMVT
	
	do ^DBSHLP("buf(")
	
	set %fkey="ENT"

	// list class, method, and script file information
	kill buf
	
	set buf(1) = " Class      Method         Description                             Script File"
	set buf(2) = " -----      ------         -----------                             ------------"
	set i = 3
	set last = ""
	
	type DbSet dsmeth = Db.selectDbSet("OBJECTMET", "", "CLASS,METHOD ASC")
	
	while dsmeth.next() do {
		
		type String des, method
		
		type RecordOBJECTMET objmeth = dsmeth.getRecord("OBJECTMET")
		
		if (last '= objmeth.class) do {
		
			set buf(i) = " "_objmeth.class
			set i = i + 1
			set last = objmeth.class
		}
		
		set method = objmeth.method
		set des = objmeth.des
		
		set buf(i) = "            "_method.justify(15, -1)_des.justify(40, -1)_objmeth.script
		set i = i + 1
	}

	do ^DBSHLP("buf(")
	
	set %fkey="ENT"
	
	// list property 
	kill buf
	
	set buf(1) = " Class      Property       Description                              Script File"
	set buf(2) = " -----      --------       -----------                              -----------"
	set i = 3
	set last = ""
	
	type DbSet dsprop = Db.selectDbSet("OBJECTPROP", "", "CLASS,PROPERTY ASC")
	
	while dsprop.next() do {
		
		type String des, property
		
		type RecordOBJECTPROP objprop = dsprop.getRecord("OBJECTPROP")
		
		if (last '= objprop.class) do {
		
			set buf(i) = " "_objprop.class
			set i = i + 1
			set last = objprop.class
		}
		
		set property = objprop.property
		set des = objprop.des
		
		set buf(i) = "            "_property.justify(15, -1)_des.justify(40, -1)_objprop.script
		set i = i + 1
	}
	
	write $$CLEAR^%TRMVT
	
	do ^DBSHLP("buf(")
	
	set %fkey="ENT"
	
	quit
	

CONVERT(String routine)	// Convert PSL code into a M routine 

	/*
	command syntax:  CONVERT routine_name
	
	The routine must be a Z_named routine, otherwise the Z_$J name will be used.
	*/
	
	type public String rec
	
	type Number i, ln
	type String msrc(), src(), z
	
	set routine = routine.get().piece(".", 1).upperCase()
	if routine.isNull() set routine = "Z"

	set ln = rec.length($C(13, 10)) - 1

	for i = 1:1:ln set src(i) = rec.piece($C(13, 10), i)

	write $$CLRXY^%TRMVT(12, 24)
	write !,"----------------------------- Error Message ------------------------------",!
	do TOPSL

	// Add routine name
	if (msrc(1).extract(1,routine.length()) '= routine) do {
		
		set msrc(.1) = routine_" ; PSL conversion"
		do ^SCACOPYR(.z)			// Copyright messaqge
		set msrc(.2) = z
	}
	
	set msrc(.25) = " ;------ PSL source code -------"
	set msrc(.3)=" ;"
	set z=""
	for i = 1:1 set z = src(z).order() quit:z.isNull()  do {
		
		set msrc((i / 1000) + .3) = " ; "_src(z)
	}
	set msrc(((i + 1) / 1000) + .3) = " ;"
	set msrc(((i + 2) / 1000) + .3) = " ;------ Compiled M code ------"
	set msrc(((i + 3) / 1000) + .3) = " ;"
	
	write $$MSG^%TRMVT("Routine "_routine_".M created",,1)
	
	do ^%ZRTNCMP(routine, "msrc", 0, "")
	
	quit


HELP	// Display valid commands

	type public String %fkey
	
	type String buf()

	do command(.buf())
	
	do ^DBSHLP("buf(")
	
	set %fkey="ENT"				// Reset F11 key
	
	quit
	
	
command(String help())

	set help(1) = "      *** Press <GOLD><7> keys to access command line ***"
	set help(2) = ""
	set help(3) = " Command                                               Syntax"
	set help(4) = " -------                                               ---------------"
	set help(5) = ""
	set help(6) = " CLEAR     Clears the contents of the buffer           [CL]EAR"
	set help(7) = "" 
	set help(8) = " CONVERT   Convert PSL statements into a M routine     [CON]VERT Z_routine_name"
	set help(9) = ""
	set help(10) = " EDIT      Edit a PSL script file                      [ED]IT filename"
	set help(11) = ""
	set help(12) = " INCLUDE   Append a file to the current buffer         [IN]CLUDE filename"
	set help(13) = ""
	set help(14) = " LIST      List classes, methods, and keywords         [LI]ST" 
	set help(15) = ""
	set help(16) = " SAVE      Save the current buffer into a script file  [SA]VE filename"
	set help(17) = ""
	
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "60233^64555^Dan Russell^6275"	// Signature - LTD^TIME^USER^SIZE
