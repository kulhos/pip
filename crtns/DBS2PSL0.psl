DBS2PSL0(RecordDBTBL2 dbtbl2,String VPT,String VPB)	// -  - V7.0 - PSL Screen Compiler
	/*
	       ORIG:  CHIANG - 15 AUG 1991
	       DESC:
	   I18N=QUIT: Exculded from I18N standards.

	  ---------- Revision History -------------------------------------------
	  
	08/31/2008 - RussellDS - CR30801
		Eliminated use of ^MSG due to bootstrap issues.
	  
	11/01/07 - Pete Chenard - CR 30186
		   Modified to correct problem with filing the PGM name into
		   DBTBL2.
		   
	09/28/07 - Pete Chenard - CR 29499
		   Modified to call bypassSave when writing the program name
		   to the database.

	10/16/06 - Pete Chenard - CR 23555
		   Cleaned up compiler warnings.
		   
	02/23/06 - Pete Chenard - CR 19551
		   Added vSN to parameter list to PARLIST and REPEAT.
		   
	01/17/05 - Pete Chenard - CR 19036
		   Fixed undefined error on vSN array.  This array entry
		   needs to be set up in the REPEAT section of this procedure.
		   
	11/26/05 - RussellDS - CR18065
		   Removed call to obsoleted DBSPARS3.
		   
	03/23/05 - Pete Chenard - CR14146
		   General Cleanup.
	  	     
	01/20/03 - Chenard -cr7178
		   Modified define as Public the record objects for labels VDA
			
	08/28/02 - Pete Chenard - 45497
		   Converted to PSL.
		   Removed old revision history

	*/
	
	type public String %,%MOD,%NAMCUR(),%OFF,BLKSIZ,C,D,DEFV,ditab(),DT(),ESEQ,EXTSID,ISEQ,KVAR,MAXLN,OLNTB
	type public String PFID,PGM,PON,PRE,PXSEQ,Q,QQ,SAVT,SEQ,SID,TOTOBJ
	type public String vFID(),VSAV(),VDAGI,VDAV1,VDAV2,VPROBJ,VPRPRO,VPRV1,VPRV2,VPRTYP,vSN()

	set EXTSID=SID
	set VSAV(1)="" 
	set VSAV(2)="" 
	set Q=$C(34) 
	set %="|" 
	set QQ=Q_Q
	set (BLKSIZ,DEFV,PXSEQ,PON,ISEQ,%MOD,MAXLN,SAVT,%OFF)=0 
	set D=1 
	set C=1
	set PFID=""
	set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab"
	
	// Default all video to 0
	set (VPRV1,VPRV2,VDAV1,VDAV2)=0
	// Literal field, no data type
	set VPRTYP=" "
	// Protection Code for Literals, read only
	set VPRPRO=1
	// Graphics toggle off for data
	set VDAGI=0
	set OLNTB=1001
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set PGM=dbtbl2.vpgm 
	set PRE=dbtbl2.norpc

	if PGM="" do {
		do GTPGM^DBSDS
		set PGM=$TR(PGM,"*","S") do:PGM="" GTPGM^DBSDS 
		set dbtbl2.vpgm=PGM 
		do dbtbl2.bypassSave()
	}

	write !!,SID,?11," - Compile Run-Time Program - ",PGM," "
	write $$TIM^%ZM," (",cuvar.%VN,")",!

	do PARLIST(.dbtbl2,.vobjlst,dbtbl2.pfid,.vFID,.vSN)	// Build actual and formal parameter lists.
	if PRE'?.E1"^"1A.AN set PRE=""
	//  S ER=0 D ~p1  I ER Q
	if PRE'="" set PRE=" set ER=0 do "_PRE_"("_vobjlst("actual")_") if ER quit"
	else  set PRE=" "
	set PFID=dbtbl2.pfid
	set TOTOBJ=0 set SEQ=0 set ESEQ=SEQ set %NAMCUR=dbtbl2.repeat*1000
	do LOAD
	do TABINFO(SID,.ditab())
	set VPROBJ=0
	set VPT=DT(1)\1000 set VPB=DT($O(DT(""),-1))\1000
	quit


private LOAD	// Create DT(SEQ) & %NAMCUR(DINAM) array's
	type public String %NAMCUR(),DT(),SEQ,TOTOBJ,ZREPEAT
	type String dinam,DINAM,x
	set x=""
	set SEQ=0
	type DbSet ds=Db.selectDbSet("DBTBL2D","LIBS=:%Library and SID=:SID and SEQ>:SEQ")
	while ds.next() do { 	
		type RecordDBTBL2D dbtbl2d=ds.getRecord()
		set SEQ=dbtbl2d.seq
		set dinam=dbtbl2d.name
		set $piece(x,"|",1)=dbtbl2d.status
		set $piece(x,"|",2)=dbtbl2d.dtype
		set $piece(x,"|",3)=dbtbl2d.size
		set $piece(x,"|",5)=dbtbl2d.name
		set $piece(x,"|",6)=dbtbl2d.ltbl
		set $piece(x,"|",7)=dbtbl2d.pattern
		set $piece(x,"|",8)=dbtbl2d.pp
		set $piece(x,"|",9)=dbtbl2d.pre
		set $piece(x,"|",10)=dbtbl2d.type
		set $piece(x,"|",11)=dbtbl2d.prompt
		set $piece(x,"|",12)=dbtbl2d.req
		set $piece(x,"|",13)=dbtbl2d.minimum
		set $piece(x,"|",14)=dbtbl2d.maximum
		set $piece(x,"|",15)=dbtbl2d.decpre
		set $piece(x,"|",18)=dbtbl2d.pedit
		set $piece(x,"|",21)=dbtbl2d.del
		set $piece(x,"|",22)=dbtbl2d.pos
		set $piece(x,"|",30)=dbtbl2d.prmpt
		set TOTOBJ=TOTOBJ+1
		if dinam?1"<<".E1">>" set dinam=$E($P(dinam,">>",1),3,999)

		// Convert <<VAR,FMT,SIZE,...>> to standard DT()
		set DINAM=dinam
		// convert <<"TEXT">> to TEXT
		if dbtbl2d.prompt?1"<<"1E.E1">>" set x=$$VAR(dbtbl2d)

		if $E(DINAM)="[",DINAM?.E1",".E1"]"1E.E set DINAM="["_$P(DINAM,",",2)
		set %NAMCUR(DINAM)=$P(x,"|",1)
		if %NAMCUR,%NAMCUR(DINAM)>%NAMCUR do {
			set %NAMCUR(DINAM)=%NAMCUR(DINAM)_"+"
			set ZREPEAT($P(x,"|",5))=""
			}
			
		// Null text tags
		if $E(DINAM)="@",$P(x,"|",2)["*" set $P(x,"|",5)=""
		set DT(SEQ)=x
		}  // while

	quit


VAR(RecordDBTBL2D dbtbl2d)	// <<VAR,PMT,FMT,SIZE,TBL,MIN,MAX,DEC>>

	type String X,Y,Z

	set (X,Z)=""
	set $P(X,"|",1)=dbtbl2d.status
	set $P(X,"|",2)=dbtbl2d.dtype
	set $P(X,"|",3)=dbtbl2d.size
	set $P(X,"|",5)=dbtbl2d.name
	set $P(X,"|",6)=dbtbl2d.ltbl
	set $P(X,"|",7)=dbtbl2d.pattern
	set $P(X,"|",8)=dbtbl2d.pp
	set $P(X,"|",9)=dbtbl2d.pre
	set $P(X,"|",10)=dbtbl2d.type
	set $P(X,"|",11)=dbtbl2d.prompt
	set $P(X,"|",12)=dbtbl2d.req
	set $P(X,"|",13)=dbtbl2d.minimum
	set $P(X,"|",14)=dbtbl2d.maximum
	set $P(X,"|",15)=dbtbl2d.decpre
	set $P(X,"|",18)=dbtbl2d.pedit
	set $P(X,"|",21)=dbtbl2d.del
	set $P(X,"|",22)=dbtbl2d.pos
	set dbtbl2d.prmpt=dbtbl2d.name
	set $P(X,"|",30)=dbtbl2d.prmpt
	set Y=dbtbl2d.prompt set Y=$E(Y,3,$L(Y)-2)	//strip off <<  >>
	if Y?1A.AN!(Y?1"%".AN)!(Y?1A.AN1"("1AN.AN1")") do { quit X
		set $P(X,"|",5)=Y 
		set $P(X,"|",11)="" 
		set $P(X,"|",2)=dbtbl2d.type
		}

	// <<VAR>> or <<$function>> syntax
	if $E(Y)="$"!($P(Y,",",4)="") quit X
	if $P(Y,",",4)=0 quit $P(X,"|",1,10)_"|<<"_$P(Y,",",1)_">>|"_$P(X,"|",12,99)

	set $P(Z,"|",5)=$P(Y,",",1)			// data item name ... replace with var name
	set $P(Z,"|",11)=$P(Y,",",2)		// prompt
	set $P(Z,"|",10)=$P(Y,",",3)		// typ
	set $P(Z,"|",3)=$P(Y,",",4)			// len
	set $P(Z,"|",13)=$P(Y,",",5)		// min
	set $P(Z,"|",14)=$P(Y,",",6)		// max
	set $P(Z,"|",15)=$P(Y,",",7)		// decimal
	if $P(Y,",",8)>0 set $P(Z,"|",21)=124 set $P(Z,"|",22)=$P(Y,",",8) // position
	set $P(Z,"|",6)=$P(Y,",",9,99)		// table
	set $P(Z,"|",1)=$P(X,"|",1)			// location preamble
	set $P(Z,"|",12)=$P(X,"|",12)		//required flag
	set $P(Z,"|",18)=$P(X,"|",18)		// print edit
 	set $P(Z,"|",2)=$P(Y,",",3)			//format

	if Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=:SEQ,PSEQ=1") set $P(Z,"|",9)=1  //pre proc
	if Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=:SEQ,PSEQ=21") set $P(Z,"|",8)=1 // post proc
	quit Z


	// ---------- Data item protection
private PROT
	type public String VP()
	type String X
	
	if $G(VP(1))'["VPTBL(" quit
	do TMPD(" //")
	set X=VP(1)_" set VO(@)=$E(VO(@),1,11)_(VP+1)_$E(VO(@),13,99)"
	do TMPD(X)
	do TMPD(" //")
	quit


private TMPD(String X)	
	type public Number D
	type public String TMPD()
	
	set D=D+1
	set TMPD(D)=X 
	quit
	

private PARLIST(RecordDBTBL2 dbtbl2,	// Screen Object	REQ/MECH:REF
		String vobjlst(),	// Parameter List	REQ/MECH/REF
		String FILES,		// Screen File List	REQ/MECH:VAL
		String vFID(),		// Repeat Region Tables	REQ/MECH:REF
		String vSN())		// Short Name reference	REQ/MECH:REF
		
 	/* Builds the formal and actual parameter lists for all subroutine calls 
 	   that require objects to be passed to them.	*/

	type Public String fsn()
	type String DLIB,i,LIB,PFID,X
	
	do REPEAT(.dbtbl2,.vFID,.vSN)
	set vobjlst("actual")=""
	set vobjlst("formal")=""
	set vobjlst("tab")=""
	
	if FILES'="" do {
		type String fid
		set (LIB,DLIB)=%Library set PFID=$P(FILES,",",1)

		// build actual and formal parameter list.
		for i=1:1:$L(FILES,",") do {
			set fid=$P(FILES,",",i)
			if 'fsn(fid).exists() do fsn^DBSDD(.fsn,fid)		// file header info
			set vobjlst("actual")=vobjlst("actual")_",."_$P(fsn(fid),"|",1)  //actual parameter list for all procedure calls
			if $E(vobjlst("actual"),$L(vobjlst("actual")))="(" set vobjlst("actual")=$E(vobjlst("actual"),1,$L(vobjlst("actual"))-1)

			set vobjlst("tab")=vobjlst("tab")_",."_$P(fsn(fid),"|",1)  //actual parameter list for all procedure calls
			if $E(vobjlst("tab"),$L(vobjlst("tab")))="(" set vobjlst("tab")=$E(vobjlst("tab"),1,$L(vobjlst("tab"))-1)

			set vobjlst("formal")=vobjlst("formal")_",Record"_fid_" "_$P(fsn(fid),"|",1)  // formal list
			if $E(vobjlst("formal"),$L(vobjlst("formal")))="(" set vobjlst("formal")=$E(vobjlst("formal"),1,$L(vobjlst("formal"))-1)

			if vFID(fid).exists() do {
				set vobjlst("formal")=vobjlst("formal")_"()"  // add parens if array of objects
				set vobjlst("actual")=vobjlst("actual")_"()"  // add parens if array of objects
				}
			set vobjlst(i)=$P(fsn(fid),"|",1)_"|"_fid_"|Record"_fid
			}  // FOR
		}  // if FILES'="" ..

	
	set vobjlst("tab")=$E(vobjlst("tab"),2,999)   	// strip off comma
	if vobjlst("tab")="." set vobjlst("tab")=""   		// set to null if no parameters
	set vobjlst("actual")=$E(vobjlst("actual"),2,999)   	// strip off comma
	if vobjlst("actual")="." set vobjlst("actual")=""   	// set to null if no parameters
	set vobjlst("formal")=$E(vobjlst("formal"),2,999)   	// strip off comma
	quit

	
private REPEAT(RecordDBTBL2 dbtbl2,	// Screen Object	/REQ/MECH:REF
		String vFID(),		// Table Array[*]	/NOREQ/MECH:REF
		String vSN())		// Short name array [*] /NOREQ/MECH:REF

	/* If this screen does not have a repeat region, quit
	   Scan DBTBL2D for items inside repeat region.  If it is a column name, 
	   flag the file as being inside the repeat region.  This information will be used
	   to construct the actual and formal parameter lists for the VDA1 section of the
	   compiled M code.
	   
	   	[*] ARGUMENT NOTES:
		.	The vFID() and vSN() arrays are returned from this function
			and contain the name of each table (vFID) and short name (vSN)
			that is referenced inside the repeat region of the screen.  
			These arrays are referenced at various places within the screen compiler.
	    */
	
	type String di,fid,name,sn
	type public String fsn(),REPEAT()
	
	if 'dbtbl2.repeat quit
	type DbSet ds=Db.selectDbSet("DBTBL2D","LIBS=:%Library and SID=:SID and SEQ>0")
	while ds.next() do {
		type RecordDBTBL2D dbtbl2d=ds.getRecord("DBTBL2D")
		if dbtbl2d.status\1000<dbtbl2.repeat quit		// not in repeat region
		set name=dbtbl2d.name
		if $E(name)'="[" quit					// not a real column name
		set fid=$P($E(name,2,$l(name)),"]",1)
		if fid["," set fid=$P(fid,",",2)
		if 'fsn(fid).exists() do fsn^SQLDD(.fsn,fid)
		set sn=$P(fsn(fid),"|",1)
		if $E(sn,$L(sn))="(" set sn=$E(sn,1,$L(sn)-1)
		set vFID(fid)=sn	
		set vSN(sn)=fid					    // file is part of repeat region
		set sn=sn.upperCase()
		set di=$P(name,"]",2)
		set di=di.upperCase()		
		set REPEAT(sn_"."_di)=""					// Used in REPEATCK^DBS2PSL4
		}
	quit
	
	
private TABINFO(String SID,	// Screen ID
		String ditab())	// Data item/%TAB array		/MECH=REFARR:W
	
	/*
	Create screen data item/%TAB sequence index array
	*/
	
	type Number SEQ = 1
		
	kill ditab
	
	type DbSet ds = Db.selectDbSet("DBTBL2D", "LIBS='SYSDEV' AND SID=:SID", "SEQ ASC")
	
	while ds.next() do {
		
		type String DI, VAR
		
		type RecordDBTBL2D dbtbl2d = ds.getRecord("DBTBL2D")
		
		set DI = dbtbl2d.name
		set VAR = dbtbl2d.prompt
		
		// If data item reference, remove library and save
		if (DI ? 1"["1E.E1"]"1E.E) set DI = "["_DI.piece(",", 2) do {
			
			if DI.isNull() set DI = " "
			set ditab(DI) = (+dbtbl2d.status)_"|"_SEQ
			set SEQ = SEQ + 1
		}	
			
		if (VAR ? 1"<<"1E.E1">>") do {
			
			set VAR = VAR.extract(3, VAR.length() - 2)
			if ((VAR ? 1"%"1A.AN) ! (VAR ? 1A.AN)) do {
				
				if DI.isNull() set DI = " "
				set ditab(DI) = (+dbtbl2d.status)_"|"_SEQ
				set SEQ = SEQ + 1
			}
		}
	}
	
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61569^11632^Sha H Mirza^10990"	// Signature - LTD^TIME^USER^SIZE
