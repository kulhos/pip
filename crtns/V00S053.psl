V00S053(Number %ProcessMode,RecordDBTBL1 fDBTBL1)   //DBS -  - SID= <DBTBL1> File Definition
 ;;Copyright(c)2010 Sanchez Computer Associates, Inc.  All Rights Reserved - 02/24/2010 18:33 - pip
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/18/07 - Pete Chenard - CR23555
		   Corrected compiler warnings.
		   
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'%ProcessMode.exists() %ProcessMode=5
 if (%ProcessMode = 5) do {
  if 'fDBTBL1.exists() set fDBTBL1 = Class.new("RecordDBTBL1")
 }
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab",VSID="DBTBL1",VPGM=$T(+0),VSNAME="File Definition"
 set VFSN("DBTBL1")="zfDBTBL1"
 set vPSL=1
 set KEYS(1)=fDBTBL1.%LIBS
 set KEYS(2)=fDBTBL1.FID
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 do VPR(.fDBTBL1),VDA1(.fDBTBL1),^DBSPNT() quit

 // Display Pre-Processor
 //
 if '%ProcessMode do VNEW(.fDBTBL1),VDSPPRE(.fDBTBL1) quit:$G(ER)  do VPR(.fDBTBL1),VDA1(.fDBTBL1)
 if %ProcessMode do VLOD(.fDBTBL1) quit:$G(ER)  do VDSPPRE(.fDBTBL1) quit:$G(ER)  do VPR(.fDBTBL1),VDA1(.fDBTBL1)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=XECUTE
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fDBTBL1)
	quit


VNEW(RecordDBTBL1 fDBTBL1) // Initialize arrays if %O=0
 
 do VDEF(.fDBTBL1)
 do VLOD(.fDBTBL1)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
VDEF(RecordDBTBL1 fDBTBL1)
 quit:fDBTBL1.%LIBS.isNull() ! fDBTBL1.FID.isNull() 
 quit:%ProcessMode  set ER=0 if (fDBTBL1.%LIBS="")!(fDBTBL1.FID="") set ER=1,RM=$$^MSG(1767,"%LIBS,FID") Q
 if Db.isDefined("DBTBL1","DBTBL1.%LIBS=:fDBTBL1.%LIBS AND DBTBL1.FID=:fDBTBL1.FID") S ER=1,RM=$$^MSG(2327) Q
 do fDBTBL1.setAuditFlag(1)
 if fDBTBL1.DEL="" set fDBTBL1.DEL=124
 if fDBTBL1.NETLOC="" set fDBTBL1.NETLOC=0
 if fDBTBL1.RECTYP="" set fDBTBL1.RECTYP=1
 if fDBTBL1.SYSSN="" set fDBTBL1.SYSSN="PBS"
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
 ;
VLOD(RecordDBTBL1 fDBTBL1) // Load data from disc - %O = (1-5)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordDBTBL1 fDBTBL1) // Display screen prompts
 set VO="72||13|0"
 set VO(0)="|0"
 set VO(1)=$C(1,2,80,1,0,0,0,0,0,0)_"01T                        File Definition (Header Page)                           "
 set VO(2)=$C(2,1,80,0,0,0,0,0,0,0)_"11Tlqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk"
 set VO(3)=$C(3,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(4)=$C(3,8,9,0,0,0,0,0,0,0)_"01T File ID:"
 set VO(5)=$C(3,34,5,0,0,0,0,0,0,0)_"01TUser:"
 set VO(6)=$C(3,56,13,0,0,0,0,0,0,0)_"01TLast Updated:"
 set VO(7)=$C(3,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(8)=$C(4,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(9)=$C(4,4,13,1,0,0,0,0,0,0)_"01T Description:"
 set VO(10)=$C(4,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(11)=$C(5,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(12)=$C(5,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(13)=$C(6,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(14)=$C(6,9,13,1,0,0,0,0,0,0)_"01T System Name:"
 set VO(15)=$C(6,42,25,1,0,0,0,0,0,0)_"01T Documentation File Name:"
 set VO(16)=$C(6,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(17)=$C(7,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(18)=$C(7,9,13,0,0,0,0,0,0,0)_"01T Global Name:"
 set VO(19)=$C(7,47,20,0,0,0,0,0,0,0)_"01TSupertype File Name:"
 set VO(20)=$C(7,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(21)=$C(8,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(22)=$C(8,4,18,0,0,0,0,0,0,0)_"01T Local Array Name:"
 set VO(23)=$C(8,48,19,0,0,0,0,0,0,0)_"01TProtection Routine:"
 set VO(24)=$C(8,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(25)=$C(9,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(26)=$C(9,6,16,0,0,0,0,0,0,0)_"01TPublish Routine:"
 set VO(27)=$C(9,56,11,1,0,0,0,0,0,0)_"01T File Type:"
 set VO(28)=$C(9,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(29)=$C(10,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(30)=$C(10,55,12,0,0,0,0,0,0,0)_"01TPSL Package:"
 set VO(31)=$C(10,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(32)=$C(11,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(33)=$C(11,6,16,1,0,0,0,0,0,0)_"01T Primary Key(s):"
 set VO(34)=$C(12,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(35)=$C(12,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(36)=$C(13,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(37)=$C(13,4,18,1,0,0,0,0,0,0)_"01T Network Location:"
 set VO(38)=$C(13,26,16,1,0,0,0,0,0,0)_"01T Enable Logging:"
 set VO(39)=$C(13,47,13,1,0,0,0,0,0,0)_"01T Record Type:"
 set VO(40)=$C(13,64,11,0,0,0,0,0,0,0)_"01T Delimiter:"
 set VO(41)=$C(13,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(42)=$C(14,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(43)=$C(14,26,30,0,0,0,0,0,0,0)_"01T Look-Up Table Display Format "
 set VO(44)=$C(14,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(45)=$C(15,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(46)=$C(15,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(47)=$C(16,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(48)=$C(16,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(49)=$C(17,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(50)=$C(17,4,6,0,0,0,0,0,0,0)_"01TQuery:"
 set VO(51)=$C(17,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(52)=$C(18,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(53)=$C(18,4,39,0,0,0,0,0,0,0)_"01TRecord Existed Indicator (node number):"
 set VO(54)=$C(18,54,21,0,0,0,0,0,0,0)_"01TValid for Extraction:"
 set VO(55)=$C(18,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(56)=$C(19,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(57)=$C(19,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(58)=$C(20,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(59)=$C(20,4,74,0,0,0,0,0,0,0)_"01T------------ Column Names Used for Keeping Audit Information -------------"
 set VO(60)=$C(20,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(61)=$C(21,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(62)=$C(21,9,7,0,0,0,0,0,0,0)_"01TCreated"
 set VO(63)=$C(21,17,8,0,0,0,0,0,0,0)_"01TBy User:"
 set VO(64)=$C(21,40,5,0,0,0,0,0,0,0)_"01TDate:"
 set VO(65)=$C(21,60,5,0,0,0,0,0,0,0)_"01TTime:"
 set VO(66)=$C(21,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(67)=$C(22,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(68)=$C(22,9,16,0,0,0,0,0,0,0)_"01TUpdated By User:"
 set VO(69)=$C(22,40,5,0,0,0,0,0,0,0)_"01TDate:"
 set VO(70)=$C(22,60,5,0,0,0,0,0,0,0)_"01TTime:"
 set VO(71)=$C(22,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(72)=$C(23,1,80,0,0,0,0,0,0,0)_"11Tmqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VDA1(RecordDBTBL1 fDBTBL1)  // Display screen data
 new V
 //
 set VO="101|73|13|0"
 set VO(73)=$C(3,18,12,2,0,0,0,0,0,0)_"01T"_$E(fDBTBL1.FID,1,12)
 set VO(74)=$C(3,40,15,2,0,0,0,0,0,0)_"01T"_$E(fDBTBL1.USER,1,15)
 set VO(75)=$C(3,70,10,2,0,0,0,0,0,0)_"01D"_$$DAT^%ZM(fDBTBL1.LTD)
 set VO(76)=$C(4,18,40,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1.DES,1,40)
 set VO(77)=$C(6,23,3,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1.SYSSN,1,3)
 set VO(78)=$C(6,68,13,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1.FDOC,1,30)
 set VO(79)=$C(7,23,20,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1.GLOBAL,1,20)
 set VO(80)=$C(7,68,12,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1.PARFID,1,12)
 set VO(81)=$C(8,23,12,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1.FSN,1,12)
 set VO(82)=$C(8,68,4,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1.FPN,1,4)
 set VO(83)=$C(9,23,30,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1.PUBLISH,1,30)
 set VO(84)=$C(9,68,1,2,0,0,0,0,0,0)_"00N"_fDBTBL1.FILETYP
 set VO(85)=$C(10,68,13,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1.PSLPACKAGE,1,40)
 set VO(86)=$C(11,23,58,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1.ACCKEYS,1,60)
 set VO(87)=$C(13,23,1,2,0,0,0,0,0,0)_"00N"_fDBTBL1.NETLOC
 set VO(88)=$C(13,44,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL1.LOG:"Y",1:"N")
 set VO(89)=$C(13,61,2,2,0,0,0,0,0,0)_"00N"_fDBTBL1.RECTYP
 set VO(90)=$C(13,76,3,2,0,0,0,0,0,0)_"00N"_fDBTBL1.DEL
 set VO(91)=$C(15,4,76,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1.DFTDES,1,76)
 set VO(92)=$C(16,4,76,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1.DFTDES1,1,76)
 set VO(93)=$C(17,11,65,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1.QID1,1,65)
 set VO(94)=$C(18,44,6,2,0,0,0,0,0,0)_"00N"_fDBTBL1.EXIST
 set VO(95)=$C(18,76,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL1.VAL4EXT:"Y",1:"N")
 set VO(96)=$C(21,26,12,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1.PTRUSER,1,12)
 set VO(97)=$C(21,46,12,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1.PTRTLD,1,12)
 set VO(98)=$C(21,66,12,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1.PTRTIM,1,12)
 set VO(99)=$C(22,26,12,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1.PTRUSERU,1,12)
 set VO(100)=$C(22,46,12,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1.PTRTLDU,1,12)
 set VO(101)=$C(22,66,12,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1.PTRTIMU,1,12)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
	
VTAB(RecordDBTBL1 fDBTBL1)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab
 set %MAX=29,VPT=1,VPB=23,PGM=$T(+0),DLIB="SYSDEV",DFID="DBTBL1"
 set OLNTB=23001
 
 set VFSN("DBTBL1")="zfDBTBL1"
 //
 // 
	
	
 set %TAB(1)=$C(2,17,12)_"21U12402|1|[DBTBL1]FID|[DBTBL1]|if X?1A.AN!(X?1""%"".AN)!(X?.A.""_"".E)|||||||25"
 set %TAB(2)=$C(2,39,15)_"20T12411|1|[DBTBL1]USER|||||||||40"
 set %TAB(3)=$C(2,69,10)_"20D12410|1|[DBTBL1]LTD"
 set %TAB(4)=$C(3,17,40)_"01T12401|1|[DBTBL1]DES"
 set %TAB(5)=$C(5,22,3)_"01U12402|1|[DBTBL1]SYSSN|[SCASYS]"
 set %TAB(6)=$C(5,67,13)_"01U12401|1|[DBTBL1]FDOC|||||||||30"
 set %TAB(7)=$C(6,22,20)_"00T12401|1|[DBTBL1]GLOBAL||if ((X?1A.AN)!(X?1""%"".AN)!(X?1""[""1E.E1""]""1E.E))|||||||31"
 set %TAB(8)=$C(6,67,12)_"00U12404|1|[DBTBL1]PARFID|[DBTBL1]||||||||25"
 set %TAB(9)=$C(7,22,12)_"00T12401|1|[DBTBL1]FSN||if X?1A.AN.E!(X?1""%"".AN.E)|do VP1^V00S053(.fDBTBL1)"
 set %TAB(10)=$C(7,67,4)_"00U12403|1|[DBTBL1]FPN"
 set %TAB(11)=$C(8,22,30)_"00T12406|1|[DBTBL1]PUBLISH"
 set %TAB(12)=$C(8,67,1)_"01N12412|1|[DBTBL1]FILETYP|[DBCTLFILETYP]||do VP2^V00S053(.fDBTBL1)"
 set %TAB(13)=$C(9,67,13)_"00T12411|1|[DBTBL1]PSLPACKAGE|||||||||40"
 set %TAB(14)=$C(10,22,58)_"01U12401|1|[DBTBL1]ACCKEYS|@SELDI^DBSFUN(FID,.X)||do VP3^V00S053(.fDBTBL1)||||||100"
 set %TAB(15)=$C(12,22,1)_"01N12403|1|[DBTBL1]NETLOC|,0#Server Only,1#Client Only,2#Both||do VP4^V00S053(.fDBTBL1)"
 set %TAB(16)=$C(12,43,1)_"00L12405|1|[DBTBL1]LOG|||do VP5^V00S053(.fDBTBL1)"
 set %TAB(17)=$C(12,60,2)_"01N12402|1|[DBTBL1]RECTYP|,0#None,1#Unsegmented,10#Node [Segmented],11#Mixed type 1&10||do VP6^V00S053(.fDBTBL1)"
 set %TAB(18)=$C(12,75,3)_"00N12401|1|[DBTBL1]DEL|[DBCTLDELIM]"
 set %TAB(19)=$C(14,3,76)_"00T12406|1|[DBTBL1]DFTDES|@SELDI^DBSFUN(FID,.X)||do VP7^V00S053(.fDBTBL1)||||||200"
 set %TAB(20)=$C(15,3,76)_"00T12409|1|[DBTBL1]DFTDES1|@SELDI^DBSFUN(FID,.X)||do VP8^V00S053(.fDBTBL1)||||||200"
 set %TAB(21)=$C(16,10,65)_"00T12401|1|[DBTBL1]QID1|||do VP9^V00S053(.fDBTBL1)||||||100"
 set %TAB(22)=$C(17,43,6)_"00N12413|1|[DBTBL1]EXIST"
 set %TAB(23)=$C(17,75,1)_"00L12401|1|[DBTBL1]VAL4EXT"
 set %TAB(24)=$C(20,25,12)_"00U12403|1|[DBTBL1]PTRUSER|[DBTBL1D]:QU ""[DBTBL1D]FID=<<FID>>"""
 set %TAB(25)=$C(20,45,12)_"00U12404|1|[DBTBL1]PTRTLD|[DBTBL1D]:QU ""[DBTBL1D]FID=<<FID>>""||do VP10^V00S053(.fDBTBL1)"
 set %TAB(26)=$C(20,65,12)_"00U12408|1|[DBTBL1]PTRTIM|[DBTBL1D]:QU ""[DBTBL1D]FID=<<FID>>""||do VP11^V00S053(.fDBTBL1)"
 set %TAB(27)=$C(21,25,12)_"00U12409|1|[DBTBL1]PTRUSERU|[DBTBL1D]:QU ""[DBTBL1D]FID=<<FID>>"""
 set %TAB(28)=$C(21,45,12)_"00U12410|1|[DBTBL1]PTRTLDU|[DBTBL1D]:QU ""[DBTBL1D]FID=<<FID>>""||do VP12^V00S053(.fDBTBL1)"
 set %TAB(29)=$C(21,65,12)_"00U12411|1|[DBTBL1]PTRTIMU|[DBTBL1D]:QU ""[DBTBL1D]FID=<<FID>>""||do VP13^V00S053(.fDBTBL1)"
 do VTBL(.fDBTBL1)
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VTBL(RecordDBTBL1 fDBTBL1) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


  //user-defined post procs
 //
VP1(RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, V, X

	/* There are a small number of tables where this isn't
	   required, but it generally is, so just display the
	   message, without an error (and don't turn on the required
	   flag on the screen definition.
	*/
	if X.isNull() do { quit

		// Data required
		set RM = $$^MSG(741)
	}

	// Limit new or changed entries to 8 characters
	if (X.length() > 8), (X '= V) do {

		set ER = 1
		// Limit short name to ~p1 characters
		set RM = $$^MSG(1076, 8)
	}

	quit
VP2(RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public Number X
	type public String RM

	// Global name required except dummy files

	if (X <> 5) do { quit:ER

		if fDBTBL1.global.isNull() do { quit

			set ER = 1
			// Invalid global name
			set RM = $$^MSG(1365)
		}

		if fDBTBL1.fsn.isNull() do { quit

			set ER = 1
			// Missing posting array
			set RM = $$^MSG(1765)
		}
	}
	// Dummy table (type 5), skip next two prompts
	else  do { quit

		do DELETE^DBSMACRO("[DBTBL1]UDACC")
		do DELETE^DBSMACRO("[DBTBL1]UDFILE")
		do GOTO^DBSMACRO("[DBTBL1]ACCKEYS")
	}

	// Defaults for tables mapped to certain globals
	if ({List}"CTBL,STBL,TRN,UTBL").contains(fDBTBL1.global) do {

		if (X <> 5) do {

			do DEFAULT^DBSMACRO("[DBTBL1]NETLOC", 2)
			do DEFAULT^DBSMACRO("[DBTBL1]LOG", 1)
		}
		else  do {

			do DEFAULT^DBSMACRO("[DBTBL1]NETLOC", 0)
			do DEFAULT^DBSMACRO("[DBTBL1]LOG", 0)
		}
	}

	quit
VP3(RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String I(), RM, V, X

	type Number J
	type String tok, XTOK

	if '%ProcessMode do { quit:ER

		// $J cannot be used as a key
		if X.isLike("%$J%", 1) do { quit

			set ER = 1
			// Invalid syntax ~p1
			set RM = $$^MSG(1477, "$J")
		}

		// Note that we do allow literal bottom keys, but
		// only if numbers
		if X.endsWith("""") do { quit

			set ER = 1
			// Literal key cannot be the last key
			set RM = $$^MSG(4354)
		}
	}

	// If change access keys, issue warning
	else  if (X '= V) do {

		type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:fDBTBL1.fid", 1)

		if (dbtbl1.getMode() = 1), (X '= dbtbl1.acckeys) do {

			// Warning - database reorganization may be required
			set RM = $$^MSG(2960)
		}
	}

	set I(3) = ""		// Lookup table

	// Tokenized to avoid issue in case of comma in literal key
	set XTOK = $$TOKEN^%ZS(X, .tok)
	for J = 1:1:XTOK.length(",") do { quit:ER

		type String key

		set key = XTOK.piece(",", J)
		set key = $$UNTOK^%ZS(key, tok)

		quit:key.isLiteral()

		if '$$VALIDKEY^DBSGETID(key) do { quit

			set ER = 1
			// Alphanumeric format only
			set RM = $$^MSG(248) Q
		}

		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:fDBTBL1.fid,DI=:key", 1)

		if (dbtbl1d.getMode() = 1) set RM = RM.get()_", "_dbtbl1d.des
		// ~p1, New Primary Key  - ~p2
		else  set RM = $$^MSG(5177, RM.get(), key)
	}

	quit
VP4(RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public Number X
	type public String RM

	if (X <> 2), (fDBTBL1.filetyp <> 5), ({List}"CTBL,DBCTL,DBTBL1,DBTBL1D,SCATBL,STBL,TRN,UTBL").contains(fDBTBL1.global) do {

		set ER = 1
		// Set network location for both client and server for ~p1 table
		set RM = $$^MSG(2442, fDBTBL1.fid)
	}

	quit
VP5(RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public Number X
	type public String RM

	if (X <> 1), (fDBTBL1.netloc = 2), ({List}"CTBL,DBCTL,DBTBL1,DBTBL1D,SCATBL,STBL,TRN,UTBL").contains(fDBTBL1.global) do {
 
		set ER = 1
		// Enable Automatic Logging should be on when network location is set to 2
		set RM = $$^MSG(2443)
	}

	quit
VP6(RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public Number X
	type public String RM

	if (X = 0), 'fDBTBL1.global.isNull() do {

		set ER = 1
		// Invalid for record type ~p1
		set RM = $$^MSG(1348, 0)
	}

	quit
VP7(RecordDBTBL1 fDBTBL1) //
	do DFTDESCK(.fDBTBL1, 1)
	quit


DFTDESCK(RecordDBTBL1 fDBTBL1,	//
	 Boolean chkAK)		// Check access keys flag

	type public Boolean ER
	type public String I(), RM, X

	type Boolean hit
	type Number J
	type String ACCKEYS, tok, XX

	quit:X.isNull()

	if X.isLike("%:%") set XX = X.piece(":", 1)
	else  set XX = X

	if XX.isLike("%""%") set XX.piece("""", 2) = "TMP"

	if chkAK do {

		set ACCKEYS = fDBTBL1.acckeys
		set ACCKEYS = $$TOKEN^%ZS(ACCKEYS, .tok)
		set hit = 0
		for J = 1:1:ACCKEYS.length(",") do { quit:hit

			type String key

			set key = $$UNTOK^%ZS(ACCKEYS.piece(",", J), tok)
			if XX.isLike("%"_key_"%") set hit = 1
		}
	}
	else  set hit = 1

	if hit do {

		set I(3) = ""

		for J = 1:1:XX.length(",") do { quit:ER
        	
			type Boolean isBad
			type Number K
			type String elem, rem
        	
			set elem = XX.piece(",", J)
			set rem = ""
        	
			if elem.isLike("%/%") do {
        		
				set rem = elem.piece("/", 2, elem.length())
				set elem = elem.piece("/", 1)
			}        	

			if 'elem.isNull(), 'Db.isDefined("DBTBL1D", "%LIBS='SYSDEV',FID=:fDBTBL1.fid,DI=:elem") do { quit
			
				set ER = 1
				// Invalid data item - ~p1
				set RM = $$^MSG(1298, elem)
			}
		
			quit:rem.isNull()
		
			set isBad = 0
			for K = 1:1:rem.length("/") do { quit:isBad
			
				type String keyword
			
				set keyword = rem.piece("/", K).piece("=", 1)
			
				if '"/LEN/TYP/RHD/ALA".isLike("%"_keyword_"%") set isBad = 1
			}
		
			if isBad do {
			
				set ER = 1
				// Invalid keyword name
				set RM = $$^MSG(1386)
			}
		}
        }

	else  do {

		set ER = 1
		// Look_up table does not include primary key
		set RM = $$^MSG(1661)
	}

	quit
VP8(RecordDBTBL1 fDBTBL1) //
	do DFTDESCK(.fDBTBL1, 0)

	quit
VP9(RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X

	quit:X.isNull()

	if (X.isLike("%<<*>>%") ! X.isLike("%<<**>>%")) set ER = 1
	else  if (X.isLike("%<<%") ! X.isLike("%>>%")) set ER = 1

	if 'ER do {

		type String FILES, Q()

		set FILES = fDBTBL1.fid
		do ^DBSQRY
		if (Q.data() = 0) set ER = 1
	}

	// Invalid query syntax
	if ER set RM = $$^MSG(1434)

	quit
VP10(RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X

	quit:X.isNull()

	type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:fDBTBL1.fid,DI=:X", 1)

	if (dbtbl1d.typ '= "D") do {

		set ER = 1
		// Invalid data item name - ~p1
		set RM = $$^MSG(1300, X)
	}

	quit
VP11(RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X

	quit:X.isNull()

	type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:fDBTBL1.fid,DI=:X", 1)

	if (dbtbl1d.typ '= "C") do {

		set ER = 1
		// Invalid data item name - ~p1
		set RM = $$^MSG(1300, X)
	}

	quit
VP12(RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X

	quit:X.isNull()

	type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:fDBTBL1.fid,DI=:X", 1)

	if (dbtbl1d.typ '= "D") do {

		set ER = 1
		// Invalid data item name - ~p1
		set RM = $$^MSG(1300, X)
	}

	quit
VP13(RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X

	quit:X.isNull()

	type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS='SYSDEV',FID=:fDBTBL1.fid,DI=:X", 1)

	if (dbtbl1d.typ '= "C") do {

		set ER = 1
		// Invalid data item name - ~p1
		set RM = $$^MSG(1300, X)
	}

	quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordDBTBL1 fDBTBL1
 do VPR(.fDBTBL1)
 do VDA1(.fDBTBL1)
 do ^DBSPNT()
 quit

VW(RecordDBTBL1 fDBTBL1)
 do VDA1(.fDBTBL1)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordDBTBL1 fDBTBL1)
 do VDA1(.fDBTBL1)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordDBTBL1 fDBTBL1
 do VDA1(.fDBTBL1)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
 
vSET(sn,di,X)
 type Public RecordDBTBL1 fDBTBL1
 if sn="DBTBL1" do vSET1(.fDBTBL1,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
vSET1(RecordDBTBL1 fDBTBL1,di,X)
 do fDBTBL1.setAuditFlag(1)
 set fDBTBL1.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
vREAD(fid,di)
 type Public RecordDBTBL1 fDBTBL1
 if fid="DBTBL1" quit $$vREAD1(.fDBTBL1,di)
 quit ""
vREAD1(RecordDBTBL1 fDBTBL1,di)
 quit fDBTBL1.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
 //
VDSPPRE(RecordDBTBL1 fDBTBL1)  // Display Pre-Processor
 new %TAB,vtab // Disable .MACRO. references to %TAB()
 //
	// Global name and file type default logic
	type String tbl, ztbl
	quit:'fDBTBL1.global.isNull()
	// Default globals and other info for common, system, user tables
	for tbl = "CTBL", "STBL", "UTBL" do {
		if fDBTBL1.fid.beginsWith(tbl) do ZDFT(.fDBTBL1, tbl)
		if fDBTBL1.fid.beginsWith("Z"_tbl) do ZDFT(.fDBTBL1, tbl)
	}
	quit
ZDFT(RecordDBTBL1 fDBTBL1,
     String global)
	set fDBTBL1.global = global
	set fDBTBL1.filetyp = 3		// Domain
	set fDBTBL1.netloc = 2		// Client and server
	set fDBTBL1.log = 1		// Enable logging
	quit
 #ACCEPT date=11/05/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
