SQLEFD(Date EFDATE, String sqlbuff())

	/*
	Update EFD Table from SQLBUF
	
	Called by SQLBUF to add records to EFD table for effective dated,
	buffered SQL requests.
		    
	ARGUMENTS:
		. EFDATE	Effective date
		
		. sqlbuff()	SQL statements		/MECH=REFAFF:R
	
	---- Revision History -------------------------------------------------
	
	09/27/05 - RussellDS - CR17311
		   Created
		 
	-----------------------------------------------------------------------
	*/
	
	type public Boolean ER
	type public String RM
	
	type Number BUFF, N, SEQ
	type String newbuff()
	
	set ER = $$SQLPARSE(.sqlbuff(), .newbuff(), .RM) quit:ER

	/* Generate a buffer number that will be unique to this process and
	   reasonably serial against other processes.  If two or more proceeses
	   update at same second, then order will be based on process ID, but
	   in that case the order is basically random in any case.
	*/
	for  do { quit:'BUFF.isNull()
	
		set BUFF = $$GETSEQ^SQLDD
		if Db.isDefined("EFD", "EFDATE=:EFDATE,BUFF=:BUFF,SEQ=1") do {
			set BUFF = ""
			hang 1
		}
	}
	
	set SEQ = 0
	set N = ""
	for  set N = newbuff(N).order() quit:N.isNull()  do {
		
		set SEQ = SEQ + 1
		
		type RecordEFD efd = Class.new("RecordEFD", "EFDATE=:EFDATE,BUFF=:BUFF,SEQ=:SEQ")
		
		set efd.table = newbuff(N).piece("|", 2)
		set efd.akey = newbuff(N).piece("|", 3)
		set efd.sql = newbuff(N).piece("|", 1)
		
		do efd.save()
	}

	quit
	
	
private SQLPARSE(String sqlbuff(),	// SQL buffer commands	/MECH=REFARR:W
		 String newbuff(),	// Modified buffer	/MECH=REFAFF:W
		 String RM)		// Return message if error

	/*
	Identify table name and access keys from INSERT nad UPDATE

	INSERT [INTO] table (column1,column2,...) VALUE (value1,value2,...)
	UPDATE table SET column=value,... WHERE key=val
	DELETE [FROM] table WHERE key=val
	*/
	
	type Boolean ER
	type Number N
	type String cmd, fsn(), pkey, sql, table, val
	
	set ER = 0
	set N = ""
	for  set N = sqlbuff(N).order()  quit:N.isNull()  do { quit:ER
		
		set sql  = sqlbuff(N).upperCase()
		set cmd = sql.piece(" ", 1)
		set table = sql.piece(" ", 2)
		
		if ((table = "INTO") ! (table = "FROM")) set table = sql.piece(" ", 3)
		
		if '{List}",IRATYPE,CIF,DEP,LN,ACNADDR,SADDRCIF,SADDRACN,".contains(table), table.extract(1) '= "Z" do { quit
			set ER = 1
			// Future-dated maintenance capability is enabled for CIF, DEP,
			// LN, ACNADDR, IRATYPE, SADDRCIF, and SADDRACN tables only
			set RM = $$^MSG(3478)
		}
		
		do fsn^DBSDD(.fsn, table)
		
		set pkey = fsn(table).piece("|", 3).piece(",", 1)

		set newbuff(N) = $$hostvar(sqlbuff(N), .ER, .RM) quit:ER
		set val = ""
		if (cmd = "INSERT") do {	// Get primary key value
			
			type Number i
			type String column, tok, value, z
			
			set column = sql.piece("(", 2).piece(")", 1)	// Column list
			set value = newbuff(N).piece("(", 3).piece(")", 1)	// Value list
			
			// Match key name
			for i = 1:1:column.length(",") quit:column.piece(",", i) = pkey
			
			set z = $$TOKEN^%ZS(value, .tok, "'")		// In token format
			set val = z.piece(",", i)			// Key value
		}
		else  if ((cmd = "UPDATE") ! (cmd = "DELETE")) do {
			
			type Number i
			type String where, z
			
			set where = sql.piece("WHERE ", 2)		// WHERE clause
			
			for i = 1:1:where.length(" AND ") do {
				
				set z = where.piece(" AND ", i)
				if (z.piece("=", 1).trim(0) = pkey) set val = z.piece("=", 2).trim(0)
			}
		} 
		else  do { quit		
			set ER = 1
			// Invalid SQL Command ~p1
			set RM = $$^MSG(8564, sqlbuff(N))
		}
		
		set val = val.translate("' ", "")	// Remove ' and blanks
		if val.isNull() do { quit
			set ER = 1
			// Access key ~p1 is not defined
			set RM = $$^MSG(48, pkey)
		}
		
		set newbuff(N) = newbuff(N)_"|"_table_"|"_val
	}
	
	quit ER

	
private hostvar(String expr,	// SQL expression
		Boolean ER,	// Error flag
		String RM)	// Return message if error

	/*
	Replace :var host varibale with value
	*/
	
	type Number i
	type String del, str1, str2, var
	
	set ER = 0

	for  quit:'expr.isLike("%:%")  do { quit:ER
	
		set str1 = expr.piece(":", 1)
		set str2 = expr.piece(":", 2, 99)
		
		for i = 1:1:str2.length() set del = str2.extract(i) quit:((del = " ") ! (del = ",") ! (del = ")"))
		if ((del = " ") ! (del = ",")) do {
			set var = str2.piece(del, 1)
			set str2 = str2.piece(del, 2, 99)
		}
		else  do {				// Last :var
			if (del '=")") set del = ""
			set var = str2
			set str2 = ""
		}
		
		#ACCEPT Date=09/27/07;PGM=RussellDS;CR=17311
		if '$d(@var) do { quit
			set ER = 1
			// Undefined Host Variable ~p1
			set RM = $$^MSG(8592, var)
		}
		
		
		set var = @var
		if 'var.isNumber() set var = "'"_var_"'"
		set expr = str1_var_del_str2
	}
	
	quit expr
 #OPTION ResultClass ON
public String vSIG()	quit "60172^39223^Dan Russell^4468"	// Signature - LTD^TIME^USER^SIZE
