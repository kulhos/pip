 ; 
 ; **** Routine compiled from DATA-QWIK Filer RecordCTBLSVTYP ****
 ; 
 ; 02/24/2010 18:39 - pip
 ; 
 ;
 ; Record Class code for table CTBLSVTYP
 ;
 ; Generated by PSLRecordBuilder on 02/24/2010 at 18:39 by
 ;
vcdmNew() ; 
 N vOid
 ;  #ACCEPT DATE=02/26/2008; PGM=Dan Russell; CR=30801; Group=BYPASS
 ;*** Start of code by-passed by compiler
 S vOid=$O(vobj(""),-1)+1,vobj(vOid,-1)="RecordCTBLSVTYP",vobj(vOid,-2)=0,vobj(vOid)=""
 S vobj(vOid,-3)=""
 ;*** End of code by-passed by compiler ***
 ;  #ACCEPT DATE=02/26/2008; PGM=Dan Russell; CR=30801; Group=SCOPE
 Q vOid
 ;
vRCgetRecord0(v1,vfromDbSet) ; 
 N vOid
 ;  #ACCEPT DATE=02/26/2008; PGM=Dan Russell; CR=30801; Group=BYPASS
 ;*** Start of code by-passed by compiler
 S vOid=$O(vobj(""),-1)+1,vobj(vOid,-1)="RecordCTBLSVTYP"
 S vobj(vOid)=$G(^CTBL("SVTYP",v1))
 I vobj(vOid)="",'($D(^CTBL("SVTYP",v1))#2)
 S vobj(vOid,-2)=1
 I $T K vobj(vOid) S $ZE="0,"_$ZPOS_",%PSL-E-RECNOFL,,CTBLSVTYP",$EC=",U1001,"
 S vobj(vOid,-3)=v1
 ;*** End of code by-passed by compiler ***
 ;  #ACCEPT DATE=02/26/2008; PGM=Dan Russell; CR=30801; Group=SCOPE
 Q vOid
 ;
vRCgetRecord1(v1,vfromDbSet) ; 
 N vOid
 ;  #ACCEPT DATE=02/26/2008; PGM=Dan Russell; CR=30801; Group=BYPASS
 ;*** Start of code by-passed by compiler
 S vOid=$O(vobj(""),-1)+1,vobj(vOid,-1)="RecordCTBLSVTYP"
 S vobj(vOid)=$G(^CTBL("SVTYP",v1))
 I vobj(vOid)="",'($D(^CTBL("SVTYP",v1))#2)
 S vobj(vOid,-2)='$T
 S vobj(vOid,-3)=v1
 ;*** End of code by-passed by compiler ***
 ;  #ACCEPT DATE=02/26/2008; PGM=Dan Russell; CR=30801; Group=SCOPE
 Q vOid
 ;
vRCgetRecord0Opt(v1,vfromDbSet,v2out) ; 
 N ctblsvtyp
 ;  #ACCEPT DATE=02/26/2008; PGM=Dan Russell; CR=30801; Group=BYPASS
 ;*** Start of code by-passed by compiler
 S ctblsvtyp=$G(^CTBL("SVTYP",v1))
 I ctblsvtyp="",'($D(^CTBL("SVTYP",v1))#2)
 S v2out=1
 I $T S $ZE="0,"_$ZPOS_",%PSL-E-RECNOFL,,CTBLSVTYP",$EC=",U1001,"
 ;*** End of code by-passed by compiler ***
 Q ctblsvtyp
 ;
vRCgetRecord1Opt(v1,vfromDbSet,v2out) ; 
 N ctblsvtyp
 ;  #ACCEPT DATE=02/26/2008; PGM=Dan Russell; CR=30801; Group=BYPASS
 ;*** Start of code by-passed by compiler
 S ctblsvtyp=$G(^CTBL("SVTYP",v1))
 I ctblsvtyp="",'($D(^CTBL("SVTYP",v1))#2)
 S v2out='$T
 ;*** End of code by-passed by compiler ***
 Q ctblsvtyp
 ;
vBypassSave(this) ; 
 D vSave(this,"/NOJOURNAL/NOTRIGAFT/NOTRIGBEF/NOVALDD/NOVALREQ/NOVALRI/NOVALST",0)
 Q 
 ;
vSave(this,vRCparams,vauditLogSeq) ; 
 N vRCaudit N vRCauditIns
 N %O S %O=$G(vobj(this,-2))
 I ($get(vRCparams)="") S vRCparams="/CASDEL/INDEX/JOURNAL/LOG/TRIGAFT/TRIGBEF/UPDATE/VALDD/VALFK/VALREQ/VALRI/VALST/"
 I (%O=0) D
 .	D AUDIT^UCUTILN(this,.vRCauditIns,1,"|")
 .	D vRCsetDefaults(this)
 .	I (("/"_vRCparams_"/")["/VALREQ/") D vRCchkReqForInsert(this)
 .	I (("/"_vRCparams_"/")["/VALDD/") D vRCvalidateDD(this,%O)
 .	D vRCmiscValidations(this,vRCparams,%O)
 .	D vRCupdateDB(this,%O,vRCparams,.vRCaudit,.vRCauditIns)
 .	Q 
 E  I (%O=1) D
 .	D AUDIT^UCUTILN(this,.vRCaudit,1,"|")
 .	I ($D(vobj(this,-100,"1*","SVTYP"))&($P($E($G(vobj(this,-100,"1*","SVTYP")),5,9999),$C(124))'=vobj(this,-3))) D vRCkeyChanged(this,vRCparams,.vRCaudit) Q 
 .	I (("/"_vRCparams_"/")["/VALREQ/") D vRCchkReqForUpdate(this)
 .	I (("/"_vRCparams_"/")["/VALDD/") D vRCvalidateDD1(this)
 .	D vRCmiscValidations(this,vRCparams,%O)
 .	D vRCupdateDB(this,%O,vRCparams,.vRCaudit,.vRCauditIns)
 .	Q 
 E  I (%O=2) D
 .	I (("/"_vRCparams_"/")["/VALREQ/") D vRCchkReqForInsert(this)
 .	I (("/"_vRCparams_"/")["/VALDD/") D vRCvalidateDD(this,%O)
 .	D vRCmiscValidations(this,vRCparams,2)
 .	Q 
 E  I (%O=3) D
 .	  N V1 S V1=vobj(this,-3) Q:'($D(^CTBL("SVTYP",V1))#2) 
 .	D vRCdelete(this,vRCparams,.vRCaudit,0)
 .	Q 
 Q 
 ;
vcheckAccessRights() ; 
 Q ""
 ;
vinsertAccess(userclass) ; 
 Q 1
 ;
vinsertOK(this,userclass) ; PUBLIC access is allowed, no restrict clause
 Q 1
 ;
vupdateAccess(userclass) ; 
 Q 1
 ;
vupdateOK(this,userclass) ; PUBLIC access is allowed, no restrict clause
 Q 1
 ;
vdeleteAccess(userclass) ; 
 Q 1
 ;
vdeleteOK(this,userclass) ; PUBLIC access is allowed, no restrict clause
 Q 1
 ;
vselectAccess(userclass,restrict,from) ; 
 S (restrict,from)=""
 Q 1
 ;
vselectOK(this,userclass) ; PUBLIC access is allowed, no restrict clause
 Q 1
 ;
vselectOptmOK(userclass,ctblsvtyp,vkey1) ; PUBLIC access is allowed, no restrict clause
 Q 1
 ;
vgetLogging() ; 
 Q "0"
 ;
logUserclass(operation) ; 
 I (operation="INSERT") Q 0
 E  I (operation="UPDATE") Q 0
 E  I (operation="DELETE") Q 0
 E  I (operation="SELECT") Q 0
 Q 0
 ;
vlogSelect(statement,using) ; 
 Q 0
 ;
columnList() ; 
 Q $$vStrRep("DESC,FAP,GETMSG,LOGMSG,LOGREPLY,MSGPGM,MTNAME,STATTIM,SVRPGM,SVTYP,TIMEOUT,TRAPMSG,TRUST",",",$char(9),0,0,"")
 ;
columnListBM() ; 
 Q ""
 ;
columnListCMP() ; 
 Q $$vStrRep("FMDESC,HEALTH",",",$char(9),0,0,"")
 ;
getColumnMap(map) ; 
 ;
 S map(-3)="SVTYP:T:"
 S map(-1)="DESC:T:1;FAP:T:2;GETMSG:N:9;LOGMSG:L:6;LOGREPLY:L:7;MSGPGM:T:12;MTNAME:T:11;STATTIM:N:5;SVRPGM:T:4;TIMEOUT:N:8;TRAPMSG:L:10;TRUST:L:3"
 Q 
 ;
vlegacy(processMode,params) ; 
 N vTp
 I (processMode=2) D
 .	N ctblsvtyp S ctblsvtyp=$$vRCgetRecord0^RecordCTBLSVTYP(SVTYP,0)
 .	S vobj(ctblsvtyp,-2)=2
 . S vTp=($TL=0) TS:vTp (vobj):transactionid="CS" D vSave^RecordCTBLSVTYP(ctblsvtyp,$$initPar^UCUTILN(params)) K vobj(ctblsvtyp,-100) S vobj(ctblsvtyp,-2)=1 TC:vTp  
 .	K vobj(+$G(ctblsvtyp)) Q 
 Q 
 ;
vhasLiterals() ; 
 Q 0
 ;
vRCmiscValidations(this,vRCparams,processMode) ; 
 I (("/"_vRCparams_"/")["/VALST/")  N V1 S V1=vobj(this,-3) I '(''($D(^CTBL("SVTYP",V1))#2)=''processMode) D
 .	N errmsg
 .	I (+processMode'=+0) S errmsg=$$^MSG(7932)
 .	E  S errmsg=$$^MSG(2327)
 .	D throwError(errmsg)
 .	Q 
 Q 
 ;
vRCupdateDB(this,processMode,vRCparams,vRCaudit,vRCauditIns) ; 
 I '(("/"_vRCparams_"/")["/NOUPDATE/") D
 .	I '(("/"_vRCparams_"/")["/NOLOG/") D
 ..		I (processMode=1) D ^DBSLOGIT(this,1,.vRCaudit) Q 
 ..		D ^DBSLOGIT(this,0,.vRCauditIns)
 ..		Q 
 .	;   #ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; GROUP=BYPASS
 .	;*** Start of code by-passed by compiler
 .	if $D(vobj(this)) S ^CTBL("SVTYP",vobj(this,-3))=vobj(this)
 .	;*** End of code by-passed by compiler ***
 .	Q 
 Q 
 ;
vRCdelete(this,vRCparams,vRCaudit,isKeyChange) ; 
 I '(("/"_vRCparams_"/")["/NOLOG/") D ^DBSLOGIT(this,3)
 ;  #ACCEPT DATE=04/22/04; PGM=Dan Russell; CR=20602; Group=BYPASS
 ;*** Start of code by-passed by compiler
 ZWI ^CTBL("SVTYP",vobj(this,-3))
 ;*** End of code by-passed by compiler ***
 Q 
 ;
vRCsetDefaults(this) ; 
 I ($P(vobj(this),$C(124),6)="")  S $P(vobj(this),$C(124),6)=0
 I ($P(vobj(this),$C(124),7)="")  S $P(vobj(this),$C(124),7)=0
 I ($P(vobj(this),$C(124),11)="")  S $P(vobj(this),$C(124),11)="MTM"
 I ($P(vobj(this),$C(124),4)="")  S $P(vobj(this),$C(124),4)="SVCNCT^PBSSRV"
 I ($P(vobj(this),$C(124),8)="")  S $P(vobj(this),$C(124),8)=45
 I ($P(vobj(this),$C(124),10)="")  S $P(vobj(this),$C(124),10)=0
 I ($P(vobj(this),$C(124),3)="")  S $P(vobj(this),$C(124),3)=0
 Q 
 ;
vRCchkReqForInsert(this) ; 
 I ($P(vobj(this),$C(124),1)="") D vRCrequiredErr("DESC")
 I ($P(vobj(this),$C(124),6)="") D vRCrequiredErr("LOGMSG")
 I ($P(vobj(this),$C(124),7)="") D vRCrequiredErr("LOGREPLY")
 I (vobj(this,-3)="") D vRCrequiredErr("SVTYP")
 I ($P(vobj(this),$C(124),8)="") D vRCrequiredErr("TIMEOUT")
 I ($P(vobj(this),$C(124),10)="") D vRCrequiredErr("TRAPMSG")
 I ($P(vobj(this),$C(124),3)="") D vRCrequiredErr("TRUST")
 Q 
 ;
vRCchkReqForUpdate(this) ; 
 I (vobj(this,-3)="") D vRCrequiredErr("SVTYP")
 I ($D(vobj(this,-100,"0*","DESC"))&($P($E($G(vobj(this,-100,"0*","DESC")),5,9999),$C(124))'=$P(vobj(this),$C(124),1))),($P(vobj(this),$C(124),1)="") D vRCrequiredErr("DESC")
 I ($D(vobj(this,-100,"0*","LOGMSG"))&($P($E($G(vobj(this,-100,"0*","LOGMSG")),5,9999),$C(124))'=$P(vobj(this),$C(124),6))),($P(vobj(this),$C(124),6)="") D vRCrequiredErr("LOGMSG")
 I ($D(vobj(this,-100,"0*","LOGREPLY"))&($P($E($G(vobj(this,-100,"0*","LOGREPLY")),5,9999),$C(124))'=$P(vobj(this),$C(124),7))),($P(vobj(this),$C(124),7)="") D vRCrequiredErr("LOGREPLY")
 I ($D(vobj(this,-100,"0*","TIMEOUT"))&($P($E($G(vobj(this,-100,"0*","TIMEOUT")),5,9999),$C(124))'=$P(vobj(this),$C(124),8))),($P(vobj(this),$C(124),8)="") D vRCrequiredErr("TIMEOUT")
 I ($D(vobj(this,-100,"0*","TRAPMSG"))&($P($E($G(vobj(this,-100,"0*","TRAPMSG")),5,9999),$C(124))'=$P(vobj(this),$C(124),10))),($P(vobj(this),$C(124),10)="") D vRCrequiredErr("TRAPMSG")
 I ($D(vobj(this,-100,"0*","TRUST"))&($P($E($G(vobj(this,-100,"0*","TRUST")),5,9999),$C(124))'=$P(vobj(this),$C(124),3))),($P(vobj(this),$C(124),3)="") D vRCrequiredErr("TRUST")
 Q 
 ;
vRCrequiredErr(column) ; 
 N ER S ER=0
 N RM S RM=""
 D SETERR^DBSEXECU("CTBLSVTYP","MSG",1767,"CTBLSVTYP."_column)
 I ER D throwError($get(RM))
 Q 
 ;
vRCvalidateDD(this,processMode) ; 
 N ER S ER=0
 N RM S RM=""
 N errmsg N X
 I ($L(vobj(this,-3))>20) D vRCvalidateDDerr("SVTYP",$$^MSG(1076,20))
 I ($L($P(vobj(this),$C(124),1))>40) D vRCvalidateDDerr("DESC",$$^MSG(1076,40))
 S X=$P(vobj(this),$C(124),2) I '(X=""),'$$vCaEx1() D vRCvalidateDDerr("FAP",$$^MSG(1485,X))
 I '($P(vobj(this),$C(124),9)=""),'(+$P(vobj(this),$C(124),9)=$P(vobj(this),$C(124),9))  S $P(vobj(this),$C(124),9)=$$vRCtrimNumber($P(vobj(this),$C(124),9))
 S X=$P(vobj(this),$C(124),9) I '(X=""),(X'?1.2N),(X'?1"-"1.1N) D vRCvalidateDDerr("GETMSG",$$^MSG(742,"N"))
 I '(($P(vobj(this),$C(124),6)=1)!($P(vobj(this),$C(124),6)=0)) D vRCvalidateDDerr("LOGMSG",$$^MSG(742,"L"))
 I '(($P(vobj(this),$C(124),7)=1)!($P(vobj(this),$C(124),7)=0)) D vRCvalidateDDerr("LOGREPLY",$$^MSG(742,"L"))
 I ($L($P(vobj(this),$C(124),12))>40) D vRCvalidateDDerr("MSGPGM",$$^MSG(1076,40))
 S X=$P(vobj(this),$C(124),11) I '(X=""),'$$vCaEx2() D vRCvalidateDDerr("MTNAME",$$^MSG(1485,X))
 I '($P(vobj(this),$C(124),5)=""),'(+$P(vobj(this),$C(124),5)=$P(vobj(this),$C(124),5))  S $P(vobj(this),$C(124),5)=$$vRCtrimNumber($P(vobj(this),$C(124),5))
 S X=$P(vobj(this),$C(124),5) I '(X=""),(X'?1.3N),(X'?1"-"1.2N) D vRCvalidateDDerr("STATTIM",$$^MSG(742,"N"))
 I ($L($P(vobj(this),$C(124),4))>20) D vRCvalidateDDerr("SVRPGM",$$^MSG(1076,20))
 I '($P(vobj(this),$C(124),8)=""),'(+$P(vobj(this),$C(124),8)=$P(vobj(this),$C(124),8))  S $P(vobj(this),$C(124),8)=$$vRCtrimNumber($P(vobj(this),$C(124),8))
 S X=$P(vobj(this),$C(124),8) I '(X=""),(X'?1.2N),(X'?1"-"1.1N) D vRCvalidateDDerr("TIMEOUT",$$^MSG(742,"N"))
 I '(($P(vobj(this),$C(124),10)=1)!($P(vobj(this),$C(124),10)=0)) D vRCvalidateDDerr("TRAPMSG",$$^MSG(742,"L"))
 I '(($P(vobj(this),$C(124),3)=1)!($P(vobj(this),$C(124),3)=0)) D vRCvalidateDDerr("TRUST",$$^MSG(742,"L"))
 Q 
 ;
vRCvalidateDD1(this) ; 
 N ER S ER=0
 N RM S RM=""
 N errmsg N X
 I ($D(vobj(this,-100,"1*","SVTYP"))&($P($E($G(vobj(this,-100,"1*","SVTYP")),5,9999),$C(124))'=vobj(this,-3))) I ($L(vobj(this,-3))>20) D vRCvalidateDDerr("SVTYP",$$^MSG(1076,20))
 I ($D(vobj(this,-100,"0*","DESC"))&($P($E($G(vobj(this,-100,"0*","DESC")),5,9999),$C(124))'=$P(vobj(this),$C(124),1))) I ($L($P(vobj(this),$C(124),1))>40) D vRCvalidateDDerr("DESC",$$^MSG(1076,40))
 I ($D(vobj(this,-100,"0*","FAP"))&($P($E($G(vobj(this,-100,"0*","FAP")),5,9999),$C(124))'=$P(vobj(this),$C(124),2))) S X=$P(vobj(this),$C(124),2) I '(X=""),'$$vCaEx3() D vRCvalidateDDerr("FAP",$$^MSG(1485,X))
 I ($D(vobj(this,-100,"0*","GETMSG"))&($P($E($G(vobj(this,-100,"0*","GETMSG")),5,9999),$C(124))'=$P(vobj(this),$C(124),9))),'($P(vobj(this),$C(124),9)=""),'(+$P(vobj(this),$C(124),9)=$P(vobj(this),$C(124),9))  S $P(vobj(this),$C(124),9)=$$vRCtrimNumber($P(vobj(this),$C(124),9))
 I ($D(vobj(this,-100,"0*","GETMSG"))&($P($E($G(vobj(this,-100,"0*","GETMSG")),5,9999),$C(124))'=$P(vobj(this),$C(124),9))) S X=$P(vobj(this),$C(124),9) I '(X=""),(X'?1.2N),(X'?1"-"1.1N) D vRCvalidateDDerr("GETMSG",$$^MSG(742,"N"))
 I ($D(vobj(this,-100,"0*","LOGMSG"))&($P($E($G(vobj(this,-100,"0*","LOGMSG")),5,9999),$C(124))'=$P(vobj(this),$C(124),6))) I '(($P(vobj(this),$C(124),6)=1)!($P(vobj(this),$C(124),6)=0)) D vRCvalidateDDerr("LOGMSG",$$^MSG(742,"L"))
 I ($D(vobj(this,-100,"0*","LOGREPLY"))&($P($E($G(vobj(this,-100,"0*","LOGREPLY")),5,9999),$C(124))'=$P(vobj(this),$C(124),7))) I '(($P(vobj(this),$C(124),7)=1)!($P(vobj(this),$C(124),7)=0)) D vRCvalidateDDerr("LOGREPLY",$$^MSG(742,"L"))
 I ($D(vobj(this,-100,"0*","MSGPGM"))&($P($E($G(vobj(this,-100,"0*","MSGPGM")),5,9999),$C(124))'=$P(vobj(this),$C(124),12))) I ($L($P(vobj(this),$C(124),12))>40) D vRCvalidateDDerr("MSGPGM",$$^MSG(1076,40))
 I ($D(vobj(this,-100,"0*","MTNAME"))&($P($E($G(vobj(this,-100,"0*","MTNAME")),5,9999),$C(124))'=$P(vobj(this),$C(124),11))) S X=$P(vobj(this),$C(124),11) I '(X=""),'$$vCaEx4() D vRCvalidateDDerr("MTNAME",$$^MSG(1485,X))
 I ($D(vobj(this,-100,"0*","STATTIM"))&($P($E($G(vobj(this,-100,"0*","STATTIM")),5,9999),$C(124))'=$P(vobj(this),$C(124),5))),'($P(vobj(this),$C(124),5)=""),'(+$P(vobj(this),$C(124),5)=$P(vobj(this),$C(124),5))  S $P(vobj(this),$C(124),5)=$$vRCtrimNumber($P(vobj(this),$C(124),5))
 I ($D(vobj(this,-100,"0*","STATTIM"))&($P($E($G(vobj(this,-100,"0*","STATTIM")),5,9999),$C(124))'=$P(vobj(this),$C(124),5))) S X=$P(vobj(this),$C(124),5) I '(X=""),(X'?1.3N),(X'?1"-"1.2N) D vRCvalidateDDerr("STATTIM",$$^MSG(742,"N"))
 I ($D(vobj(this,-100,"0*","SVRPGM"))&($P($E($G(vobj(this,-100,"0*","SVRPGM")),5,9999),$C(124))'=$P(vobj(this),$C(124),4))) I ($L($P(vobj(this),$C(124),4))>20) D vRCvalidateDDerr("SVRPGM",$$^MSG(1076,20))
 I ($D(vobj(this,-100,"0*","TIMEOUT"))&($P($E($G(vobj(this,-100,"0*","TIMEOUT")),5,9999),$C(124))'=$P(vobj(this),$C(124),8))),'($P(vobj(this),$C(124),8)=""),'(+$P(vobj(this),$C(124),8)=$P(vobj(this),$C(124),8))  S $P(vobj(this),$C(124),8)=$$vRCtrimNumber($P(vobj(this),$C(124),8))
 I ($D(vobj(this,-100,"0*","TIMEOUT"))&($P($E($G(vobj(this,-100,"0*","TIMEOUT")),5,9999),$C(124))'=$P(vobj(this),$C(124),8))) S X=$P(vobj(this),$C(124),8) I '(X=""),(X'?1.2N),(X'?1"-"1.1N) D vRCvalidateDDerr("TIMEOUT",$$^MSG(742,"N"))
 I ($D(vobj(this,-100,"0*","TRAPMSG"))&($P($E($G(vobj(this,-100,"0*","TRAPMSG")),5,9999),$C(124))'=$P(vobj(this),$C(124),10))) I '(($P(vobj(this),$C(124),10)=1)!($P(vobj(this),$C(124),10)=0)) D vRCvalidateDDerr("TRAPMSG",$$^MSG(742,"L"))
 I ($D(vobj(this,-100,"0*","TRUST"))&($P($E($G(vobj(this,-100,"0*","TRUST")),5,9999),$C(124))'=$P(vobj(this),$C(124),3))) I '(($P(vobj(this),$C(124),3)=1)!($P(vobj(this),$C(124),3)=0)) D vRCvalidateDDerr("TRUST",$$^MSG(742,"L"))
 Q 
 ;
vRCvalidateDDerr(column,errmsg) ; 
 N ER S ER=0
 N RM S RM=""
 D SETERR^DBSEXECU("CTBLSVTYP","MSG",979,"CTBLSVTYP."_column_" "_errmsg)
 I ER D throwError($get(RM))
 Q 
 ;
vRCtrimNumber(str) ; 
 I ($E(str,1)="0") S str=$$vStrTrim(str,-1,"0") I (str="") S str="0"
 I (str["."),($E(str,$L(str))="0") S str=$$RTCHR^%ZFUNC(str,"0") I ($E(str,$L(str))=".") S str=$E(str,1,$L(str)-1) I (str="") S str="0"
 Q str
 ;
vRCkeyChanged(this,vRCparams,vRCaudit) ; 
 N vTp
 N newkeys N oldkeys N vRCauditIns
 N newKey1 S newKey1=vobj(this,-3)
 N oldKey1 S oldKey1=$S($D(vobj(this,-100,"1*","SVTYP")):$P($E(vobj(this,-100,"1*","SVTYP"),5,9999),$C(124)),1:vobj(this,-3))
  N V1 S V1=vobj(this,-3) I ($D(^CTBL("SVTYP",V1))#2) D throwError($$^MSG(2327))
 S newkeys=newKey1
 S oldkeys=oldKey1
  S vobj(this,-3)=oldKey1
 S vRCparams=$$setPar^UCUTILN(vRCparams,"NOINDEX")
 I (("/"_vRCparams_"/")["/VALREQ/") D vRCchkReqForInsert(this)
 I (("/"_vRCparams_"/")["/VALDD/") D vRCvalidateDD(this,1)
 D vRCmiscValidations(this,vRCparams,1)
 D vRCupdateDB(this,1,vRCparams,.vRCaudit,.vRCauditIns)
  S vobj(this,-3)=newKey1
 N newrec S newrec=$$vReCp1(this)
 S vobj(newrec,-2)=0
 S vTp=($TL=0) TS:vTp (vobj):transactionid="CS" D vSave^RecordCTBLSVTYP(newrec,$$initPar^UCUTILN($$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/"))) K vobj(newrec,-100) S vobj(newrec,-2)=1 TC:vTp  
 D
 .	N %O S %O=1
 .	N ER S ER=0
 .	N RM S RM=""
 .	;   #ACCEPT Date=10/24/2008; Pgm=RussellDS; CR=30801; Group=ACCESS
 .	D CASUPD^DBSEXECU("CTBLSVTYP",oldkeys,newkeys)
 .	I ER D throwError($get(RM))
 .	Q 
  S vobj(this,-3)=oldKey1
 S vRCparams=$$initPar^UCUTILN("/NOVAL/NOCASDEL/NOJOURNAL/NOTRIGBEF/NOTRIGAFT/")
 D vRCdelete(this,vRCparams,.vRCaudit,1)
  S vobj(this,-3)=newKey1
 K vobj(+$G(newrec)) Q 
 ;
throwError(MSG) ; 
 S $ZE="0,"_$ZPOS_","_"%PSL-E-DBFILER,"_$translate(MSG,",","~"),$EC=",U1001,"
 Q 
 ; ----------------
 ;  #OPTION ResultClass 1
vStrRep(object,p1,p2,p3,p4,qt) ; String.replace
 ;
 ;  #OPTIMIZE FUNCTIONS OFF
 ;
 I p3<0 Q object
 I $L(p1)=1,$L(p2)<2,'p3,'p4,(qt="") Q $translate(object,p1,p2)
 ;
 N y S y=0
 F  S y=$$vStrFnd(object,p1,y,p4,qt) Q:y=0  D
 .	S object=$E(object,1,y-$L(p1)-1)_p2_$E(object,y,1048575)
 .	S y=y+$L(p2)-$L(p1)
 .	I p3 S p3=p3-1 I p3=0 S y=$L(object)+1
 .	Q 
 Q object
 ; ----------------
 ;  #OPTION ResultClass 1
vCaEx1() ; {Cache}%CACHE("CTBLFAP").isDefined("CTBLFAP","FAP=:X")
 N vret
 ;
 ;  #OPTIMIZE FUNCTIONS OFF
 N vRec,vop1 S vRec=$$vCa3(X,.vop1)
 S vret=$G(vop1)=1 Q vret
 ; ----------------
 ;  #OPTION ResultClass 1
vCaEx2() ; {Cache}%CACHE("STBLMTNAME").isDefined("STBLMTNAME","MTNAME=:X")
 N vret
 ;
 ;  #OPTIMIZE FUNCTIONS OFF
 N vRec,vop1 S vRec=$$vCa4(X,.vop1)
 S vret=$G(vop1)=1 Q vret
 ; ----------------
 ;  #OPTION ResultClass 1
vCaEx3() ; {Cache}%CACHE("CTBLFAP").isDefined("CTBLFAP","FAP=:X")
 N vret
 ;
 ;  #OPTIMIZE FUNCTIONS OFF
 N vRec,vop1 S vRec=$$vCa3(X,.vop1)
 S vret=$G(vop1)=1 Q vret
 ; ----------------
 ;  #OPTION ResultClass 1
vCaEx4() ; {Cache}%CACHE("STBLMTNAME").isDefined("STBLMTNAME","MTNAME=:X")
 N vret
 ;
 ;  #OPTIMIZE FUNCTIONS OFF
 N vRec,vop1 S vRec=$$vCa4(X,.vop1)
 S vret=$G(vop1)=1 Q vret
 ; ----------------
 ;  #OPTION ResultClass 1
vStrTrim(object,p1,p2) ; String.trim
 ;
 ;  #OPTIMIZE FUNCTIONS OFF
 I p1'<0 S object=$$RTCHR^%ZFUNC(object,p2)
 I p1'>0 F  Q:$E(object,1)'=p2  S object=$E(object,2,1048575)
 Q object
 ; ----------------
 ;  #OPTION ResultClass 1
vStrFnd(object,p1,p2,p3,qt) ; String.find
 ;
 ;  #OPTIMIZE FUNCTIONS OFF
 ;
 I (p1="") Q $S(p2<1:1,1:+p2)
 I p3 S object=$ZCONVERT(object,"U") S p1=$ZCONVERT(p1,"U")
 S p2=$F(object,p1,p2)
 I '(qt=""),$L($E(object,1,p2-1),qt)#2=0 D
 .	F  S p2=$F(object,p1,p2) Q:p2=0!($L($E(object,1,p2-1),qt)#2) 
 .	Q 
 Q p2
 ;
vCa3(v1,v2out) ; voXN = ({Cache}%CACHE("CTBLFAP").getRecord(CTBLFAP,1)
 ;
 I '$D(%CACHE("CTBLFAP",v1)) D
 .  I $G(%CACHE("CTBLFAP"))>100 KILL %CACHE("CTBLFAP")
 .  S %CACHE("CTBLFAP")=$G(%CACHE("CTBLFAP"))+1
 .  S %CACHE("CTBLFAP",v1)=$$vRCgetRecord1Opt^RecordCTBLFAP(v1,0,.v2out),%CACHE("CTBLFAP",v1,-2)=v2out
 ;
 ;
 E  S v2out=%CACHE("CTBLFAP",v1,-2)
 Q %CACHE("CTBLFAP",v1)
 ;
vCa4(v1,v2out) ; voXN = ({Cache}%CACHE("STBLMTNAME").getRecord(STBLMTNAME,1)
 ;
 I '$D(%CACHE("STBLMTNAME",v1)) D
 .  I $G(%CACHE("STBLMTNAME"))>100 KILL %CACHE("STBLMTNAME")
 .  S %CACHE("STBLMTNAME")=$G(%CACHE("STBLMTNAME"))+1
 .  S %CACHE("STBLMTNAME",v1)=$$vRCgetRecord1Opt^RecordSTBLMTNAME(v1,0,.v2out),%CACHE("STBLMTNAME",v1,-2)=v2out
 ;
 ;
 E  S v2out=%CACHE("STBLMTNAME",v1,-2)
 Q %CACHE("STBLMTNAME",v1)
 ;
vReCp1(v1) ; RecordCTBLSVTYP.copy: CTBLSVTYP
 ;
 Q $$copy^UCGMR(this)
