DBSREL
 
	/*
	Validate File Relationship Linkage
	
	NOTE:  Call at top is retained for backward compatibility.  Once
	       all callers have been eliminated, remove it.
	       
	       New call for things converted to PSL is VALIDATE
	       
	       Eventually try to figure out LOOP usage throughout and
	       either simplify or eliminate it.  If retain, ensure that
	       there won't be a problem related to tables that use the
	       same file short names.
	       
	INPUT:
		LOOP(-1,FID)=DBTBL1.FSN
		FILES
	
	OUTPUT:
		LOOP(-1,FID)=DBTBL1.FSN
		LOOP(FSN)=ACCKEY1|ACCKEY2|...
		LOOP(-2,PRI)=FID   ( RELATIONSHIP PRIORITY)

		LOOP(-2,1)=ASSET
		LOOP(-2,2)=CIF

	---- Revision History -------------------------------------------------
	07/28/2008 - RussellDS - CR30801
		* Eliminated need for M code.  This element is not needed for
		  bootstrapping.
		* Modified to replace getSchemaTable with getPSLTable level 0
	
	05/02/06 - RussellDS - CR20967
		   Converted to PSL.
		   
		   Added TBLORD function for use by PSL.

	-----------------------------------------------------------------------
	*/

	type public Boolean ER
	type public String FILES, LOOP(,), RM
	
	set ER = $$VALIDATE(FILES.get(), LOOP(,), .RM)
	
	quit
	
	
public VALIDATE(String TABLES,
		String LOOP(,),		// Relationship info	/MECH=REFARR:RW
		String RM)		// Error message	/MECH=REFNAM:W
		
	/*
	Validate table relationship
	
	RETURNS:
		. $$	Error flag
			0 = no error
			1 = error
	*/
	
	type Boolean ER, isDone, isValid
	type Number CNT, I, J
	type String COMBO, PKEYS, REL(,), RM1, TBLS(), TBLSX(), VALIDREL
	
	set ER = 0
	set RM = ""
	set CNT = 0
	
	if TABLES.isNull() quit 0
	
	// Define LOOP(-1, TABLE) array and remove duplicates
	// Build TBLS(n) array of tables
	for I = 1:1:TABLES.length(",") do { quit:ER
		
		type String TBL = TABLES.piece(",", I)
		
		quit:TBLSX(TBL).exists()		// Duplicate
		
		set CNT = CNT + 1
		set TBLS(CNT) = TBL			// CNT = 1 = Primary table
		set TBLSX(TBL) = CNT
		
		if 'LOOP(-1, TBL).exists() do {
		
			type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS='SYSDEV',FID=:TBL", 1)
		
			if (dbtbl1.getMode() = 0) do {
			
				set ER = 1
				// Invalid file name - ~p1
				set RM = $$^MSG(1337, TBL)
			}
			
			else  do {
				
				set LOOP(-1, TBL) = dbtbl1.fsn
				set LOOP(dbtbl1.fsn) = dbtbl1.acckeys.replace(",", "|")
			}
		}
	}
	
	if ER quit 1
	
	type PSLTable tblrecp = PSL.getPSLTable(TBLS(1), 0)
	
	set PKEYS = tblrecp.primaryKeys
	
	// Only a single table
	if (CNT = 1) set LOOP(-2, 1) = TBLS(1) quit 0
	
	// Two files - easy  A->B or B->A
	if (CNT = 2) do { quit ER
		
		type String A, B
		
		set A = LOOP(-1, 0).order()
		set B = LOOP(-1, A).order()
		
		if (TBLS(1) '= A) do {		// Switch
		
			type String X = A
			
			set A = B
			set B = X
		}
		
		set isValid = $$REL(A, B)
		
		if isValid do {			// A -> B
		
			set LOOP(-2, 1) = A
			set LOOP(-2, 2) = B
			
			do LINK(A, B, 1, .LOOP(,), PKEYS)
		}
				
		// Try the other direction
		else  set isValid = $$REL(B, A, .RM) if isValid do {
		
			set LOOP(-2, 1) = B	// B -> A
			set LOOP(-2, 2) = A
		
			do LINK(B, A, 1, .LOOP(,), PKEYS)
		}
		
		if 'isValid set ER = 1
	}
	
	/* For three or more files use the following algorithm:
	
		Valid relationships are:
		
		  1)  Primary table related to each table:
		  
		  	A->B and A->C and A->D
		  	
		  2)  Some valid relationship chain exists where
		      primary is first table and then each following
		      table is related to the one before it:
		      
		        A->B->C->D, or A->C->B->D, or A->D->C->B, etc
		        
	   Approach:
	   
	   	- build all relationship pairs and determine whether
	   	  each is valid or not.
	   	  
	   	    REL(A, B) = 0 => not valid relationship
	   	    REL(A, B) = 1 => valid relationship
	   	    
	   	- check primary to each other table first, and if all
	   	  valid, then relationship is valid
	   	  
	   	- check each possible combination of orders, with
	   	  primary always first.  For each order, chech each
	   	  pair.  If find one that's valid, done.  If don't
	   	  it's not a valid relationship.
	*/
	
	// Build all possible relationship pairs
	for I = 1:1:CNT for J = 1:1:CNT if (I <> J) set REL(TBLS(I), TBLS(J)) = $$REL(TBLS(I), TBLS(J))
	
	// Check primary to each individual table
	set isValid = 1
	for I = 2:1:CNT if 'REL(TBLS(1), TBLS(I)) set isValid = 0
	
	// Primary is related to each => relationship is valid
	if isValid do { quit 0
		
		// build LOOP info
		for I = 1:1:CNT set LOOP(-2, I) = TBLS(I)
		
		// build LINK info for each primary -> table
		for I = 2:1:CNT do LINK(TBLS(1), TBLS(I), 1, .LOOP(,), PKEYS)
	}
	
	// Check the input combination first
	set COMBO = ""
	for I = 2:1:CNT set COMBO = COMBO_I_","
	set COMBO = COMBO.extract(1, COMBO.length() - 1)
	
	set isValid = $$CHKCOMBO(COMBO, .TBLS(), .RM1)
	
	if isValid set VALIDREL = COMBO
	
	// Otherwise, check all combinations, with primary first.  If find one
	// that is valid, we're done
	else  do {

		set (COMBO, VALIDREL) = ""
		do COMBOS(CNT - 1, CNT, .COMBO, .VALIDREL, .TBLS())
	}
	
	if 'VALIDREL.isNull() do {
	
		set VALIDREL = "1,"_VALIDREL		// Add primary table
	
		// build LOOP info
		for I = 1:1:CNT set LOOP(-2, I) = TBLS(VALIDREL.piece(",", I))
		
		// build LINK info for each link A->B, B->C, etc.
		for I = 1:1:CNT - 1 do {
			
			type String TBLA, TBLB
			
			set TBLA = TBLS(VALIDREL.piece(",", I))
			set TBLB = TBLS(VALIDREL.piece(",", I + 1))
			
			
			do LINK(TBLA, TBLB, I, .LOOP(,), PKEYS)
		}
	}
	
	// Nothing worked
	else  do {
		
		set ER = 1
		// Use error message associated with input order
		set RM = RM1
	}
		
        
        quit ER


COMBOS(Number POS,		// Position in combo, build from left to right
       Number CNT,		// Total number of tables
       String COMBO,		// Combination being built
       String VALIDREL,		// Valid relationship, if we find one
       String TBLS())		// Error message, if any	/NOREQ/MECH=REFNAM:W
       
	/*
	This code is iterative - calling itself until it has build a
	valid combination of tables.  Once a new combination is built
	it checks to see if it's valid, and if it is, sets that combination
	into VALIDREL which then indicates we are done.
	*/
       
	type Number I
       
	// Start from 2 since we're building combinations of tables 2 through
	// CNT since the primary table, TBLS(1), will always be first
	for I = 2:1:CNT do { quit:'VALIDREL.isNull()
		
		if (POS = CNT) set COMBO = ""	// Start a new one
		
		quit:{List}COMBO.contains(I)	// Each table in combo only once
		
		if COMBO.isNull() set COMBO = I
		else  set COMBO = COMBO_","_I
		
		// If we've got combination built, check it.  Done if good.
		if (POS - 1 = 0) do {
			
			if $$CHKCOMBO(COMBO, .TBLS()) set VALIDREL = COMBO
		}
		else  do COMBOS(POS - 1, CNT, .COMBO, .VALIDREL, .TBLS())
		
		set COMBO = COMBO.piece(",", 1, COMBO.length(",") - 1)
	}
       	
	quit
	
	
CHKCOMBO(String COMBO,		// Relationship combination to check
	 String TBLS(),		// Tables reference
	 String RM)		// Error message, if any	/MECH=REFNAM:W
	 
	/*
	See if valide relationship is represented by the file combination.
	
		A->r2->r3->...
		
	First table, which isn't included in COMBO is the primary table.
	Each table must be related to the table to its right, otherwise
	this isn't a valid relationship.
	
	RETURNS:
		. $$	Valid relationship flag
			0 = not valid
			1 = valid
	*/
	
	type Boolean isValid = 1
	type Number I
	
	// Add primary table
	set COMBO = "1,"_COMBO
	
	for I = 1:1:COMBO.length(",") - 1 do { quit:'isValid
		
		type String TBL1, TBL2
		
		set TBL1 = TBLS(COMBO.piece(",", I))
		set TBL2 = TBLS(COMBO.piece(",", I + 1))
		
		set isValid = $$REL(TBL1, TBL2, .RM)
	}
	
	quit isValid


REL(String TBLA,	// Table A
    String TBLB,	// Table B
    String RM)		// Error message, if any	/NOREQ/MECH=REFNAM:W
    
	/*
	Check linkage from table A to table B
	
	RETURNS:
		. $$	Valid relationship flag
			1 = valid linkage
			0 = invalid linkage
	*/
	
	type Boolean isValid = 1
	type Number I
	type String BKEYS
	
	type PSLTable tblrecb = PSL.getPSLTable(TBLB, 0)
	
	set BKEYS = tblrecb.primaryKeys
	for I = 1:1:BKEYS.length(",") do { quit:'isValid
		
		type String key = BKEYS.piece(",", I)
		
		// Null key (CUVAR) is OK
		// If column in A points to this key in B then OK
		if 'key.isNull(), 'Db.isSchemaColumn(TBLA, key) do {
		
			set isValid = 0
			// Invalid file relationship between ~p1 and ~p2
			set RM = $$^MSG(1340, TBLA, TBLB)
		}
	}
	
	quit isValid


LINK(String TBLA,	// Table A
     String TBLB,	// Table B
     Number LEVA,	// TBLA linkage level	/MECH=REFNAM:RW
     String LOOP(,),	// Loop array [*]	/MECH=REFARR:RW
     String PKEYS)	// Primary table keys
     
     
	/*
	Setup LOOP(-2 with M code for the keys in TBLB and the
	necessary reference to them from TBLA.
	
	Eventually, this should be able to be deleted once DELREL
	no longer uses this data, which will be once all screens are
	in PSL.
	
	ARGUMENT NOTES:
	
		. LOOP		LOOP(-2,TBLA,TBLB.key) = M access code
	*/
	
	type Number I
	type String AKEYS, BKEYS
	
	type PSLTable tblreca = PSL.getPSLTable(TBLA, 0)
	type PSLTable tblrecb = PSL.getPSLTable(TBLB, 0)
	
	set AKEYS = tblreca.primaryKeys
	set BKEYS = tblrecb.primaryKeys
	
	quit:BKEYS.isNull()
	
	for I = 1:1:BKEYS.length(",") do {
		
		type String key
		
		set key = BKEYS.piece(",", I)
		
		// If key in primary table, don't need to save access
		quit:{List}PKEYS.contains(key)
		
		// If key in TBLA, don't need to save access
		quit:{List}AKEYS.contains(key)
		
		type SchemaColumn colreca = Db.getSchemaColumn(TBLA, key)
		
		if 'colreca.computation.isNull() set LOOP(-2, LEVA, key) = colreca.computation
		
		// Otherwise, call PARSE^DBSDD to get NS, which is the M access expression
		// Goes away once get all this in PSL
		else  do {
			
			type String cmp(,), NS
			
			do PARSE^DBSDD(TBLA_"."_key, "", .cmp(,))
			
			if 'NS.isNull() set LOOP(-2, LEVA, key) = NS
		}
	}
	
	quit
	
	
public TBLORD(List TABLES)	// List of tables to validate and order

	/*
	Validates table relationship for use under DQMODE, and returns
	correct order of tables based on LOOP(-2) info.
	
	RETURNS:
		. $$	Null if relationship error, otherwise
			tables in relationship order.
	*/
	
	type Boolean ER
	type String LOOP(,), TBLORD
	
	set TBLORD = ""
	
	set ER = $$VALIDATE(TABLES, .LOOP(,))
	
	if 'ER do {
	
		type Number N = ""
		
		for  set N = LOOP(-2, N).order() quit:N.isNull()  set TBLORD = TBLORD_LOOP(-2, N)_","
		
		set TBLORD = TBLORD.extract(1, TBLORD.length() - 1)
	}
	
	quit {List}TBLORD
 #OPTION ResultClass ON
public String vSIG()	quit "61254^68988^Dan Russell^10098"	// Signature - LTD^TIME^USER^SIZE
