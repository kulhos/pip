V00S059(Number %ProcessMode,RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)   //DBS - DBS - SID= <DBTBL1F> Files Definition (Structure Definition)
 ;;Copyright(c)2010 Sanchez Computer Associates, Inc.  All Rights Reserved - 02/24/2010 18:33 - pip
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/18/07 - Pete Chenard - CR23555
		   Corrected compiler warnings.
		   
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'%ProcessMode.exists() %ProcessMode=5
 if (%ProcessMode = 5) do {
  if 'fDBTBL1D.exists() set fDBTBL1D = Class.new("RecordDBTBL1D")
  if 'fDBTBL1.exists() set fDBTBL1 = Class.new("RecordDBTBL1")
 }
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab",VSID="DBTBL1F",VPGM=$T(+0),VSNAME="Files Definition (Structure Definition)"
 set VFSN("DBTBL1")="zfDBTBL1",VFSN("DBTBL1D")="zfDBTBL1D"
 set vPSL=1
 set KEYS(1)=fDBTBL1.%LIBS
 set KEYS(2)=fDBTBL1.FID
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 do VPR(.fDBTBL1D,.fDBTBL1),VDA1(.fDBTBL1D,.fDBTBL1),^DBSPNT() quit

 if '%ProcessMode do VNEW(.fDBTBL1D,.fDBTBL1),VPR(.fDBTBL1D,.fDBTBL1),VDA1(.fDBTBL1D,.fDBTBL1)
 if %ProcessMode do VLOD(.fDBTBL1D,.fDBTBL1) quit:$G(ER)  do VPR(.fDBTBL1D,.fDBTBL1),VDA1(.fDBTBL1D,.fDBTBL1)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=XECUTE
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fDBTBL1D,.fDBTBL1)
	quit


VNEW(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) // Initialize arrays if %O=0
 
 do VDEF(.fDBTBL1D,.fDBTBL1)
 do VLOD(.fDBTBL1D,.fDBTBL1)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
VDEF(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)
 quit:fDBTBL1D.%LIBS.isNull() ! fDBTBL1D.FID.isNull() ! fDBTBL1D.DI.isNull() 
 quit:%ProcessMode  set ER=0 if (fDBTBL1D.%LIBS="")!(fDBTBL1D.FID="")!(fDBTBL1D.DI="") set ER=1,RM=$$^MSG(1767,"%LIBS,FID,DI") Q
 if Db.isDefined("DBTBL1D","DBTBL1D.%LIBS=:fDBTBL1D.%LIBS AND DBTBL1D.FID=:fDBTBL1D.FID AND DBTBL1D.DI=:fDBTBL1D.DI") S ER=1,RM=$$^MSG(2327) Q
 do fDBTBL1D.setAuditFlag(1)
 if fDBTBL1D.ITP="" set fDBTBL1D.ITP="S"
 if fDBTBL1D.NULLIND="" set fDBTBL1D.NULLIND=0
 if fDBTBL1D.TYP="" set fDBTBL1D.TYP="T"
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
 ;
VLOD(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) // Load data from disc - %O = (1-5)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) // Display screen prompts
 set VO="22||13|0"
 set VO(0)="|0"
 set VO(1)=$C(1,1,80,1,0,0,0,0,0,0)_"01T                 Data Item Definition (Structure Definition)                    "
 set VO(2)=$C(3,15,10,0,0,0,0,0,0,0)_"01TFile Name:"
 set VO(3)=$C(4,15,10,0,0,0,0,0,0,0)_"01TData Item:"
 set VO(4)=$C(6,11,14,0,0,0,0,0,0,0)_"01TSub Record ID:"
 set VO(5)=$C(6,57,7,0,0,0,0,0,0,0)_"01TColumn:"
 set VO(6)=$C(7,12,13,0,0,0,0,0,0,0)_"01TMaster Field:"
 set VO(7)=$C(8,18,30,2,0,0,0,0,0,0)_"01T           Computed Expression"
 set VO(8)=$C(13,1,80,0,0,0,0,0,0,0)_"11Tlqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk"
 set VO(9)=$C(14,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(10)=$C(14,25,29,2,0,0,0,0,0,0)_"01TSpecial Sub-Field Definitions"
 set VO(11)=$C(14,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(12)=$C(15,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(13)=$C(15,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(14)=$C(16,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(15)=$C(16,47,32,1,0,0,0,0,0,0)_"01T      Delimiters        Position"
 set VO(16)=$C(16,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(17)=$C(17,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(18)=$C(17,11,14,0,0,0,0,0,0,0)_"01TSub-field Tag:"
 set VO(19)=$C(17,47,7,0,0,0,0,0,0,0)_"01TPrefix:"
 set VO(20)=$C(17,60,7,0,0,0,0,0,0,0)_"01TSuffix:"
 set VO(21)=$C(17,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(22)=$C(18,1,80,0,0,0,0,0,0,0)_"11Tmqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VDA1(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)  // Display screen data
 new V
 //
 set VO="33|23|13|0"
 set VO(23)=$C(3,26,12,2,0,0,0,0,0,0)_"01T"_$E(fDBTBL1D.FID,1,12)
 set VO(24)=$C(4,26,12,2,0,0,0,0,0,0)_"01T"_$E(fDBTBL1D.DI,1,12)
 set VO(25)=$C(4,40,40,2,0,0,0,0,0,0)_"01T"_$E(fDBTBL1D.DES,1,40)
 set VO(26)=$C(6,26,26,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.NOD,1,26)
 set VO(27)=$C(6,65,2,2,0,0,0,0,0,0)_"00N"_fDBTBL1D.POS
 set VO(28)=$C(7,26,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL1D.ISMASTER:"Y",1:"N")
 set VO(29)=$C(10,2,79,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL1D.CMP,1,254)
 set VO(30)=$C(17,26,12,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL1D.SFT,1,12)
 set VO(31)=$C(17,55,3,2,0,0,0,0,0,0)_"00N"_fDBTBL1D.SFD1
 set VO(32)=$C(17,68,3,2,0,0,0,0,0,0)_"00N"_fDBTBL1D.SFD2
 set VO(33)=$C(17,77,2,2,0,0,0,0,0,0)_"00N"_fDBTBL1D.SFP
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
	
VTAB(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab
 set %MAX=11,VPT=1,VPB=18,PGM=$T(+0),DLIB="SYSDEV",DFID="DBTBL1D,DBTBL1",VSCRPP=1,VSCRPP=1
 set OLNTB=18001
 
 set VFSN("DBTBL1")="zfDBTBL1",VFSN("DBTBL1D")="zfDBTBL1D"
 //
 // 
	
	
 set %TAB(1)=$C(2,25,12)_"21U12402|1|[DBTBL1D]FID|[DBTBL1]|if X?1A.AN!(X?1""%"".AN)!(X?.A.""_"".E)|||||||256"
 set %TAB(2)=$C(3,25,12)_"21U12403|1|[DBTBL1D]DI||if X?1""%"".AN!(X?.A.""_"".E)|||||||256"
 set %TAB(3)=$C(3,39,40)_"21T12410|1|[DBTBL1D]DES"
 set %TAB(4)=$C(5,25,26)_"00T12401|1|[DBTBL1D]NOD|||do VP1^V00S059(.fDBTBL1D,.fDBTBL1)"
 set %TAB(5)=$C(5,64,2)_"00N12421|1|[DBTBL1D]POS|||do VP2^V00S059(.fDBTBL1D,.fDBTBL1)|do VP3^V00S059(.fDBTBL1D,.fDBTBL1)"
 set %TAB(6)=$C(6,25,1)_"00L12417|1|[DBTBL1D]ISMASTER|||do VP4^V00S059(.fDBTBL1D,.fDBTBL1)"
 set %TAB(7)=$C(9,1,79)_"00T12416|1|[DBTBL1D]CMP|||do VP5^V00S059(.fDBTBL1D,.fDBTBL1)||||||255"
 set %TAB(8)=$C(16,25,12)_"00U12418|1|[DBTBL1D]SFT|||do VP6^V00S059(.fDBTBL1D,.fDBTBL1)|||||~126~~1"
 set %TAB(9)=$C(16,54,3)_"00N12418|1|[DBTBL1D]SFD1|[DBCTLDELIM]||do VP7^V00S059(.fDBTBL1D,.fDBTBL1)||1|255||~126~~2"
 set %TAB(10)=$C(16,67,3)_"00N12418|1|[DBTBL1D]SFD2|[DBCTLDELIM]||do VP8^V00S059(.fDBTBL1D,.fDBTBL1)|||||~126~~3"
 set %TAB(11)=$C(16,76,2)_"00N12418|1|[DBTBL1D]SFP|||do VP9^V00S059(.fDBTBL1D,.fDBTBL1)|||||~126~~4"
 do VTBL(.fDBTBL1D,.fDBTBL1),VDEPRE(.fDBTBL1D,.fDBTBL1) if $G(ER) quit
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VTBL(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VSPP   // screen post proc
 type Public RecordDBTBL1D fDBTBL1D
 type Public RecordDBTBL1 fDBTBL1
 do VSPP1(.fDBTBL1D,.fDBTBL1)
 #ACCEPT Date=11/05/03; pgm=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
VSPP1(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)
	type public Boolean ER
	type public String RM
	
	quit:'fDBTBL1D.sfd.isNull()
	
	quit:(fDBTBL1D.nod.isNull() ! fDBTBL1D.pos.isNull())	// Computed
	
	type ResultSet rs = Db.select("DI", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:fDBTBL1D.fid AND NOD=:fDBTBL1D.nod AND POS=:fDBTBL1D.pos AND DI<>:fDBTBL1D.di")
	
	if rs.next() do {
		
		set ER = 1
		// Sub-record ID and column already assigned to ~p1
		set RM = $$^MSG(251, rs.getCol("DI"))
	}
	
	quit
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
VDEPRE(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)  // Data Entry Pre-processor
 
	if fDBTBL1D.nod.isLike("%*%") do PROTECT^DBSMACRO("ALL") quit
	if (fDBTBL1D.typ = "M") ! (fDBTBL1D.typ = "B") do { quit
		do PROTECT^DBSMACRO("DBTBL1D.POS")
		do PROTECT^DBSMACRO("DBTBL1D.ISMASTER")
		do PROTECT^DBSMACRO("DBTBL1D.CMP")
		do PROTECT^DBSMACRO("DBTBL1D.SFT")
		do PROTECT^DBSMACRO("DBTBL1D.SFD1")
		do PROTECT^DBSMACRO("DBTBL1D.SFD2")
		do PROTECT^DBSMACRO("DBTBL1D.SFP")
		if (%ProcessMode = 0), (fDBTBL1.rectyp = 1) do {
	
			type String key, keys
	
			set keys = fDBTBL1.acckeys
			set key = keys.piece(",", keys.length(","))
	
			do DEFAULT^DBSMACRO("DBTBL1D.NOD", key)
		}
	}
	if (+fDBTBL1.rectyp = 0) do PROTECT^DBSMACRO("ALL") quit
	
	if (fDBTBL1.del.isNull()) do PROTECT^DBSMACRO("DBTBL1D.POS")
	
	if 'fDBTBL1.parfid.isNull(), Db.isDefined("DBTBL1D", "%LIBS='SYSDEV',FID=:fDBTBL1.parfid,DI=:fDBTBL1D.di") do { quit
	
		do PROTECT^DBSMACRO("DBTBL1D.NOD")
	}
	
	if (%ProcessMode = 0), (fDBTBL1.rectyp = 1) do {
		
		type String key, keys
		
		set keys = fDBTBL1.acckeys
		set key = keys.piece(",", keys.length(","))
		
		do DEFAULT^DBSMACRO("DBTBL1D.NOD", key)
	}
	
	quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


  //user-defined post procs
 //
VP1(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X
	
	type Boolean isMB
	type String FID
	
	if ((fDBTBL1D.typ = "M") ! (fDBTBL1D.typ = "B")) set isMB = 1
	else  set isMB = 0
	set FID = fDBTBL1D.fid

	// For memo/blob, ensure only one per node
	if isMB do { quit:ER

		if X.isNull() do { quit

			set ER = 1
			// Data required
			set RM = $$^MSG(741)
		}

		type ResultSet rs = Db.select("DI,TYP", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:FID AND NOD=:X AND (TYP='B' OR TYP='M')")

		if rs.next() do {

			set ER = 1
			set RM = "Node already in use by column "_rs.getCol("DI")_" data type "_rs.getCol("TYP")
		}
	}
	
	if 'isMB, 'X.isNull(), fDBTBL1D.pos.isNull() do DEFAULT^DBSMACRO("DBTBL1D.POS", $$DFTPOS(fDBTBL1, X))
	
	// Reserved for Z data items (NODE>999)
	if fDBTBL1D.di.beginsWith("Z"), (X?1N.N), ({Number}X < 999) do { quit
		
		set ER = 1
		// Option not available for this field
		set RM = $$^MSG(4913)_" "_DI
	}

	if X.isNull() do { quit

		do DELETE^DBSMACRO("DBTBL1D.POS", 1)
		do PROTECT^DBSMACRO("DBTBL1D.POS")
		do PROTECT^DBSMACRO("DBTBL1D.FCR")
		do PROTECT^DBSMACRO("DBTBL1D.LEN")
		do PROTECT^DBSMACRO("DBTBL1D.ISMASTER")
		do UNPROT^DBSMACRO("DBTBL1D.CMP")
	}
 
	if 'isMB do {

		if 'fDBTBL1.del.isNull() do UNPROT^DBSMACRO("DBTBL1D.POS")

		do UNPROT^DBSMACRO("DBTBL1D.FCR")
		do UNPROT^DBSMACRO("DBTBL1D.LEN")
		do UNPROT^DBSMACRO("DBTBL1D.ISMASTER")
		do PROTECT^DBSMACRO("DBTBL1D.CMP")

		// Find default position for this node
		if (FID = "ACN")  do {

			type Number POS
		
			type ResultSet rs = Db.select("MAX(POS)", "DBTBL1D", "(FID='DEP' OR FID='LN') AND NOD=:X")
		
			if rs.next() set POS = rs.getCol(1) + 1
			else  set POS = 1
		
			set fDBTBL1D.pos = POS
		
			if (%ProcessMode = 0) do DEFAULT^DBSMACRO("DBTBL1D.POS", POS, 1, 0)
		}
	}

	if (FID '= "ACN") do {
		
		type Number RECTYP

		if (X?1N1"*") do GOTO^DBSMACRO("END") quit
		
		set RECTYP = fDBTBL1.rectyp
		
		if (+RECTYP = 0) do { quit
			
			set ER = 1
			// Invalid for record type ~p1
			set RM = $$^MSG(1348, RECTYP)
		}
		
		if (RECTYP = 1) do { quit:ER
			
			type String key, keys
			
			set keys = fDBTBL1.acckeys
			
			quit:keys.isLike("%""%")
			
			set key = keys.piece(",", keys.length(","))
			
			if (X '= key) do {
			
				set ER = 1
				// Invalid for record type ~p1, use ~p2
				set RM = $$^MSG(1349, RECTYP, key)
			}
		}
		
		if X.beginsWith("[") do { quit:ER
			
			type String di, fid
			
			set fid = X.piece("[", 2).piece("]", 1)
			set di = X.piece("]", 2)
			
			if (fid.isNull() ! di.isNull()) set ER = 1
			else  if 'Db.isDefined("DBTBL1D", "%LIBS='SYSDEV',FID=:fid,DI=:di") set ER = 1
		
			// Invalid syntax	
			if ER set RM = $$^MSG(1475)
		}
		
		set RM = fDBTBL1.glref
		if (X?1N.E) set RM = RM_","_X_")"
		else  set RM = RM_")"
		
		if 'X.beginsWith("%"), (X?.E1C.E) do { quit
		
			set ER = 1
			// Alphanumeric format only
			set RM = $$^MSG(248)
		}

		if 'isMB, 'fDBTBL1D.cmp.isNull() do DELETE^DBSMACRO("DBTBL1D.CMP", 0)

		if 'isMB, (%ProcessMode = 0) do DEFAULT^DBSMACRO("DBTBL1D.POS", $$DFTPOS(fDBTBL1, X), 1, 0)
	}
	
	quit
	
	
DFTPOS(RecordDBTBL1 fDBTBL1,
       String NOD)
       
	/*
	Return the next column on this node
	*/
	
	type public String V
	
	type Number POS
	
	if fDBTBL1.del.isNull() quit ""
	if NOD.isNull() quit ""
	if V.isLike("%*%") quit ""
	
	type ResultSet rs = Db.select("MAX(POS)", "DBTBL1D", "FID=:fDBTBL1.fid AND NOD=:NOD")
	
	if rs.next() set POS = rs.getCol(1) + 1
	else  set POS = 1
	
	quit POS
VP2(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public Number X
	type public String RM
	
	quit:((fDBTBL1D.typ = "M") ! (fDBTBL1D.typ = "B"))
	
	quit:fDBTBL1D.nod.isNull()
	
	if 'fDBTBL1.del.isNull(), X.isNull() do {
	
		set ER = 1
		// Data required
		set RM = $$^MSG(741)
	}
	
	do CHANGE^DBSMACRO("TBL", "")
	
	quit
VP3(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
        // Display columns by position
 
        type public Number X
        type public String I(), nodpos()
 
        if X.isNull() set X = $$DFTPOS(fDBTBL1, fDBTBL1D.nod)
 
        kill nodpos
 
        type ResultSet rs = Db.select("POS,DI,DES", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:fDBTBL1.fid AND NOD=:NOD AND SFD IS NULL")
 
        while rs.next() do {
        	
        	type String DIPAD
        	
        	set DIPAD = rs.getCol("DI")
        	set DIPAD = DIPAD.justify(14, -1)
        	
        	set nodpos(rs.getCol("POS")) = DIPAD_rs.getCol("DES")
        }
 
        set I(3) = "nodpos("
 
        quit
VP4(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER, X
	type public String RM

	quit:'X

	type ResultSet rs = Db.select("DI", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:fDBTBL1D.fid AND NOD=:fDBTBL1D.nod AND POS=:fDBTBL1D.pos AND ISMASTER=1")
	
	if rs.next() do { quit

		set ER = 1
		set RM = "Masterfield column "_rs.getCol("DI")_" already assigned to this sub-record ID and column"
	}

	do GOTO^DBSMACRO("END")

	quit
VP5(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X
	
	quit:((fDBTBL1D.typ = "M") ! (fDBTBL1D.typ = "B"))

	quit:(X.isNull() & (fDBTBL1.filetyp = 5))

	// See if this is an MDD file
	type ResultSet rs = Db.select("SYSSN", "SCASYS", "DBSMDD=:fDBTBL1D.fid")
	
	quit:rs.next()			// Is MDD

	if X.isNull(), fDBTBL1D.nod.isNull(), (fDBTBL1.rectyp > 0) do CHANGE^DBSMACRO("REQ")
	
	// Validate computed expression
	set ER = $$VALIDCMP^DBSDF(fDBTBL1D.fid, fDBTBL1D.di, .X, .RM)
	
	if 'X.isNull() do {
	
		if (fDBTBL1D.di.length() > 8) do {
			
			set ER = 1
			// Computed column name must be 8 characters or less
			set RM = $$^MSG(4476)
		}
		
		/* Should not be possible, currently, to have an underscore in
		   a column name, but have left this in as it will be important
		   if we add that capability in the future.
		*/
		if fDBTBL1D.di.isLike("%_%") do {
			
			set ER = 1
			// Computed column name cannot contain an "_"
			set RM = $$^MSG(4477)
		}
	}
	
	quit
VP6(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X
	
	quit:X.isNull()
	
	type ResultSet rs = Db.select("DI", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:fDBTBL1D.fid AND NOD=:fDBTBL1D.nod AND POS=:fDBTBL1D.pos AND ISMASTER=1")
	
	if rs.isEmpty() do {

		set ER = 1
		set RM = "Cannot assign a subfield to a non-masterfield column"
	}
	
	quit
VP7(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public Number X
	type public String RM

	if 'X.isNull() do { quit:ER

		type ResultSet rs = Db.select("DI", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:fDBTBL1D.fid AND NOD=:fDBTBL1D.nod AND POS=:fDBTBL1D.pos AND ISMASTER=1")
	
		if rs.isEmpty() do {

			set ER = 1
			set RM = "Cannot assign a subfield to a non-masterfield column"
		}
	}
	
	if X.isNull(), 'fDBTBL1D.sft.isNull() do { quit
		
		set ER = 1
		// Data required
		set RM = $$^MSG(741)
	}
	
	if 'X.isNull(), (X = fDBTBL1.del) do { quit
	
		set ER = 1
		// Invalid file delimiter (i.e., cannot be file delimiter)
		set RM = $$^MSG(416)
	}
	
	quit
VP8(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public Number X
	type public String RM

	type String MFCOL

	if 'X.isNull() do { quit:ER

		type ResultSet rs = Db.select("DI", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:fDBTBL1D.fid AND NOD=:fDBTBL1D.nod AND POS=:fDBTBL1D.pos AND ISMASTER=1")
	
		if rs.isEmpty() do {

			set ER = 1
			set RM = "Cannot assign a subfield to a non-masterfield column"
		}
	}
	
	if X.isNull(), 'fDBTBL1D.sft.isNull() do { quit
		
		set ER = 1
		// Data required
		set RM = $$^MSG(741)
	}
	
	if 'X.isNull(), (X = fDBTBL1.del) do { quit
	
		set ER = 1
		// Invalid file delimiter (i.e., cannot be file delimiter)
		set RM = $$^MSG(416)
	}
	
	quit
VP9(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1) //
	type public Boolean ER
	type public String RM, X
	
	quit:X.isNull()
	
	type ResultSet rs = Db.select("DI", "DBTBL1D", "%LIBS='SYSDEV' AND FID=:fDBTBL1D.fid AND NOD=:fDBTBL1D.nod AND POS=:fDBTBL1D.pos AND ISMASTER=1")
	
	if rs.isEmpty() do {

		set ER = 1
		set RM = "Cannot assign a subfield to a non-masterfield column"
	}
	
	quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordDBTBL1D fDBTBL1D
 type Public RecordDBTBL1 fDBTBL1
 do VPR(.fDBTBL1D,.fDBTBL1)
 do VDA1(.fDBTBL1D,.fDBTBL1)
 do ^DBSPNT()
 quit

VW(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)
 do VDA1(.fDBTBL1D,.fDBTBL1)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordDBTBL1D fDBTBL1D,RecordDBTBL1 fDBTBL1)
 do VDA1(.fDBTBL1D,.fDBTBL1)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordDBTBL1D fDBTBL1D
 type Public RecordDBTBL1 fDBTBL1
 do VDA1(.fDBTBL1D,.fDBTBL1)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
 
vSET(sn,di,X)
 type Public RecordDBTBL1D fDBTBL1D
 if sn="DBTBL1D" do vSET1(.fDBTBL1D,di,X)
 type Public RecordDBTBL1 fDBTBL1
 if sn="DBTBL1" do vSET2(.fDBTBL1,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
vSET1(RecordDBTBL1D fDBTBL1D,di,X)
 do fDBTBL1D.setAuditFlag(1)
 set fDBTBL1D.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
vSET2(RecordDBTBL1 fDBTBL1,di,X)
 do fDBTBL1.setAuditFlag(1)
 set fDBTBL1.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
vREAD(fid,di)
 type Public RecordDBTBL1D fDBTBL1D
 if fid="DBTBL1D" quit $$vREAD1(.fDBTBL1D,di)
 type Public RecordDBTBL1 fDBTBL1
 if fid="DBTBL1" quit $$vREAD2(.fDBTBL1,di)
 quit ""
vREAD1(RecordDBTBL1D fDBTBL1D,di)
 quit fDBTBL1D.@di
vREAD2(RecordDBTBL1 fDBTBL1,di)
 quit fDBTBL1.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
