PBSSRV	//Private;PROFILE(SCA$IBS) Server
	/*
	ORIG:  MATTSON - 01-SEP-1993

	REFERENCE:

	Title:  PROFILE Open Banking Server Architecture
	Document:  SPECS::VERSIONS.V50:9284.DOC
	
	***********************************************************************
	NOTE on error trapping:
	
	An error in LOOP will trap to the catch block in SVCNCT, logging the
	error, then terminating the process.
	
	Once processing of the message starts, in LOOP, the processing will be
	protected with the catch block in loop as well as the use of %ZTPTRAP.
	If an error occurs before the next catch block is set, in EXEC, then
	we will trap back to this catch block, log the error, construct a
	reply, log the reply, and be done with this message, then return to
	get the next message.
	
	The catch block in EXEC, once we start to process an individual service
	class message, will catch an error and contruct a valid error reply for
	that service class message.
	
	Error traps set in application code may fully handle the error processing,
	or can throw their errors back to higher levels, eventually ending up at
	the EXEC section catch block.
	
	The use of %ZTPTRAP, which is examined and acted on in UCGMR.m is intended
	to ensure that all TPTIMEOUTS are caught and force a return to the PROC
	level of this procedure, log the error, construct a valid response, log
	the reply, and be done with this message, then return to get the next
	message.
	
	Care should be used in any application code that does a rollback since
	that will disable the TPTIMEOUT.  This can result in failure to return
	a response to the client in sufficient time, or, worse, if coding results
	in a loop, tying up the server indefinitely.
	***********************************************************************	

	---- Revision History ------------------------------------------------
	02/05/2009 - RussellDS - CRs 38078/35741
		* Modified error trapping to ensure that the appropriate
		  rollbacks occur.  Generally, UTLERR will perform a rollback,
		  but there are cases when it is not called.
		* Corrected PSL warnings.
		  
	08/18/2008 - RussellDS - CR35331
		Modified catch blocks to use new error logging to allow
		proper capture of data related to errors.
	
	08/11/2008 - RussellDS - CR35288
		Fix error in EXEC on date change check to add missing rs.next().
	
	06/18/08 - GIRIDHARANB - CR34706
	   Declared a new public variable vzcpmsg at the top of the LOOP section.
	   This varaible will be used to store messsges returned from the
	   cursor pool process, so a transaction restart will skip sending
	   the message to the cursor process.
	   
	06/22/2008 - RussellDS - CR34471
		Modified EXEC to refresh cache on userclass change now
		that access rights are available.  Prevents use of cache
		from prior userclass.
		
		Removed old revision history.
	
	04/30/08 - SavithaV - CR33590
		   Added a procedure header with routine name and description.
		   This fix will cause the M routine to start the server.
		   
	04/08/08 - KELLYP - CR 33287
		   Modified SVCNCT to add the ^DBBUF, ^DQRTSTS, ^MSGEXC, ^MSGLOG, 
		   ^PBSBBSSP, ^SQLCUR, and ^TMPCACHE globals to the no isolation 
		   list.  This corrects a problem where collisions were encountered
		   during periods of high db activity related to buffered SQL
		   statements.
	
	08/30/07 - RussellDS - CR28928
		   Modified checking of change of date to only occur every 30
		   seconds or if directory changes.  See complimentary
		   changes in RCHK.
		   
		   Added vzcache for non-table cache management within PBS*
		   procedures.
	
		   Add protection for %CACHE.
		   
		   Add correct tracking of elapsed time for MSGLOG.  Added
		   tracking to TP restarts for message log (from P01 project).
		   
		   Moved call to STATS^PBSUTL to LOGCMT.
	*/

	// I18N=QUIT

	quit
	

private SVCNCT(String vzsvtyp,		// Server type		/TBL=CTBLSVTYP
	       Number vzsvid,		// Server ID (1-n)
	       String vzdebug)		// Server debug mode	/NOREQ

	/*
	Entry point to start server.
	*/
	
	type Boolean vzactive, vzlogmsg, vzlogrep, vzsvsec, vztrap
	type Number vzmaxtim, vzsttim, vztimer, vztimout
	type String vzcsid, vzermsg, vzgbldir, vzmsgpgm, vzmtname, vzrole, vzsav, vzsvfap, vzsvfape

	// SCA$IBS Servers which are connected to synchronous MTMs
	if vzsvtyp="SCA$IBS" do {
		#ACCEPT PGM=RussellDS;DATE=08/18/2008;CR=unknown
		#BYPASS
		view "NOISOLATION":"+^DBBUF,^DQRTSTS,^MSGEXC,^MSGLOG,^PBSBBSSP,^SQLCUR,^TMPCACHE"
		#ENDBYPASS
		}
	
	// Get system role (PRIMARY or SECONDARY)
	set vzrole=$$ROLE^PBSUTL

	// If role is PRIMARY, server is active
	if vzrole="PRIMARY" set vzactive=1

	// If role is SECONDARY, server is not active
	else  if vzrole="SECONDARY" set vzactive=0

	// Any other role is invalid; log an error and quit
	else  do ERRLOG^PBSUTL("SV_INVLDSTS",1) quit
	
	type RecordCTBLSVTYP svtyp=Db.getRecord("CTBLSVTYP","vzsvtyp",1)
	if svtyp.getMode()=0 do ERRLOG^PBSUTL("SV_INVLDSVT",'vzactive) quit

	set vzsvfap=svtyp.fap				// Server FAP ID
	set vzsvfape = vzsvfap				// Copy for traps (see ZTPROC)
	set vzsvsec=svtyp.trust				// Security level
	set vzsttim=svtyp.stattim			// Stat time interval
	set vzlogmsg=svtyp.logmsg			// Log client messages
	set vzlogrep=svtyp.logreply			// Log server replies
	
	// Will apply to GT.M only
	set vzmaxtim=svtyp.timeout			// Transaction TP timeout
	if 'vzmaxtim set vzmaxtim=45			// (default is 45 seconds)
	
	#ACCEPT Date=02/05/2009; Pgm=RussellDS; CR=38078; Group=BYPASS
	#BYPASS
	I $P($ZVERSION,"GT.M V",2)>4 S $zmaxtptime=vzmaxtim
	#ENDBYPASS

	set vztimout=svtyp.getmsg			// Server GETMSG timeout
	if 'vztimout set vztimout=15			// (default=15 seconds)

	set vztrap=svtyp.trapmsg			// Trap last client message
	set vzmtname=svtyp.mtname			// Message transport name
	set vzmsgpgm=svtyp.msgpgm			// Non-std message handler

	set vzermsg=$$SVCNCT^%MTAPI(vzsvtyp,.vzcsid,.vzrole,vzmtname)
	if vzermsg'="" do ERRLOG^PBSUTL(vzermsg,'vzactive) quit

	type RecordSVCTRLT svctrl=Class.new("RecordSVCTRLT")
	set svctrl.svtyp=vzsvtyp
	set svctrl.svid=vzsvid
	set svctrl.mtmid=vzcsid.piece("|",1)
	set svctrl.mtmsvrid=vzcsid.piece("|",2)
	set svctrl.pid=$$DECHEX^%ZHEX(%ProcessID)
	set svctrl.role=vzrole
	set svctrl.datetime=%CurrentDate_","_%CurrentTime
	do svctrl.bypassSave()
	
	// Register M process
	do REGISTER^IPCMGR("SERVER",vzsvtyp)

	// Execute debug code if applicable
	#ACCEPT PGM=Erik Scheetz;DATE=11/22/02;CR=unknown
	if vzdebug.get()'="" xecute vzdebug

	//Connection complete, continue with Main Processing

	// Main process loop

	/*
	   This subroutine is the main process loop for the server process.
	   It is responsible for calling the appropriate functions to receive
	   ($$GETMSG^%MTAPI), process ($$PROC^PBSSRV) and reply ($$REPLY^%MTAPI)
	   to client messages.  The server disconnects and terminates (via a
	   MUMPS HALT command) when a STOP message is processed in subroutine
	   CTRL.

	   Error handling in subroutine MAIN

	   A MUMPS error in this subroutine is unexpected and fatal.  If a
	   MUMPS error is encountered, the error will be logged and the
	   server will be stopped.  Application errors are handled thru
	   error trapping set in subroutine PROC.

	   Control messages are checked between message exchanges.  The server
	   will shut down if a STOP message is encountered.

	   If the error is non-specific (CS_MTERROR), the error is logged and
	   the server attempts to disconnect and reconnect to the message
	   transport.  If unsuccessful, the reason for the failure is also
	   logged and the server is stopped.

	   Input Message (L[ength] V[alue]Format)

	  vzsrvcls vzcltokn vzmssgid vzstfflg vzgrprec vzclvrsn vzmsgbdy

	   vzsrvcls 	Service class
	   vzcltokn 	Client token
	   vzmssgid 	Client message ID
	   vzstfflg 	Store and forward indicator
	   vzgrprec 	Group record handling (currently AGMSG service class only)
	   vzclvrsn 	Client version identifier (PROFILE)
	   vzmsgbdy 	Message body (service class specific)


	*/
	
	/* Outermost error trap.  If we trap to here, we just want to
	   log it and be done.  We don't want to continue trying to
	   process, since we'll likely just end up looping on the
	   error.
	*/
	catch error@"LOGERR^UTLERR" {
		
		do Runtime.rollback()
	}

	set vztimer=$$TIM^PBSUTL(%CurrentDate_","_%CurrentTime)+(vzsttim*60)
	set vzsav=$$INIT^PBSUTL
	set vzgbldir=""
	
	#ACCEPT Date=02/05/2009; Pgm=RussellDS; CR=38078; Group=BYPASS
	#BYPASS
	S vzgbldir=$ZGBLDIR
	#ENDBYPASS
	
	do XKILL^PBSUTL

	// Initialization complete, continue to Processing Loop
	do LOOP
	
	quit
	
	
LOOP	// Message Processing Loop
	
	type public Boolean vzactive, vzlogmsg, vzlogrep, vzsvid, vzsvsec, vztrap
	type public Number vztimer, vztimout
	type public String %INTRPT(), vzcsid, vzermsg, vzgbldir, vzmsgpgm, vzmtname, vzrole, vzsav, vzsvfap, vzsvtyp
	
	type Cache %CACHE()			// Start cache scoping
	type Number vzerror, vzlasttjd, vzsrvcls, vzstart, vzstatus, vztime, vztprest
	type String %SVCNTXT, %ZTPTRAP, vzerrepl, vzjrnl, vzpkt, vzpktid
	type String vzreply, vzrm, vzsvstat()
	
	/*  vzcache is available for PBS procedures to use for caching of
	    non-table information (i.e., stuff that can't be cached to
	    %CACHE).  Nothing outside of PBS* should ever access this
	    cache.  Anything added to it must use a unique first key
	    and a single additional key.
	*/
	type String vzcache(,)			// Non-table caching
	
	set vzlasttjd = 99999		// Initialize TJD reset timer

	for  do {
		
		type String vzcltokn, vzcpmsg, vzmssgid
		
		// Check Interrupt status to shutdown or process control messages
		if %INTRPT.data() > 1 do INTRPT^IPCMGR
		if '%INTRPT.get().isNull() do {
		
			if %INTRPT = "STOP" do CTRLSTOP^PBSUTL
			if %INTRPT = "CTRL" do CTRL^PBSUTL(vzsvtyp,vzsvid,vzcsid,.vzactive)
			
			// Clear Interrupt indicator
			set %INTRPT = ""
			}
		
		// File Server Statistics
		do FILSTAT^PBSUTL(vzsvtyp,vzsvid,.vzsvstat(),.vztimer)

		set vzermsg=$$GETMSG^%MTAPI(.vzpkt,.vzpktid,.vzcsid,vztimout)

		// Timeout error
		if vzermsg="CS_TIMEOUT" quit

		// Trap last message received for this server process ID
		if vztrap.get() do {
			do Db.fastDelete("SVTRAP","%ProcessID")
			type RecordSVTRAP svtrap=Class.new("RecordSVTRAP")
			set svtrap.job=%ProcessID
			if vzermsg'="" set svtrap.errormsg=vzermsg
			set svtrap.message=vzpkt
			do svtrap.save()
		}

		// Attempt to re-connect
		if vzermsg="CS_MTERROR" do {
			do ERRLOG^PBSUTL(vzermsg,'vzactive)
			set vzermsg=$$SVDSCNCT^%MTAPI(vzcsid)
			if vzermsg="" set vzermsg=$$SVCNCT^%MTAPI(vzsvtyp,.vzcsid,.vzrole,vzmtname)

		}

		// Switch to PRIMARY role
		if vzermsg="CS_MTSECONDARY" do { quit
			if 'vzactive do FAILOVER^PBSUTL
		}

		// Switch to SECONDARY role
		if vzermsg="CS_MTPRIMARY" do { quit
			if 'vzactive do SHUTDOWN^PBSUTL(vzsvtyp, vzsvid)
		}

		// Fatal error
		if vzermsg'="" do { halt
			do Db.fastDelete("SVCTRLT","vzsvtyp,vzsvid")
			
			// Unregister M process
			do CLOSE^IPCMGR()
			
			do ERRLOG^PBSUTL(vzermsg,'vzactive)
		}

		// Check if okay to process (switch to PRIMARY may be in process)
		if 'vzactive,'$$OK2PROC^PBSUTL quit

		// Transaction start time
		set vzstart=$$GETTIM^%ZFUNC

		// Server context (for use by application for TP restarts)
		kill %SVCNTXT

		// Release any outstanding locks
		#ACCEPT Date=05/15/07; Pgm=RussellDS; CR=unknown; Group=Xecute
		xecute "lock"
		
		set vztprest = 0

		// Transaction start with Client/Server transaction identifier
		do Runtime.start("CS")

		// If transaction is restarted, clean-up symbol table
		if $TRestart do {
			do XKILL^PBSUTL 
			if vzsav.get()="" set vzsav=$$INIT^PBSUTL 
			do VLOD^PBSUTL(vzsav)
			set vztprest = vztprest + 1
		}
		
		/* Provide mechanism to return control back from application in the
		   event of a TPTIMEOUT error.  All other error handling is the
		   responsibility of the application through standard use of catch
		   blocks.  This overrides that only in the event of a TPTIMEOUT.
		   The code for use of %ZTPTRAP resides in UCGMR.m.
		*/
		set %ZTPTRAP="D ZTPTRAP^PBSSRV ZG "_$ZLEVEL
		set (vzerrepl, vzreply) = ""

		// Process the client message - protect with catch block
		do {	
			
			type Boolean vzerrRpt = 0
			
			catch error@"LOGERR^UTLERR" {
				
				type public Number %ZTSEQ
				
				do Runtime.rollback()
				
				// Prevent loop
				if vzerrRpt.get() throw error
				set vzerrRpt = 1
				
				// If trap back to here, don't want to also do %ZTPTRAP
				set %ZTPTRAP = ""
				
				if %ZTSEQ.get().isNull() do ZE^UTLERR
				set vzerrepl = $$ZTPROC
				
				// Handle logging even if error
				do LOGCMIT
			}

			set vzreply=$$PROC(vzpkt,vzsvfap,vzsvsec,.vzsav,vzmsgpgm,0,,.vzcltokn,.vzmssgid,.vzstatus,.vzsrvcls,.vzsvstat(),vzstart,vztprest)

			do LOGCMIT
		}
		
		// If trap back to here, vzreply will be null, since protected
		//  in PROC section.  vzerreply set by catch block, so use it.
		if vzreply.isNull() set vzreply = vzerrepl

		// Release any outstanding locks
		#ACCEPT Date=05/15/07; Pgm=RussellDS; CR=unknown; Group=Xecute
		xecute "lock"

		if vzjrnl.get()'="" do {
			use vzjrnl
			write !!
			zwrite vzpkt,vzreply
			use 0
		}

		if vzreply'="" do {
			set vzermsg=$$REPLY^%MTAPI(.vzreply,vzpktid,vzcsid)
			if vzermsg'="" do ERRLOG^PBSUTL(vzermsg)
		}

		// Clean up cache and reset TJD timer if change directories
		#ACCEPT PGM=Erik Scheetz;DATE=11/22/02;CR=unknown
		#BYPASS
		if $ZGBLDIR'=vzgbldir kill %CACHE,vzcache set vzlasttjd=99999
		#ENDBYPASS
		
		do XKILL^PBSUTL
	}
		
	quit
	
	
LOGCMIT		// Log and commit

	/* This can be called in three scenarios:
	
		1 - after successful call to PROC
		2 - if encounter an error in PROC and trap back to catch block in LOOP
		3 - if encounter TPTIMEOUT, in ZTPTRAP
	*/

	type public Boolean vzlogmsg, vzlogrep
	type public Number vzstart, vzstatus, vzsrvcls, vztprest
	type public String vzcltokn, vzmssgid, vzpkt, vzreply, vzsvstat
	
	type Boolean vzkvst = 0
	type Number vztime

	// TRollback occured in application, issue new TStart
	if $TLevel=0 do Runtime.start("CS")
	
	// If we end up here because of a trap, vzstart may not exists
	if 'vzstart.exists() do {
	
		set vzstart = $$GETTIM^%ZFUNC
		set vzkvst = 1
	}
	
	set vztime = (($$GETTIM^%ZFUNC - vzstart) / 1000000).roundDec(3)

	// Log message in message log
	do LOG^PBSUTL(vzcltokn.get(), vzmssgid.get(), vzpkt.get(), vzreply.get(), vzstatus.get(), vzsrvcls.get(), "PBSSRV", vzlogmsg.get(), vzlogrep.get(), vztime, vztprest.get())

	// Update statistics
	if 'vzsrvcls.get().isNull() do STATS^PBSUTL(vzsvstat(), vzsrvcls, vztime)		

	do Runtime.commit()
	
	if vzkvst kill vzstart
	
	quit


private PROC(String vzpkt,		// Input message packet
	     String vzsvfap,		// Server type table data ([CTBLSRVTYP]SRVTYP)
	     Boolean vzsvsec,		// Server security level
	     String vzsav,		// System variable string	/NOREQ/MECH=REFNAM:RW
	     String vzmsgpgm,		// Message program
	     Boolean vzisagm,		// Aggregate message flag [*]	/NOREQ
	     String vzagmrep,		// Aggregate message reply [*]	/NOREQ/MECH=REFNAM:W
	     String vzcltokn,		// Token			/NOREQ/MECH=REFNAM:W
	     String vzmssgid,		// Message ID			/NOREQ/MECH=REFNAM:W
	     Number vzstatus,		// Success/failure status	/NOREQ/MECH=REFNAM:W
	     Number vzsrvcls,		// Service class of message	/NOREQ/MECH=REFNAM:W
	     String vzsvstat,		// Server statistics		/NOREQ/MECH=REFNAM:W
	     Number vzstart,		// Start time			/NOREQ/MECH=REFNAM:R
	     Number vztprest)		// TP restarts			/NOREQ/MECH=REFNAM:R

	/*
	Process the incoming message
	
	ARGUMENT NOTES:
		. vzisagm	Indicates whether the message being processed
				is under the AGMSG service class, i.e., that
				PROC is being called by PBSAGMSG.  If it is,
				the server reply will be returned in string
				vzagmrep, without the formatting provided by
				the $$REPLY function, and without having been
				FAP'd.
				
		. vzagmrep	Raw message information - status | reply

	RETURNS:
		. $$	Server reply (formatted)	/TYP=T
	*/
	
	// Required by PBSAGMSG
	type public Boolean vzlogmsg, vzlogrep

	// Protect MAIN variables
	type Boolean vzactive, vzsvid,  vztrap
	type Number vzsttim, vztimer, vztimout
	type String vzcsid, vzgbldir, vzjrnl, vzmtname, vzpktid, vzreply, vzrole
	type String vzsvtyp, vztime
	
	// Local variables
	type Number vzcnt, vzerror(), vzgrprec, vznum, vzptr
	type Number vztyp, vzsgn, vzstfflg
	type String TOKEN, vzclvrsn, vzcontxt, vzermsg, vzfap
	type String vzfaps, vzident, vzinst, vzlang, vzpwd, vzrecord()
	type String vzstn, vzsvchnl, vzucls, vzuid
	
	if 'vzisagm.exists() set vzisagm = 0

	// Initialize status
	set vzstatus=0

	// Process non-standard message
	if vzmsgpgm'="" quit $$^PBSNSM(vzpkt, vzmsgpgm, vzstart.get(), vztprest.get())

	// Execute server layer entry FAP
	set vzermsg=$$FAPINP(.vzpkt,vzsvfap)
	if vzermsg'="" do { quit $$FAPOUT(vzermsg,vzsvfap)
		set vzstatus=1
		if vzisagm set vzagmrep = "1|"_vzermsg
	}

	// Parse client msg into hdr/msg(s)
	set vzptr=$$LV2V^MSG(vzpkt,.vzrecord)

	// Process header, quit if error
	set vzermsg=$$HDR(vzrecord(1).get())
	if vzermsg'="" set vzstatus = 1 quit $$ERROR($$CSERR^PBSUTL(vzermsg), 1, vzisagm, .vzagmrep)

	// Update message count statistics; exclude restarts
	if $TRestart=0 set vzsvstat(vzsrvcls).piece("|",1)=vzsvstat(vzsrvcls).get().piece("|",1)+1
	
	/* Handle AGMSG service class (aggregate messages)
	   NOTE:  Build header array to pass to PBSAGMSG to allow protection of
	   header variables since PBSAGMSG calls back into PROC.  Also prevents
	   need for PBSAGMSG to re-parse the header
	*/
	if (vzsrvcls = 7) do { quit $$REPLY(vzreply, vzstatus)
		
		type String vzaghdr()
		
		set vzaghdr(1) = 7
		set vzaghdr(2) = vzcltokn
		set vzaghdr(3) = vzmssgid
		set vzaghdr(4) = vzstfflg
		set vzaghdr(5) = vzgrprec
		set vzaghdr(6) = vzclvrsn
		set vzaghdr(7) = vzident
		set vzaghdr(8) = vzsvchnl
		
		set vzstatus = $$^PBSAGMSG(.vzaghdr(), .vzrecord(), .vzreply)
		
		// Execute service class layer exit FAP
		set vzfap = vzfaps.piece("~", vzsrvcls)
		set vzreply = $$FAPOUT(.vzreply, vzfap, vzsrvcls, vzstfflg)
	}

	// Check if duplicate message
	set vzreply=$$MSGLOG(vzisagm, .vzagmrep)
	if vzreply'="" quit vzreply

	set vzfap=""
	set vzcnt=vzrecord("").order(-1)

	// Non-NMSP message
	if vzsrvcls do {
		set vzfap=vzfaps.piece("~",vzsrvcls)
		
		#ACCEPT PGM=Erik Scheetz;DATE=11/22/02;CR=unknown
		if vzgbldir'="" set $ZGBLDIR=vzgbldir
	}

	// Process record(s)
	for vznum=2:1:vzcnt do {
		type String vzrm

		set vzerror=$$EXEC(vzrecord(vznum),.vzrm)

		if vzerror,'vzstatus do {
			set vzstatus=vzerror
			do ERSTAT^PBSUTL(.vzsvstat,vzsrvcls,vzrm)
		}

		set vzreply(vznum)=vzrm
		set vzerror(vznum)=vzerror
	}
	
	/* If we are processing under an aggregate message return status and
	   base reply to PBSAGMSG without formatting.  Note that vznum will
	   only be 2 since we're only dealing with a single message.
	*/
	if vzisagm set vzagmrep = vzerror(vznum)_"|"_vzreply(vznum)

	// Format reply(ies)
	for vznum=2:1:vzcnt do {
		type String vzfld,vzst,vzrm

		set vzst=vzerror(vznum)
		set vzrm=vzreply(vznum)

		// Format rollback message, if applicable
		if vzgrprec,vzstatus,'vzst set vzst=2,vzrm=""

		set vzfld(1)=vzst
		set vzfld(2)=vzrm
		set vzrm=$$V2LV^MSG(.vzfld,"",1)

		// Execute service class layer exit FAP
		set vzreply=vzreply_$$FAPOUT(.vzrm,vzfap,vzsrvcls,vzstfflg)
	}

	// Server reply message
	quit $$REPLY(vzreply, vzstatus)


EXEC(String vzrec,		// Input record
     String vzrm)		// Reply message	/MECH=REFNAM:W
     
	/*
	Execute service class procedure
	       
	RETURNS:
		. $$		Error Code		/TYP=N/LEN=1

	*/
	
	type public Cache %CACHE()
	type public Boolean vzsvsec
	type public Number ER, vzlasttjd, vzsrvcls, vzstfflg, vztyp
	type public String %IPMODE, %STFHOST, %ZTSEQ, RM, vzcltokn, vzclvrsn, vzcontxt
	type public String vzfap, vzident, vzmssgid, vzsav, vzstn, vzsvchnl, vzucls, vzuid

	type Number now, vzerror
	type String vz1, vz2, vz3, vz4, vz5, vzctxt, x
	
	set vzerror = 0
	set ER = 0
	set RM = ""
	
	// Execute service class layer entry FAP
	set vzrm=$$FAPINP(.vzrec,vzfap,vzsrvcls,vzstfflg) if vzrm'="" quit 1
	
	if (%UserClass.get() '= vzucls.get()) kill %CACHE

	if vzsrvcls do {
		set %IPMODE="NOINT"
		set %UserID=vzuid
		set %UserClass=vzucls
		set %UserStation=vzstn
		set vzctxt=vzcontxt.piece(28.char(),vzsrvcls)
	}
	else  set vzctxt="/TRUST="_$select(vzsvsec:1,1:0)

	// Initialize system variables
	if vzsav.get()="" set vzsav=$$INIT^PBSUTL
	do VLOD^PBSUTL(vzsav)
	
	/* See if longer than 30 seconds since last check, or if date changed
	   (will result in negative number).  If so, check for new value for
	   %SystemDate.  Use result set since faster on CUVAR under Oracle.
	*/
	if vzlasttjd.get().isNull() set vzlasttjd = 99999	// Default
	set now = %CurrentTime
	if (((now - vzlasttjd) > 30) ! ((now - vzlasttjd) < 0)) do {
		
		type public String vzcache(,)
		
		type ResultSet rs = Db.select("TJD", "CUVAR")
	
		if rs.next(), %SystemDate '= rs.getCol("TJD") do {
		
			set vzsav=$$INIT^PBSUTL
			do VLOD^PBSUTL(vzsav)
			
			// Clear cache on date change
			kill %CACHE, vzcache
		}
		
		set vzlasttjd = now
	}

	#ACCEPT PGM=Erik Scheetz;DATE=11/22/02;CR=unknown
	set %SessionID=vzcltokn
	set %STFHOST=$$%STFHOST^PBSUTL()
	
	#ACCEPT PGM=Erik Scheetz;DATE=11/22/02;CR=unknown
	set %ClientVersionID=vzclvrsn
	
	#ACCEPT PGM=Erik Scheetz;DATE=11/22/02;CR=unknown
	if %ClientVersionID="" set %ClientVersionID=%VersionID
	
	#ACCEPT PGM=Erik Scheetz;DATE=11/22/02;CR=unknown
	set %Identifier=vzident
	
	#ACCEPT PGM=Erik Scheetz;DATE=11/22/02;CR=unknown
	set %ServerChannelID=vzsvchnl

	// Process the record
	do {
	
		catch error@"LOGEREXEC" {
			// Error trap for EXEC
			
			do Runtime.rollback()
			
			// Filer error - don't log
			if error.type="%PSL-E-DBFILER" do {
				
				// Return specifics about the error
				set vzrm = $$ERRMSG^PBSUTL(error.description)
			}
			
			else  do {
				if %ZTSEQ.get().isNull() do ZE^UTLERR

				// Host error number ~p1. Contact system manager.
				set vzrm=$$ERRMSG^PBSUTL($$^MSG(1191,%ZTSEQ))
			}
			
			set vzerror=1
		}

		// Protect server variables

		set vz1 = vzsrvcls
		set vz2 = vzstfflg
		set vz3 = vzrec
		set vz4 = vztyp
		set vz5 = vzctxt
		
		set x = vzmssgid 
		type String vzmssgid = x

		type Boolean vzisagm, vzlogmsg, vzlogrep, vzsvsec
		type Number vzcnt, vzgrprec, vzlasttjd, vznum, vzsrvcls, vzstatus, vzstfflg, vztyp
		type String vzagmrep, vzclvrsn, vzcltokn, vzcontxt, vzctxt, vzfap
		type String vzfaptbl, vzpkt, vzrec, vzrecord, vzreply, vzsav
		type String vzstn, vzsvfap, vzsvstat, vzucls, vzuid
		type String vzident, vzsvchnl

		// Execute service class drivers
		if (vz1 = 0) set vzerror = $$^PBSNMSP(.vzrm, vz2, vz3, vz4, vz5) quit
		if (vz1 = 1) set vzerror = $$^PBSTSSP(.vzrm, vz2, vz3, vz4, vz5, %STFHOST) quit
		if (vz1 = 2) set vzerror = $$^PBSFSSP(.vzrm, vz2, vz3, vz4, vz5) quit
		if (vz1 = 3) set vzerror = $$^PBSMRPC(.vzrm, vz2, vz3, vz4, vz5) quit
		if (vz1 = 5) set vzerror = $$^PBSMSQL(.vzrm, vz2, vz3, vz4, vz5) quit
		if (vz1 = 6) set vzerror = $$^PBSBBSSP(.vzrm, vz2, vz3, vz4, vz5) quit

		// Any other service class is invalid
		set vzerror = 1
		set vzrm = $$CSERR^PBSUTL("SV_INVLDSRV")
	}

	if vzerror,vzstfflg set vzerror=$$MSGEXC(.vzrm)
	quit vzerror


private HDR(String vzhdr)	// Standard client request header

	/*
	Parse standard header

	RETURNS:
		. $$	Error code		/TYP=T

	Header information

		. vzsrvcls	Service class

	   0 = NMSP (Network Management Services & Procedures)
	   1 = TSSP (Transaction Services - Stored Procedures)
	   2 = FSSP (Function Services - Stored Procedures)
	   3 = MRPC (M Remote Procedure Calls)
	   4 = CSIS (Client/Server Interactive Session)
	   5 = MSQL (SQL Open Database Connectivity)

		. vzcltokn	Client token
		. vzmssgid	Message ID
		. vzstfflg	Store & forward flag

	   0 = On-line
	   1 = Questionable off-line
	   2 = Off-line

		. vzgrprec	Group records handling
		. vzclvrsn	P/A client version		/LEN=8
		. vzident	Web user identification		/LEN=20
		. vzsvchnl	Server Channel ID		/LEN=6

	Message context (returned for service classes other than NMSP)

		. vzsgn		Sign-on status			/LEN=1
		. vzuid		User identification		/LEN=20
		. vzstn		Station identification		/LEN=30
		. vzpwd		User password			/LEN=12
		. vzfaps*	Formats and protocols
		. vzucls	Userclass			/LEN=12
		. vzlang	User language			/LEN=12
		. vzinst	Institution ID			/LEN=10
		. vzgbldir	Global directory		/LEN=40
		. vzcontxt	Client context			/LEN=255

	   * = Complex field in LV format
	*/

	type public Number vzgrprec, vzptr, vzsgn, vzsrvcls, vzstfflg
	type public String TOKEN, vzcltokn, vzclvrsn, vzcontxt, vzfaps
	type public String vzgbldir, vzident, vzinst, vzlang, vzmssgid
	type public String vzpwd, vzstn, vzsvchnl, vztyp, vzucls, vzuid
	
	type String vzfld(), vzx

	set vzptr=$$LV2V^MSG(vzhdr,.vzfld)
	set vzsrvcls=vzfld(1).get()
	set vzcltokn=vzfld(2).get()
	set TOKEN=vzcltokn
	set vzmssgid=vzfld(3).get()
	set vzstfflg=vzfld(4).get()
	set vzgrprec=vzfld(5).get()
	set vzclvrsn=vzfld(6).get()
	set vzident=vzfld(7).get()
	set vzsvchnl=vzfld(8).get()

	if vzsrvcls="" quit "SV_SVCLSREQ"
	if vzmssgid="" quit "SV_MSGIDREQ"

	if vzsrvcls=0 set vztyp=0 quit ""
	if vzcltokn="" quit "SV_TOKENREQ"
	
	// Server Error - invalid grp_recs field option
	if (vzsrvcls = 7), '((vzgrprec = 1) ! (vzgrprec = 2) ! (vzgrprec = 3)) quit "SV_INVLGRPRC"

	type RecordTOKEN token=Db.getRecord("TOKEN","TOKEN",1)
	if token.getMode()=0 quit "SV_INVLDTKN"
	
	set vzsgn=token.stat
	set vzuid=token.uid
	set vzstn=token.stn
	set vzpwd=token.%vnc
	set vzfaps=token.fap
	set vzucls=token.ucls
	set vzlang=token.lang
	set vzinst=token.inst
	set vzgbldir=token.gbldir
	set vzcontxt=token.ctxt
	if vzsvchnl="" set vzsvchnl=token.%svchnid

	if 'vzsgn,'vzstfflg quit "SV_NOTSGNON"

	// Determine Native v. Non-Native Client
	// 0=Native, 1=Non-native

	if vzfaps'=0.char() set vztyp=1
	else  set vztyp=0,vzfaps=""
	quit ""


private REPLY(String vzreply,		// Server reply message
	      Number vzstatus)		// Message status code

	/*
	Add reply header and execute server exit FAP.
	
	Also called by PBSAGMSG
	
	ARGUMENT NOTES:
		. vzisagm	See notes in PROC section

	INPUTS:
		. vzcltokn	Client token
		. vzmssgid	Message ID
	*/

	type public String vzcltokn, vzmssgid, vzsvfap
	
	type String vzfld(), vzhdr, vzpkt
	
	set vzfld(1)=vzcltokn.get()
	set vzfld(2)=vzmssgid.get()
	set vzfld(3)=vzstatus.get()
	set vzfld(4)=%VersionID.get()

	set vzhdr=$$V2LV^MSG(.vzfld,"",1)
	set vzpkt=vzhdr_vzreply_0.char()_0.char()

	// Execute server layer exit FAP
	quit $$FAPOUT(vzpkt,vzsvfap)


MSGLOG(Boolean vzisagm,		// Aggregate message flag [*]		//NOREQ
       String vzagmrep)		// Aggregage message reply [*]		//NOREQ/MECH=REFNAM:W

	/*
	Check message log
	
	ARGUMENT NOTES:
		. vzisagm	See notes in PROC section
		
		. vzagmrep	See notes in PROC section
	
	RETURNS:
		. $$	Reply message

		A null reply indicates the message should be processed.
		
		A reply other than null indicates one of the following
		conditions:

			a. The message is a questionable STF and the original
			   message has already been processed.  The original
			   reply is returned to the client.

			b. The message is not a questionable STF and the
			   original message has already been processed.  A
			   duplicate message (SV_DUPLIMSG) error is returned
			   to the client.
			   
		NOTE:  For messages processed under an aggregate message, all
		       duplicates will be returned as SV_DUPLIMSG errors.  The
		       ability to return the original reply is not supported for
		       aggregate sub-messages.  Note, however, that the aggregate
		       message itself will process without this restriction.

	Exclude NMSP service class
	*/

	type public Number vzsrvcls, vzstatus, vzstfflg
	type public String vzcltokn, vzmssgid
	
	type String ID, ORIGRPLY, TOK

	if 'vzsrvcls quit ""
	
	if 'vzisagm.exists() set vzisagm = 0

	// New message
	set TOK=vzcltokn
	set ID=vzmssgid
	if 'Db.isDefined("MSGLOG","TOK,ID") quit ""

	// Questionable STF transaction; quit w/ original reply
	if vzstfflg=1, 'vzisagm do { quit $$REPLY(ORIGRPLY, 0)
		type RecordMSGLOGSEQ msglog=Db.getRecord("MSGLOGSEQ","TOK,ID,2")
		set ORIGRPLY = msglog.msgrply
	}

	// Non-questionable STF transaction; quit w/ duplicate message error
	set vzstatus=1
	quit $$ERROR($$CSERR^PBSUTL("SV_DUPLIMSG"), 1, vzisagm, .vzagmrep)


FAPINP(String vzinp,	// Packet/record  	/MECH=REFNAM:RW
       String vzfap,	// FAP ID
       Number vzsrv,	// Service class
       Number vzstf)	// STF flag		/NOREQ

	/*
	Reformat input or reply message

	This subroutine reformats a message based upon the FAP (format
	and protocol).  It is the responsibility of the reformatter to
	construct the applicable standard PROFILE message and to ensure
	no variables required by the server (i.e., vz*) are "stepped" on.

	RETURNS:
		. $$	Error message		/TYP=T
	*/
	
	type public String vzfaptbl()
	
	type String vzermsg=""

	if vzfap'="" do {
		type String vzpgm,vzx

		if 'vzfaptbl(vzfap).exists() do {
			type RecordCTBLFAP fap=Db.getRecord("CTBLFAP","vzfap")
			set vzfaptbl(vzfap)=fap.desc_"|"_fap.pgminp_"|"_fap.pgmout
			}
			
		set vzpgm=vzfaptbl(vzfap).piece("|",2) quit:vzpgm=""
		set vzx=vzpgm_"(.vzinp"

		if vzsrv.get() set vzx=vzx_","_vzsrv_","_vzstf
		set vzx="S vzermsg="_vzx_")"
		
		#ACCEPT PGM=Erik Scheetz;DATE=11/22/02;CR=unknown
		xecute vzx
	}

	quit vzermsg


private FAPOUT(String vzout,	// Message
	       String vzfap,	// Server type table data
	       Number vzsrv,	// Service class	/NOREQ
	       Number vzstf)	// STF flag		/NOREQ

	/*
	Reformat reply message
	
	Also called by PBSAGMSG.
	
	This subroutine reformats a reply message based upon a FAP (format
	and protocol).  It is the responsibility of the reformatter to
	construct a reply message understandable to the client and to
	ensure variables required by the server (i.e., vz*) are not
	"stepped" on.
	*/
	
	type public String vzfaptbl()
	
	if vzfap'="" do {
		type String vzpgm,vzx

		if 'vzfaptbl(vzfap).exists() do {
			type String FAP
			set FAP=vzfap
			type RecordCTBLFAP fap=Db.getRecord("CTBLFAP","FAP")
			set vzfaptbl(vzfap)=fap.desc_"|"_fap.pgminp_"|"_fap.pgmout
		}

		set vzpgm=vzfaptbl(vzfap).piece("|",3) quit:vzpgm=""
		set vzx=vzpgm_"(.vzout"

		if vzsrv.get() set vzx=vzx_","_vzsrv_","_vzstf
		set vzx="S vzx="_vzx_")"
		
		#ACCEPT PGM=Erik Scheetz;DATE=11/22/02;CR=unknown
		xecute vzx
	}
	
	quit vzout


private ERROR(String vzermsg,		// Error message
	      Number vzstatus,		// Status
	      Boolean vzisagm,		// Aggregate message flag [*]		/NOREQ
	      String vzagmrep)		// Aggregate message reply [*]		/NOREQ/MECH=REFNAM:W
	      
	/*
	Server failure reply
	
	ARGUMENT NOTES:
		. vzisagm	See notes in PROC section
		
		. vzagmrep	See notes in PROC section
	*/
	
	type String vzx()
	
	set vzx(1)=1
	set vzx(2)=vzermsg
	
	if vzisagm set vzagmrep = "1|"_vzermsg
	
	quit $$REPLY($$V2LV^MSG(.vzx,"",1), vzstatus)


private MSGEXC(String vzrm)	// Message

	/*
	Log failed STF message into exception file (MSGEXC)

	If a STF sign-on message failed (invalid password, for example),
	vzcltokn will be null.  In this case, to avoid a <nullsubscript>
	error, do not log the message.  Note:  This error will be logged
	in the standard error log (via UTLERR).
	
	RETURNS:
		. $$	Always returns 0
	*/
	
	type public String vzcltokn, vzmssgid, vzpkt, vzrec
	
	if vzcltokn="" set vzrm="" quit 0

	do msgfil(1,vzpkt)
	do msgfil(2,vzrec)
	do msgfil(3,vzrm)
	
	set vzrm=""
	
	quit 0


msgfil(Number vzkey,		// Message key number
       String vzdata)		// Data
       
	/*
	File MSGEXC data
	*/

	type public String vzcltokn, vzmssgid
	
	type RecordMSGEXC msgexc = Db.getRecord("MSGEXC","TOKEN=:vzcltokn,MSGID=:vzmssgid,KEY=:vzkey",1)

	// MSGEXC record already exists.
	if msgexc.getMode()=1 quit
	
	// New MSGEXC record
	set msgexc.token=vzcltokn
	set msgexc.msgid=vzmssgid
	set msgexc.key=vzkey
	set msgexc.message=vzdata
	do msgexc.save()
	
	quit


private ZTPROC()	// Error trap for PROC

	/* The call to $$ERROR calls REPLY which builds the return message.
	   REPLY expect vzsvfap to be available.  However, depending on how
	   we get here, if from under EXEC, vzsvfap will be protected and not
	   available.  In that case, use the public vzsvfape, if it is
	   available, otherwise, null.
	   
	   This handling is a function of the stack level at which the error
	   trapping occurs.  Once we resolve this, the right variables should
	   be available, therefore, this is a temporary solution.
	*/

	type public Boolean vzisagm
	type public Number vzstatus = 1
	type public String %ZTSEQ, vzagmrep, vzsvfap, vzsvfape
	
	type String vmsg
	
	// Filer error - return message
	if $ZS.piece(",", 3) = "%PSL-E-DBFILER" set vmsg = $ZS.piece(",", 4)
	
	// Host error number ~p1. Contact system manager.
	else  set vmsg = $$^MSG(1191,%ZTSEQ.get())
	
	if 'vzsvfap.exists() do {
	
		if vzsvfape.exists() set vzsvfap = vzsvfape
		else  set vzsvfap = ""
	}
	
	quit $$ERROR($$ERRMSG^PBSUTL(vmsg), 1, vzisagm.get(), .vzagmrep)
	
	
private ZTPTRAP		// Error trap for TPTIMEOUT

	type public Number %ZTSEQ
	type public String vzreply
	
	// If already logged, don't log it again
	if %ZTSEQ.get().isNull() do ZE^UTLERR

	set vzreply = $$ZTPROC
	
	do LOGCMIT
	
	quit
	
	
public LOGEREXEC(Error err)	// Error logging from EXEC

	// If filer error - don't log
	if err.type'="%PSL-E-DBFILER" do LOGERR^UTLERR(err)
	
	quit
	
 #OPTION ResultClass ON
public String vSIG()	quit "61397^62610^Dan Russell^32222"	// Signature - LTD^TIME^USER^SIZE
