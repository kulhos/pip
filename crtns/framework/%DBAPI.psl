		 
	/*
	Relational Database APIs
	
	This procedure contains the set of APIs for use in interacting
	with a relational database, e.g., Oracle.
	
	IMPORTANT NOTE - READ BEFORE ADDING CALLERS TO THIS PROCEDURE:
	
	  The original functions in this procedure return the error status
	  and a message, usually in parameter RM.  Going forward, we want
	  to eliminate this approach and throw an error in the event of an
	  error.  Because of the number of existing users of these functions
	  this will be done over time.
	  
	  To support this transition, new functions that perform the throw
	  option have been added.  As all users of an old function are modified,
	  the old function should be removed.
	  
	  Do not add any further uses of the old labels.
	  
	*/
	
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.  The M routine from the     *
	// * crtns directory should be used for this purpose.                *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other during an upgrade,    *
	// * an mrtns version of this routine should not exist.              *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	
	/*	
	---- Revision History -------------------------------------------------
	10/06/2008 - RussellDS - CRs 29132/35918
		Added functions ROWINS and ROWUPD to handle restart logic.
		
		Removed initialization of return as 1mb string.
	
	03/24/2008 - GIRIDHARANB - CR33055
		Modified actual parameters in sections CPGETMSG/SVXCHMSG 
		to include "ret" keyword.
		
	09/10/2007 - RussellDS - CR29295
		Converted from M to PSL.
		   
		Added new functions with error handling and therefore different
		return values.  Cleaned up unused parts	of the code.
		   
		Removed old revision history.
		   
	-----------------------------------------------------------------------
	*/
	
	#PACKAGE framework
	#OPTION ResultClass ON
	
	quit			// No calls from top
	

public Number DBCNCT(String inipath,	// Initialization file [*]
		     Number index,	// DBhandles index	/NOREQ/DFT=0
		     ret String ermsg)	// Return message
	      
	/*
	Connects to the target database.
	
	OLD FUNCTION.  DO NOT ADD NEW USES.  SEE NOTE AT TOP OF PROCEDURE.
	Use DBCONNECT instead.
	
	Argument Notes:
		. inipath	Standard path is $$TRNLNM^%ZFUNC("SCAU_DB_INI")

	Returns:
		. $$		'<0 - Success
				 <0 - Failure
	*/
	
	type Number status = 0
	
	if index.get().isNull() set index = 0
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.connect(inipath,index,.ermsg,.status)
	#ENDBYPASS
	
	quit status
	
	
public String DBCONNECT(String inipath,	// Initialization file [*]	/NONULL
			Number index)	// DBhandles index		/NONULL
	      
	/*
	Connects to the target database.
	
	Throws error on failure.

	Replacement for DBCNCT.
	
	Argument Notes:
		. inipath	Standard path is $$TRNLNM^%ZFUNC("SCAU_DB_INI")
		
	Returns:
		. $$		null
	*/
	
	type Number status = 0
	type String ermsg = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.connect(inipath,index,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))
	
	quit ""
	
	
public Number DBDSCNCT(Number index,		// DBhandles index
		       ret String ermsg)	// Return message
	      
	/*
	Disconnects from the target database
	
	OLD FUNCTION.  DO NOT ADD NEW USES.  SEE NOTE AT TOP OF PROCEDURE.
	Use DBDISCONNECT instead.
	
	Returns:
		. $$		'<0 - Success
				 <0 - Failure
	*/
	
	type Number status = 0
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.disconnect(index,.ermsg,.status)
	#ENDBYPASS
	
	quit status
	

public String DBDISCONNECT(Number index)	// DBhandles index	/NONULL
	      
	/*
	Disconnects from the target database.
	
	Throws error on failure.

	Replacement for DBDSCNCT.
	
	Returns:
		. $$		null
	*/
	
	type Number status = 0
	type String ermsg = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.disconnect(index,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))
	
	quit ""
	

public Number EXECUTE(Number index,	// DBhandles index		/NOREQ/DFT=0
		      String sqlmsg,	// SQL statement
		      String del,	// Host variable list delimiter	/NOREQ/DFT="|"
		      String list,	// Bind variable list		/NOREQ/DFT=""
		      ret String ermsg)	// Return message

	/*
	Executes a SQL statement on the target database
	
	OLD FUNCTION.  DO NOT ADD NEW USES.  SEE NOTE AT TOP OF PROCEDURE.
	Use EXECUTESQL instead.

	Returns:
		. $$		'<0 - Success
				 <0 - Failure
	*/
	
	type Number status = 0
	
	if index.get().isNull() set index = 0
	if del.get().isNull() set del = 124.char()
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.execute(index,sqlmsg,del,$G(list),.ermsg,.status)
	#ENDBYPASS
	
	quit status
	
	
public String EXECUTESQL(Number index,	// DBhandles index		/NONULL
			 String sqlmsg,	// SQL statement		/NONULL
			 String del,	// Host variable list delimiter	/NONULL
			 String list)	// Bind variable list

	/*
	Executes a SQL statement on the target database.
	
	Throws error on failure.
	
	Replacement for EXECUTE.
	
	Returns:
		. $$		null
	*/
	
	type Number status = 0
	type String ermsg = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.execute(index,sqlmsg,del,list,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))

	quit ""
	
	
public String LOBUPDATE(Number index,	  // DBhandles index			/NONULL
			String rdbtable,  // Table to update			/NONULL
		 	String lobcol,	  // Column to update			/NONULL
		 	String where,	  // WHERE clause			/NONULL
		 	String lobval,	  // Column value
		 	String del,	  // Host variable list delimiter	/NONULL
		 	String list)	  // WHERE clause bind variable list	/NONULL
		 
	/*
	Executes a SQL update on the target database to update a single
	large object column (BLOB or CLOB).  Updates to these types of
	columns require different handling than the standard
	EXECUTESQL^%DBAPI provides.
	
	Throws error on failure.
	
	Returns:
		. $$		null
	*/
	
	type Number status = 0
	type String ermsg = ""

	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.lobupdate(index,rdbtable,lobcol,where,lobval,del,list,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))

	quit ""
	
	
public String ROLLBACK(Number index)	// DBhandles index	/NONULL
	      
	/*
	Rolls Back a transaction.
	
	Throws error on failure.
	
	Note that although there are not currently (Nov 2007) calls to this
	function, it is useful when debugging to be able to call to perform
	a rollback, versus using EXECUTE.
	
	Returns:
		. $$		null
	*/
	
	type Number status = 0
	type String ermsg = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.rollback(index,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))
	
	quit ""


public Number SELECT(Number index,	// DBhandles index
		     String sqlmsg,	// Select statement
		     String del,	// Host variable list delimiter
		     String list,	// Bind variable list
		     ret String data,	// Returned data
		     ret String ermsg)	// Return message

	/*
	Executes a Select Statement on the Database
	
	OLD FUNCTION.  DO NOT ADD NEW USES.  SEE NOTE AT TOP OF PROCEDURE.
	Use SELECTDATA instead.

	Returns:
		. $$		'<0 - Success
				 <0 - Failure
	*/
	
	type Number status = 0
	
	if index.get().isNull() set index = 0

	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.select(index,sqlmsg,del,$G(list),.data,.ermsg,.status)
	#ENDBYPASS
	
	quit status
	
	
public String SELECTDATA(Number index,	// DBhandles index		/NONULL
			String sqlmsg,	// Select statement		/NONULL
			String del,	// Host variable list delimiter	/NONULL
			String list)	// Bind variable list
		     
	/*
	Executes a Select Statement on the Database.
	
	Throws error on failure.
	
	Replacement for SELECT.
	
	Returns:
		. $$	Data as a result of select
	
	*/
	
	type Number status = 0
	type String data
	type String ermsg = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.select(index,sqlmsg,del,list,.data,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))

	quit data


public Number OPENCUR(Number index,	// DBhandles index
		      String sqlmsg,	// Open cursor statement
		      String del,	// Host variable list delimiter
		      String list,	// Bind variable list
		      ret String cid,	// Cursor ID
		      ret String data,	// Data for first row
		      ret String ermsg)	// Return message
	/*
	Executes an open Cursor Statement on the database.  Returns first
	row of data.
	
	OLD FUNCTION.  DO NOT ADD NEW USES.  SEE NOTE AT TOP OF PROCEDURE.
	Use OPENCURSOR instead.

	Returns:
		. $$		'<0 - Success
				 <0 - Failure
	*/
	
	type Number status = 0
	
	if index.get().isNull() set index = 0

	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.opencursor(index,sqlmsg,del,list,.cid,.data,.ermsg,.status)
	#ENDBYPASS
	
	quit status
	
	
public String OPENCURSOR(Number index,		// DBhandles index		/NONULL
			 String sqlmsg,		// Open cursor statement	/NONULL
			 String del,		// Host variable list delimiter	/NONULL
			 String list,		// Bind variable list
			 ret String cid)	// Cursor ID
	/*
	Executes an open Cursor Statement on the database.  Returns first
	row of data.
	
	Throws error on failure.
	
	Replacement for OPENCUR.
	
	Returns:
		. $$		data for first row
	*/
	
	type Number status = 0
	type String data
	type String ermsg = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.opencursor(index,sqlmsg,del,list,.cid,.data,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))

	quit data
	

public Number CLOSECUR(String index,		// DBhandles index
		       ret String cid,		// Cursor ID
		       ret String ermsg)	// Return message
	/*
	Executes an close Cursor Statement on the database.
	
	OLD FUNCTION.  DO NOT ADD NEW USES.  SEE NOTE AT TOP OF PROCEDURE.
	Use CLOSECURSOR instead.

	Returns:
		. $$		'<0 - Success
				 <0 - Failure
	*/
	
	type Number status = 0
	
	if index.get().isNull() set index = 0

	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.closecursor(index,cid,.ermsg,.status)
	#ENDBYPASS
	
	quit status
	
	
public String CLOSECURSOR(String index,		// DBhandles index	/NONULL
			  ret String cid)	// Cursor ID
	/*
	Executes an close Cursor Statement on the database.
	
	Throws error on failure.
	
	Replacement for CLOSECUR.
	
	Returns:
		. $$		null
	*/
	
	type Number status = 0
	type String ermsg
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.closecursor(index,cid,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))

	quit ""


public Number FETCH(Number index,	// DBhandles index
		    String cid,		// Cursor ID (from open cursor)
		    Number rows,	// Rows to return
		    String del,		// Host variable list delimiter
		    ret String data,	// Data returned
		    ret String ermsg)	// Return message
	/*
	Executes an Fetch Statement on the database

	OLD FUNCTION.  DO NOT ADD NEW USES.  SEE NOTE AT TOP OF PROCEDURE.
	Use FETCHDATA instead.
	
	Returns:
		. $$		'<0 - Success
				 <0 - Failure
 	*/
 
	type Number status = 0
	
	if index.get().isNull() set index = 0

	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.fetch(index,cid,.rows,del,.data,.ermsg,.status)
	#ENDBYPASS
	
	quit status


public String FETCHDATA(Number index,	// DBhandles index		/NONULL
			String cid,	// Cursor ID (from open cursor)
			Number rows,	// Rows to return		/NONULL
			String del)	// Host variable list delimiter	/NONULL
	/*
	Executes an Fetch Statement on the database

	Throws error on failure.
	
	Replacement for FETCH.
	
	Returns:
		. $$		data from fetch
 	*/
 
	type Number status = 0
	type String data
	type String ermsg = ""

	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.fetch(index,cid,.rows,del,.data,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))

	quit data


public Number COMMIT(Number index,	// DBhandles index
		     ret String ermsg)	// Return message
	/*
	Commit a profile Transaction
	
	OLD FUNCTION.  DO NOT ADD NEW USES.  SEE NOTE AT TOP OF PROCEDURE.
	Use COMMITTRAN instead.
	
	Returns:
		. $$		'<0 - Success
				 <0 - Failure
	*/
	
	type Number status = 0
	
	if index.get().isNull() set index = 0

	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.commit(index,.ermsg,.status)
	#ENDBYPASS
	
	quit status


public String COMMITTRAN(Number index)	// DBhandles index		/NONULL

	/*
	Commit a profile Transaction
	
	Throws error on failure.
	
	Replacement for COMMIT.
	
	Returns:
		. $$		null
	*/
	
	type Number status = 0
	type String ermsg = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.commit(index,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))

	quit ""


public Number EXECSP(Number index,	// DBhandles index		/NONULL
		     String procname,	// Stored procedure name	/NONULL
		     String colval,	// List of column values
		     Number nocols,	// Number of columns		/NONULL
		     String del,	// Host variable list delimiter	/NONULL
		     ret String data,	// Return data
		     ret String ermsg)	// Return message
		     
	/*
	Executes a stored procedure on the oracle database
	
	OLD FUNCTION.  DO NOT ADD NEW USES.  SEE NOTE AT TOP OF PROCEDURE.
	Use EXECUTESP instead.
	
	Returns:
		. $$		'<0 - Success
				 <0 - Failure
	*/
	
	type Number status = 0
	
	if index.get().isNull() set index = 0

	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.storedproc(index,procname,$G(colval),nocols,$G(del),.data,.ermsg,.status)
	#ENDBYPASS
	
	quit status


public String EXECUTESP(Number index,	  // DBhandles index			/NONULL
			String procname,  // Stored procedure name		/NONULL
			String colval,	  // List of column values
			Number nocols,	  // Number of columns			/NONULL
			String del)	  // Host variable list delimiter	/NONULL

	/*
	Executes a stored procedure on the oracle database
	 
	Throws error on failure.
	
	Returns:
		. $$	Data as a result of select
	*/
	
	type Number status = 0
	type String data
	type String ermsg = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.storedproc(index,procname,colval,nocols,del,.data,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))

	quit data


public String EXECCP(Number index,	// DBhandles index		/NONULL
		     String procname,	// Stored procedure name	/NONULL
		     String collist,	// Column list			/NONULL
		     String tablenam,	// Table name			/NONULL
		     String cond,	// Condition
		     String hostval)	// Host variable values
	/*
	Executes the create_proc procedure on the Oracle database
	
	Throws error on failure.
	
	Returns:
		. $$		null
	*/
	
	type Number status = 0
	type String ermsg = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &libdbapi.createproc(index,procname,collist,tablenam,cond,hostval,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) throw Class.new("Error","%PSL-E-DBAPIFAIL,"_$$transermsg(ermsg))

	quit ""
	

public String CQSTART()

	/*
	Start the cursor queues

	Creates the Request and Reply queues for the server and cursor
	processes to communicate.

	RETURNS:
		. $$	Condition value
			NULL = success
	                CS_ERROR = general error, id will contain message
	                See /usr/include/sys/errno.h and ${MTS_INC}/mtserrno.h
	
	EXAMPLE:
	       set X = $$CQSTART^%DBAPI()
	*/
	
	type Number errnum = 0
	type String ermsg = ""
	type String return = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &srvapi.CurQStart(.errnum)
	if (errnum'=0),(errnum'=-39) set ermsg=$ZM(errnum)
	#ENDBYPASS
	
	if (errnum = -39) set return = "CS_CQEXISTS"
	else  if (errnum <> 0) set return = "CS_ERROR|"_ermsg
	
	quit return


public String CQSTOP()

	/*
	Stop the Cursor Queues
	
	Stops the queues used to communicate to cursor processes.

	RETURNS:
		. $$	Condition value
			NULL = success
	                CS_ERROR = general error, id will contain message
	                See /usr/include/sys/errno.h and ${MTS_INC}/mtserrno.h
	
	EXAMPLE:
	       set X = $$CQSTOP^%DBAPI()
	*/
	
	type Number errnum = 0
	type String ermsg = ""
	type String return = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &srvapi.CurQStop(.errnum)
	if (errnum'=0),(errnum'=-40) set ermsg=$ZM(errnum)
	#ENDBYPASS
	
	if (errnum = -40) set return = "CS_CQNOEXISTS"
	else  if (errnum <> 0) set return = "CS_ERROR|"_ermsg
	
	quit return
	

public String SVXCHMSG(String msgtyp,	// Type of message [*]		/NONULL
		       Number svid,	// Server ID ($J)		/NONULL
		       String msg,	// Message to cursor
		       ret String reply,	// Reply from cursor
		       Number timeout)	// Timeout interval [*]		/NONULL

	/*
	Server exchange message
	
	NOTE:  This is currently returning the public scope variable RM.
	This function is only called by PBSMSQL.  At some point, modify
	this and PBSMSQL to eliminate the use of the public RM.

	Sends a server message to the cursor for processing by a valid 
	cursor process and returns a reply to the message.

	The reply message from the cursor may itself be an error message,
	either a specific CS_* error or a general error.

	For a CS_TIMEOUT failure try to reconnect.  If succeed, report at
	timeout, otherwise, report as CS_TIMEOUTNC.

	ARGUMENT NOTES:
	
		. msgtyp	1 (generic) for OPEN CURSOR
				Cursor process ID for FETCH and CLOSE

		. timeout	Time to wait before giving up and returning
				a timeout error message.

	RETURNS:
		. $$	Condition value
			NULL = success
	                CS_TIMEOUT = Timeout
	                CS_ERROR   = General error, reply will contain message
	                See /usr/include/sys/errno.h and ${MTS_INC}/mtserrno.h
	
	EXAMPLE:
	       set X = $$SVXCHMSG^%DBAPI(mtyp,svid,msghdr,.MSG,.REPLY,15)
	*/
	
	type public String RM			// See comments, above

	type Boolean isDone = false	
	type Number errnum, start, timeleft
	type String return = ""
	
	set errnum = 0
	set start = (%CurrentDate * 100000) + %CurrentTime
	set timeleft = timeout
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &srvapi.SrvExchMsg(msgtyp,svid,.msg,.reply,timeout,.errnum)
	if (errnum<0),(errnum'=-10) set RM=$ZM(errnum)
	#ENDBYPASS

	// If error, exit with error return
	if (errnum = -10) quit "CS_TIMEOUT"
	if (errnum < 0) quit "CS_ERROR"

	// If the message headers match (bytes 1-10), return to caller.
	if (reply.extract(1, 10) = msg.extract(1, 10)) quit ""

	/* Otherwise, reduce the time left by the elapsed time inside of the
	   API; if less than zero, set TIMEOUT error message and exit.  If time
	   still remains on the timer, the SrvGetReply API will be executed
	   again to retrieve the reply message associated with the server
	   request message.
	*/
	for  do { quit:isDone
		
		set timeleft = timeout - (((%CurrentDate * 100000) + %CurrentTime) - start)
		if (timeleft < 0) do { quit
			
			set return = "CS_TIMEOUT"
			set isDone = true
		}
		
		#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
		#BYPASS
		do &srvapi.SrvGetReply(msgtyp,.reply,timeleft,.errnum)
		if (errnum<0),(errnum'=-10) set RM=$ZM(errnum)
		#ENDBYPASS
		
		// If error, set return and exit
		if (errnum = -10) do { quit
			
			set return = "CS_TIMEOUT"
			set isDone = true
		}
		if (errnum < 0) do {
			
			set return = "CS_ERROR"
			set isDone = true
		}
	
		// If the message headers match (bytes 1-10), return to caller.
		if (reply.extract(1, 10) = msg.extract(1, 10)) set isDone = true
	}
	
	quit return
	
	
public String CPCNCT()

	/*
	Cursor connect to transport
	
	Allows connection of a cursor process to the transport layer.

	RETURNS:
		. $$	Condition value
			NULL = success
	                CS_SVTYP    =   No logical name defined for service type
	                CS_NOMTM    =   Transport is not active or does not
	                                respond
	
	EXAMPLE:
	       set X = $$CPCNCT^%DBAPI()
	*/
	
	type public String RM			// See comments in SVXCHMSG
	
	type Number errnum = 0
	type String ermsg = ""
	type String return = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &curapi.CurConnect(.errnum)
	if (errnum'=0),(errnum'=-41) set RM=$ZM(errnum)
	#ENDBYPASS
	
	if (errnum = -41) do {
		
		set return = "CS_DUPLCNCT"
		set RM = "Already connected"
	}
	else  if (errnum <> 0) set return = "CS_ERROR"
	
	quit return
	

public String CPDSCNCT()

	/*
	Cursor disconnect from transport

	Disconnects a cursor process from the transport layer.
	
	RETURNS:
		. $$	NULL always
	                See /usr/include/sys/errno.h and ${MTS_INC}/mtserrno.h

	EXAMPLE:
	       set X = $$CPDSCNCT^%DBAPI()
	*/

	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &curapi.CurDisconnect()
	#ENDBYPASS
	
	quit ""


public String CPGETMSG(String msgtyp,	// Client ID		/NONULL
		       ret String msg,	// Message from server
		       Number timeout)	// Timeout interval [*]	/NONULL
	/*
	Cursor get message from server

	Gets a message that was sent from a server and destined for the
	cursor process.
	
	ARGUMENTS NOTES:
		. timeout 	Time to wait without receiving a message before
	                	returning a timeout error message.

	RETURNS:
		. $$	Condition value
	                NULL       = success
	                CS_TIMEOUT = timeout occurred
	                CS_MTERROR = UNIX error, msg holds error message
	                CS_MTMSTOP = MTM stopped, forced server stop
	                See /usr/include/sys/errno.h and ${MTS_INC}/mtserrno.h
	
	EXAMPLE:
	       set X = $$CPGETMSG^%DBAPI(.MSGTYP,.MSG,60)
	*/

	type public String RM			// See comments in SVXCHMSG

	type Number errnum = 0
	type String return = ""
	
	set msg = ""

	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &curapi.CurGetMsg(msgtyp,.msg,timeout,.errnum)
	if (errnum<0),(errnum'=-10),(errnum'=-42) set RM=$ZM(errnum)
	#ENDBYPASS
	
        if (errnum = -42) do {
        	
        	set RM = "Not Connected"
        	set return = "CS_NOCNCT"
        }
        else  if (errnum = -10) do {
        	
        	set RM = "Timed Out"
        	set return = "CS_TIMEOUT"
        }
	else  if (errnum < 0) set return = "CS_ERROR"
	
	quit return
	
	
public String CPREPLY(String msgtyp,	// ID of server			/NONULL
		      String reply)	// Reply message to server
	/*
	Cursor send reply message to server

	Sends a reply message to a server in response to a message received
	by the cursor.

	RETURNS:
		. $$		Condition value
		               	NULL = success
	
	EXAMPLE:
	       set X = $$CPREPLY^%DBAPI(msgtyp,.REPLY)
	*/
	
	type public String RM			// See comments in SVXCHMSG

	type Number errnum = 0
	type String return = ""
	
	#ACCEPT Date=09/10/2007; Pgm=RussellDS; CR=29295; Group=Bypass
	#BYPASS
	do &curapi.CurReply(msgtyp,.reply,.errnum)
	if (errnum<0),(errnum'=-42) set RM=$ZM(errnum)
	#ENDBYPASS

	if (errnum = -42) do {
		
		set RM = "Not Connected"
		set return = "CS_NOCNCT"
	}
	else  if (errnum < 0) set return = "CS_ERROR"
	
	quit return
	
	
public void ROWINS( Number index,		// index (*1)
		    String sqlmsg,		// SQL statement (*1)
		    String del,			// column delimiter (*1)
		    String list)		// host variable values (*1)
	/*
	Perform single row insert, with restart and error throwing logic.
	
	The subroutine will
	- issue an ISO-M TRESTART on the following error:
		* ORA-00001: Unique constraint violation
	- throw a SQLFAIL exception for all other (negative) error values.

	ARGUMENTS:
	(*1) See corresponding parameter in EXECUTE^%DBAPI().

	OUTPUTS:
	. none

	THROWS:
	. %PSL-E-RDBSAVEFAIL
		If the return value is less than zero, and is not elegable
		for auto-restart, or if the maximum number of restarts has
		been reached.
		Error.description will contain the error message returned by
		&libdbapi.execute.
	*/
	
	type Number status = 0
	type String ermsg = ""

	#ACCEPT Date=10/06/2008; Pgm=RussellDS; CR=29132; Group=Bypass
	#BYPASS
	do &libdbapi.execute(index,sqlmsg,del,list,.ermsg,.status)
	#ENDBYPASS
	
	if (status < 0) {
		// Deal with the ORA-00001 error, provided $TRESTART<3
		#ACCEPT Date=10/06/2008; Pgm=RussellDS; CR=29132; Group=Bypass
		#BYPASS
		IF $PIECE(ermsg,":")["ORA-00001",$TRESTART<3 TRESTART
		#ENDBYPASS

		// Other error, or too many restarts
		throw Class.new("Error","%PSL-E-RDBSAVEFAIL,"_ermsg.translate( 10.char()_","," ~"))
	}
	
	quit


public void ROWUPD( Number index,	// index
		    String sqlmsg,	// SQL statement
		    String del,		// column delimiter
		    String list)	// host variable values
	/*
	Perform single row update, with restart and error throwing logic.
	
	The subroutine will:
		- Issue an ISO-M TRESTART if the update count returned by %DBAPI
		  is zero, because a row-update is always supposed to update the
		  row. If no row was updated, and no error occurred the row must
		  have been updated by a concurrently executing process.
		  A runtime exception will be thrown if the maximum number of
		  restarts is reached, or if the PSL Transaction Number of the row
		  is not null and lower than the current PSL Transaction Number
		- Issue an ISO-M TRESTART on the ORA-00060 (deadlock detected while
		  waiting for resource).
		- Throw a SQLFAIL exception for all other negative error values.

	OUTPUTS:
		. none

	THROWS:
		. %PSL-E-RDBSAVEFAIL
		  If the return value from $$EXECUTE^%DBAPI() is less than zero,
		  or if it is zero and the maximum number of restarts has been
		  reached.
		  Error.description will contain the error message returned by
		  &libdbapi.execute.
	*/
	
	type Number status = 0
	type String ermsg = ""
	
	#ACCEPT Date=10/06/2008; Pgm=RussellDS; CR=29132; Group=Bypass
	#BYPASS
	do &libdbapi.execute(index,sqlmsg,del,list,.ermsg,.status)
	#ENDBYPASS

	/* Normal case: one row updated.
	   */
	quit:(status > 0)

	/* Deal with "no rows updated"
	   */
	if (status = 0) {	// no rows updated !
		/* Note that we always leave this block abnormally, either
		   because we do a TRESTART or because we throw an exception.
		   */
		type Number retry
		#ACCEPT Date=10/06/2008; Pgm=RussellDS; CR=29132; Group=Bypass
		#BYPASS
		SET retry=$TRESTART IF $TRESTART<3 TRESTART
		#ENDBYPASS
		throw Class.new("Error","%PSL-E-RDBSAVEFAIL,Update failed after "_retry_" tries,"_ sqlmsg.translate(",", "~"))
	}

	// Deal with the ORA-00060 error, provided $TRESTART<3
	#ACCEPT Date=10/06/2008; Pgm=RussellDS; CR=29132; Group=Bypass
	#BYPASS
	IF $PIECE(ermsg,":")["ORA-00060",$TRESTART<3 TRESTART
	#ENDBYPASS

	// Other error, or too many restarts
	throw Class.new("Error","%PSL-E-RDBSAVEFAIL,"_ermsg.get().translate( 10.char()_","," ~"))
	quit	
	
	
private String transermsg(String ermsg)	// Error message

	/*
	Translate error message into writable form
	*/
	
	quit ermsg.translate(10.char()_44.char(),32.char()_126.char())
 #OPTION ResultClass ON
public String vSIG()	quit "61298^36638^Dan Russell^27312"	// Signature - LTD^TIME^USER^SIZE
