	/*
	ORIG: RussellDS - 04/18/2005
	DESC: PSL Auto Literal Code Regenerator, Data group

	*************************************************************************
	* IMPORTANT NOTE:							*
	*	According to the rules that apply to PSL compiler upgrades,	*
	*	this DQ procedure shall compile with the version of the PSL	*
	*	compiler that has been distributed as part of the last AMR.	*
	*************************************************************************

	---- Environment Sensitive Elements ------------------------------------
	UCLREGEN
		The functions and subroutines of this unit manipulate table
		UCLREGEN. This includes calls to Db.delete(), Db.getRecord(),
		Db.select()

	---- Comments ----------------------------------------------------------

	This procedure will manage the updating of table UCLREGEN and the
	regeneration of procedures based on data in UCLREGEN.

	Although this procedure is part of the PSL compiler, it does not generate
	or validate code. It behaves more like a non-compiler framework element. 	
	LIBRARY

		. PURGE		Remove entries from table UCLREGEN
		. RUN 		Regenerate procedures
		. SET		Set an entry to table UCLREGEN
		. START		Start the regeneration monitor
		. STOP		Signal regeneration monitor to stop

	---- Revision History --------------------------------------------------
	10/13/2008 - RussellDS - CR35741/35918
		Modified error handling to use new logging syntax.
		
		Removed old revision history.
	
	01/12/2008 - RussellDS - CR27800 (see CR30907)
		Modified RUN section to remove call to TERMSET^SCADRV.  Causing
		problems if run in batch mode
	
	01/22/07 - RussellDS - CRs 24902 / 24903 / 24974
		Modify references to SYSMAP to correspond with new structure.
	*/
	#PACKAGE framework
	
	quit			// No entry at top
	
	// ---------------------------------------------------------------------
public PURGE
	/* ---------------------------------------------------------------------
	Remove entries from table UCLREGEN, through date entered
	*/
	
	// Consider adding MSG - This function will delete all UCLREGEN records on and prior to the date entered
	
	type Date PURGEDT
	type String %READ, %TAB(), VFMQ

	set %TAB("PURGEDT") = ".DATE1"
	set PURGEDT = %CurrentDate
	set %READ="@@%FN,,PURGEDT/REQ"
	
	do ^UTLREAD if VFMQ="Q" quit
	
	do Db.delete("UCLREGEN", "CHGDATE <= :PURGEDT")
	
	quit
	
	// ---------------------------------------------------------------------
public SET(String table,	// Table name		/NOREQ
	   String column,	// Column name [*]	/NOREQ
	   String func)		// Function name	/NOREQ
	/* ---------------------------------------------------------------------
	Set an entry to table UCLREGEN
	
	Either table and column must be supplied, or func.
	
	ARGUMENT NOTES:
	
		. column	If called for an insert or an update, will be "*"
	*/
	
	type Number SEQ
	
	do Runtime.start("CS")
	
	type ResultSet rs = Db.select("SEQ", "UCLREGEN", "", "SEQ DESC")
	if rs.next() set SEQ = rs.getCol("SEQ") + 1
	else  set SEQ = 1
	
	/* Replace the above with the following once MAX(SEQ) is working
	type ResultSet rs = Db.select("MAX(SEQ)", "UCLREGEN")
	if rs.next() set SEQ = rs.getCol(1) + 1
	else  set SEQ = 1
	*/
	
	type RecordUCLREGEN uclregen = Class.new("RecordUCLREGEN", "SEQ=:SEQ")
	set uclregen.tablename = table.get()
	set uclregen.colname = column.get()
	set uclregen.func = func.get()
	set uclregen.chgdate = %CurrentDate
	set uclregen.chgtime = %CurrentTime
	set uclregen.userid = %UserID.get()
	
	do uclregen.save()
	
	do Runtime.commit()
	
	quit
	
	// ---------------------------------------------------------------------
SETRTN( String RTN)	// name of routine
	/* ---------------------------------------------------------------------
	Add the UCLREGEN information for all SYSMAPLITFNC rows for the supplied
	routine.
	*/
	type ResultSet rs = Db.select("LABEL","SYSMAPLITFNC", "FUNCFILE=:RTN")
	
	while rs.next() do SET("","",rs.getCol("LABEL")_ "^"_ RTN)

	quit

	// ---------------------------------------------------------------------
public START(Number interval)		// Seconds to hibernate between cycles	/NOREQ/DFT=600
	/* ---------------------------------------------------------------------
	Start background regen monitor
	*/
	
	type public String ER, RM
	
	type Boolean isRUNING = 0
	type Number I
	type String outfile, params, procname, UCLREGEN
	
	set UCLREGEN = ""
	
	lock +UCLREGEN:2
	else  do { quit
		set ER = 1
		// Monitor is already running
		set RM = $$^MSG(8364)
	}
		
	if (interval.get() '> 0) set interval = 600	// Set default
	
	// Set process name
	set procname = "UCLREGEN_"_$$^UCXCUVAR("PTMDIRID")
	set outfile = procname_"_"_%CurrentDate_"_"_%CurrentTime_".log"

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set params = $$JOBPARAM^%OSSCRPT(procname,,,,outfile)
	
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set ER='$$^%ZJOB("DAEMON^UCLREGEN("_interval_")", params, 0)
	
	lock -UCLREGEN			// Free lock to let daemon have it

	// ~p1 not submitted
	if ER set RM = $$^MSG(6799, procname) quit
	
	// Try for up to 10 seconds to determine if the job started
	for I = 1:1:10 do { quit:isRUNING
			
		hang 1
		lock +UCLREGEN:0
		if  lock -UCLREGEN
		else  set isRUNING = 1
	}
	
	if isRUNING do {
		set ER = "W"
		// ~p1 monitor started
		set RM = $$^MSG(5534, "UCLREGEN")
	}
	else  do {
		set ER = 1
		// ~p1 monitor did not start
		set RM = $$^MSG(5536, "UCLREGEN")
	}
	
	quit
	
	// ---------------------------------------------------------------------
public DAEMON(Number interval)		// Seconds to hibernate between cycles	/NOREQ/DFT=600
	/* ---------------------------------------------------------------------
	Background processes to manage regens
	
	NOTE:  This section is public (versus local) because it is called by ^%ZJOB.
	*/
	
	type literal String UCLREGEN = ""		// To avoid warning on lock
	
	type literal Number STOPINT = 60		// Stop check interval in seconds

	type Boolean isSTOP = 0
	type Number hangfor, hangtill, now, runtime, stoptime

	if (interval.get() '> 0) set interval = 600	// Set default
	
	lock +UCLREGEN:10
	else  quit			// Cannot obtain lock, don't run
	
	catch ERROR@"LOGERR^UTLERR" {		// Log errors, then exit
	}
	
	// Clear stop indicator
	do Db.delete("UCLREGEN", "SEQ=0")
	
	set stoptime = $$SETTIME(STOPINT)
	set runtime = $$SETTIME(interval)
	
	for  do { quit:isSTOP
		
		// Hibernate until earliest of stoptime or runtime
		if (stoptime < runtime) set hangtill = stoptime
		else  set hangtill = runtime
		
		set hangfor = hangtill - $$SETTIME(0)

		if (hangfor > 0) hang hangfor
		
		set now = $$SETTIME(0)
		
		// Process stop first
		if (now >= stoptime) do { quit:isSTOP
		
			type RecordUCLREGEN uclregen = Db.getRecord("UCLREGEN", "SEQ=0", 1)
			
			if (uclregen.getMode() > 0) set isSTOP = 1
			
			else  set stoptime = $$SETTIME(STOPINT)	// Reset stop time
		}
		
		if (now >= runtime) do {
			
			do REGEN
			
			set runtime = $$SETTIME(interval)	// Reset run time
		}
	}
	
	// Clear stop indicator
	do Db.delete("UCLREGEN", "SEQ=0")
	
	lock -UCLREGEN
	
	quit
	
	// ---------------------------------------------------------------------
public RUN
	/* ---------------------------------------------------------------------
	Interface for function PSLAUTOREGEN to wrap call to REGEN section in order
	to identify all procedures currently requiring regeneration and perform
	the regeneration.
	
	Provides handling of ER and RM for SCADRV.
	*/
	
	type public String ER, RM
	
	do REGEN
	
	set ER = "W"
	// Done
	set RM = $$^MSG(855)

	quit
		
	// ---------------------------------------------------------------------
private REGEN
	/* ---------------------------------------------------------------------
	Identify all procedures currently requiring regeneration, based on entries
	in table UCLREGEN, and performs the regeneration.
	*/
	
	type Number LASTSEQ
	type String element, elemtype, relink(), SORT(,)

	type DbSet ds = Db.selectDbSet("UCLREGEN", "SEQ > 0", "SEQ ASC")
	
	quit:ds.isEmpty()
	
	// Sort into element list - ensures only single entry per element
	while ds.next() do {
		
		type String COLNAME, FUNC, TABLENAM, WHERE
		
		type RecordUCLREGEN uclregen = ds.getRecord("UCLREGEN")
		
		set LASTSEQ = uclregen.seq		// High water mark for delete
		
		set TABLENAM = uclregen.tablename
		set COLNAME = uclregen.colname
		set FUNC = uclregen.func
		
		if 'TABLENAM.isNull() do {
		
			if (COLNAME = "*") set WHERE = "TABLE=:TABLENAM"
			else  set WHERE = "TABLE=:TABLENAM AND COLUMN=:COLNAME"
		}
		else  set WHERE = "FUNC=:FUNC"
		
		#ACCEPT Date=05/06/05; PGM=Dan Russell; CR=15379
		type ResultSet rs = Db.select("TARGET", "SYSMAPLITDTA", WHERE)
		
		while rs.next() do {
			
			type String TARGET = rs.getCol("TARGET")
			
			type RecordSYSMAPRTNS smaprtns = Db.getRecord("SYSMAPRTNS", "TARGET=:TARGET", 1)
			
			if '(smaprtns.element.isNull() ! smaprtns.elemtype.isNull()) set SORT(smaprtns.elemtype, smaprtns.element) = ""
		}
	}
	
	// Now have list of all elements to regenerate
	
	set (elemtype, element) = ""
	for  set elemtype = SORT(elemtype).order() quit:elemtype.isNull()  do {
		for  set element = SORT(elemtype, element).order() quit:element.isNull()  do {
			
			type String PGM = ""
			
			if (elemtype = "Batch") do {
				
				if Db.isDefined("DBTBL33", "%LIBS='SYSDEV' AND BCHID=:element") do {
		
					do COMPILE^DBSBCH(element, , .PGM)
					if 'PGM.isNull() set relink(PGM) = ""				
				}
			}
			
			else  if (elemtype = "Filer") do {
				
				if Db.isDefined("DBTBL1", "%LIBS='SYSDEV' AND FID=:element") do {
				
					type Number I
				
					do COMPILE^DBSFILB(element, , , .PGM)
				
					// Filers may generate more than a single routine
					if 'PGM.isNull() for I = 1:1:PGM.length(",") set relink(PGM.piece(",", I)) = ""
				}
			}
						
			else  if (elemtype = "Procedure") do {
				
				if Db.isDefined("DBTBL25", "%LIBS='SYSDEV' AND PROCID=:element") do {

					do COMPILE^DBSPROC(element, .PGM)
					if 'PGM.isNull() set relink(PGM) = ""
				}
				
			}
			
			/* Even though it's unlikely that reports or screens will be used by
			   the server, it's possible that they could have code sections that
			   are called by other routines that are used by the server, so link
			   them just to be safe.
			*/
						
			else  if (elemtype = "Report") do {
				
				if Db.isDefined("DBTBL5H", "LIBS='SYSDEV' AND RID=:element") do {

					do ^DBSRW(element, , .PGM)
					if 'PGM.isNull() set relink(PGM) = ""	
				}
			}
						
			else  if (elemtype = "Screen") do {
				
				if 'element.beginsWith("z"), Db.isDefined("DBTBL2", "LIBS='SYSDEV' AND SID=:element") do {
				
					type String FILES, SCRPGM
				
					type RecordDBTBL2 dbtbl2 = Db.getRecord("DBTBL2","LIBS='SYSDEV',SID=:element")
				
					set FILES = dbtbl2.pfid		// Needed by DBS2PSL
					set SCRPGM = dbtbl2.vpgm
				
					do ^DBS2PSL(element)
				
					// Reload if there was no routine to start
					if SCRPGM.isNull() do {
					
						type RecordDBTBL2 dbtbl2x = Db.getRecord("DBTBL2", "LIBS='SYSDEV',SID=:element")
					
						set SCRPGM = dbtbl2x.vpgm
					}				
				
					if 'SCRPGM.isNull() set relink(SCRPGM) = ""
				}
			}
		}
	}
		
	// Delete rows used from UCLREGEN
	do Db.delete("UCLREGEN", "SEQ > 0 AND SEQ <= :LASTSEQ")
	
	// Signal servers to relink the regenerated routines
	
	// Go through all active server types
	type ResultSet rs=Db.select("DISTINCT SVTYP","SVCTRLT")
	while rs.next() do {
		
		type String pgm, svtyp
		
		set svtyp = rs.getCol("SVTYP")
		
		set pgm = ""
		for  set pgm = relink(pgm).order() quit:pgm.isNull()  do LINK^PBSUTL(svtyp, pgm)
	}
	
	quit
	
	// ---------------------------------------------------------------------
private SETTIME(Number offset)		// Offset from now
	/* ---------------------------------------------------------------------
	Return standardized time that can be used for comparisons
	
	RETURNS:
		. $$	Standardized time
	*/

	type Number date = %CurrentDate
	type Number seconds = %CurrentTime + offset
	
	if (seconds > 86400) do {
		set date = date + 1
		set seconds = seconds - 86400
	}
	
	quit date_({String}(100000 + seconds)).extract(2, 6)
	
	// ---------------------------------------------------------------------
public STOP
	/* ---------------------------------------------------------------------
	Send signal to stop regen monitor
	*/

	type literal String UCLREGEN = ""		// To avoid warning on lock

	type public String ER, RM

	lock +UCLREGEN:0
	if  do { quit
		set ER = 1
		// Monitor is not running
		set RM = $$^MSG(8366)
		lock -UCLREGEN
	}

	type RecordUCLREGEN uclregen = Db.getRecord("UCLREGEN", "SEQ=0", 1)

	set uclregen.tablename = "UCLREGEN"
	set uclregen.colname = "SEQ"

	do uclregen.save()

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	write $$MSG^%TRMVT("Signal sent to monitor ... waiting for stop", 0, 0, 0, 23)

	lock +UCLREGEN:70
	if  do {
		set ER = "W"
		// ~p1 monitor stopped
		set RM = $$^MSG(5535, "UCLREGEN")
		lock -UCLREGEN
	}
	else  do {
		set ER = 1
		// ~p1 monitor did not stop
		set RM = $$^MSG(5537, "UCLREGEN")
	}

	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61293^42610^Frans S.C. Witte^12556"	// Signature - LTD^TIME^USER^SIZE
