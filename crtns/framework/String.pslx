{ "class" : "String",
  "accessLevel" : 2,
  "classType" : 3,
  "constructor" : "intrinsic",
  "delimiter" : -1,
  "extends" : "Primitive",
  "isAbstract" : false,
  "isNoInstance" : false,
  "package" : "framework.psl",
  "propProc" : ""
, "methods" : 
    [ { "class" : "String", "method" : "addQuotes", "resultClass" : "String",
      "formalList" : "noret String character", "methodProc" : "qadd^UCSTRING",
      "inLiteral" : true, "accessLevel" : 2, "methodType" : 0,
      "comment" : "Add one layer of quotes" }
    , { "class" : "String",  "method" : "ascii", "resultClass" : "Number",
      "formalList" : "noret Number position", "methodProc" : "psl2m^UCPRIM(0,1)",
      "inLiteral" : true, "accessLevel" : 2, "methodType" : 0,
      "comment" : "ASCII code of character at specified pos" }
    , { "class" : "String", "method" : "beginsWith", "resultClass" : "Boolean",
      "formalList" : "noret String string;noret Boolean ignoreCase", "methodProc" : "isBegin^UCSTRING",
      "inLiteral" : true, "accessLevel" : 2, "methodType" : 0,
      "comment" : "Begins with string" }
    , { "class" : "String", "method" : "blank", "resultClass" : "String",
      "formalList" : "noret Number fieldLength;noret Boolean rightJustify", "methodProc" : "blank^UCSTRING",
      "inLiteral" : false, "accessLevel" : 2, "methodType" : 0,
      "comment" : "Pad a string with blanks" }
    , { "class" : "String", "method" : "byteLimitSubstring", "resultClass" : "String",
      "formalList" : "noret Number start;noret Number maxBytes", "methodProc" : "bytLimSub^UCBYTSTR",
      "inLiteral" : true, "accessLevel" : 2, "methodType" : 0,
      "comment" : "substring of at most maxBytes bytes" }
    , { "class" : "String", "method" : "complexUnpack", "resultClass" : "String",
      "formalList" : "noret Number length;noret Boolean signed;noret Boolean leftnib", "methodProc" : "unpack2^UCSTRING",
      "inLiteral" : true, "accessLevel" : 2, "methodType" : 0,
      "comment" : "Complex unpack of data string" }
    , { "class" : "String", "method" : "contains", "resultClass" : "Boolean",
      "formalList" : "noret String string", "methodProc" : "contains^UCSTRING",
      "inLiteral" : true, "accessLevel" : 2, "methodType" : 0,
      "comment" : "Contains a string" }
    , { "class" : "String", "method" : "endsWith", "resultClass" : "Boolean",
      "formalList" : "noret String string;noret Boolean ignoreCase", "methodProc" : "isEnd^UCSTRING",
      "inLiteral" : true, "accessLevel" : 2, "methodType" : 0,
      "comment" : "Ends with string" }
    , { "class" : "String", "method" : "extract", "resultClass" : "String",
      "formalList" : "noret Number start;noret Number end", "methodProc" : "extract^UCSTRING",
      "inLiteral" : true, "accessLevel" : 2, "methodType" : 0,
      "comment" : "Extract a string" }
    , { "class" : "String",  "method" : "find", "resultClass" : "Number",
      "formalList" : "noret String string;noret Number start;noret Boolean ignoreCase;noret String quoteChar", "methodProc" : "find^UCSTRING",
      "inLiteral" : true, "accessLevel" : 2, "methodType" : 0,
      "comment" : "Find the next position of a string" }
    , { "class" : "String", "method" : "follows", "resultClass" : "Boolean",
      "formalList" : "noret String string", "methodProc" : "follows^UCSTRING",
      "inLiteral" : true, "accessLevel" : 2, "methodType" : 0,
      "comment" : "Follows a string" }
    , { "class" : "String", "method" : "get", "resultClass" : "String",
      "formalList" : "String default", "methodProc" : "get^UCPRIM()",
      "inLiteral" : false, "accessLevel" : 2, "methodType" : 0,
      "comment" : "The string's value or a default value" }
  ,
      { "class" : "String",
      "method" : "getSub",
      "resultClass" : "String",
      "formalList" : "noret String label;noret String delimiter1;noret String delimiter2;noret Number position",
      "methodProc" : "getSub^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Return a sub-delimited or labeled string" }
    ,
      { "class" : "String",
      "method" : "insert",
      "resultClass" : "String",
      "formalList" : "noret String string;noret Number offSet;noret String padCharacter;noret Boolean displace",
      "methodProc" : "insert^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Insert a string into a string" }
    ,
      { "class" : "String",
      "method" : "isInteger",
      "resultClass" : "Boolean",
      "formalList" : "",
      "methodProc" : "isInt^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Is an integer" }
    ,
      { "class" : "String",
      "method" : "isLike",
      "resultClass" : "Boolean",
      "formalList" : "noret String likeExpr;noret Boolean ignoreCase",
      "methodProc" : "isLike^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Is like (SQL like)" }
    ,
      { "class" : "String",
      "method" : "isLiteral",
      "resultClass" : "Boolean",
      "formalList" : "",
      "methodProc" : "isLit^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Is a literal value - quoted or number" }
    , { "class": "String", "method": "isNull",  "resultClass": "Boolean"
      , "formalList": "literal Boolean isIncludeEmptyQuotes", "methodProc": "isNull^UCPRIM()"
      , "inLiteral" : true, "accessLevel": 2, "methodType": 0
      , "comment"   : "Expression is NULL"
      }
    ,
      { "class" : "String",
      "method" : "isNumber",
      "resultClass" : "Boolean",
      "formalList" : "",
      "methodProc" : "isNum^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Is a number" }
    ,
      { "class" : "String",
      "method" : "justify",
      "resultClass" : "String",
      "formalList" : "noret Number fieldLength;noret Number direction;noret String padCharacter;noret Boolean truncate",
      "methodProc" : "justify^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Justify and pad a string" }
    ,
      { "class" : "String",
      "method" : "length",
      "resultClass" : "Number",
      "formalList" : "noret String delimiter",
      "methodProc" : "length^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "String length" }
    ,
      { "class" : "String",
      "method" : "lowerCase",
      "resultClass" : "String",
      "formalList" : "noret Boolean capitalizeFirstChar",
      "methodProc" : "loCase^UCBYTSTR",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Convert to lower case" }
    ,
      { "class" : "String",
      "method" : "piece",
      "resultClass" : "String",
      "formalList" : "noret String delimiter;noret Number start;noret Number end;noret String quoteChar",
      "methodProc" : "piece^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Return string at delimited position" }
    ,
      { "class" : "String",
      "method" : "putSub",
      "resultClass" : "String",
      "formalList" : "noret String insert;noret String label;noret String delimiter1;noret String delimiter2;noret Number position",
      "methodProc" : "putSub^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Insert a sub-delimited or tagged string" }
    ,
      { "class" : "String",
      "method" : "replace",
      "resultClass" : "String",
      "formalList" : "noret String expr1;noret String expr2;noret Number count;noret Boolean ignoreCase;noret String quoteChar",
      "methodProc" : "replace^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Replace occurrances of expr1 with expr2" }
    ,
      { "class" : "String",
      "method" : "reverse",
      "resultClass" : "String",
      "formalList" : "",
      "methodProc" : "psl2m^UCPRIM(0,0)",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Reverse the character order" }
    ,
      { "class" : "String",
      "method" : "setNull",
      "resultClass" : "void",
      "formalList" : "literal Boolean isIncludeEmptyQuotes",
      "methodProc" : "setNull^UCPRIM()",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "assign \" to String" }
    ,
      { "class" : "String",
      "method" : "stripQuotes",
      "resultClass" : "String",
      "formalList" : "noret String quoteCharacter",
      "methodProc" : "qsub^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Strip one layer of quotes" }
    ,
      { "class" : "String",
      "method" : "toByteString",
      "resultClass" : "ByteString",
      "formalList" : "",
      "methodProc" : "toByteString^UCBYTSTR",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Convert String to ByteString" }
    ,
      { "class" : "String",
      "method" : "toDate",
      "resultClass" : "Date",
      "formalList" : "noret String mask",
      "methodProc" : "toDate^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Convert formatted date to julien date" }
    ,
      { "class" : "String",
      "method" : "toList",
      "resultClass" : "List",
      "formalList" : "noret String delimiter",
      "methodProc" : "prim2prim^UCPRIM(\"List\")",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Convert String to List" }
    ,
      { "class" : "String",
      "method" : "toMemo",
      "resultClass" : "Memo",
      "formalList" : "",
      "methodProc" : "prim2prim^UCPRIM(\"Memo\")",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Convert String to Memo" }
    ,
      { "class" : "String",
      "method" : "toNumber",
      "resultClass" : "Number",
      "formalList" : "noret String mask;noret Boolean stripSpace",
      "methodProc" : "toNumber^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Convert String to Number" }
    ,
      { "class" : "String",
      "method" : "toRow",
      "resultClass" : "Row",
      "formalList" : "noret List elements;noret String delimiter",
      "methodProc" : "toRow^UCSTRING",
      "inLiteral" : false,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Convert a String type to a Row type" }
    ,
      { "class" : "String",
      "method" : "toTime",
      "resultClass" : "Time",
      "formalList" : "",
      "methodProc" : "toTime^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Convert formatted to internal time" }
    ,
      { "class" : "String",
      "method" : "translate",
      "resultClass" : "String",
      "formalList" : "noret String lookFor;noret String replaceBy",
      "methodProc" : "psl2m^UCPRIM(1,2)",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Character by character replace" }
    ,
      { "class" : "String",
      "method" : "trim",
      "resultClass" : "String",
      "formalList" : "noret Number Option;noret String character",
      "methodProc" : "trim^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Trim characters from a String" }
    ,
      { "class" : "String",
      "method" : "unpack",
      "resultClass" : "String",
      "formalList" : "noret Number length",
      "methodProc" : "unpack^UCSTRING",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Unpacks data string" }
    ,
      { "class" : "String",
      "method" : "upperCase",
      "resultClass" : "String",
      "formalList" : "",
      "methodProc" : "upCase^UCBYTSTR",
      "inLiteral" : true,
      "accessLevel" : 2,
      "methodType" : 0,
      "comment" : "Convert to upper case" }
  ]
}
