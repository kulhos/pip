	/*
	ORIG: Frans S.C. Witte, 2006-07-18
        DESC: Code generation forclass  IO methods

	---------- Revision History --------------------------------------------
	07/18/06 - Frans S.C. Witte - CRs: 22273 / 22274
		Converted to PSL. Runtime code now in UCIO, compiletime code in
		this unit.

	*/
	#PACKAGE framework.psl

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	// ---------------------------------------------------------------------
open	// method IO.open
	/* ---------------------------------------------------------------------
	The generated code for IO.open() needs two additional parameters
	compared to the method declarion in OBJECTMET:
	- the calling routine
	- the calling subroutine
	- the object instance variable name
	*/
	set PSL.return = "open^UCIO("_ PSL.objectName_ ",$T(+0),"""_ PSL.subRou_ ""","""_ PSL.objectName_""")"

	quit

	// ---------------------------------------------------------------------
read	// method IO.read
	/* ---------------------------------------------------------------------
	The code to be generated for IO.read() depends on the presence or
	"absence" of an actual parameter.
	INPUTS:
	. actual(1) = error return variable (pass-by-name, deprecated)
        */
	if PSL.actual(1).isNull() do {		// use exception

		set PSL.return = "$$read^UCIO("_ PSL.objectName_ ")"
	}
	else  do {	// use error variable (deprecated)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do WARNDEP^UCGM( 2.7, 0,"IO.read(.ETYP) - use IO.read() and catch Exception")
		set PSL.return = "$$^%ZREAD($P(vobj("_ PSL.objectName_ ",1),""|"",6),"_ PSL.actual(1)_ ")"
	}

	quit

	// ---------------------------------------------------------------------
write	// method IO.write
	/* ---------------------------------------------------------------------
	First parameter shall not be missing
	If second parameter is missing, do not pass in call.
        */
	if PSL.actual(1).isNull() do PSL.error( "MISMATCH: data parameter required on IO.write()") quit
	
	set PSL.return = "write^UCIO("_ PSL.objectName_ ","_ PSL.actual(1)
	if 'PSL.actual(2).isNull() set PSL.return = PSL.return_ ","_ PSL.actual(2)
	set PSL.return = PSL.return_ ")"
	
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61058^29691^Frans S.C. Witte^3164"	// Signature - LTD^TIME^USER^SIZE
