	/*
	ORIG: SPIER - 10/23/2002
	DESC: PSL compiler data loading, System group (non Upgradable)

	*************************************************************************
	* IMPORTANT NOTE:							*
	*	According to the rules that apply to PSL compiler upgrades,	*
	*	this DQ procedure shall compile with the bootstrap limitations	*
	*	as described in the Framework Upgrade Documentation.		*
	*************************************************************************

	---- Environment Sensitive Elements ------------------------------------
	STBLPSLFUNSUB
		Subroutine loadFunc(,) uses Db.select(,"STBLPSLFUNSUB",,) to
		produce an array of function subtitute templates

	---- Comments ----------------------------------------------------------

	This procedure is intended to be used for loading of data from the
	System group that is required by the PSL compiler, but that cannot be
	accessed in a DBI upgradable way.

	---- Revision History --------------------------------------------------
	10/29/07 - Frans S.C. Witte - CR27800
		* Removed reference to OBJECTMET. STBLPSLFUNSUB shall be in sync
		  with PSL intrinsic objects.

	07/26/06 - RussellDS - CR22121
		* Included, without changes other than this comment, to trigger
		  phase 1 code regeneration
	
	05/01/06 - Frans S.C. Witte - CRs: 21394 / 21395
		* Subroutine UNCINIT moved to UCDTAUTL.

	01/05/06 - Frans S.C. Witte - CRs: 18163 / 18164
		* Added .toString() to ResultSet.getRow()

	09/30/05 - Frans S.C. Witte - CRs: 15592 / 15593
		* Derived from UCDTAUTL / UCDATAUTIL 
		* Procedure UCINIT moved from UCDTAUTIL to this procedure.
		  Modified access to private (only called from within compiler)
		* Function $$loadFunc and subroutine init moved from UCGMCONV
		  to this procedure. init renamed to xiniPSLFUNSUB(), and code
		  commented out

	06/03/05 - Pete Chenard - CR 16194
		* Modified init section to comment out references to SCARND. This
		  function will not be translated to PSL method calls at compile time.
		
	05/16/05 - RussellDS - CR15379
		   Modified UCINIT section to make private (PSL only) and to
		   eliminate parameters argument.
		   
		   Removed old revision history.
	
	12/06/04 - Frans S.C. Witte - CRs: 11445 / 11446
		UCINIT now sets Commands("WARN",cond)=1 (was "").
		Settings already present in pslPrsr(,) will not be overwritten.
		Replaced Object.data() by Object.exists().
		Excluded "current routine" from linkAll().

	10/19/04 - Frans S.C. Witte - CRs: 11441 / 11442
		Minor optimizations in subroutine UCINIT with respect to
		variable parameters.
		Removed "#WARN" and "#OPTIMIZE", because this unit can conform to
		the settings of the current environment.
		Added subroutine linkAll() and functions $$isCompiler(), and
		$$getMList()

	06/09/04 - giridharan( per Dan Russell) - CR9217
		Modified section UCINIT to correct an undefined error on 
		variable parameters

	05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

	03/26/04 - RussellDS - CR9172
		   Integrate most recent changes for movement of filers to PSL.

		   Modified UCINIT section to use UCOPTS, if it exists, to set
		   up compiler options which can vary by environment.
	*/
	#PACKAGE framework.psl
	#OPTION  ResultClass ON
	quit

	// ---------------------------------------------------------------------
String loadFunc( String parMap,	// function pattern to look for
		String funcs())		// function cache	/MECH=REFARR:RW
	/* ---------------------------------------------------------------------
	Load a function from the database
	*/
	// NOTE: The 9.char() below is only safe because UCDTASYS is in the DATA group
	type literal String tab = 9.char()

	type String return = ""
	type String BEG = parMap.piece("(",1)_"(" , END = BEG_999
	type String list1 = parMap.piece("(",2).piece(")",1)

	type ResultSet rs = Db.select("TEMPLATE,METHOD,CLASS,LITRESET", "STBLPSLFUNSUB", "TEMPLATE between :BEG and :END","TEMPLATE")

	while rs.next() do { if 'return.isNull() quit

		// Convert all the condition parameters to 1, use alpha after 9 up to limit of 36

		type String list2 = rs.getCol(1).piece("(",2).piece(")",1).translate("023456789ABCDEFGHIJKLMNOPQRSTUVWXYZ","111111111111111111111111111111111111")
		if list2.beginsWith(list1) set return = rs.getRow().toString( tab) , funcs(parMap) = return
	}

	type String method = return.piece(tab,2).piece("(",1)
	type String class = return.piece(tab,3) 
	if class.isNull() set class = "String"

	if return.isNull() set funcs(parMap) = tab	// No matches

	quit return

	// ---------------------------------------------------------------------
private void xiniPSLFUNSUB()	// 1st initialization of table in MDB
	/* ---------------------------------------------------------------------
	This function shall not be invoked again. Use data/PSLFUNSUB.DAT to
	maintain the table in a Database Independent way
	*/

	/* begin commented out ----------------
	#ACCEPT DATE=12/21/04; PGM=FSCW; CR=13403
	#BYPASS
	set ^STBL("PSLFUNSUB","$$^SCAJD(0,1)")="toDate"
	set ^("$$NUM^%ZM(0,1,2)")="toString|Number"
	;;set ^("$$^SCARND(0,3,,,1,2)")="roundDec|Number"
	;;set ^("$$^SCARND(0,3,,1,,2)")="roundCur|Number"
	set ^("$$QSUB^%ZS(0,1)")="stripQuotes"
	set ^("$$QADD^%ZS(0,1)")="addQuotes"
	set ^("$$LTRIM^%ZS(0)")="trim(-1)"
	set ^("$$RTRIM^%ZS(0)")="trim(1)"
	set ^("$$TRIM^%ZS(0)")="trim(0)"
	set ^("$$UPCASE^UCGM(0)")="upperCase"
	set ^("$$PUT^USUB(0,1,2,3,4,5)")="putSub"
	set ^("$$GET^USUB(0,1,2,3,4)")="getSub"
	set ^("$$LOWER^UCGMR(0)")="lowerCase"
	set ^("$$UPPER^UCGMR(0)")="upperCase"
	set ^("$$RTB^%ZFUNC(0)")="trim(1)"
	set ^("$$RTBAR^%ZFUNC(0)")="trim(1,$C(124))"
	set ^("$$RTCHR^%ZFUNC(0,2)")="trim(1)"
	set ^("$$LJ^%ZTEXT(0,1,3,4)")="justify(,0)"
	set ^("$$RJ^%ZTEXT(0,1,3,4)")="justify(,1)"
	;
	set ^("$$BD^UNBD(0,1)")="isBusDate|Date"
	set ^("$$NBD^UNBD(0,1,,2)")="nextBusDate|Date"
	set ^("$$DAT^%ZM(0,1)")="toString|Date"
	set ^("$$PRBD^UNBD(0,1,2)")="prevBusDate|Date"
	set ^("$$NJD^UFRE(0,1,2,3)")="nextFreqDate|Date"
	;
	set ^("$ASCII(0)")="ascii"
	set ^("$CHAR(0)")="char"
	set ^("$DATA(0)")="data|Object"
	set ^("$EXTRACT(0,1,2)")="extract"
	set ^("$FIND(0,1,2)")="find"
	set ^("$FNUMBER(0,1)")="fnumber|Number"
	set ^("$GET(0)")="get|Primitive"
	set ^("$JUSTIFY(0,1)")="justify(,1)"
	set ^("$LENGTH(0,1")="length"
	set ^("$ORDER(0,1)")="order|Object"
	set ^("$PIECE(0,1,2,3)")="piece"
	set ^("$QUERY(0)")="query|Object"
	set ^("$RANDOM(0)")="random|Number"
	set ^("$REVERSE(0)")="reverse"
	set ^("$TR(0,1,2)")="translate"
	#ENDBYPASS
	---------------- end commented out */

	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61565^25471^Sha H Mirza^6399"	// Signature - LTD^TIME^USER^SIZE
