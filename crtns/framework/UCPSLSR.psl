	/*
	ORIG: Frans S.C. Witte - 2006-06-06
	DESC: PSL compiler, Insensitive Group - PSLSubrou related code

	---- Comments ----------------------------------------------------------
	Runtime implmentation of PSLSubrou methods

	Note that the following PSLSubrou related code still resides elsewhere:
	- PSLSubrou.addLvn
		Generated as in-line code by UCMETHOD
	- PSLSubrou.addTag
		Generated as in-line code by UCMETHOD
	- PSLSubrou.getCode
		Generated as in-line code by UCMETHOD
	- PSLSubrou.getLine
		Generated as in-line code by UCMETHOD
	- PSLSubrou.getLvnMax
		Generated as in-line code by UCMETHOD
	- PSLSubrou.getName
		Generated as in-line code by UCMETHOD
	- PSLSubrou.getTagPrefix
		Generated as in-line code by UCMETHOD
	- PSLSubrou.insCode
		Generated as in-line code by UCMETHOD
	- PSLSubrou.setTagPrefix
		Generated as in-line code by UCMETHOD
	- The code that addes the subroutine to the M destination file
		is implemented at the end of UCGM (hard coded references to
		append(,)
	- ResultSet optimization code
		as implemented in UCPATCH contains hard coded references to
		append(,)
	- Record optimization code
		as implemented in UCREC4OP contains code that directly
		manipulates append(,)

	---- Revision History --------------------------------------------------
	09/04/07 - Frans S.C. Witte - CR 27800
		* changed .toString() to .getName()

	07/24/06 - Frans S.C. Witte - CRs: 22720 / 22274
		* Modified declarations to supply result class and added
		  #OPTION ResultClass ON

	07/21/06 - Frans S.C. Witte - CRs: 22273 / 22274
		* Modified addExe() to deal with "vsql=vsql+N"
		* Modified $$getTag() when $G()="" (no explicit value)

	06/06/06 - Frans S.C. Witte - CRs: 22060 / 22061
		Initial element
	*/
	#PACKAGE framework.psl
	#OPTION ResultClass ON

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	/* ================================================================== */
	/* Static methods                                                     */
	/* ****************************************************************** */


	/* ================================================================== */
	/* non-static methods                                                 */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
void addCode( PSLSubrou sr,	// name of subroutine
		String code)		// line of code to add
	/* ---------------------------------------------------------------------
	Runtime implementation of PSLSubrou.addCode( code):
	- Add the line to the subroutine buffer.
	- If the line contains a (record)wrap, notify the pass 2 handler.
	*/
	type public String append(,)

	set append( sr.getName(), append( sr.getName(), "").order(-1) + 1) = code
	if $$hasWrap^UCREC4OP(code) do srAdd^UCREC4OP( sr)
	quit

	// ---------------------------------------------------------------------
void addExe( PSLSubrou sr,	// name of subroutine
		String code)		// line of code to add
	/* ---------------------------------------------------------------------
	Runtime implementation of PSLSubrou.addExe( code)

	Replace code that executes from the exe() array with code that executes
	in a PSL generated M routine. The exe() code differs from the routine
	code in the following aspects:
	1) Code in exe() uses vsql(N) for local variables.
		This involves values of hostvariables (that are copied to
		vsql(N) at the beginning of the open-cursor-code to ensure that
		they are "constant" throughout iterative calls to cursor-fetch-
		code), key position variables (that constitue the current-row-
		pointer), and scratch variables.
		vsql(N) occurrences will be replaced by whatever is specified
		by calling PSLSubrou.addLvn( nr, expr), or by the default
		lvnname vsqlN.
	2) Replace code that manipulates the 'line pointer' vsql with code that
		uses GOTO. Because the SQL code is executed in a FOR loop that
		increments vsql, assignments to vsql position the 'line pointer'
		before the line that needs to be executed next (eg if exe(4)
		needs to be executed, the line includes the statement
			set vsql=3
		The assignment set vsql=-1 indicates "end-of-execution".
		The labels used in the generated code follow the pattern TAGaN,
		with:
		- TAG = PSLsubrou.tagPrefix
		- a = lowercase character 'a'
		- N = subscript value of exe()
		Thus SET vsql=3 will result in GOTO TAGa4

	The callers shall invoke addExe() for all lines in exe() that may be
	prefixed by a label.
	This is essential, because addExe() must be able to derive the subscript
	in exe() from the line being inserted AND to be able to back-patch a TAG
	to a line that has already been added before.

	The method recognizes the assignment either as first setargument (i.e.
	S vsql=N), or as second or higher setargument (i.e ,vsql=N). In either
	case, code following the assignment to vsql will be removed because code
	following the GOTO will never be executed anyway.

	INPUTS:
	. append(sr,), append(sr,-2,*), and append(sr, -3,*)
		Will be used to modify and store the line.
	OUTPUTS:
	. append(,)
		The line will have been modified, and added to the subroutine
		structure. Entries may have been added to append(sr, -2, *) and
		append(sr, -3, *)

	NOTES:
	. The caller MUST pass all exe() lines to addExe() in order to be sure
		that lines are correctly tagged. If the line turns out to be a
		no-op in the generated code, the caller shall pass it as ";"
	. The backward-patch algorithm "counts back" from the current line.
		So to correctly back patch a label to line that has already been
		added, all exe() lines must have been added consecutively using
		PSLSubrou.addExe(), and no intervening lines may have been added
		using PSLSubrou.addCode().
	. The forward-patch algorithm does not suffer from this limitation. Its
		only requirement is that all exe() lines are added through
		PSLSubrou.addExe()
	. Replacement 1) is derived from subVar^UCDB, and replacement 2) is
		derived from tagcheck^UCDB
	. To correctly simulate the behavior in the exe() context, the
		replacement code should be modified as follows:
		- remove the SET argument
		- if this was the only argument, remove the SET statement
		- add the GOTO statement (or its explicit override) at the end
			of the "line".
	. isAgFunc
		The original code in tagcheck^UCDB used this variable to
		indicate that the SELECT list contained a SQL aggregate. It
		used this in the following series of statements (with
		goto2=",vsql="):

		if x[goto2,isAgFunc do
		.	;
		.	set tagtest=$P(x,goto2,2)+1
		.	set tag="a"_tagtest
		.	set x=$p($P(x,goto,1),"S vd",1)_" G "_lineLabel_tag

		This is curious for several reasons:
		- If the code happens to contain goto2, and isAgFunc=0, then
			the assignment would remain in the code, and no "GOTO"
			would occur
		- The line that inserts the GOTO uses the variable goto instead
			of goto2
		- The line that inserts the GOTO uses an additional
			$P(,,"S vd",1). However if "S vd" would preceed goto in
			the code, then the $P(,goto,) is not needed. If on the
			other hand, goto would preceed "S vd" in the code, then
			the $P(,"S vd",) is not needed.
		Additional testing will have to show how ",vsql=" occurs in the
		code, and what the correct replacement is.
	*/
	type public String append(,,)

	// Step 1: Replace vsql(nr) by lvn specified in append(sr,-3,nr)
	type Number y = 0, yz
	type String v

	for  set y = code.find( "vsql(", y) quit:y=0  set yz =code.find(")", y) quit:yz=0  do {
		set v = code.extract( y, yz - 2)
		if 'append( sr.getName(), -3, v).exists() set append( sr.getName(), -3, v) = "vsql"_v
		set v = append(sr.getName(), -3, v)
		set code = code.extract( 1, y - 6) _ v_ code.extract( yz, code.length())
		set y = y - 6 + v.length()
	}

	// Step 2: Replace set vsql=line by GOTO
	type literal String goto  = "S vsql="
	type literal String goto2 = ",vsql="

	type Number exeSub = append( sr.getName(), -2, -2).get( 0) + 1
	type Number tagnr
	type String taggo

	if code[goto do {
		set taggo = code.piece( goto, 2)
		if taggo.beginsWith( "vsql+") set taggo = exeSub + taggo.piece( "vsql+", 2).toNumber()
		set tagnr =  taggo + 1
		set code  = code.piece( goto)_ $$tagGoto( sr, tagnr)
		do tagPatch( sr, tagnr)
	}
	if code[goto2 do {
		set taggo = code.piece( goto2, 2)
		if taggo.beginsWith( "vsql+") set taggo = exeSub + taggo.piece( "vsql+", 2).toNumber()
		set tagnr =  taggo + 1
		set code  = code.piece( goto2).piece("S vd")_ " "_ $$tagGoto( sr, tagnr)
		do tagPatch( sr, tagnr)
	}

	/* NOTE: Do NOT move this line up!
	   tagPatch() looks at and interprets the current value of
	   append(sr,-2,-2) */
	set append( sr.getName(), -2, -2) = exeSub

	if append( sr.getName(), -2, exeSub).exists() set code = sr.getTag( exeSub)_" "_ code
	else  set code = " "_ code

	do sr.addCode( code)

	quit

	// ---------------------------------------------------------------------
String getTag( PSLSubrou sr, Number tagnr)
	/* ---------------------------------------------------------------------
	Runtime implmentation of PSLSubrou.getTag( tagnr)
	*/
	type public String append(,)

	quit append( sr.getName(), -2)_ "a"_ tagnr

	/* ================================================================== */
	/* LOCAL FUNCTIONS AND SUBROUTINES				      */
	/* ------------------------------------------------------------------ */

	// ---------------------------------------------------------------------
private String tagGoto( PSLSubrou sr, Number tagnr)
	/* ---------------------------------------------------------------------
	Return the code to insert instead of SET vsql=n.

	If the tag's code has been specified by sr.addTag(tagnr, code), then
	that code will be used.
	If the value is empty, then a GOTO prefixTagnr will be returned

	ARGUMENTS:
	(*2) tagnr = tagnr
		The tag number to use (= assignment value + 1)
	*/
	type public String append(,,)

	type String v = append( sr.getName(), -2, tagnr).get()
	if v.isNull() set v = "G "_ sr.getTag( tagnr)
	quit v

	// ---------------------------------------------------------------------
private void tagPatch( PSLSubrou sr, Number tagnr)
	/* ---------------------------------------------------------------------
	Store notification that the line that comes from exe(tagnr) needs a
	label. If exe(tagnr) has already been processed, prepend the label to
	that line.

	NOTES:
	. append( sr, -2, -2) will reflect the number of exe() lines already in
		the PSLSubrou buffer. This excludes the line currently being
		processed.
	. if tagnr is less than or equal to append( sr, -2, -2), the line must
		be back patched.
	. if M is the highest line number in the append( sr, ) buffer, and N is
		the value of append( sr, -2, -2), then
		- the line corresponding to exe(1) is at append( sr, M - N + 1)
		- the line corresponding to exe(2) is at append( sr, M - N + 2)
		- etc.
	. "back patching" only works if all preceeding lines have been inserted
		with addExe()
	*/
	type public String append(,,)

	if append( sr.getName(), -2, tagnr).exists() quit	// already handled

	type Number n = append( sr.getName(), -2, -2).get( 0)
	if tagnr '> n set n = append( sr.getName(),"").order(-1) - n + tagnr, append( sr.getName(), n) = append( sr.getName(), -2)_ "a"_ tagnr_ append( sr.getName(), n)
	set append( sr.getName(), -2, tagnr) = ""

	quit
 #OPTION ResultClass ON
public String vSIG()	quit "60946^40568^Frans S.C. Witte^12054"	// Signature - LTD^TIME^USER^SIZE
