	/*
	ORIG: Frans S.C. Witte - 2006-12-21
	DESC: PSL compiler, Insensitive Group - #CLASSDEF for PSLX

	---- Comments ----------------------------------------------------------
	The PSLX class is used to decompose a .pslx source structure (or the
	associated .psl source) into the cache entries used by the compiler.

	The decomposition part uses PSLTokenizer to decompose the first JSON
	object in the file.

	---- Revision History --------------------------------------------------
	2009-04-02, Frans S.C. Witte, CR 39242
		Turned most methods into 'final' methods.

	12/20/06 - Frans S.C. Witte
		* Initial version, compiles with UCGM
	*/
	#PACKAGE  framework.psl

	/* ---------------------------------------------------------------------
	This module shares propery names with PSLParser, which is somewhat hidden
	by the fact that the calls to PSLParser.passPslx(,) just pass the
	target() array, and return whatever is put in there.
	*/
	#CLASSDEF extends=PSLCC public delimiter=9

	// ---------------------------------------------------------------------
	#PROPERTYDEF moduleName		class=String public readonly node="moduleName"
		/* -------------------------------------------------------------
		The name of the module (without the extension) that will be
		parsed. The module name may include a directory specification.
		If it does, SCAU_PACKAGES will not be used to locate the module.
		*/

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************

	/* ================================================================== */
	/* Initializer							      */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
private void initialize(Object initObj)	// constructor
	/* ---------------------------------------------------------------------
	The initialize method will cast the initObj to a String, and interpret
	it as the name of the source module.

	The method will not load the module. This is left to the PSLTokenizer
	instance that is used to decompose the .pslx file.
	*/
	set this.moduleName = {String}initObj

	quit

	/* ================================================================== */
	/* Non-local Instance methods                                         */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
public final void classOnly()	// extract only the class-descriptor
	/* ---------------------------------------------------------------------
	Extract only the class-descriptor from the .pslx file (or the .psl file
	if appropriate).

	All other descriptors are ignored.

	This method relies on the fact that the class related properties preceed
	the methods and properties.

	See extract() for other considerations.

	THROWS:
	. exception if extraction fails
	*/
	/* temp literals until #PROPERTYDEF can be used: */
	type literal Number tknTypeCMT = 59
	type literal Number tknTypeEOF = -1
	type literal Number tknTypeEOL = 10
	type literal Number tknTypeMTD = -4
	type literal Number tknTypeNUM = -2
	type literal Number tknTypeSTR = 34
	type literal Number tknTypeWRD = -3

	type IO modIO = Class.new( "IO")
	type Boolean usePsl = this.usePsl( modIO)
	if usePsl { quit:usePsl
	    do {
	    	catch vEx {
	    		set usePsl = false	// indicate failure
		    	set modIO.fileName = this.moduleName_".pslx"
	    	}
		do this.classPsl()
	    }
	}

	/* Use .pslx: Create the PSLTokenizer instance
	   */
	type PSLTokenizer tknzr = Class.new("PSLTokenizer", modIO)
	set tknzr.tknIgnEOL = true

	type String json(), name, value
	type Number tkn = tknTypeEOF
	type static PSLClass

	/* Module file shall start with the JSON object that describes the
	   class. Data after the closing '}' is ignored. */
	if tknzr.nextToken() '= "{".ascii() throw Class.new( "Error", "%PSL-E-INVALID, invalid source descriptor file for '"_ this.moduleName_ "'")

	while (tkn'= "}".ascii()) {
		set tkn = tknzr.nextToken()
		if tkn = tknTypeEOF throw Class.new( "Error", "%PSL-E-INVALID,Unxpected end-of-file in "_ this.moduleName_ ".pslx")
		set name = tknzr.tknValue
		if tkn '= tknTypeSTR throw Class.new( "Error", "%PSL-E-INVALID,class-descriptor-name expected in "_ this.moduleName_ ".pslx; found "_ name)

		if tknzr.nextToken() '= ":".ascii() throw Class.new( "Error", "%PSL-E-INVALID,':' expected in "_ this.moduleName_ ".pslx; found '"_ tknzr.tknValue_ "'")

		// The "properties" or "methods" arrays indiacte the end of the search
		if name = "properties" set tkn = "}".ascii() quit
		if name = "methods" set tkn = "}".ascii() quit

		set tkn = tknzr.nextToken(), value = tknzr.tknValue
		if tkn = tknTypeWRD {
			if value = "true" set value = true
			else  if value = "false" set value = false
			else  throw Class.new( "Error", "%PSL-E-INVALID,unknown class-descriptor-value '"_ value_ "' in "_ this.moduleName_ ".pslx")
		}
		else  if tkn '= tknTypeSTR, tkn '= tknTypeNUM throw Class.new( "Error", "%PSL-E-INVALID,unknown class-descriptor-value '"_ value_ "' in "_ this.moduleName_ ".pslx")
		set json( name) = value

		set tkn = tknzr.nextToken()
		if tkn'=",".ascii(), tkn'="}".ascii() throw Class.new( "Error", "%PSL-E-INVALID,Unxpected token '"_tknzr.tknValue_ "' in "_ this.moduleName_ ".pslx")
	}

	set this.pslCls( json("class")) = PSLClass.fromJSON( json())
	quit

	// ---------------------------------------------------------------------
public final void extract() // extract the descriptors
	/* ---------------------------------------------------------------------
	Extract the module description from the .pslx file (or the .psl file
	if appropriate).

	If no .plsx file can be located, a .psl file will be located.
	If neither is located, an exception will be thrown.

	If sameDir is not empty, and the .pslx file is located in sameDir, and
	that directory contains a newer .psl file, then the information will be
	extracted from the .psl file instead of the .pslx file.

	THROWS:
	. exception if extraction fails
	*/
	/* temp literals until #PROPERTYDEF can be used: */
	type literal Number tknTypeCMT = 59
	type literal Number tknTypeEOF = -1
	type literal Number tknTypeEOL = 10
	type literal Number tknTypeMTD = -4
	type literal Number tknTypeNUM = -2
	type literal Number tknTypeSTR = 34
	type literal Number tknTypeWRD = -3

	type IO modIO = Class.new( "IO")
	type Boolean usePsl = this.usePsl( modIO)
	if usePsl { quit:usePsl
	    do {
	    	catch vEx {
	    		set usePsl = false	// indicate failure
		    	set modIO.fileName = this.moduleName_".pslx"
	    	}
		do this.fromPsl()
	    }
	}

	/* Use .pslx: Create the PSLTokenizer instance
	   */
	type PSLTokenizer tknzr = Class.new("PSLTokenizer", modIO)
	set tknzr.tknIgnEOL  = true
	set tknzr.charEscape = "\"
	set tknzr.charSymbol = "=:,[]{}"

	type String json(), name, value
	type Number tkn = tknTypeEOF
	type static PSLClass

	/* Module file shall start with the JSON object that describes the
	   class. Data after the closing '}' is ignored. */
	if tknzr.nextToken() '= "{".ascii() throw Class.new( "Error", "%PSL-E-INVALID, invalid source descriptor file for '"_ this.moduleName_ "'")

	while (tkn'= "}".ascii()) {
		set tkn = tknzr.nextToken()
		if tkn = tknTypeEOF throw Class.new( "Error", "%PSL-E-INVALID,Unxpected end-of-file in "_ this.moduleName_ ".pslx")
		set name = tknzr.tknValue
		if tkn '= tknTypeSTR throw Class.new( "Error", "%PSL-E-INVALID,class-descriptor-name expected in "_ this.moduleName_ ".pslx; found "_ name)

		if tknzr.nextToken() '= ":".ascii() throw Class.new( "Error", "%PSL-E-INVALID,':' expected in "_ this.moduleName_ ".pslx; found '"_ tknzr.tknValue_ "'")
		if name = "properties" {
			if tknzr.nextToken() '= "[".ascii() throw Class.new( "Error", "%PSL-E-INVALID,'[' expected in "_ this.moduleName_ ".pslx; found '"_ tknzr.tknValue_ "'")
			for  { quit:tkn = "]".ascii()
				set tkn = this.extrPrp( tknzr)
				if tkn '= ",".ascii(), tkn'="]".ascii() throw Class.new( "Error", "%PSL-E-INVALID,']' or ',' expected in "_ this.moduleName_ ".pslx; found '"_ tknzr.tknValue_ "'")
			}
		}
		else  if name = "methods" {
			if tknzr.nextToken() '= "[".ascii() throw Class.new( "Error", "%PSL-E-INVALID,'[' expected in "_ this.moduleName_ ".pslx; found '"_ tknzr.tknValue_ "'")
			for  { quit:tkn = "]".ascii()
				set tkn = this.extrMtd( tknzr)
				if tkn '= ",".ascii(), tkn'="]".ascii() throw Class.new( "Error", "%PSL-E-INVALID,']' or ',' expected in "_ this.moduleName_ ".pslx; found '"_ tknzr.tknValue_ "'")
			}
		}
		else  {
			set tkn = tknzr.nextToken(), value = tknzr.tknValue
			if tkn = tknTypeWRD {
				if value = "true" set value = true
				else  if value = "false" set value = false
				else  throw Class.new( "Error", "%PSL-E-INVALID,unknown class-descriptor-value '"_ value_ "' in "_ this.moduleName_ ".pslx")
			}
			else  if tkn '= tknTypeSTR, tkn '= tknTypeNUM throw Class.new( "Error", "%PSL-E-INVALID,unknown class-descriptor-value '"_ value_ "' in "_ this.moduleName_ ".pslx")
			set json( name) = value
		}
		set tkn = tknzr.nextToken()
		if tkn'=",".ascii(), tkn'="}".ascii() throw Class.new( "Error", "%PSL-E-INVALID,Unxpected token '"_tknzr.tknValue_ "' in "_ this.moduleName_ ".pslx")
	}

	set this.pslCls( json("class")) = PSLClass.fromJSON( json())
	quit

	// ---------------------------------------------------------------------
public final void fromTarget()
	/* ---------------------------------------------------------------------
	Extract info from target .m or .java file

	NOTES:
	. The current version contains the code to read from the .m file,
		enclosed in an #IF 1 / #ENDIF block
	*/
	#IF 1
	/* ======== BEGIN TARGET = M ======== */

	type IO modIO = Class.new("IO")
	type String %ZI(),%ZR(), src()

	set %ZI(this.moduleName) = ""
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	do INT^%RSEL
	type String dir = %ZR( this.moduleName).get()
	
	if dir.isNull() throw Class.new( "Error", "%PSL-E-UNDEF,module '"_ this.moduleName_ "' not found")

	/* Read source code */
	set modIO.directory = dir
	set modIO.fileName = this.moduleName.translate("%","_")_".m"
	set modIO.openParams = "READ"
	set modIO.recordSize = PSL.maxLineLength + 1

	do {
		catch xIO {
			do modIO.close()
		}
		do modIO.open()

		type String cls = this.moduleName, code, decl, declDoc, fp, fpl, fplDoc
		type Number ln,fpn
		type static PSLClass

		set this.pslCls( cls) = PSLClass.nativeMod( cls)

		for ln = 1:1 {
			set code = modIO.read().translate( 9.char()_ 10.char()_ 13.char(), " ")
			quit:code.extract() = " "

			set decl = code.piece(" ")

			type PSLMethod mtddes = Class.new( "PSLMethod")

			set mtddes.accessLevel = mtddes.accessLevelPUBLIC
			set mtddes.class = cls
			set mtddes.codeLine = 0
			set mtddes.inLiteral = false
			set mtddes.method = decl.piece("(")
			set mtddes.methodType = mtddes.methodTypeNOFPL

			if code.length(";") > 2 {
				set declDoc = code.piece( ";", 2).trim()
				set mtddes.comment = code.piece( ";", 3, code.length(";")).trim()
			}
			else  set declDoc ="", mtddes.comment = code.piece( ";", 2).trim()

			if 'declDoc.isNull() {
				set fpl = declDoc.piece("(")
				quit:fpl.isNull()
				for fpn=1:1:fpl.length( " ") {
					set fp = fpl.piece( " ", fpn)
					if {List}"protected,private,package,public".contains(fp) {
						set:fp="package" fp="public"
						set mtddes.accessLevel = {List}"protected,private,,public".position(fp) - 2
					}
					if $$getCls^UCGMCU("PSLX").contains(fp)!(fp="void") set mtddes.resultClass = fp
				}
			}

			if decl [ "(" {
				set mtddes.methodType = mtddes.methodTypeSTATIC
				set decl = decl.extract( decl.find("("), decl.length() - 1)
				quit:decl.isNull()

				set fplDoc = $select( declDoc.contains("("):declDoc.extract( declDoc.find("("), declDoc.length() - 1), 1:"")
				set fp = fplDoc.piece(","), fpl = $select(fp.isNull():"ret String ",1:fp.trim()_" ")_decl.piece(",")
				for fpn = 2:1:decl.length(",") set fp = fplDoc.piece( ",", fpn), fpl = fpl_";"_$select(fp.isNull():"ret String ",1:fp.trim()_" ")_decl.piece(",",fpn)
				set mtddes.formalList = fpl
			}

			set this.pslMtd( cls_ "."_ mtddes.method) = mtddes
		} 
	}
	/* ======== END TARGET = M ======== */
	#ENDIF

	#IF 0
	/* ======== BEGIN TARGET = JAVA ======== */

	/* ======== END TARGET = JAVA ======== */
	#END

	quit

	/* ================================================================== */
	/* Instance support methods					      */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
private void classPsl()
	/* ---------------------------------------------------------------------
	local wrapper for call to PSLParser
	*/

	// instantiate a new PSLParser and pass packageDirs
	type PSLParser psl = Class.new("PSLParser", this.moduleName)
	set psl.packageDirs = this.packageDirs

	type Number err = psl.passClass( this)
	quit

	// ---------------------------------------------------------------------
private Number extrMtd( PSLTokenizer tknzr)
	/* ---------------------------------------------------------------------
	Extract a single method specification from the file.
	*/
	type String json()
	type Number tkn = this.extrObj( tknzr, json())
	type static PSLMethod

	set this.pslMtd( json("class")_ "."_ json("method")) = PSLMethod.fromJSON( json())

	quit tkn

	// ---------------------------------------------------------------------
private Number extrObj(  PSLTokenizer tknzr, String json())
	/* ---------------------------------------------------------------------
	Extract a single JSON object specification from the file.
	This method soe not deal with nested objects or arrays of objects.
	*/
	/* temp literals until #PROPERTYDEF can be used: */
	type literal Number tknTypeCMT = 59
	type literal Number tknTypeEOF = -1
	type literal Number tknTypeEOL = 10
	type literal Number tknTypeMTD = -4
	type literal Number tknTypeNUM = -2
	type literal Number tknTypeSTR = 34
	type literal Number tknTypeWRD = -3

	type Number tkn = tknTypeEOF
	type String name, value

	if tknzr.nextToken() '= "{".ascii() throw Class.new( "Error", "%PSL-E-INVALID,'{' expected for descriptor in "_ this.moduleName_ ".pslx")

	while (tkn'= "}".ascii()) {
		set tkn = tknzr.nextToken()
		if tkn = tknTypeEOF throw Class.new( "Error", "%PSL-E-INVALID,Unxpected end-of-file in "_ this.moduleName_ ".pslx")
		set name = tknzr.tknValue
		if tkn '= tknTypeSTR throw Class.new( "Error", "%PSL-E-INVALID,method-descriptor-name expected in "_ this.moduleName_ ".pslx; found "_ name)

		if tknzr.nextToken() '= ":".ascii() throw Class.new( "Error", "%PSL-E-INVALID,':' expected in "_ this.moduleName_ ".pslx; found '"_ tknzr.tknValue_ "'")

		set tkn = tknzr.nextToken(), value = tknzr.tknValue
		if tkn = tknTypeWRD {
			if value = "true" set value = true
			else  if value = "false" set value = false
			else  throw Class.new( "Error", "%PSL-E-INVALID,unknown descriptor-value '"_ value_ "' in "_ this.moduleName_ ".pslx")
		}
		else  if tkn '= tknTypeSTR, tkn '= tknTypeNUM throw Class.new( "Error", "%PSL-E-INVALID,unknown descriptor-value '"_ value_ "' in "_ this.moduleName_ ".pslx")
		set json( name) = value
		set tkn = tknzr.nextToken()
		if tkn'=",".ascii(), tkn'="}".ascii() throw Class.new( "Error", "%PSL-E-INVALID,Unxpected token '"_tknzr.tknValue_ "' in "_ this.moduleName_ ".pslx")
	}
	quit tknzr.nextToken()

	// ---------------------------------------------------------------------
private Number extrPrp( PSLTokenizer tknzr)
	/* ---------------------------------------------------------------------
	Extract a single property specification from the file.
	*/
	type String json()
	type Number tkn = this.extrObj( tknzr, json())
	type static PSLProperty

	set this.pslPrp( json("class")_ "."_ json("property")) = PSLProperty.fromJSON( json())

	quit tkn

	// ---------------------------------------------------------------------
private Boolean usePsl( IO modIO)
	/* ---------------------------------------------------------------------
	Return if .psl shall be used instad of .pslx file.

	This function fills modIO.directory with the directory of the .pslx file
	except if the .pslx file is not found at all, in which case the property
	is returned unchanged.
	*/
	type String pckDirs = this.packageDirs
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$PARSE^%ZFUNC(this.moduleName,"NAME")=this.moduleName, pckDirs.isNull() {
		set pckDirs = $$packageDirs^PSLC("","")
		set this.packageDirs = pckDirs
	}

	if '$$locate^UCIO( modIO, pckDirs, ":", this.moduleName_ ".pslx", 1) quit true

	/* Found:
	   Force that this.moduleName matches the spelling of the filename.
	   As $$locate^UCIO updated modIO.directory, we can use this value to
	   locate the .psl file. */
	set this.moduleName = modIO.fileName.piece(".")

	type Boolean usePsl = false

	// no .psl file in that directory
	type IO pslIO = Class.new( "IO")
	quit:'$$locate^UCIO( pslIO, modIO.directory, ":", this.moduleName_ ".psl", 0) false

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String stPslx = $$FILE^%ZFUNC(modIO.directory_ modIO.fileName, "CDT")
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String stPsl  = $$FILE^%ZFUNC(pslIO.directory_ pslIO.fileName, "CDT")

	/* Same dates, OK if time of psl less than time on pslx.
	   Will occur if compiled immediately after changing the source.
	   */
	if stPsl.toNumber()=stPslx.toNumber() quit stPsl.piece(",",2).toNumber()>stPslx.piece(",",2).toNumber()

	/* Different dates, OK if date on .psl earlier than date on .pslx.
	   For example after mass-compile of .psl files. */
	quit stPsl.toNumber()>stPslx.toNumber()

	// ---------------------------------------------------------------------
private void fromPsl()
	/* ---------------------------------------------------------------------
	local wrapper for call to PSLParser
	*/

	// instantiate a new PSLParser and set its packageDirs property
	type PSLParser psl = Class.new("PSLParser", this.moduleName)
	set psl.packageDirs = this.packageDirs

	type Number err = psl.passPslx( this)
	quit:err=0

	if err=-1 do this.fromTarget() quit

	throw Class.new( "Error", "%PSL-E-UNDEF,cannot extract description for module '"_ this.moduleName_ "' not found")
	quit	// dead code
 #OPTION ResultClass ON
public String vSIG()	quit "61461^42885^Frans S.C. Witte^18873"	// Signature - LTD^TIME^USER^SIZE
