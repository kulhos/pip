	/*
	ORIG: FSANCHEZ - 12/21/02
	DESC: Library of DbSet methods
	
	---- Revision History --------------------------------------------------
	06/07/2008 - RussellDS - CR30801
		Modified getRecord to pass actual(3) = -1 to getRecord^UCDB if
		using audit logging
	
	03/06/07 - Frans S.C. Witte - CRs: 25759 / 25760 / 25761
		Added call to occMark^UCREC4OP() in $$propRef() for "nested
		property"

	11/09/05 - Frans S.C. Witte - CRs: 18163/18164
		* Converted to PSL.
		* Replaced setScop^UCGM + setType^UCGM by setScope^UCGM
		* Adapted call to $$curVal^UCCOLUMN()
		* corrected handling of actual(1)

	02/17/05 - Frans S.C. Witte - CRs 14569 / 14578
		Added quit before first subroutine.
		Subroutine getRecord: object optimization is turned on BEFORE
		calling propRef and $$patch^UCPATCH().
		Subroutine propRef: code that turns on optimization has been
		removed (already enabled by caller).

	05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

	09/04/03 - SPIER - 51640
		Correct error with dbsets when multiples are used in
		the same label. They shared the same loading label 
		incorrectly.

	02/14/03 - SPIER - 51423
		bug fixes
	*/
	#PACKAGE framework.psl
	#OPTION  ResultClass ON

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	// ---------------------------------------------------------------------
void getRecord	// method DbSet.getRecord ; Returns RecordTABLE record
	/* ---------------------------------------------------------------------
	INPUTS:
	. PSL.actual(1) = table name or ""
		If "", the tablename will be extracted from the instantiation
		expression of the Dbset.getRecord instantiator (i.e. the
		objectName's Db.selectDbSet("TABLE",...) expression)
		If not null, it shall match the name of the table in the
		Db.selectDbSet() instantiation expression
	. PSL.subRou
	. PSL.objectName
	. PSL.objectLevel

	. pslTbl() = PSLTable cache
		Used in call to $$caPlsTbl^UCXDD()

	. atom = object expression (!)
		The PSL compiler handles "nested" property / method combinations
		as a single syntactic element. So the PSL statement
			set val = dbsetvar.getRecord().columnname
		will be treated as a single method "call", with the lvn ptr
		pointing to the dot after the getRecord().
		This value is passed to $$propRef()
	. ptr = character pointer
		Used in combination with atom. If ptr>0, a "nested" property
		reference is implied, and $$propRef() is called to deal with
		this

	OUTPUTS:
	. PSL.class = RecordTABLE
	. PSL.return = call that implements method

	NOTES:
	. The nested property stuff should be handled by UCGM itself. Until that
		is the case, the dubious tricks used here are inavitable.
	. Correct code for the nested property reference can only be generated
		if the column resides on the node that is loaded initially, or
		if UCREC4OP can insert load code between the instantiation and
		the access.
	*/
	type public String atom		// "nested property", object expression
	type public Number ptr		// "nested property", character pointer
	
	type static PSLClass
	type public PSLTable pslTbl()

	/* Get the TABLE name from the Db.selectDbSet() that instantiated the
	   DbSet object (in objectName) */
	type String table = PSL.objectName.instExpr
	if 'table.isNull() set table = $$getPar^UCPATCH( table, 1).stripQuotes()

	set PSL.actual(1) = PSL.actual(1).stripQuotes()
	if PSL.actual(1).isNull() set PSL.actual(1) = table
	else  if table.isNull() set table = PSL.actual(1)

	if PSL.actual(1) '= table do PSL.error( "Table parameter: "_ PSL.actual(1)_ " does not match: "_ table) quit

	if table.isNull() do PSL.error( "Table parameter is required") quit

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	do setOpti^UCGM( PSL.objectName, PSL.objectLevel, 0)

	if ptr.get() set PSL.return = $$propRef(table, atom, .ptr) quit

	set PSL.class = PSL.var.class
	if ( PSLClass.RECORDCLASS_table) '= PSL.class do PSL.error( "Cannot assign: "_ PSLClass.RECORDCLASS_ table_ " to: "_ PSL.class) quit

	type PSLTable td   = PSL.cachePSLTable( pslTbl(), table)
	type List     keys = td.primaryKeys
	type String   par   = ""

	if 'keys.isNull() do {
		type String lvn
		if keys.count() = 1 set lvn = PSL.oLvn_ "("_ PSL.objectName_ ")", par = $$patch^UCPATCH( PSL.subRou, PSL.objectName, PSL.objectLevel, lvn)
		else  do {
			type Number k
			for k=1:1:keys.count() set lvn = "$P("_ PSL.oLvn_ "("_ PSL.objectName_ "),$C(9),"_ k_ ")", par = par_ ","_ $$patch^UCPATCH( PSL.subRou, PSL.objectName, PSL.objectLevel, lvn)
			set par = par.extract( 2, par.length())
		}
	}

	/* set up for call getRecord^UCDB to simulate Db.getRecord() */
	set PSL.return = ""
	set PSL.actual(1) = table.addQuotes()
	set PSL.actual(2) = par.addQuotes()
	set PSL.actual(3) = 1

	do getRec^UCDB(true)
        quit

	// ---------------------------------------------------------------------
private String propRef( String table	// name of table
		, PSLExpression objExpr	// dbsetvar.getRecord().property[.xyz] (*2)
		, ret Number  ptr	// char pointer	(*3)	/MECH=REF:RW
		)
	/* ---------------------------------------------------------------------
	NOTES:
	. This code needs attention.
		A property reference on a DbSet instance effectively references
		a Record property. It is unclear why this needs special code in
		this subroutine, as opposed to the general nested property
		handling in the compilers main parsing loop.
		All references to type(,) can probably be replaced.
	*/
	#ACCEPT CR=27800;Date=2007-10-09;PGM=Frans S.C. Witte;Group=DEPRECATED; use of type()
	type public String type(,,)

	type static PSLClass

	type String lvn
	type String return = ""

	/* ================
	   FSCW CR14569: Record optimization has already been enabled by caller
        set opti=$$getOpti^UCGM(objectName,objectLevel)
        if opti>msrc set opti=0 do setOpti^UCGM(objectName,objectLevel,opti)
	================ */

	if 'type( PSL.objectLevel, PSL.objectName, "DbSet").exists() do {
		if $$topFor^UCPSLST( PSL.pslSt)>0 do PSL.error("DbSet Reference can not be on for/while line") quit

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		type Number lnr = $$getDcLnr^UCGM()
		set lvn = ""		// Push scope down

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		for  set lvn = type(PSL.level,lvn).order() quit:lvn=""  if $$getNew^UCGM(lvn,PSL.level)'<lnr set type(PSL.level,lvn).piece( 9.char(), 2)=lnr+1

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set lvn=$$nxtSym^UCGM
		set type( PSL.objectLevel, PSL.objectName, "DbSet") = lvn

		//do setScop^UCGM(lvn,level,msrc+1,"NEW")
		//do setType^UCGM(lvn,class,level)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do setScope^UCGM( lvn, "", "", "NEW", PSLClass.RECORDCLASS_ table)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do setInst^UCGM( lvn, lnr, "Db.getRecord("""_table_""",,1)")
		do occMark^UCREC4OP()

		/* Set up for a nested call to Dbset.getRecord() using the
		   intermediate variable, and discarding the property */
		type PSLExpression atom = ""
		type Number        ptr = 0
		type PSLIdentifier var = lvn
		type Number        varLevel = PSL.level
		type String        mcode

		do getRecord

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do incrLabel^UCGM(return)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set mcode=$$initLine^UCGM(PSL.level)_"N "_var_" S "_var_"="_return
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do ADD^UCGM(mcode)
	}
	set lvn = type( PSL.objectLevel, PSL.objectName,"DbSet")

	set ptr = ptr + 1	// skip dot

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String property = $$ATOM^%ZS( objExpr, .ptr, ".", ,1)

	quit $$curVal^UCCOLUMN( lvn, table, property, 0, objExpr, .ptr)
 #OPTION ResultClass ON
public String vSIG()	quit "61186^61461^Dan Russell^8689"	// Signature - LTD^TIME^USER^SIZE
