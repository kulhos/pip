	/*
	ORIG: Frans S.C. Witte - 2007-10-16
	DESC: PSL compiler, Insensitive Group - #CLASSDEF for PSLCC

	---- Comments ----------------------------------------------------------
	The PSLCC class is the compiler common ancestor class. It contains the
	properties and methods that are common to all parsers.

	---- Revision History --------------------------------------------------
	2009-04-02, Frans S.C. Witte, CR 39242
		Turned most methods into 'final' methods.

	2008-11-06, Frans S.C. Witte, CR 35741/36391/36492
		* Added copy of sections "boot" and "DEBUG" from $SCAU_UCOPTS.

	04/01/2008 - RussellDS - CR30801
		* Modified loadClass to change Record constructor to
		  classNew^DBSDYNRA
	
	16/10/07 - Frans S.C. Witte, CR 27800
		* Initial version.
	*/
	#PACKAGE  framework.psl

	#CLASSDEF extends=Primitive public delimiter=9

	// top-node properties -------------------------------------------------

	// node-only properties ------------------------------------------------
	// ---------------------------------------------------------------------
	#PROPERTYDEF packageDirs = ""	class=String public node="packageDirs"
		/* -------------------------------------------------------------
		The package directory search list to be passed to $$locate^UCIO
		when searching for modules.
		*/

	// ---------------------------------------------------------------------
	#PROPERTYDEF ucopts = ""	class=String public readonly node="ucopts"
		/* -------------------------------------------------------------
		This property specifies the UCOPTS override file that provides
		the initial settings. Settings from SCAU_UCTOPS and ^UCOPTS will
		yield to these settings.
		*/

	// array properties ----------------------------------------------------
	// ---------------------------------------------------------------------
	#PROPERTYDEF CSSECTIONS = "boot,DEBUG,DEFINE,INFO,OPTIMIZE,Options,PSL,WARN" class=List private literal
	#PROPERTYDEF cs(,)		class=String protected readonly node="cs"
		/* -------------------------------------------------------------
		Compiler settings. The first level subscript must be one of the
		supported sections.
		Note that the resultClass is defined as String even though the
		sections INFO, OPTIMIZE, and WARN are known to contain Boolean
		values only. A later version of PSLParser may introduce separate
		nodes for those.
		*/

	// ---------------------------------------------------------------------
	#PROPERTYDEF pslCln()	class=PSLColumn protected readonly node="pslCln"
		/* -------------------------------------------------------------
		The cache of Column descriptors. This array property
		is subscripted by table-name.column-name.
		*/

	// ---------------------------------------------------------------------
	#PROPERTYDEF pslCls()	class=PSLClass protected readonly node="pslCls"
		/* -------------------------------------------------------------
		The cache of Class definition descriptors. This array property
		is subscripted by class-name.
		*/

	// ---------------------------------------------------------------------
	#PROPERTYDEF pslMtd()	class=PSLMethod protected readonly node="pslMtd"
		/* -------------------------------------------------------------
		The cache of Method definition descriptors. This array property
		is subscripted by class-name.method-name.
		*/

	// ---------------------------------------------------------------------
	#PROPERTYDEF pslPrp()	class=PSLProperty protected readonly node="pslPrp"
		/* -------------------------------------------------------------
		The cache of Property definition descriptors. This array
		property is subscripted by class-name.property-name.
		*/

	// ---------------------------------------------------------------------
	#PROPERTYDEF pslTbl()	class=PSLTable protected readonly node="pslTbl"
		/* -------------------------------------------------------------
		The cache of Table descriptors. This array property is
		subscripted by table-name.
		*/

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************

	/* ================================================================== */
	/* Initializer (none)						      */
	/* ****************************************************************** */

	/* ================================================================== */
	/* Non-local static methods					      */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
public static Boolean equals( String s1, String s2, Number nCase)
	/* ---------------------------------------------------------------------
	Support function that does case sensitive or case insensitive compares.
	*/
	if 'nCase quit s1=s2
	if nCase =  1 quit s1.upperCase() = s2.upperCase()
	if nCase = -1 quit s1.lowerCase() = s2.lowerCase()
	throw Class.new( "Error", "%PSL-E-Invalid case option "_nCase)
	quit ""

	// ---------------------------------------------------------------------
public static String tryMLiteral( String expr	// M expression to evaluate
		)	// try to replace M expression by its value
	/* ---------------------------------------------------------------------
	Support method that tries to replace an M expression consisting of
	literals only by its value.

	If the M XECUTE fails, or if the length of the resulting literal exceeds
	PSL.maxLitLength, then expr itself is returned, else a strlit or numlit
	representing the value will be returned.
	*/
	type String lit = expr
	do {
		catch xAny {
			// ignore any exception that results from the M XECUTE
		}
		#ACCEPT PGM=Frans S.C. Witte;date=2007-09-21;CR=27800;GROUP=XECUTE
		xecute "S lit="_expr

		// note: order of if-statements is relevant !!
		if lit.length()>PSL.maxLitLength set lit = expr quit
		if 'lit.isNumber() set lit=lit.addQuotes()
	}
	quit lit

	/* ================================================================== */
	/* Non-local instance methods					      */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
public final void addSetting( String section
		, String ident
		, String val
		) // Insert or update parser setting
	/* ---------------------------------------------------------------------
	*/
	if this.CSSECTIONS.contains( section) set this.cs(section, ident) = val
	quit

	// ---------------------------------------------------------------------
public final PSLClass getPSLClass( ret String cid	// either class or class(,)
		)	// return PSLClass instance from cache, load if needed
	/* ---------------------------------------------------------------------
	Support function that returns the specified PSLClass instance
	*/
	set:cid["(" cid = cid.piece("(")
	if 'this.pslCls( cid).exists() do this.loadClass( .cid)
	quit this.pslCls( cid)

	// ---------------------------------------------------------------------
public final PSLColumn getPSLColumn( String cid
		)	// return PSLColumn from cache, load if needed
	/* ---------------------------------------------------------------------
	Support function that returns the specified PSLColumn instance

	NOTES:
	. Current implementation uses pslCln() and pslTbl() from UCGM.m
	*/
	if 'this.pslCln( cid).exists() set this.pslCln( cid) = PSL.getPSLColumn( cid.piece("."), cid.piece(".",2))
	quit this.pslCln(cid)

	// ---------------------------------------------------------------------
public final PSLMethod getPSLMethod( String mid
		)	// return existing PSLMethod instance from cache
	/* ---------------------------------------------------------------------
	Support function that returns the specified PSLMethod instance
	*/
	quit this.pslMtd( mid)

	// ---------------------------------------------------------------------
public final PSLProperty getPSLProperty( String pid
		)	// return existing PSLProperty instance from cache
	/* ---------------------------------------------------------------------
	Support function that returns the specified PSLProperty instance
	*/
	quit this.pslPrp( pid)

	// ---------------------------------------------------------------------
public final PSLTable getPSLTable( String tid, Number lvl
		)	// return PSLTable instance from cache, load and upgrade if needed
	/* ---------------------------------------------------------------------
	Support function that returns the specified PSLTable instance

	NOTES:
	. Current implemantation uses pslCln() and pslTbl() from UCGM.m
	*/
	if 'this.pslTbl( tid).exists() set this.pslTbl( tid) = PSL.getPSLTable( tid, lvl)
	set this.pslTbl( tid) = this.pslTbl(tid).assertLevel( lvl)
	quit this.pslTbl( tid)

	// ---------------------------------------------------------------------
public final String getSetting( String section
		, String ident
		, String def
		) // Obtain parser setting
	/* ---------------------------------------------------------------------
	*/
	if this.CSSECTIONS.contains( section) quit this.cs(section, ident).get( def)
	quit def

	// ---------------------------------------------------------------------
public final Boolean hasSetting( String section
		, String ident
		) // Does parser have setting?
	/* ---------------------------------------------------------------------
	*/
	if this.CSSECTIONS.contains( section) quit this.cs(section, ident).exists()
	quit false

	// ---------------------------------------------------------------------
public final List listPSLMethod( String cls
		)	// return list of all methods of supplied class
	/* ---------------------------------------------------------------------
	Support function that returns all the methods of the supplied class
	*/
	type List lst = Class.new( "List")
	type String iter = cls_ "."

	for  set iter = this.pslMtd( iter).order() quit:iter.piece(".") '= cls  set lst = lst.add( iter.piece(".", 2),,1)
	quit lst

	// ---------------------------------------------------------------------
public final List listPSLProperty( String cls
		)	// return list of all properties of supplied class
	/* ---------------------------------------------------------------------
	Support function that returns all the properties of the supplied class
	*/
	type List lst = Class.new( "List")
	type String iter = cls_ "."

	for  set iter = this.pslPrp( iter).order() quit:iter.piece(".") '= cls  set lst = lst.add( iter.piece(".", 2),,1)
	quit lst

	// ---------------------------------------------------------------------
public final List listSettings( String section
		) // Return List of all elements for which this.hasSetting() returns true
	/* ---------------------------------------------------------------------
	*/
	if 'this.CSSECTIONS.contains( section) quit ""
	type String elm = ""
	type List lst = Class.new("List")
	for  set elm = this.cs( section, elm).order() quit:elm.isNull()  set lst = lst.add(elm)
	quit lst

	// ---------------------------------------------------------------------
public final void loadClass( ret String clsNm)
	/* ---------------------------------------------------------------------
	Load this.pslCls(), this.pslPrp(), and this.pslMtd() with the
	module descriptors of the specified class.

	This method works for Intrinsic Classes, Class Definition Modules, and
	Subroutine Collection Modules.

	Even though this procedure will deal with case mismatches, supplying the
	correct case is preferred, because a case mismatch will cause a full
	search for the classname-as-supplied, even if the name with the correct
	case already occurs in the cache.

	NOTES:
	. It is tempting to place the code of the "if tryRec"-block inside the
		catch block that proctects the call to PSLX. However, this will
		not work with the current exception handling, because that block
		is invoked before the stack is broken down, and this(,) will not
		refer to our this(,), but to the PSLX's this(,).
	. The descriptors for classes that are derived from the OBJECT tables
		are correct for use within PSL. However, in order to derive the
		associated .pslx file, the latest version of OBJECT.G must be
		used, which contains complete and clean data.
	*/
	type literal String OCSEL = "CLASS,SUPERTYPE,PROPDELIM,ISPRIMITIVE,CONSTRUCTOR,ABSTRACT,NOINSTANT,PROPPROC"
	type literal String OMSEL = "CLASS,METHOD,RETURN,PARAMETERS,ROU,VALLIT,DES"
	type literal String OPSEL = "CLASS,PROPERTY,ARRAY,ISREADONLY,RETURN,NOD,POS,ROUTINE"

	if this.pslCls( clsNm).exists() quit

	type Boolean tryNext = false
	type PSLClass clsdes

	do {	// first look at .pslx file
		catch vEx {
			set tryNext = true
		}
		/* Instantiate a PSLX object, use it to extract the descriptors,
		   and merge the data into the cache structures. */
		type String id = ""
		type PSLX pslx = Class.new("PSLX", clsNm)
		set pslx.packageDirs = this.packageDirs

		do pslx.extract()
		set clsNm = pslx.moduleName
		set this.pslCls(clsNm) = pslx.pslCls( clsNm)
		for  set id = pslx.pslMtd(id).order() quit:id.isNull()  set this.pslMtd(id) = pslx.pslMtd(id)
		for  set id = pslx.pslPrp(id).order() quit:id.isNull()  set this.pslPrp(id) = pslx.pslPrp(id)
	}

	if tryNext {	// not found as .pslx file, try OBJECT tables
		/* This should only apply to the deprecated classes that were
		   not converted to .pslx file (Blob, Schema), or that have
		   been discontinued (potentially TranSet). */
		type ResultSet rsCls = Db.select( OCSEL, "OBJECT", "LOWER( CLASS) = :clsNm.lowerCase()")
		if rsCls.next() {
			// class found in OBJECT, derive the PSLClass values
			type Row rwCls = rsCls.getRow()
			if rwCls.class '= clsNm set clsNm = rwCls.class quit:this.pslCls( clsNm).exists()

			set clsdes = Class.new("PSLClass")
			set clsdes.accessLevel = clsdes.accessLevelPUBLIC
			set clsdes.package     = "framework.psl"

			if rwCls.isprimitive = 1 {
				/* There are no classType=1 cases in OBJECT*.
				   Immediate descendants of Primitive are 3,
				   all others 2. */
				type String supercls = rwCls.supertype
				if supercls = clsdes.PRIMITIVECLASS set rwCls.isprimitive = clsdes.classTypePRIM0PROP
				else  set rwCls.isprimitive = clsdes.classTypePRIM0NODE
			}
			if rwCls.propdelim.isNull() set rwCls.propdelim = 124
			// CLASS, CONSTRUCTOR, and PROPPROC are mapped by their equal names
			do rwCls.toObject( clsdes, "supertype=extends,propdelim=delimiter,isPrimitive=classType,abstract=isAbstract,noinstant=isNoInstance")

			set this.pslCls( clsNm) = clsdes

			// use OBJECTMET for this.pslMtd()
			type PSLMethod mtddes
			type ResultSet rsMtd = Db.select( OMSEL, "OBJECTMET", "CLASS = :clsNm")
			while rsMtd.next() {
				set mtddes = Class.new("PSLMethod")
				set mtddes.accessLevel = mtddes.accessLevelPUBLIC
				set mtddes.methodType = mtddes.methodTypeINSTANCE

				type Row rwMtd = rsMtd.getRow()
				if rwMtd.return.isNull() set rwMtd.return = "void"
				// CLASS and METHOD are mapped by their equal names
				do rwMtd.toObject(mtddes, "RETURN=resultClass,PARAMETERS=formalList,ROU=methodProc,VALLIT=inLiteral,DES=comment")
				set this.pslMtd( clsNm_ "."_ rwMtd.method) = mtddes
			}

			// use OBJECTPROP for this.pslPrp()
			type PSLProperty prpdes
			type ResultSet rsPrp = Db.select( OPSEL, "OBJECTPROP", "CLASS = :clsNm")
			while rsPrp.next() {
				set prpdes = Class.new("PSLProperty")
				set prpdes.accessLevel = prpdes.accessLevelPUBLIC

				type Row rwPrp = rsPrp.getRow()
				if rwPrp.pos.isNull() set rwPrp.pos = 0
				// CLASS, and PROPERTY are mapped by their equal names
				do rwPrp.toObject( prpdes, "ARRAY=dimension,ISREADONLY=restricted,RETURN=resultClass,NOD=node,POS=position,ROUTINE=labelref")
				set this.pslPrp( clsNm_ "."_ rwPrp.property) = prpdes
			}
			set tryNext = false
		}	// end clsNm found in OBJECT
	}

	if tryNext {
		/* If the descriptor lookup failed, for .pslx and OBJECT*, and
		   this is a Record descendant, create a default descriptor
		   */
		quit:clsdes.isRecord( clsNm) < 2		// not Record descendant
		
		type PSLTable td = this.getPSLTable( clsNm.extract( 7, PSL.maxStringLength), 0)
		
		set this.pslCls( clsNm) = clsdes.recordMod(td)
	}
	quit

	// ---------------------------------------------------------------------
public final void loadSettings( PSLCC from
		) // Return List of all elements for which this.hasSetting() returns true
	/* ---------------------------------------------------------------------
	*/
	set this.cs(,) = from.cs(,)
	quit

	// ---------------------------------------------------------------------
protected void reset()	// reset all pointers
	/* ---------------------------------------------------------------------
	*/
	kill this.cs(,), this.pslCls(), this.pslCln(), this.pslMtd(), this.pslPrp(), this.pslTbl()
	set this.ucopts = "", this.packageDirs = ""
	quit

	// ---------------------------------------------------------------------
public final void setUcopts( String ucopts) //
	/* ---------------------------------------------------------------------
	Assignment method for the ucopts property. Assigning a value causes the
	file to be read and interpreted.

	This method will fill this.cs() as follows:
	- If ucopts is not empty, then that file will be processed first
		to set the initial options.
	- It reads and interprets the WARN, OPTIMIZE and Options setting from
		the file specified by the environment variable SCAU_UCOPTS.
		Settings obtained from this file will be merged into
		pslPrsr(,), without overwriting existing values.
		This step can and will be performed independent of the setting
		of the boot restriction level.
	- Next, if the boot restriction level is greater than 2, the function
		returns. In that case, only settings from the file specified
		by SCAU_UCOPTS will have been merged.
	- Otherwise it calls ^UCOPTS(.Options) to obtain the default WARN,
		OPTIMIZE and Options settings that are ON for this environment.
		Settings obtained from this call will be merged into the
		PSLParser, without overwriting existing values.

	OUTPUTS:
	. this.cs() filled
		Several subtrees will have been added.
		Options that are already present in the array will not be
		overwritten.

	NOTES:
	. If this.cs("boot","restrictionlevel")<3, then this
		subroutine calls ^UCOPTS(), which shall be appropriate in that
		case.
	. If this.cs("boot","restrictionlevel")>=3, then ^UCOPTS()
		will not have been called. As the compiler expects that all
		entries in the PSL section are defined, a compilation that
		supplies (boot,restrictionlevel)=3 shall also supply values for
		each #PSL settingName.
	*/
	type Number elm
	type String grp
	type List   lst
	type String val

	if this.listSettings( "PSL") '="" quit		// already set

	set this.ucopts = ucopts		// assign value

	// Step 1: Compiler call settings are unconditional
	type String file = this.ucopts
	if 'file.isNull() do {
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		type String path = $$PARSE^%ZFUNC( file, "DIR")
		if file[path set file = file.extract( path.length() + 1, file.length())
		do decodeFile^UCGMC( path, file, this)
	}

	// Step 2: User supplied overwrites
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set file = $$SCAU^%TRNLNM("UCOPTS")
	if 'file.isNull() do {
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		type String path = $$PARSE^%ZFUNC( file, "DIR")
		if file[path set file = file.extract( path.length() + 1, file.length())
		type PSLParser usrOpts = Class.new("PSLParser", "")
		do decodeFile^UCGMC( path, file, usrOpts)
		for grp="WARN","INFO","OPTIMIZE","Options","PSL","DEBUG","boot" do {
			set lst = usrOpts.listSettings( grp)
			for elm=1:1:lst.count() {
				set val = lst.elementAt(elm)
				if 'this.cs( grp, val).exists() set this.cs( grp, val) = usrOpts.getSetting( grp, val)
			}
		}
	}

	// Step 3: Environment standard values (no support for boot/DEBUG/PSL)
	if this.getSetting("boot","restrictionlevel",0)<3 {
		type List Options()

		do ^UCOPTS( Options())
		for grp="WARN","INFO","OPTIMIZE","Options" do {
			set lst = Options( grp).get()
			for elm = 1:1:lst.count() {
				set val = lst.elementAt(elm)
				if val.isNull() quit
				if 'this.cs( grp, val).exists() set this.cs( grp, val) = 1
			}
		}
	
		/* Handle the #PSL settingName value combinations provided by
		   UCOPTS. UCOPTS will supply a value for every PSL setting.
		   */
		set grp="PSL"
		set lst=$$allPSL^UCGMC()
		for elm = 1:1:lst.count() {
			set val = lst.elementAt(elm)
			if 'this.cs( grp, val).exists() set this.cs( grp, val) = Options( grp, val)
		}	
	}

	// Step 4: Force masks
	/* This is coded as a call to UCDTAUTL because Db.select() may be called
	   to obtain one or more of the values. As the module that contains the
	   Db.select() must reside in the UPGRADE group, having the code in a
	   SCM seems easier.
	   */
	do masks^UCDTAUTL( this)
	quit

	/* ================================================================== */
	/* Instance support methods					      */
	/* ****************************************************************** */
 #OPTION ResultClass ON
public String vSIG()	quit "61461^42873^Frans S.C. Witte^21401"	// Signature - LTD^TIME^USER^SIZE
