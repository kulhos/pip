	/*
	ORIG:	Frans S.C. Witte, 2009-01-15
	DESC:	deal with .psl file from FP, SP, or MRPC

	----------- Comments ---------------------------------------------------
	This class implements the TBX interface for pslx files (e.g. of the PSL
	intrinsic mixed-implementation classes).

	See TBXPSL for a discussion.

	Because the early versions of Profile_Framework_v30 used the folder
	dataqwik/pslx to store pslx files, the INSTALL interface calls a utility
	method to convert an absent package folder or the package folder pslx to
	the standard framework package folder.

	----------- Revision History -------------------------------------------
	2009-01-15, Frans S.C. Witte, CR ?????
		Rewritten as replacement of TBXPSLX.m
	*/
	#CLASSDEF extends=TBXTypeInterface
	#PACKAGE framework.tbx

	// =====================================================================
	// Static INSTALL interface (CHECK(), LOAD(), OBS()
	// =====================================================================

	// ---------------------------------------------------------------------
protected static String CHECK( String file, String lmu, String lmd, String lmt)
	/* ---------------------------------------------------------------------
	Old TBX install CHECK interface
	*/
	type static TBXTypeInterface
	quit TBXTypeInterface.returnSUCCESS

	// ---------------------------------------------------------------------
protected static String LOAD( String srcfile	// src/dir/name.pslx
		)	// Old TBX install LOAD interface
	/* ---------------------------------------------------------------------
	The old interface supplies the complete file path.
	Only use the last two pieces (folder + file)
	If folder=dataqwik, strip it as well.
	*/
	type Integer len = srcfile.length("/")
	type String  dir = srcfile.piece("/", 1, len - 2)
	type String file = srcfile.extract( dir.length() + 2, PSL.maxStringLength)

	if file.piece("/") = "dataqwik" set dir = dir_ "/dataqwik", file = file.piece("/", 2)	

	type TBXPSLX tbx = Class.new("TBXPSLX", TBXPSLX.toElement( file))
	quit tbx.elemPut( dir, file_ "."_ tbx.elemType, tbx.tbxTypeFP, "", 0, 0)

	// ---------------------------------------------------------------------
protected static String OBSDQW( String file)
	/* ---------------------------------------------------------------------
	Old TBX install OBSDQW interface
	*/
	set file = TBXPSLX.toElement( file)

	type TBXPSLX tbx = Class.new("TBXPSLX", file)
	quit tbx.elemDrop()

	// =====================================================================
	// Other static methods
	// =====================================================================

	// ---------------------------------------------------------------------
private static String file2Element( String file)
	/* ---------------------------------------------------------------------
	Construct the element by parsing the file (at the class level), and
	prepending the package root.
	cannot occur in PSL package names, it is OK to strip off anything after
	the first dot.
	*/
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String mod = $$PARSE^%ZFUNC(file, "NAME")
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String dir = $$PARSE^%ZFUNC(file, "DIRECTORY")
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type PSLX pslx = Class.new("PSLX", $$FILE^%TRNLNM( mod, dir))

	do pslx.classOnly()

	type PSLClass ocd = pslx.getPSLClass( mod)
	type String  elem = ocd.getPackageRoot() _"/"_ mod
	quit elem

	// ---------------------------------------------------------------------
private static String toElement( String elem)
	/* ---------------------------------------------------------------------
	Normalize the name. Because dots are not allowed in PSL module names and
	cannot occur in PSL package names, it is OK to strip off anything after
	the first dot.
	*/
	if elem.length("/") = 1 quit "framework/"_ elem.piece(".")
	if elem.piece("/") = "pslx" set elem.piece("/") = "framework"
	quit elem.piece(".")

	// =====================================================================
	// Instance interface
	// =====================================================================

	// ---------------------------------------------------------------------
protected String elemDrop()	// drop this element
	/* ---------------------------------------------------------------------
	Deletes $$pslRoot^PSLC()_"/"_this.element_ ".pslx".
	The assumption is that an element of this type has no associated files
	(.psl, .m/.o, .java/.class).
	*/
	#ACCEPT GROUP=ACCESS;CR=?;DATE=2009-01-15;PGM=Frans S.C. Witte
	type String ign = $$DELETE^%OSSCRPT( this.getFullPath())
	quit this.returnSUCCESS

	// ---------------------------------------------------------------------
protected String elemGet( String path	// target path
		, String file		// target file
		) // write the element's data into path/file
	/* ---------------------------------------------------------------------
	Copies $$pslRoot^PSLC()_"/"_this.element_ ".pslx" to path_"/"_file
	*/
	#ACCEPT GROUP=ACCESS;CR=?;DATE=2009-01-15;PGM=Frans S.C. Witte
	type String ign = $$COPYFIL^%OSSCRPT(this.getFullPath(), path_"/"_file)
	quit this.returnSUCCESS

	// ---------------------------------------------------------------------
protected String elemPut(String path	// source path
		, String file		// source file (including extension)
		, Integer reltype	// Release type (1=FP, 2=SP, 3=MRPC)
		, String lmu		// Last modified user
		, Date lmd		// Last modified date
		, Time lmt		// Last modified time
		)	// read contents of element from path/file
	/* ---------------------------------------------------------------------
	Save the supplied path/file as the source code for the current element.
	Copies path_"/"_file to $$pslRoot^PSLC()_"/"_this.element_ ".psl".
	The "last modified" data is currently ignored.

	RETURNS:
	. $$ = "1" (success)

	NOTES:
	. This method expects that this.element contains the package name if the
		module resides in a package.
	*/
	#ACCEPT GROUP=ACCESS;CR=?;DATE=2009-01-15;PGM=Frans S.C. Witte
	type String ign = $$COPYFIL^%OSSCRPT( path_"/"_file, this.getFullPath())
	quit this.returnSUCCESS

	// ---------------------------------------------------------------------
protected void getLastMod( ret String lmu	// user of Last Modification
		, ret Date lmd			// date of Last Modification
		, ret Time lmt			// time of Last Modification
		)	// return the user, date, and time of last modification
	/* ---------------------------------------------------------------------
	Overrides TBXTypeInterface.getLastMod()
	*/
	set lmu = "N.N."

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String filmod = $$FILE^%ZFUNC(this.getFullPath(), "CDT")

	set lmd = filmod.piece(",").toNumber()
	set lmt = filmod.piece(",",2).toNumber()
	quit

	// ---------------------------------------------------------------------
protected Integer getMode()	// Return mode of element
	/* ---------------------------------------------------------------------
	Returns 0 if $$
	Descendant classes shall return
		0 if OBJECTID represents a new element
		1 if OBJECTID represents an existing element
	*/
	type String full = this.getFullPath()
	type Boolean bExists

	#ACCEPT GROUP=BYPASS;CR=?;DATE=2009-01-15;PGM=Frans S.C. Witte
	#BYPASS
	SET bExists=$ZSEARCH(full,0)]""
	#ENDBYPASS

	quit $select(bExists:this.elemModeEXISTS,1:this.elemModeNEW)

	// =====================================================================
	// local support methods
	// =====================================================================

	// ---------------------------------------------------------------------
private String getFullPath()	// return the complete full path name of the element
	/* ---------------------------------------------------------------------
	Support function that composes the full file name of the element by
	prepending the pslRoot and appending ".psl"
	*/
	quit $$pslRoot^PSLC()_"/"_this.element_ "."_ this.elemType
 #OPTION ResultClass ON
public String vSIG()	quit "61492^80137^e0101572^7822"	// Signature - LTD^TIME^USER^SIZE
