
	/*
	ORIG: FSANCHEZ - 04/09/2001
	DESC: PSL Object Class Library

	NOTE:
	Methods Object.order() and Object.query() are implemented through
	psl2m^UCPRIM().

	---- Revision History --------------------------------------------------
	07/04/07 - Frans S.C. Witte - CRs: 27800
		* Modified getClass to call PSLClass.getClassnameExpr()
		* Modified exists to consider classTypePRIMITIVE
		* Removed isPrim (method dropped)
		* Added destroy()

	12/23/05 - Frans S.C. Witte - CRs: 18727 / 18728
		Replaced this. by PSL. and removed #XECUTE

	04/25/05 - Frans S.C. Witte - CRs: 15592 / 15593
		Experimental change: .getClass() will be resolved at runtime for
		Class Record and its descendants, and at compiletime in all other
		cases.

	12/21/04 - Frans S.C. Witte - CRs: 13403 / 13404
		Removed code that has been commented out.
		Added #ACCEPT before #BYPASS

	10/19/04 - Frans S.C. Witte - CRs: 11445 / 11446
		The following subroutines have been moved to UCREF: addValue,
		copy, equals, getPointer, getValue, toString.
		Subroutine isPrimitive now uses $$primDesc^UCPRIM() to construct
		the result.
		#warn and #optimize removed (follow environment defaults).
		Added subroutine data(). Modified code generated for .exists().
 
        05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.
		   
	09/16/03 - Spier CR 6031,6032,6034  - arq 51423
		Retrofit of changes made in v7.0 up to this date into Profile01
		as well as release for v7.0
	*/
	#PACKAGE framework.psl

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit


	// ---------------------------------------------------------------------
data()     // method Object.data; returns Number
	/* ---------------------------------------------------------------------
	Return code for $DATA(). This method is deprecated except for arrays.
	A deprecation warning will be supplied when the method is applied to
	an object for which no descendents are declared.
	Note that this subroutine must use objectVar instead of objectName,
	because $DATA requires a variable.

	NOTES:
	. The type(,) array is visited to see if the .data() is applied to an
		intermediate subscript. This needs to be dealt with when a new
		parser / symboltable is available.
	*/
	#ACCEPT CR=27800;Date=2007-10-09;PGM=Frans S.C. Witte;Group=DEPRECATED; use of type()
	type public String type(,)

	set PSL.return = "$D("_PSL.objectVar_")"

	/* Get the type of this object variable, and the next type in the type(,)
	   array. If the next element has the same name, and more subscripts,
	   then it is an array descendent, and the method is appropriate.
	   Note that this observation heavily depends on the ASCII ordering of
	   "(", ",", and digit/alpha.
	*/
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String varTyp = $$leftSig^UCGM( PSL.objectVar)
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type Number varLev = $$getLevel^UCGM( PSL.objectVar)
	type String nxtTyp = type( varLev, varTyp).order()

	type Boolean bArr= (varTyp.piece("(") = nxtTyp.piece("("))
	if bArr,varTyp["(" do {
		set varTyp = varTyp.extract(1, varTyp.length()-1)
		set bArr = (nxtTyp.extract(1, varTyp.length()) = varTyp)
	}
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte	
	if 'bArr do WARNDEP^UCGM( 2.7, 0, PSL.objectVar _ ".data()")

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$getOpti^UCGM(PSL.objectVar,PSL.objectLevel)>PSL.msrc do setOpti^UCGM(PSL.objectVar,PSL.objectLevel,0)
	quit

	// ---------------------------------------------------------------------
destroy( PSLIdentifier inst	// object instance variable
		, Number level		// do level
		, PSLIdentifier vsig	// variable signature of inst (*3)
		, String pc		// postconditional
		, Number mode		// destroy mode (passed to PSLClass)
		)	// return code that destroys the supplied inst
	/* ---------------------------------------------------------------------
	If the classType is not PSLClass.classTypeREFERENCE, there is no
	destroy code, regardless of the signature of the instance.

	Else, if inst is not an end-node, the destroy code will be a newly
	generated subroutine that iterates over all descendantds and deletes
	each of them individually.

	Else PSLClass.classDestroy() will be returned

	ARGUMENTS:
	(*3) the dimension denoted by vsig shall be greater than or equal to the
		dimension of inst. It is the callers responsibility to ensure
		this. Note that this could probably only occur in the context of
		a kill-statement, e.g. when the declaration specifies
			type Object X()
		and the statement specifies
			kill X(s1,s2)

	NOTES:
	. The first round excludes Record descendants and ResultSets because
		these objects need to call $$patch^UCPATCH(), except if
		subscripted.
	. The vKill() subroutine is coded in PSL even though there will
		probably be not need for special code in Java. However if PSL
		will ever be translated to yet another target language, then
		that target langauge may possibly need special code that deals
		with PSL subtrees.
	*/
	type public PSLParser pslPrsr

	type String cls = vsig.class
	type PSLClass ocd = pslPrsr.getPSLClass( cls)

	if ocd.classType '= ocd.classTypeREFERENCE quit ""

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String code = "", isig = $$leftSig^UCGM(inst)

	if isig '= vsig {
		/* pass values of subscripts in isig as arguments to the call
		   */
		set code = $SELECT(inst["(":","_inst.extract( inst.find("("), inst.length()),1:")")

		type String cmt = "KILL "_ isig_ " of "_ cls_ " "_ vsig

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		type String lbl = $$findSubr^UCGM( "vKill", cmt)
		set code = "D"_ pc_ " "_ lbl_ "(."_ vsig.piece("(")_ code

		quit:PSL.subrouExists( lbl)

		type Number fixed = isig.translate("(",",").length(",")
		type Number total = vsig.translate("(",",").length(",") - 2
		type String fpl = cls_" v0("_ vsig.piece("(",2)
		type String lvn = "v0"
		type String txt = "type String v"_ fixed_ "="""""
		type String indent = "", last = ""
		type Number sl

		for sl = 1:1:fixed-1 {
			set fpl = fpl_", String v"_sl
			set lvn = lvn_ $SELECT(sl>1:",",1:"(")_ "v"_sl
		}
		for sl = fixed+1:1:total set txt = txt_ ",v"_ sl_ "="""""

		type PSLBuffer buf = PSL.openBuffer( "( "_ fpl_")", cmt)

		for sl = fixed:1:total {
			do buf.add( txt)	// add previous line
			set lvn = lvn_ $SELECT(sl>1:",",1:"(")_ "v"_sl
			set txt = indent_"for  set v"_sl_"="_lvn_").order() quit:v"_sl_".isNull()  {"
			set indent = indent_ "  ", last = "} "_ last
		}
		do buf.add( txt)
		do buf.add( indent_ "kill "_ lvn_ ")")
		do buf.add( last)
		do buf.add( "quit")

		do buf.insert( lbl, "void")
	}
	else if (cls = "ResultSet") ! ( ocd.isRecord( cls) > 1) set code = " K"_pc_" "_$$patch^UCPATCH( PSL.subRou, inst, level, PSL.oLvn_ "(+$G("_ inst_ "))")
	else  set code =  ocd.classDestroy( pc, inst, mode)

	quit code

	// ---------------------------------------------------------------------
exists		// method Object.exists; returns boolean
	/* ---------------------------------------------------------------------
	Return code to check if object exists.
	Returns $DATA(objectVar)#2 except for PRIMITIVE classes.
	This is based on the observation that PSL has no means to "deassign"
	an object. So once an object has been instantiated, it will always
	have a value. Note that this mechanism works for optimized RecordXXXX
	objects as well: ObjectVar is used for the "default node" in that case.
	Note that this subroutine must use objectVar instead of objectName,
	because $DATA requires a variable.

	NOTES:
	. In some cases objectName contains something other than a variable (in
		particular @var). These entries will not occur in the symbol
		table, and yield cls="".
	*/
	type public PSLParser pslPrsr
	type static PSLClass

	/* method can only be applied to variable, array node, or arraynode
	   property. Furthermore, tokenize in case of array with literal subs
	   */
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String ref = $$TOKEN^%ZS( PSL.objectVar)

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$isVar^UCGM( ref)		// variable ==> OK
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	else  if $$isArr^UCGM( ref)	// array ==> OK
	else  // check if ref is an arraynode property 
	else  do PSL.error("MISMATCH: Method cannot be applied in this context")

	type String cls = PSL.objectName.class
	if 'cls.isNull(),pslPrsr.getPSLClass(cls).classType = PSLClass.classTypePRIMITIVE set PSL.return = "''$D("_ PSL.objectVar_ ")"
	else  set PSL.return = "($D("_PSL.objectVar_")#2)"

	// if object optimization was turned off for this line, turn it back on
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$getOpti^UCGM(PSL.objectVar,PSL.objectLevel)>PSL.msrc do setOpti^UCGM(PSL.objectVar,PSL.objectLevel,0)
	quit

	// ---------------------------------------------------------------------
getClass     // method Object.getClass; returns string
	/* ---------------------------------------------------------------------
	Turn off optimization, to ensure Reference descendants can be
	interogated at runtime.
	Call PSLClass.getClassnameExpr() to obtain the code.
	*/
	type public PSLParser pslPrsr

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	do setOpti^UCGM( PSL.objectName, PSL.objectLevel, -1)

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type PSLClass ocd = pslPrsr.getPSLClass( $$getClass^UCGM(PSL.objectName))
	set PSL.return = ocd.getClassnameExpr( PSL.objectName)

	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61061^59085^Frans S.C. Witte^10466"	// Signature - LTD^TIME^USER^SIZE
