  	/*
	ORIG: Frans S.C. Witte
	DESC: PSL RowSet class library

	---- Relevant Documents ------------------------------------------------
	* PP-E-02-T-PSL_compilerUpgrades.doc

	---- Comments ----------------------------------------------------------

	This procedure will contain all code that implements the methods of the
	RowSet class. A RowSet is a set of Rows encapsulated into a single
	object. All Rows of the set share the delimiter and column definition.
	The class provides methods to iterate over the row, much like a
	ResultSet. The

	Instantiation:
	. Class.new("RowSet")
		Instantiates a new empty RowSet with default delimiter, and no
		column definition. The RowSet pointer is positioned before the
		first row.
	. Class.new("RowSet","type1 column1, type2 column2, ...")
		Instantiates a new empty RowSet with default delimiter, and the
		supplied column definition. The RowSet pointer is positioned
		before the first row.

	Properties:
	. delimiter
		Specifies the character that is used to separate column values.
		The value must be acceptable for Row.setDelimiter().
		The default value is TAB.
	. columns
		The column definitions.
		The value must be acceptable to Row.setColumns()
		There is no default value

	Methods:
	. void beforeFirst()
		Positions the RowSet before the first row in the set.
	. void loadFromFile( String directory, String filename, Number filetype)
		Loads the RowSet with data from the specified file in the
		specified directory. For all filetypes, the first line of the
		file shall contain a header line that can be used to derive the
		Columns property.
		directory
			Name of the directory to load the file from. This value
			will be assigned to IO.directory
		filename
			The name of the file, including the extension. No
			assumptions will be made about the extension, regardless
			of the supplied filetype. This value will be assigned to
			IO.fileName
		filetype
			The RowSet class will interpret the following types of
			files. All other values are reserved.
			1 = Profile .DAT file
				Column values will be TAB delimited.
				The first line contains the DQ column names.
				This value will be assigned to RowSet.columns,
				without any attempt to derive the data type of
				the underlying columns.
	. Boolean isEmpty()
		Returns if the RowSet is empty.
	. Boolean next()
		Advances the rowset pointer to the next row and returns 1 if the
		rowset pointer points to a Row after the operation.
		Returns 0 if the rowset pointer is after the last row.
	. Row getRow()
		Returns the Row pointed to by the rowset pointer, or "" if the
		rowset pointer is not positioned at a row (e.g. after a call to
		beforeFirst() or when next() returned 0).

	Special purpose nodes:
	. vobj(oid,-2) = column definition
		This node contains the value of RowSet.columns
	. vobj(oid,-3) = delimiter
		This node contains the value of RowSet.delimiter
	. vobj(oid,0) = rowset pointer
		Initially positioned before the first row, incremented by
		RowSet.next()
	. vobj(oid,n) = RowSet Row # n (n = 1++)

	---- Revision History ------------------------------------------------
	07/18/07 - Frans S.C. Witte - CR: 27800
		* Modified call to $$newObj^UCCLASS().
		* Replaced PSL.varPtr by PSL.pslTmpLvn
		* All PSLBuffer.insert() calls now include a resultClass

	07/03/06 - Frans S.C. Witte - CRs: 22060 / 22061
		Added vDel parameter to code generated for classNew()
		Removed code that is no longer referenced.

	01/20/06 - Frans S.C. Witte - CRs: 18163 / 18164
		Modified call to newObj^UCCLASS

	12/02/05 - Frans S.C. Witte - CRs: 18747 / 18748
		Corrections to classNew, ldFrFile

	09/05/05 - Frans S.C. Witte - CRs: 15592 / 15593
		Initial program
	*/
	#PACKAGE framework.psl

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	/* ------------------------------------------------------------------ */
	/* OBJECT INSTANTIATION METHODS                                       */
	/* ------------------------------------------------------------------ */

	// ---------------------------------------------------------------------
classNew	// Class constructor for new RowSet object
	/* ---------------------------------------------------------------------
	*/
	type literal String label = "vRwsNew"

	if 'PSL.subrouExists( label) do {
		type PSLSubrou sr = PSL.addSubrou( label, "(vS,vCol,vDel)", "new RowSet")
		do sr.addCode(" N vOid S vOid="_ $$newObj^UCCLASS("RowSet","vS"))
		do sr.addCode(" S "_ PSL.oLvn_"(vOid,0)=0")
		do sr.addCode(" S "_ PSL.oLvn_"(vOid,-2)=vCol")
		do sr.addCode(" S "_ PSL.oLvn_"(vOid,-3)=vDel")
		do sr.addCode(" Q vOid")
	}

	type String del = "$C(9)"
	if PSL.actual(2).isNull() set PSL.actual(2)="".addQuotes()
	type String list = $$buildList^UCROW( PSL.actual(2),.del)

	set PSL.return = "$$"_ label_ "("_ $$newObjSt^UCCLASS( PSL.var.get())_ ","_ list _ ","_ del_ ")"
	quit

	/* ------------------------------------------------------------------ */
	/* METHOD GENERATING CODE                                             */
	/* ------------------------------------------------------------------ */

	// ---------------------------------------------------------------------
befFir	// RowSet.beforeFirst()
	/* ---------------------------------------------------------------------
	Method generating code for RowSet.beforeFirst
	*/
	set PSL.mcode = PSL.mcode.extract(1, PSL.mcode.length() - PSL.postCond.length() - 2)
	set PSL.mcode = PSL.mcode_ "S"_ PSL.postCond_ " "_ PSL.oLvn_ "("_ PSL.objectName_ ",0)=0"
	set PSL.return = " "
	quit

	// ---------------------------------------------------------------------
getRow	// method ResultSet.getRow; returns Row
	/* ---------------------------------------------------------------------
	Method generating code for RowSet.getRow
	
	NOTES:
	. This code is derived from ResultSet.getRow(). Both deal with "nested"
		references: instance.getRow().coloumn
		If this is the case, a temporary variable of class Row is
		instantiated by setting actual(2) and actual(3) and then call
		classNew^UCROW.
	*/
	type public Number ptr
	type public String tab

	if ptr do { quit			// Nested reference

		type Number ptr=0		// Stop loop
		type Number varLevel=PSL.level
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		type String var=$$nxtSym^UCGM

		set PSL.pslTmpLvn = var		// tell caller
		//set type(varLevel,var)="Row"_tab_(PSL.msrc+1)_tab_"NEW"_tab_(PSL.msrc+1)_tab
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do typeDec^UCGM(var,"Row","NEW"), getRow
	}

	if PSL.var.exists() do {
		set PSL.actual(3) = PSL.oLvn_ "("_ PSL.objectName_ ",-3)"
		set PSL.actual(2) = PSL.oLvn_ "("_ PSL.objectName_ ",-2)"
		do classNew^UCROW
	}

	type String cursor = PSL.oLvn_ "("_ PSL.objectName_ ",0)"
	set PSL.return= "$S("_ cursor_ ">0:$G("_PSL.oLvn_ "("_ PSL.objectName_ ","_ cursor_ ")),1:"""")"
	quit

	// ---------------------------------------------------------------------
isEmpty	// RowSet.isEmpty()
	/* ---------------------------------------------------------------------
	Method generating code for RowSet.isEmpty
	*/
	set PSL.return = "($O("_ PSL.oLvn_ "("_ PSL.objectName_ ",""""),-1)=0)"
	quit

	// ---------------------------------------------------------------------
ldFrFile	// RowSet.loadFromFile()
	/* ---------------------------------------------------------------------
	Method generating code for RowSet.loadFromFile

	INPUTS:
	. PSL.actual(1) = Directory
	. PSL.actual(2) = Filename
	. PSL.actual(3) = FileType
	*/
	if PSL.actual(1).isNull() set PSL.actual(1) = "".addQuotes()
	if PSL.actual(2).isNull() do PSL.error("RowSet.loadFromFile: Filename required")
	if PSL.actual(3).isNull(1) set PSL.actual(3) = 1

	/* Reset assignment expression of properties.
	   NOTES: the call to propReset^UCGM() shall be encapsulated as a method
	   of PSLIdentifier. */
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	do resetProps^UCGM( PSL.objectName)

	set PSL.return = "vRwsLFF"

	if 'PSL.subrouExists( PSL.return) do {
		type PSLBuffer buf = PSL.openBuffer("(String vOid, String vDir, String vFil, Number vTyp)","RowSet.loadFromFile")

		do buf.add("type IO vIO = Class.new(""IO"")")
		do buf.add("set vIO.directory = vDir")
		do buf.add("set vIO.fileName = vFil")
		do buf.add("set vIO.openParams = ""READ""")
		do buf.add("set vIO.recordSize = 32767")
		do buf.add("do vIO.open()")

		do buf.add("type Number vEr")
		do buf.add("type Number vPtr = 1")
		//do buf.add("if vTyp=0 do {")
		//do buf.add("  for vPtr=1:1 set "_ PSL.oLvn_"(vOid,vPtr) = vIO.read(.vEr)) if vEr quit")
		//do buf.add("}")
		do buf.add("if vTyp=1 do {")
		do buf.add("  set "_ PSL.oLvn_"(vOid,-3) = 9.char()")
		do buf.add("  set "_ PSL.oLvn_"(vOid,-2) = vIO.read(.vEr).translate(9.char()_10.char()_13.char(),"","")")
		do buf.add("  for vPtr=1:1 set "_ PSL.oLvn_"(vOid,vPtr) = vIO.read(.vEr).translate(10.char()_13.char()) if vEr quit")
		do buf.add("}")
		do buf.add("kill "_ PSL.oLvn_"(vOid,vPtr) set "_ PSL.oLvn_"(vOid,0) = 0")
		do buf.add("for  set vPtr="_ PSL.oLvn_"(vOid,vPtr).order() quit:vPtr=""""  kill "_ PSL.oLvn_"(vOid,vPtr)")
		do buf.add("do vIO.close()")
		do buf.add("quit")

		do buf.insert( PSL.return, "void")
	}
	set PSL.return = PSL.return_"("_ PSL.objectName_","_ PSL.actual(1)_","_ PSL.actual(2)_","_ PSL.actual(3)_")"
	quit

	// ---------------------------------------------------------------------
next	// RowSet.next()
	/* ---------------------------------------------------------------------
	Method generating code for RowSet.next
	*/
	set PSL.return = "vRwsNxt"

	if 'PSL.subrouExists( PSL.return) do {
		type PSLSubrou sr = PSL.addSubrou( PSL.return, "(vOid)", "RowSet.next", 0)
		do sr.addCode( " N vLst S vLst=$O("_ PSL.oLvn_ "(vOid,""""),-1)")
		do sr.addCode( " I "_ PSL.oLvn_ "(vOid,0)'>vLst S "_ PSL.oLvn_ "(vOid,0)="_ PSL.oLvn_ "(vOid,0)+1")
		do sr.addCode( " Q "_ PSL.oLvn_ "(vOid,0)'>vLst")
	}
	set PSL.return = "$$"_ PSL.return_"("_ PSL.objectName_")"
	quit

	/* ------------------------------------------------------------------ */
	/* MISCELLANEOUS FUNCTIONS AND SUBROUTINES                            */
	/* ------------------------------------------------------------------ */

	// ---------------------------------------------------------------------
public colSub(	String context(),	// context data (*1)
		String table,		// name of table (*2)
		String column)		// name of column (*3)
	/* ---------------------------------------------------------------------
	This function is the column substitution handler for RowSet instances.
	Its signature conforms to the signature expected by qrySub^UCDBR

	It will return a string of the form vRowInst.column. the name of the
	Row instance variable will be taken from context("Row").
	The column name will be translated to lowercase to conform to the
	programming conventions of column name properties.

	ARGUMENTS:
	. context()
		This function expects that context("Inst") will contain the name
		of the Row instance variable that was the target of a call to
		RowSet.getRow().
	. table
		The name of the table is completely ignored. It is the callers
		responsibility to ensure that the tablename is 'correct'.
	. column
		The name of the column. This value is unconditionally translated
		to lowercase, and appended as the Row property.

	OUTPUTS:
	. $$ = context("Inst").get("vR")_"."_column.lowerCase()

	NOTES:
	. Although neither the tablename nor the columnname are validated, the
		call itself is harmless. A compiletime (or runtime) exception
		may occur if the caller tries to use the returned value in a PSL
		source line.
	*/
	quit context("Inst").get("vR")_"."_column.lowerCase()
 #OPTION ResultClass ON
public String vSIG()	quit "61293^42828^Frans S.C. Witte^12373"	// Signature - LTD^TIME^USER^SIZE
