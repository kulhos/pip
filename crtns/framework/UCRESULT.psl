	/*
	 ORIG: FSANCHEZ - 01/15/98
	 DESC: Library of ResultSet methods

	---- Revision History --------------------------------------------------
	2008-10-20 Frans S.C. Witte, CR 35741/35918/35922
		* Added vOff parameter in call to vNewOpen^vRsultSet.

	2008-10-04, Frans S.C. Witte, CR 35741/35828/36013
		* Added support for LITERAL isEmpty.
		* Modified LitFetch, getRow, and getCol to use vResultSet
		* Added LitOpen (copied and adapted from UCDB)
		* Removed bchPatch (no longer called)

	05/18/07 - Frans S.C. Witte - CR: 27800
		* DQ type "B" now maps to PSL Primitive type ByteString
		* Cleaned up inproper use of List occurrences
		* All PSLBuffer.insert() calls now include a resultClass
		* Replaced PSL.isRecord() by PSLClass.isRecord()

	03/30/07 - Frans S.C. Witte - CR: 26364
		Turned bchPatch into a no-op (see intro of that subroutine).

	09/28/06 - Frans S.C. Witte - CRs: 22719 / 20613
		* Corrected getCol for single column select and PROTECT.exist()
		* Documented vobj(rs,.01,p)
		* Added $$getRowRt() to derive ResultSet.getRow().getColumns()
		  value ar runtime for dynamic ResultSets.
		* Renamed vgetCol to vRsGetCol in generated code.

	07/21/06 - Frans S.C. Witte - CRs: 22273 / 22274
		* Actual(1) in getRow is now optional because it will not be
		  passed by getRowProt.
		* Replaced long names

	03/17/06 - Frans S.C. Witte - CRs: 20280 / 18164
		* Modified ppFetch to use PSLLabelRecord metods and properties.

	11/15/05 - Frans S.C. Witte - CRs: 18163 / 18164
		* Replaced reference to PSL.varPtr (no longer public) by
		  PSL.pslTmpLvn (see getRow)
		* getRow does no longer reset lvn PSL.class
		* ppFetch now generates M code not PSL code, because it is called
		  after all PSL source code hes been handled.

	11/15/05 - Frans S.C. Witte - CRs: 18727 / 18728
		* Replaced this. by PSL. and removed #XECUTE DO init^UCMETHOD

	08/30/05 - Frans S.C. Witte - CRs: 15592 / 15593
		* Modified description of vobj() structure to include flat files
		* Subroutine ET commented out (not called).

	04/07/05 - Frans S.C. Witte - CRs: 14919 / 14920
		* $$rdb^UCDB() changed to $$rdb^UCDBRT() (1 occurrence)
		* Added documentation that describes vobj() structure of ResultSet
		  object.
		* adapted getCol and getColRt to use redefined select-list.
		* Modified subroutines ppFetch and fetchPatch to correct problem
		  with vFetch() call replacement

	10/22/04 - Frans S.C. Witte - CRs: 13403 / 13404
		Modified subroutine getRow: removed setting / referencing of
		primtyp(), added $GET() around node for row protection.
		Modified subroutine getCol to handle getColProt in all possible
		cases (and use of $EXTRACT()).
		Removed explicit "WARN" And "#OPTIMIZE" (no need to
		override environment settings).
		.data() replaced by .exists() or .order().
		Added quit at beginning of code.
 
        05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

        09/16/03 - Spier CR 6031,6032,6034  - arq 51423
             Retrofit of changes made in v7.0 up to this date into Profile01
             as well as release for v7.0
	
	 06/05/03 - Spier
		    Modified getColRt section to remove extract from -3
		    level of resultset
		    Modified ppfetch section to add #accept into buffer
		    code prior to xecute command

  	 05/21/03 - FSANCHEZ
		    Moved program to PSL procedure & added support for the
	            Row class in the getRow method

	 03/17/03 - GIRIDHARAN - 45497
		     Included a call to MAP^DBMAP in the getCol section for a
		     relational database
	
	 02/14/03 - SPIER - 51423
		    bug fixes
	 01/10/03 - SPIER - 51423
		    Bug fixes for 51089 release
	
	 10/15/02 - Sanchez/SPIER - 51089
		    Modifications for v7.0 enhancements
	*/
	#PACKAGE framework.psl

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	// ---------------------------------------------------------------------
isEmpty	// method ResultSet.isEmpty; returns Logical

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$getScope^UCGM( PSL.objectName, PSL.objectLevel) = "LITERAL" {
		#ACCEPT GROUP=ACCESS;CR=35741;DATE=2008-10-04;PGM=Frans S.C. Witte
		type Number rs = $$getExpr^UCGM( PSL.objectName, PSL.objectLevel)
		set PSL.return = $$vIsEmpty^vResultSet( rs)
	}
	else {
		set PSL.return = "'$G(vobj("_ PSL.objectName_ ",0))"
		if PSL.objectName.optimize() set PSL.return = PSL.patch( PSL.return)
	}
	quit
	
	// ---------------------------------------------------------------------
getRecord	// method DbSet.getRecord; returns Record<class>, classed by identifier

	type public PSLTable pslTbl()
	type static PSLClass	

	type String lvn,par,table
	type List keys
	
	set PSL.class = PSL.var.class
	if PSLClass.isRecord( PSL.class)=0 do PSL.error("Invalid identifier class: "_ PSL.class) quit
	
	set table = PSLClass.tableNameOf( PSL.class)
	
	type PSLTable td = $$caPslTbl^UCXDD( pslTbl(), table, 0)
	
	set keys=td.primaryKeys,par=""
	

	if keys.count()=1 set par=":vobj("_ PSL.objectName_")"

	if keys.count()>1 {
		type Number i
		for i=1:1:keys.length(",") set par=par_",:$P(vobj("_ PSL.objectName_"),$C(9),"_i_")"
		set par=par.extract(2,par.length())
	}

	set PSL.actual(1)=table.addQuotes()
	set PSL.actual(2)=par.addQuotes()
	set PSL.actual(3)=1

	do getRecord^UCDB	
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	do setOpti^UCGM( PSL.var, PSL.varLevel,0)
	quit

	// ---------------------------------------------------------------------
getRow	// method ResultSet.getRow; returns Row
	/* ---------------------------------------------------------------------
	INPUTS:
	. PSL.actual()
		If and only if called for ResultSet.getRow().
		Absent if called for ResultSet.getRowProt()
	. public Number ptr = character pointer
		When ResultSet.getRow() occurs as nested property (see NOTES)

	OUTPUTS:
	. PSL.return = code to return current row, delimited as requested
	. PSL.pslTmpLvn = symbol allocated for temporary Row instance
		This symbol will also occur in struct("Row"). This is needed to
		be able to translate columnnames to positions within the row.

	NOTES:
	. Because the result of ResultSet.getRow() is a Row object, and the
		programmer may want to access "properties" of the Row, the
		column definition of the Row object must be stored in a
		temporary variable.
	. When ptr>0, this subroutine redeclares var and varLevel. These names
		shall match the names used by the caller.
	. The use of PROTECT as public variable is bad. This shall be modified
		as follows:
		- this subroutine shall be redeclared as getRow( Boolean PROTECT)
		- All occurrences of PROTECT.exist() shall be replaced by
			PROTECT
		- the OBJECTMET.ROUTINE entry for ResultSet.getRow() shall be
			modified to: getRow^UCRESULT(0)
		- the OBJECTMET.ROUTINE entry for ResultSet.getRowProt() shall
			be modified to: getRow^UCRESULT(1)
	*/
	type public Number ptr

	if ptr do { quit			// Nested reference

		type Number ptr=0		// Stop loop
		type Number varLevel=PSL.level
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		type String var=$$nxtSym^UCGM

		set PSL.pslTmpLvn = var		// tell caller
		//set type(varLevel,var)="Row"_tab_(PSL.msrc+1)_tab_"NEW"_tab_(PSL.msrc+1)_tab
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do typeDec^UCGM(var,"Row","NEW"), getRow
	}

	type public String PROTECT		// Signal from getRowProt 

	type String del = PSL.actual(1).get()	// absent if PROTECT=1
	type String list = PSL.actual(2).get()	// absent if PROTECT=1

	if del.isNull() set del="$C(9)"

	if list.isNull(),PSL.var.exists() do {	// Default to SELECT
		type public String struct(,,,)
		type public String tab

		type Number newPtr
		type String attrib,select,record

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set newPtr = $$getNew^UCGM( PSL.objectName, PSL.objectLevel)
		//#ACCEPT DATE=4/22/03; PGM=Frank Sanchez; CR=Frank Sanchez
		set record=struct("s",PSL.subRou,newPtr,PSL.objectName).get()
		set select=record.piece(tab,4)
		set attrib=record.piece(tab,6)

		set list=select.piece(" FROM ",1)

		if 'list.isNull() {
			/* Literal SELECT clause, can resolve Type and Name at
			   compile time.
			   */
			type Number i
			for i=1:1:list.length(",") do {

				type String att,col

				set col=list.piece(",",i)
				set att=attrib.extract(((i-1)*2)+1)
 
				if "TUF"[att set att="String"	
			        else  set att="ByteString,Boolean,Date,Memo,Number,Number,Time".piece(",","BLDMN$C".find(att)-1)

				set list.piece(",",i)=att_" "_col
			}		
			set list=list.addQuotes()
		}
		else  {
			/* Dynamic select, need to defer until runtime.
			   Use vobj(vOid,-3) for columns and vobj(vOid,-4) for
			   types.
			   */
			set list=$$getRowRt
			#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
			if PSL.objectName.optimize() do setOpti^UCGM( PSL.objectName, PSL.objectLevel, -1) 
		}
	}

	if 'list.isNull(),PSL.var.exists() do {

		set PSL.actual(3) = del
		set PSL.actual(2) = list
		do classNew^UCROW
	}

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$getScope^UCGM( PSL.objectName, PSL.objectLevel) ="LITERAL" do { quit
		
		if del="$C(9)" do PSL.error("<tab> delimiter is illegal") quit

		#ACCEPT GROUP=ACCESS;CR=35741;Date=2008-10-04;PGM=Frans S.C. Witte
		type Number rs = $$getExpr^UCGM( PSL.objectName, PSL.objectLevel)
		set PSL.return = vobj(rs).get()

		#ACCEPT DATE=4/22/2003; PGM=Frank Sanchez; CR=Frank Sanchez
		xecute "S del="_del
		set PSL.return = PSL.return.translate(9.char(), del)
		set PSL.return = PSL.return.addQuotes()
	}

	set PSL.return="vobj("_PSL.objectName_")"
	if PROTECT.exists() set PSL.return="$G("_PSL.return.extract(1,PSL.return.length()-1)_",.1))"

	if '(del="$C(9)") set PSL.return="$TR("_PSL.return_",$C(9),"_del_")"

	if PSL.objectName.optimize() set PSL.return=PSL.patch(PSL.return)

	//if PSL.class="Row",PSL.var.exists() set PSL.class=PSL.var.class

	quit

	// ---------------------------------------------------------------------
private getRowRt()	// Generate subroutine to get Row.getColumns() at runtime
	// ---------------------------------------------------------------------
	type literal String label = "vRsRowGC"

	if 'PSL.subrouExists(label) {

		type PSLBuffer buf = PSL.openBuffer("(List vNms,String vTps)","Runtime ResultSet.getRow().getColumns()")

		do buf.add("type public String vobj(,)")
		do buf.add("")
		do buf.add("type String vL="""",vN,vT type Number vO")
		do buf.add("for vO=1:1:vNms.count() {")
		do buf.add("  set vN=vNms.elementAt(vO)")
		do buf.add("  set vT=vTps.extract((vO-1)*2+1)")
		do buf.add("  if ""TUF""[vT S vT=""String""")	
		do buf.add("  else  set vT=""ByteString,Boolean,Date,Memo,Number,Number,Time"".piece("","",""BLDMN$C"".find(vT)-1)")
		do buf.add("  set vL.piece("","",v0)=vT_"" ""_vN")
		do buf.add("}")
		do buf.add("quit vL")

		do buf.insert(label, "String")
	}
	quit "$$"_ label_ "("_ PSL.oLvn_ "("_ PSL.objectName_ ",-3),"_ PSL.oLvn_ "("_ PSL.objectName_ ",-4))"

	// ---------------------------------------------------------------------
getCol	// method ResultSet.getCol; returns String
	/* ---------------------------------------------------------------------
	NOTES:
	. See getCol for rewrite with respect to PROTECT
	*/
	
	type public Number ER
	type public String %DB
	type public String PROTECT	/* Signal from getColProt */
	type public String struct(,,,)
	type public String tab		// used as delimiter in struct(,,,)

	type Number newPtr
	type String del
		
	type String colExpr = PSL.actual(1)
	if colExpr.isNull() do PSL.error("Column parameter required")
	
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set newPtr = $$getNew^UCGM( PSL.objectName, PSL.objectLevel)
	//#ACCEPT DATE=4/22/03; PGM=Frank Sanchez; CR=Frank Sanchez
	type String record = struct("s",PSL.subRou,newPtr,PSL.objectName).get()
	type List colList  = record.piece(tab,4).piece(" FROM ")
	
	set PSL.return="vobj("_ PSL.objectName
	
	/* PROTECTION uses $EXTRACT() and requires $GET() in case Db.select did
	   not include /PROTECTION=1 or /PROTECTION=2
	   Normal retireval uses $PIECE()
	*/
	if PROTECT.exists() set PSL.return = "$E($G("_ PSL.return_ ",.1)),"
	else                set PSL.return = "$P("_ PSL.return_ "),$C(9),"
	
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if colList.isNull()&(colExpr'?1N.N)!$$isVar^UCGM(colExpr) do { quit
		

		set PSL.return=PSL.return_ $$getColRt_ colExpr_ "))"
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do setOpti^UCGM(PSL.objectName,PSL.objectLevel,1)
	}

	if colExpr'?1N.N do { if ER quit 

		set colExpr=colExpr.stripQuotes().upperCase()
		/* ======== old code replaced by CR14919 ========
		if $$rdb^UCDBRT() do MAP^DBMAP(%DB,.PSL.table,.colExpr)

		type Number i
		for i=1:1:colList.length(",") if colExpr=colList.piece(",",i) quit
		if  set colExpr=i
		======== end old code replaced by CR14919 ======== */

		type Number i = colList.position( colExpr)
		if i > 0 set colExpr = i
		else  do PSL.error("Column expression: "_colExpr_" is not in the select list: "_colList)
	}

	if 'colList.isNull(),colExpr,colExpr>colList.count() do PSL.error("Column reference ("_colExpr_") is greater than selected columns ("_colList.count()_")") quit 
	
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$getScope^UCGM( PSL.objectName, PSL.objectLevel) = "LITERAL" do { quit

		#ACCEPT GROUP=ACCESS;CR=35741;Date=2008-10-04;PGM=Frans S.C. Witte
		type Number rs = $$getExpr^UCGM( PSL.objectName, PSL.objectLevel)
		set PSL.return = vobj(rs).get()
		set PSL.return = PSL.return.piece(tab,colExpr)
		set PSL.return = PSL.return.addQuotes()
	}

	set PSL.return = PSL.return_ colExpr_ ")"	

	/* If the column "list" contains a single column, don't bother to take
	   $PIECE() (getCol) or $EXTRACT() (getColProt). */
	if colExpr=1,colList.count()=1 do {

		if 'PSL.objectName.optimize() quit
		set PSL.return = "vobj("_ PSL.objectName
		if PROTECT.exists() set PSL.return = "$G("_ PSL.return_ ",.1)"
		set PSL.return = PSL.patch( PSL.return_")")
	}

	else  if PSL.objectName.optimize() set PSL.return=PSL.patch(PSL.return)

	quit

	// ---------------------------------------------------------------------
getColProt	// method ResultSet.getColProt; returns String

	type String PROTECT=""	 	// Used by getCol
	do getCol
	quit

	// ---------------------------------------------------------------------
private getColRt()	// Return column position at runtime

	type literal String label="vRsGetCol"

	if ' PSL.subrouExists(label) {

		type PSLBuffer buf = PSL.openBuffer("(Number object,Number column)","Runtime ResultSet.getCol()")

		do buf.add("type public String vobj(,)")
		do buf.add("")
		do buf.add("if column.isNull() quit """"")
		do buf.add("if column quit column")
		do buf.add("")
		do buf.add("type List select = {List}(vobj(object,-3).piece("" FROM ""))")
		do buf.add("type Number pos = select.position(column,"","")")
		do buf.add("quit pos")

		do buf.insert(label, "Number")
	}
	quit "$$"_ label_ "("_ PSL.objectName_ ","

	// ---------------------------------------------------------------------
getRowProt	// method ResultSet.getRowProt; returns String

	type String PROTECT=""	 	// Used by getRow
	do getRow
	quit

	// ---------------------------------------------------------------------
fetch	// method ResultSet.next; returns Logical

	type public String postProc()
	type public String struct(,,,)
	type public String tab

	type Number newPtr,seq
	type String record

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$getScope^UCGM( PSL.objectName, PSL.objectLevel) = "LITERAL" do LitFetch( PSL.objectName, PSL.objectLevel) quit

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set newPtr = $$getNew^UCGM( PSL.objectName, PSL.objectLevel)

	//#ACCEPT DATE=4/22/03; PGM=Frank Sanchez; CR=Frank Sanchez
	set record=struct("s",PSL.subRou,newPtr,PSL.objectName).get()

	set seq=record.piece(tab,2)

	if 'seq.isNull() do { quit

		set PSL.return="$$vFetch"_seq_"("_ PSL.objectName_")"
		if PSL.objectName.optimize() set PSL.return = PSL.patch( PSL.return)
	}

	set postProc("fetch")="ppFetch^"_ %RoutineName
	set struct("fetch", PSL.subRou, PSL.msrc, PSL.objectName)=""
	set PSL.return = "$$vFetch("_ PSL.objectName_")"

	quit

	// ------------------------------------------------------------------
private LitOpen( PSLIdentifier var,
		String select,		// select clause
		String from,		// from clause
		String where,		// where clause
		String orderby,		// orderby clause
		String groupby,		// groupby clause
		String qual)		// qualifiers
	/* ------------------------------------------------------------------
	Target variable of ResultSet (PSL.var) has LITERAL scope.
	Create a new object and open the cursor now.

	Supplying a $STACK offset is challenging here. The ResultSet should
	be closed before the compilation of the current subroutine finishes.
	But that is impossible to express in a $STACK value. By supplying
	one, almost any PSL runtime exception (including those thrown on
	purpose) are likely to close a literal RDB resultset prematurely.
        */
	type Number rs = $$vNewOpen^vResultSet(select,from,where,orderby,groupby,qual,1)

	#ACCEPT GROUP=ACCESS;CR=35741;DATE=2008-10-04;PGM=Frans S.C. Witte
	do typeFldSet^UCGM( var, 5, rs)
	set PSL.return = rs
	quit

	// ---------------------------------------------------------------------
LitFetch(PSLIdentifier var, Number lvl)	// ResultSet.next for Literal scope
	/* ---------------------------------------------------------------------
	This subroutine fetches a row when the scope of the ResultSet is
	LITERAL. The objectID of the ResultSet is stored in the expr field of
	the type entry of var.
	*/
	#ACCEPT GROUP=ACCESS;CR=35741;DATE=2008-10-04;PGM=Frans S.C. Witte
	type Number rs = $$getExpr^UCGM( var, lvl)

	set PSL.return = $$vFetch^vResultSet(rs)

	quit

	// ---------------------------------------------------------------------
ppFetch	// Post processor for fetch methods
	/* ---------------------------------------------------------------------
	This suroutine will be invoked because fetch^UCRESULT has set
	postProc("fetch")="ppFetch^"_$T(+0). It will do this, when it has
	detected a ResultSet.next() on an instance that has not been opened in
	the same subroutine. It will have inserted a call to vFetch(rsoid),
	passing the ResultSet instance variable.

	For each (local) subroutine that contains a ResultSet.next() without a
	ResultSet.open(), try to replace the vFetch() call by vFetchN() of the
	caller. This can only be done if all of the following conditions are
	satisfied:
	* The accessibility of the subroutine is local (i.e. neither public nor
		private.
	* There is only one call to this subroutine.
	* The calling subroutine contains only one ResultSet.open for the
		actual ResultSet parameter that is bound to a formal ResultSet
		parameter.

	If, after applying this replacement, there are still entries left in
	struct("fetch"), the code for the vFetch() subroutine will be appended.

	NOTES:
	. This subroutine is called after all PSL source code has been
		processed. So this subroutine must deliver its additions as M
		code.
	*/	
	type public String called(,)
	type public PSLParser pslPrsr
	type public String struct(,,,)
	type public String tab

	type Number line
	type String call,calledBy,cls,frmlList,frmlObj,label,subRou
	type PSLMethod omd

	set subRou="",line="",frmlObj="",cls = pslPrsr.moduleName

	for  set subRou =struct("fetch",subRou).order() quit:subRou.isNull()  do {

		set label=subRou.piece("(",1)

		//if '$$hasSubr^UCGM(label) quit		// not enough data
		//if labels(label).accessLevel>0 quit	// public or private

		//set lr = labels( label)

		if 'pslPrsr.pslMtd( cls_"."_subRou).exists() quit	// ??? not enough data
		set omd = pslPrsr.pslMtd( cls_"."_subRou)
		if omd.accessLevel '= 0 quit		// not local

		set label = label_ "("
		set call = called(label).order()
		if 'call.beginsWith(label) quit		// no calls

		set calledBy=called(call,"").order()
		if calledBy.isNull() quit		// no calls
		if 'called(call,calledBy).order().isNull() quit	// multiple

		/* a single call to this subroutine occurs.  Build the
		   formal-to-actual mapping for all ResultSet parameters */
		type String f2a()
		type String actList = call.extract( call.find("("), call.length() - 1)
		type String ap,fp type Number p
		for p = 1:1:actList.length(",") do {
			set ap = actList.piece(",", p)
			if ap.piece(" ")'="ResultSet",ap.piece(" ")'="DbSet" quit

			if omd.getFpClass( p) '= ap.piece(" ") quit		// type mismatch
			set ap = ap.piece(" ",2) if ap.isNull() quit		// no class (ap)
			set f2a( omd.getFpVsig( p)) = ap.piece(" ",2)
		}

		for  set line = struct("fetch",subRou,line).order() quit:line.isNull()  do {
			for  set frmlObj = struct("fetch",subRou,line,frmlObj).order() quit:frmlObj=""  do {
				if 'f2a(frmlObj).exists() quit	// not mapped
				do fetchPatch(subRou,calledBy,line,frmlObj,f2a(frmlObj))
			}
		}
	}

	if struct("fetch","").order()="" quit

	/* 
	Build the list(label) array of queries to mask from code generation
	that performs runtime indirection.
	*/

	type String list(),var,z
	set (line,subRou,var)=""

	for  set subRou=struct("s",subRou).order() quit:subRou.isNull()  do {
		for  set line=struct("s",subRou,line).order() quit:line.isNull()  do {
			for  set var=struct("s",subRou,line,var).order() quit:var.isNull()  do {
				set z=struct("s",subRou,line,var)
				if z.piece(tab,2) set list(z.piece(tab,2))=""
			}
		}
	}

	type Number i

	type PSLSubrou sr = PSL.addSubrou( "vFetch", "(vRs)", "Runtime fetch", 0)
	do sr.addCode(" N vPgm,vTag")
	do sr.addCode(" S vPgm=$TEXT(+0),vTag=vobj(vRs,-2)")

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	for i=1:1 quit:'$$hasSubr^UCGM("vOpen"_i)  if 'list(i).exists() do {

		type String tag="vFetch"_i
		do sr.addCode(" I vTag=(""$$"_tag_"^""_vPgm) Q $$"_tag_"(vRs)")
	}

	// Label is not in current routine, xecute the call
	do sr.addCode(" X ""set vTag=""_vTag_""(vRs)""")
	do sr.addCode(" Q vTag")

	quit

	// ---------------------------------------------------------------------
private fetchPatch( String subRou,
		String calledBy,
		Number line,
		String frmlObj,
		String actObj)

	type public String msrc()
	type public String struct(,,,)

	type String mcode,p1,p2,rec

	set mcode=msrc(line+1).get() if mcode.isNull() quit  // some kinda bug!!!

	//set actObj=frmlObj			 // Init to global

	//set z=$order(struct("s",calledBy,"")) if z.isNull() quit
	//set actObj=$order(struct("s",calledBy,z,"")) if actObj.isNull() quit

	/* ensure that actObj is instantiated only once in calledBy */
	type Number count = 0
	type String z = ""
	for  set z = struct("s",calledBy,z).order() quit:z.isNull()  do {
		if 'struct("s",calledBy,z,actObj).exists() quit
		set count = count + 1
		set rec = struct("s",calledBy,z,actObj)
	}
	if count'=1 quit

	kill struct("fetch",subRou,line,frmlObj)

	/*
	Now -- insert a test here to make sure that the actual parameter
	is either a formal parameter or a global scope variable
	*/

	//set rec=struct("s",calledBy,z,actObj)

	/* replace vFetch(fp) call in subrou by vFetchN(fp) call where N is the
	   sequence number of the vOpen/vFetch pair of the actual parameter */ 
	set p1="$$vFetch("_frmlObj_")",p2="$$vFetch"_rec.piece(9.char(),2)_"("_frmlObj_")"

	if '(p2[p1) for  quit:'(mcode[p1)  set mcode=mcode.piece(p1,1)_p2_mcode.piece(p1,2,mcode.length())
	set msrc(line+1)=mcode
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61293^42809^Frans S.C. Witte^23895"	// Signature - LTD^TIME^USER^SIZE
