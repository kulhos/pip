	/*
	ORIG:	Frans S.C. Witte, 2007-06-23
	DESC:	Class Definition Module for PSL class PSLClass

	---- Comments ----------------------------------------------------------

	---- Revision History --------------------------------------------------
	2009-04-02, Frans S.C. Witte, CR 39242
		Turned getPackageRoot(), inPackage(), isDescendantOf() methods
		into 'final' methods.

	07/08/2008 - RussellDS - CR30801
		Added recordMod() class.
	
	06/22/07 - Frans S.C. Witte - CR 27800
		New unit
	*/
	#PACKAGE framework.psl
	#CLASSDEF extends=Primitive public delimiter=9

	/* ---------------------------------------------------------------------
	class - name of class
		*/
	#PROPERTYDEF class		class=String public position=2

	/* ---------------------------------------------------------------------
	extends - name of ancestor class
		*/
	#PROPERTYDEF extends		class=String public position=3

	/* ---------------------------------------------------------------------
	delimiter - ascii value of property delimiter
		*/
	#PROPERTYDEF delimiter = 124	class=Number public position=4

	/* ---------------------------------------------------------------------
	classType - type of class according to one of the following integer
		values:
		- classTypeNATIVE denotes a non-PSL module
			For MTL, this denotes that the PSLCLass-, and PSLMethod-
			descriptors that name this class are inferred from the
			M routine.
			For JTL, the consequences will still have to be
			determined (and specified).
		- classTypeNOCLASS denotes a Subroutine Collection Module
		- classTypeREFERENCE denotes a class that descends from class
			Reference. This value will also be used for the PSL
			intrinsic classes that descend directly from Object, and
			that have only static methods (Class, Db, PSL, and
			Runtime).
		- classTypePRIMITIVE denotes a class defined by a Class
			Definition Module that descends from Primitive, and that
			has multiple nodes. Object assignments (set obj1 = obj2)
			will translate into a KILL+MERGE in M and a .clone() in
			Java.
		- classTypePRIM0NODE denotes a class that descends from
			Primitive and that has one or more properties but none
			of the properties specified the /node qualifier. Object
			assignments (set obj1 = obj2) will translate into a SET
			in M and a .clone() in Java.
		- classTypePRIM0PROP denotes a class that decends from Primitive
			and that has no property definitions. Conceptually, the
			class has an implied "value" property, and that value is
			stored in the variable itself. This classType value is
			reserved for PSL Intrinsic Classes.
		*/
	#PROPERTYDEF classTypeNATIVE	= -2	class=Number public literal
	#PROPERTYDEF classTypeNOCLASS	= -1	class=Number public literal
	#PROPERTYDEF classTypeREFERENCE	=  0	class=Number public literal
	#PROPERTYDEF classTypePRIMITIVE	=  1	class=Number public literal
	#PROPERTYDEF classTypePRIM0NODE	=  2	class=Number public literal
	#PROPERTYDEF classTypePRIM0PROP	=  3	class=Number public literal

	#PROPERTYDEF classType		class=Number public position=5

	/* ---------------------------------------------------------------------
	constrcutor - PSL labelref of subroutine that generates the code to
		implement Class.new(object)
		*/
	#PROPERTYDEF constructor	class=String public position=6

	/* ---------------------------------------------------------------------
	isAbstract - is the class abstract
		*/
	#PROPERTYDEF isAbstract		class=Boolean public position=7

	/* ---------------------------------------------------------------------
	isNoinstance - are instantiations of the class through Class.new()
		prohibited.
		*/
	#PROPERTYDEF isNoInstance	class=Boolean public position=8

	/* ---------------------------------------------------------------------
	propProc - PSL labelref of subroutine that generates the code for
		property references, when the property is not defined explicitly
		with a node and position.
		*/
	#PROPERTYDEF propProc		class=String public position=9

	/* ---------------------------------------------------------------------
	package - pacakge to which the class belongs, as specified by the
		#PACKAGE compiler instruction.
		*/
	#PROPERTYDEF package		class=String public position=10

	/* ---------------------------------------------------------------------
	accessLevel - visibility of class (package, or public), coded as an
		Integer. Use the literals in general PSL code.
		*/
	#PROPERTYDEF accessLevelPACKAGE   =  1	class=Number public literal
	#PROPERTYDEF accessLevelPUBLIC    =  2	class=Number public literal

	#PROPERTYDEF accessLevel		class=String public position=11

	/* ---------------------------------------------------------------------
	flags - String composed of individual flag values.
		These values will be calculated by the compiler during the
		decomposition of the Class Definition Module.

		Use the literals in general PSL code.
		*/
	#PROPERTYDEF flagMTDFIN    =  "F"	class=String literal
	#PROPERTYDEF flagMTDINI0   =  "i"	class=String literal
	#PROPERTYDEF flagMTDINI1   =  "I"	class=String literal
	#PROPERTYDEF flagPRPINIT   =  "P"	class=String literal
	#PROPERTYDEF flagPRPREF    =  "R"	class=String literal

	#PROPERTYDEF flags			class=String position=12

	/* ---------------------------------------------------------------------
	destructor - label^routine of destructor or "" if not needed.
		This property will only have a non-empty value if the class is
		a Reference descendant that has properties that are Reference
		descendants or if the class has a finalize() method().
		*/
	#PROPERTYDEF destructor			class=String position=13

	/* ---------------------------------------------------------------------
	adjustor - label^routine of adjustor or "" if not needed.
		This property will only have a non-empty value if the class is
		a Reference descendant that has properties that are Reference
		descendants.

		Note that if the class has an adjustor it will also have a
		destructor, but not the other way around.
		*/
	#PROPERTYDEF adjustor			class=String position=14

	/* ---------------------------------------------------------------------
	multiRefXXX constants
		These constants are used in calls to the classDestroy() method
		to indicate what type of object destruction code is requested:
		multiRrefNONE
			Object destruction code for an instance that did not
			participate in multiple reference.
		multiRefDEFER
			Object destruction code to defer the destruction of
			the supplied instance
		*/
	#PROPERTYDEF multiRefNONE  = 0		class=Number public literal
	#PROPERTYDEF multiRefDEFER = 1		class=Number public literal
	#PROPERTYDEF multiRefNOW   = 2		class=Number public literal

	/* ---------------------------------------------------------------------
	Record related constants
		*/
	#PROPERTYDEF recordPREFIX     = "Record"	class=String public literal
	#PROPERTYDEF recordISRECORD   = 1		class=Number public literal
	#PROPERTYDEF recordDESCENDANT = 2		class=Number public literal

	/* ---------------------------------------------------------------------
	Other PSLClass constants
		*/
	#PROPERTYDEF PRIMITIVECLASS = "Primitive"	class=String public literal
	#PROPERTYDEF RECORDCLASS    = "Record"		class=String public literal
	#PROPERTYDEF REFERENCECLASS = "Reference"	class=String public literal
	#PROPERTYDEF ROOTCLASS      = "Object"		class=String public literal

	#PROPERTYDEF ADJUSTORLABEL    = "vcdmAdj"	class=String public literal
	#PROPERTYDEF CONSTRUCTORLABEL = "vcdmNew"	class=String public literal
	#PROPERTYDEF DESTRUCTORLABEL  = "vcdmDes"	class=String public literal

	#PROPERTYDEF LEFTEXMARK = 31			class=Number private literal

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	/* ================================================================== */
	/* Non-local static methods					      */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
public static PSLClass fromJSON( String json()	// json(propName) = propValue
		)	// return new PSLClass with properties from json()
	/* ---------------------------------------------------------------------
	Return a new PSLClass with properties assigned from the json() array.
	This constructor is the inverse of PSLClass.toJSON().

	NOTES:
	. This code should be kept in sync with toJSON().
	*/
	type PSLClass ocd = Class.new("PSLClass")

	set ocd.class        = json("class")
	set ocd.accessLevel  = json("accessLevel")
	set ocd.classType    = json("classType")
	set ocd.constructor  = json("constructor")
	set ocd.delimiter    = json("delimiter")
	set ocd.extends      = json("extends")
	set ocd.isAbstract   = json("isAbstract")
	set ocd.isNoInstance = json("isNoInstance")
	set ocd.package      = json("package")
	set ocd.propProc     = json("propProc")

	/* The following properties are not stored in the .pslx files of the
	   PSLX-only Intrinsic classes. */
	set ocd.adjustor     = json("adjustor").get()
	set ocd.destructor   = json("destructor").get()
	set ocd.flags        = json("flags").get()

	quit ocd

	// ---------------------------------------------------------------------
public static Number isRecord( String cls	// class name (*1)
		) // Return if the class is a record class
	/* ---------------------------------------------------------------------
	OUTPUTS:
	. $$ =	0 if not a record class,
		1 if class is Record,
		2 if Record descendant
	*/
	if cls = PSLClass.RECORDCLASS quit PSLClass.recordISRECORD

	if cls.beginsWith( PSLClass.recordPREFIX), Db.isSchemaTable( cls.extract( PSLClass.recordPREFIX.length()+1, cls.length())) quit PSLClass.recordDESCENDANT
	quit 0

	// ---------------------------------------------------------------------
public static PSLClass nativeMod( String clsNm)
	/* ---------------------------------------------------------------------
	Return a class descriptor for a native Module.

	NOTES:
	. Current implementation says: A native module and a subroutine
		collection module differ only in the classType
	*/
	type PSLClass clsdes = PSLClass.subColMod( clsNm)

	set clsdes.classType = clsdes.classTypeNATIVE

	quit clsdes
	
	// ---------------------------------------------------------------------
public static PSLClass recordMod( PSLTable td)
	/* ---------------------------------------------------------------------
	Return a class descriptor for a Record descendant Module.
	
	Creates a default descriptor (a pslCls entry without methods and properties)
	*/
	
	type PSLClass clsdes = Class.new( "PSLClass")
		
	set clsdes.accessLevel = clsdes.accessLevelPUBLIC
	set clsdes.class = "Record"_ td.table
	set clsdes.classType = 0
	set clsdes.constructor = "classNew^DBSDYNRA"
	set clsdes.delimiter = td.columnDelimiter
	set clsdes.extends = "Record"_ td.parentTable
	set clsdes.isAbstract = false
	set clsdes.isNoInstance = false

	if 'td.package.isNull() set clsdes.package = td.package
	else  set clsdes.package = "profile.psl"

	quit clsdes

	// ---------------------------------------------------------------------
public static Number rowPos( String prp)	// return position of column in Row
	/* ---------------------------------------------------------------------
	TEMPORARY SUPPORT FUNCTION, USED BY M-ONLY MODULES TO OBTAIN THE
	POSITION OF A FIELD BY ITS NAME INSTEAD OF USING HARD-CODED NUMBERS.
	*/
	quit ({List}"1,CLASS,EXTENDS,DELIMITER,CLASSTYPE,CONSTRUCTOR,ISABSTRACT,ISNOINSTANCE,PROPPROC,PACKAGE,ACCESSLEVEL,FLAGS,DESTRUCTOR,ADJUSTOR").position( prp, ",", 1)

	// ---------------------------------------------------------------------
public static PSLClass subColMod( String clsNm)
	/* ---------------------------------------------------------------------
	Return a class descriptor for a Subroutine Collection Module.
	*/
	type PSLClass clsdes = Class.new( "PSLClass")

	set clsdes.accessLevel = clsdes.accessLevelPUBLIC
	set clsdes.class = clsNm
	set clsdes.delimiter = -1
	set clsdes.classType = clsdes.classTypeNOCLASS
	set clsdes.isAbstract = false
	set clsdes.isNoInstance = true

	quit clsdes

	// ---------------------------------------------------------------------
public static String tableNameOf( String clsNm)
	/* ---------------------------------------------------------------------
	Extract the name of the table from the class name.
	Will return "" if the class is Record.
	Throws an exception if the table is neither Record nor a Record
	descendant.
	*/
	if PSLClass.isRecord( clsNm) = 0 throw Class.new("Error","%PSL-E-MISMATCH,not a Record descendant,"_clsNm))
	quit clsNm.extract( PSLClass.recordPREFIX.length() + 1, clsNm.length())

	/* ****************************************************************** */
	/* Non-local instance methods					      */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
String classDestroy( String expPcd	// postconditional
		, String objInst	// object variable
		, Number multiRef	// multiple reference variant
		)	// return code to destroy an instance of this class
	/* ---------------------------------------------------------------------
	The classDestroy method will return the "destruction" code for an
	object instance that is either used in single-reference context or in
	multi-reference context. There is no need to distinguish the case that
	the object goes out-of-scope, because that can easily be treated as the
	clean-up before a subsequent assignment without the actual re-assignment.

	This observation is correct provided that the calling code does indeed
	call PSLClass.classDestroy() for all instances that go out of scope, and
	the code that deals with vobjDfer is added after the code returned by
	all the classDestroy calls.

	If the classType is either classTypePRIM0PROP or classTypePRIM0NODE,
	then there is no class destruction code.

	If the classType is classTypePRIMITVE, the class destruction code is
	a KILL of the object instance variable, independent of the value of
	multiRef. Note that classDestroy() does not need to be called for this
	classType when the instance goes out of scope.

	If the classType is classTypeREFERENCE, and the request is for
	multiRefDEFER, then the method returns
		S vobjDfer=vobjDfer_","_$G(objptr)

	Else the method will return code for multiRefNONE, which will always end
	with:
		K:postcond vobj(+$G(objptr))
	
	And may be prefixed by a destructor call as follows:
	If the class is a pslx-only class that has a destructor:
		D:postcond destructor(objPtr) K:postcond vobj(+$G(objptr))
	Else, if the class is known to have a destructor:
		D:postcond&$D(vobj(+$G(objptr))) @($P(vobj(+$G(objptr),$C(9),2)_"(objptr)")
	Else:
		D:postcond&($P(vobj(+$G(objptr),$C(9),2)'="") @($P(vobj(+$G(objptr),$C(9),2)_"(objptr)")

	NOTES:
	. If the request is for multiRefNONE it is certain that the object can
		be destroyed. However, whether an object destrcutor must be
		called before killing the vobj() entry depends on the runtime
		class. This explains why the most simple case (unconditional
		destroy) returns the most complex code.
	*/
	if this.classType > this.classTypePRIMITIVE quit ""
	if this.classType = this.classTypePRIMITIVE quit " K"_expPcd_" "_objInst

	if multiRef = this.multiRefDEFER quit " S vobjDfer=vobjDfer_"",""_$G("_ objInst_ ")"

	// code for PSLClass.multiRefNONE --------------------------------------
	type String objref = "vobj(+$G("_ objInst_ "))"
	type String code = " K"_ expPcd_ " "_ objref
	if this.isRecord( this.class) > 0 quit code

	if ({List}$$getCls^UCGMCU("pslx")).contains( this.class), this.class '= this.REFERENCECLASS {
		if 'this.destructor.isNull() set code = " D"_expPcd_ " "_ this.destructor_ "(+$G("_ objInst_ "))"_ code quit
		if this.extends = this.ROOTCLASS set code = "" quit
	}
	else  {
		type String objdtr = "$P($G(vobj(+$G("_objInst_"),-1),$C(9),2)"
		if expPcd.isNull() set expPcd = ":("
		else  set expPcd = expPcd_ "&("

		if this.flags [ this.flagMTDFIN set code = " D"_ expPcd_ "$D("_ objref_ ")) @("_ objdtr_ ")_""("_ objInst_ ")"")"_ code quit

		set code = " D"_ expPcd_  objdtr_"]"""") @("_ objdtr_ ")_""("_ objInst_ ")"")"_ code
	}
	quit code

	// ---------------------------------------------------------------------
String classNewCall( String expPcd	// postconditional
		, String varCls		// class name
		, String varStk		// $STACK value
		, String varDtr		// destructor
		, String varAdj		// adjustor
		, String varIni		// initialize object
		)	// return code for Class.new(,) occurrence for this class
	/* ---------------------------------------------------------------------
	Return the call to the constructor of the supplied object class descriptor.
	*/
	type String code, dlm
	if this.classType = this.classTypePRIMITIVE {
			set code = " D"_ expPcd_ " "_ this.CONSTRUCTORLABEL_ "^"_ this.class_ "(."_ this.LEFTEXMARK.char()
			set dlm = ","
	}
	else  { 
		set code = "$$"_ this.CONSTRUCTORLABEL_ "^"_ this.class_ "("
		set dlm = ""
	}

	/* Include stack, destructor, and adjustor parameters only for Reference
	   descendants.
	   */
	if this.classType = this.classTypeREFERENCE set code = code_ dlm_ varStk_ ","_ varDtr_ ","_ varAdj, dlm = ","

	/* Include className for all except for zero-property Primitives
	   */
	if this.classType < this.classTypePRIM0PROP set code = code_ dlm_ varCls, dlm = ","

	/* Include initObject only if initialize() method requires one
	   */
	if this.flags [ this.flagMTDINI1 set code = code_ dlm_  varIni if varIni.isNull() throw Class.new( "Error", "%PSL-E-MISMATCH, Class.new(" _this.class.addQuotes()_ ") requires initObject")

	quit code_ ")"

	// ---------------------------------------------------------------------
String classNewDecl( String varCls	// class name
		, String varStk		// $STACK value
		, String varDtr		// destructor
		, String varAdj		// adjustor
		, String varIni		// initialize object
		)	// Return the M declaration of the constuctor for this class
	/* ---------------------------------------------------------------------
	Return the call to the constructor of the supplied object class descriptor.
	*/
	type String code = this.CONSTRUCTORLABEL_ "(", dlm = ""

	if this.classType=1 set code = code_ "this", dlm = ","

	/* Include stack, destructor, and adjustor parameters only for Reference
	   descendants.
	   */
	if this.classType = 0 set code = code_ dlm_ varStk_ ","_ varDtr_ ","_ varAdj, dlm = ","

	/* Include className for all except for zero-property Primitives
	   */
	if this.classType < this.classTypePRIM0PROP set code = code_ dlm_ varCls, dlm = ","

	/* Include initObject only if initialize() method requires one
	   */
	if this.flags [ this.flagMTDINI1 set code = code_ dlm_ varIni if varIni.isNull() throw Class.new( "Error", "%PSL-E-MISMATCH, Class.new(" _this.class.addQuotes()_ ") requires initObject")
	
	quit code_ ")"

	// ---------------------------------------------------------------------
public void fillExt( PSLCC prsr		// PSLCC with PSLClass cache
		) // Fill property values that may be inherited from ancestor
	/* ---------------------------------------------------------------------
	If the class descriptor already has a destructor, there is no need to
	look at the ancestor, because both are filled at the same time, and the
	presence of the destructor is a stronger indicator: a class can have a
	destructor without an adjustor, but when it has an adjustor it will also
	have a destructor.
	If this class has an initialize-with-parameter, there is no need to
	check the ancestor. Otherwise, if the ancestor has it, force it for
	this class as well (and strip flagMTDINI0).

	NOTES:
	. A flafMTDINI1 indicator tells something about the declaration
		signature and the call signature, but it does NOT tell anything
		about the code that needs to be generated in vcdmNew().
	*/
	type String dtr = this.destructor
	if dtr.isNull() {
		type String adj = ""
		if this.flags [ this.flagPRPREF set dtr = this.DESTRUCTORLABEL_ "^"_ this.class, adj =  this.ADJUSTORLABEL_ "^"_ this.class
		if dtr.isNull(), this.flags [ this.flagMTDFIN set dtr = this.DESTRUCTORLABEL_ "^"_ this.class

		if adj.isNull() {	// not needed for this class
			type PSLClass ext = prsr.getPSLClass( this.extends)
			set adj = ext.adjustor 
			if dtr.isNull() set dtr = ext.destructor 
		}
		set this.destructor = dtr
		set this.adjustor   = adj
	}
	type String flg = this.flags
	if 'flg.contains(this.flagMTDINI1) {
		type PSLClass ext = prsr.getPSLClass( this.extends)
		if ext.flags.contains( this.flagMTDINI1) set this.flags = flg.translate( this.flagMTDINI0)_ this.flagMTDINI1
	}
	quit

	// ---------------------------------------------------------------------
public String getClassnameExpr( PSLIdentifier inst	// object instance var
		)     // Return the expession that returns the classname (at runtime)
	/* ---------------------------------------------------------------------
	If the classType = classTypePRIM0PROP, then the classname is a compile-
	time constant, else if the classType = ClassTypeREFERENCE it comes from
	vobj(inst,-1), else it comes from inst
	*/
	if this.classType = this.classTypePRIM0PROP quit this.class.addQuotes()
	if this.classType = this.classTypeREFERENCE quit "$P($G("_ PSL.oLvn_ "(+$G("_ inst_ "),-1)),$C(9))"
	quit "$P($G("_ inst_ "),$C("_ this.delimiter_ "))"
	
	// ---------------------------------------------------------------------
public final String getPackageRoot( ) // Return the package root of the class
	/* ---------------------------------------------------------------------
	Return the package root for this class definition.

	The package root will determine the subdirectory where the class will
	live.
	*/
	type String pck = this.package.piece(".")

	quit pck

	// ---------------------------------------------------------------------
public final Boolean inPackage( String pck		// name of super package
		)	// Is the supplied package equal to or a super package of this.package
	/* ---------------------------------------------------------------------
	*/
	if this.package = pck quit true
	quit this.package.beginsWith( pck_".")

	// ---------------------------------------------------------------------
public final Boolean isDescendantOf( PSLCC prsr	// PSLCC that contains cache
		,String anc			// name of ancestor class
		)	// Does this class or one of its ancestors extend anc
	/* ---------------------------------------------------------------------
	Return if the class extends the specified ancestor class.
	*/
	if (anc = this.ROOTCLASS) ! (anc = this.extends) quit true
	if (anc = this.class) ! (this.classType < this.classTypeREFERENCE) quit false
	if (this.class = this.ROOTCLASS) ! (this.extends = this.ROOTCLASS) quit false

	type PSLClass ocd = this

	for  set ocd = prsr.getPSLClass( ocd.extends)  quit:(ocd.extends = anc)!(ocd.extends = ocd.ROOTCLASS)

	quit ocd.extends '= ocd.ROOTCLASS

	// ---------------------------------------------------------------------
public String toJSON( PSLTokenizer tknzr	// PSLTokenizer set up for JSON strlits
		) // Return this class descriptor as a JSON object
	/* ---------------------------------------------------------------------
	Return this class descriptor as a JSON object.
	The returned string will have a TAB character after each comma. This
	allows the caller to break down the string into multiple lines, using
	the TAB character as separator.

	NOTES:
	. This code should be kept in sync with fromJSON().
	. This code would benefit from some general JSON related utilities.
	*/
	type String json = "{ "
	set json = json_ """class"" : "_ this.class.addQuotes()
	set json = json_ ","_ 9.char()_ """accessLevel"" : "_ this.accessLevel
	set json = json_ ","_ 9.char()_ """adjustor"" : "_ this.adjustor.addQuotes()
	set json = json_ ","_ 9.char()_ """classType"" : "_ this.classType
	set json = json_ ","_ 9.char()_ """constructor"" : "_ tknzr.addQuotes( this.constructor)
	set json = json_ ","_ 9.char()_ """delimiter"" : "_ this.delimiter
	set json = json_ ","_ 9.char()_ """destructor"" : "_ this.destructor.addQuotes()
	set json = json_ ","_ 9.char()_ """extends"" : "_ this.extends.addQuotes()
	set json = json_ ","_ 9.char()_ """flags"" : "_ this.flags.addQuotes()
	set json = json_ ","_ 9.char()_ """isAbstract"" : "_ $SELECT(this.isAbstract:"true",1:"false")
	set json = json_ ","_ 9.char()_ """isNoInstance"" : "_ $SELECT(this.isNoInstance:"true",1:"false")
	set json = json_ ","_ 9.char()_ """package"" : "_ this.package.addQuotes()
	set json = json_ ","_ 9.char()_ """propProc"" : "_ tknzr.addQuotes( this.propProc)
	quit json_" }"
 #OPTION ResultClass ON
public String vSIG()	quit "61461^42874^Frans S.C. Witte^24981"	// Signature - LTD^TIME^USER^SIZE
