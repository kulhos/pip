	/*
	ORIG:	Frans S.C. Witte, 2009-01-15
	DESC:	deal with .psl file from FP, SP, or MRPC

	----------- Comments ---------------------------------------------------
	This class implements the TBX interface for psl source files.

	Elements of type PSL are slightly different from most other DQ elements
	because the PSL module name space is composed of the union of the files
	in the packages underneath the pslroot. This mechanism deliberately
	supports that a module in one package hides a module with the same name
	in another package. The TBX interface for psl files will need to be
	aware of this, and make sure that it honors this distinction.

	From a PSL perspective, the element is identified by the combination of
	the element name and the package in which it occurs. In a consistent
	source environment, the psl file will be stored in the directory named
	by the #PACKAGE compiler command. The folder structure of the StarTeam
	view Profile_Framework has been expanded to support the package name as
	a subfolder of dataqwik/procedure. Application views for Profile
	versions that use Profile Framework Versoin 3 will be expanded in a
	similar way.

	The expanded folder structure will be reflected in the folder structure
	of a Service Pack or Fix Pack, and in the "default" structure that FIS
	application workbench will be working on.
	
	Given that all components either know or can derive the package part, it
	makes sense that elements of type psl are identified as package/module.

	----------- Revision History -------------------------------------------
	2009-01-15, Frans S.C. Witte
		Initial program
	*/
	#CLASSDEF extends=TBXTypeInterface
	#PACKAGE framework.tbx

	// ---------------------------------------------------------------------
protected String elemDrop()	// drop this element
	/* ---------------------------------------------------------------------
	Deletes $$pslRoot^PSLC()_"/"_this.element_ ".psl" and the .pslx file

	NOTES:
	. A later version shall need to deal with dropping the associated files
		(.m/.o or .java/.class), and potentially the SYSMAP data.
	. This will be postponed until we know how the SYSMAP data can be
		deleted without concern for modules with the same name in a
		different package.
	*/
	type String full = this.getFullPath()

	#ACCEPT GROUP=ACCESS;CR=?;DATE=2009-01-15;PGM=Frans S.C. Witte
	type String ign = $$DELETE^%OSSCRPT( full_ ","_ full_ "x")
	quit this.returnSUCCESS

	// ---------------------------------------------------------------------
protected String elemGet( String path	// target path
		, String file		// target file
		) // write the element's data into path/file
	/* ---------------------------------------------------------------------
	Copies $$pslRoot^PSLC()_"/"_this.element_ ".psl" to path_"/"_file
	*/
	#ACCEPT GROUP=ACCESS;CR=?;DATE=2009-01-15;PGM=Frans S.C. Witte
	type String ign = $$COPYFIL^%OSSCRPT(this.getFullPath(), path_"/"_file)
	quit this.returnSUCCESS

	// ---------------------------------------------------------------------
protected String elemPut(String path	// source path
		, String file		// source file (including extension)
		, Integer reltype	// Release type (1=FP, 2=SP, 3=MRPC)
		, String lmu		// Last modified user
		, Date lmd		// Last modified date
		, Time lmt		// Last modified time
		)	// read contents of element from path/file
	/* ---------------------------------------------------------------------
	Save the supplied path/file as the source code for the current element.
	Copies path_"/"_file to $$pslRoot^PSLC()_"/"_this.element_ ".psl".
	The "last modified" data is currently ignored.

	RETURNS:
	. $$ = "1" (success)

	NOTES:
	. This method expects that this.element contains the package name if the
		module resides in a package.
	*/
	#ACCEPT GROUP=ACCESS;CR=?;DATE=2009-01-15;PGM=Frans S.C. Witte
	type String ign = $$COPYFIL^%OSSCRPT( path_"/"_file, this.getFullPath())
	quit this.returnSUCCESS

	// ---------------------------------------------------------------------
protected void getLastMod( ret String lmu	// user of Last Modification
		, ret Date lmd			// date of Last Modification
		, ret Time lmt			// time of Last Modification
		)	// return the user, date, and time of last modification
	/* ---------------------------------------------------------------------
	Overrides TBXTypeInterface.getLastMod()
	*/
	set lmu = "N.N."

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String filmod = $$FILE^%ZFUNC(this.getFullPath(), "CDT")

	set lmd = filmod.piece(",").toNumber()
	set lmt = filmod.piece(",",2).toNumber()
	quit

	// ---------------------------------------------------------------------
protected Integer getMode()	// Return mode of element
	/* ---------------------------------------------------------------------
	Returns  if $$
	Descendant classes shall return
		0 if OBJECTID represents a new element
		1 if OBJECTID represents an existing element
	*/
	type String full = this.getFullPath()
	type Boolean bExists

	#ACCEPT GROUP=BYPASS;CR=?;DATE=2009-01-15;PGM=Frans S.C. Witte
	#BYPASS
	SET bExists=$ZSEARCH(full,0)]""
	#ENDBYPASS

	quit $select(bExists:this.elemModeEXISTS,1:this.elemModeNEW)

	// =====================================================================
	// local support methods
	// =====================================================================

	// ---------------------------------------------------------------------
private String getFullPath()	// return the complete full path name of the element
	/* ---------------------------------------------------------------------
	Support function that composes the full file name of the element by
	prepending the pslRoot and appending ".psl"
	*/
	quit $$pslRoot^PSLC()_"/"_this.element_ "."_ this.elemType
 #OPTION ResultClass ON
public String vSIG()	quit "61495^37535^e0101572^5616"	// Signature - LTD^TIME^USER^SIZE
