	/*
	ORIG: 6915 - 09/19/2002
	DESC: SQL Utilities
 
	---- Comments --------------------------------------------------------
	This procedure contains SQL related utilities.
 
	---- Revision History ------------------------------------------------
	2009-04-10, Frans S.C. Witte, CR 35741/38852
		* Added #PACKAGE and #OPTION ResultClass
		* Corrected BYTECODE()

	11/22/208 - RussellDS - CR36716
		* Added SCATBL5A method
		* Added VALID24X7 method
	
	08/04/08 - Pete Chenard / Giridharanb - CR 35828
		Modified to add three new sections which handle
		saving and restoring the vsql array between two calls.
		
	10/27/07 - Pete Chenard - CR30087
		Added new function BYTECODE, which returns the string "$C(x)"
		or "$ZCH(x)" depending on the character set configuration.
		This function is called by SQL when the determination of whether
		to use $C or $ZCH can occur at code-generation time as opposed to 
		run time.
		
	07/10/07 - Pete Chenard - 28171
		Added new function BSE for M routines that need to use 
		byte string extract functions.
		
	07/25/06 - Pete Chenard - 20048
		Corrected parameter type in BSL section and added () to the
		end of the .length method in that section.
	*/
	#PACKAGE framework.sql
	#OPTION ResultClass ON

	quit

public Integer ROWS(ByteString str)
	/*
	This function returns the number of rows contained in
	the length-value string 'str'.
	
	ARGUMENTS:
	     .str	Length-value string

	RETURNS:
	     .$$	Number of rows
	*/

	type ByteString del,row
	type Number i,size,rows

	set del=255.byte()
	set size=0

	for i=1:1:str.length(del)-1 do {
		set row=str.piece(del,i)
		set size=size+(row.ascii(8)*256)
		set size=size+(row.ascii(9))+2
	}

	set rows=(1022000-str.length())\(size+2)
	if rows<1 set rows=1

	quit rows


public ByteString SQLDTA(ByteString str,
              ByteString sqlcur,
              ByteString sqldta)
	/*
	This function wraps string 'sqlcur' with a 2 byte header
	and appends it to string 'str'.

	ARGUMENTS:
	     .str	String
	     .sqlcur	Cursor
	     .sqldta	Data

	RETURNS:
	     .$$	Length-value string
	*/

	type ByteString v
	type Number len
	type String del

	set del=255.byte()

	set v=sqlcur_del_str
	set len=v.length() 
	set sqldta=(len\256).byte()_(len#256).byte()_v_sqldta

	quit sqldta


ByteString LVU(ByteString str, Number ptr)
	/*
	This function unwraps and removes the header of
	length-value string 'str' at the specified
	location within the string (ptr).

	ARGUMENTS:
	     .str	Length-value string
	     .ptr	String pointer

	RETURNS:
	     .$$	Unwrapped string
	*/

	type ByteString z
	type Number len

	if 'ptr.exists() set ptr=0
	set len=str.ascii(ptr+1)*256
	set len=len+str.ascii(ptr+2)

	set ptr=ptr+len
	set z=str.extract(ptr-len+3,ptr)
	if ptr=str.length()!(len<0) set ptr=0

	quit z


ByteString LVW(ByteString str)	
	/*
	This function wraps string 'str' with a 2 byte header.

	ARGUMENTS:
	     .str	String

	RETURNS:
	     .$$	Length-value string
	*/

	type Number len

	set len=str.length()+2
	if len<256 quit 0.byte()_len.byte()_str
	quit (len\256).byte()_(len#256).byte()_str

Integer BSL(String str)
	/*
	This function provides the byte string length for a string. It is
	a wrapper for .toByteString().length() for use by existing M routines
	until they are converted to PSL, at which point this can be removed.
	ARGUMENTS:
	.str String
	RETURNS:
	.$$ Length of string in bytes /TYP=N
	*/
	quit str.toByteString().length()


public Integer BSASCII(ByteString INSTRING, // Input string
             Number POS)            // Position

      /*
      Return ByteString.ascii in support of code still in M that needs to
      be Unicode compliant.

      Once all code using this is converted to PSL, this section can be
      eliminated.
      */      

      quit INSTRING.ascii(POS)


public ByteString BYTECHAR(Number INNUM,       // Input number
		Number INNUM2,
		Number INNUM3,
		Number INNUM4,
		Number INNUM5,
		Number INNUM6,
		Number INNUM7,
		Number INNUM8,
		Number INNUM9,
		Number INNUM10,
		Number INNUM11,
		Number INNUM12)

      /*
      Return Number.byte in support of code still in M that needs to
      be Unicode compliant.

      Once all code using this is converted to PSL, this section can be
      eliminated.

      */
      type ByteString str
      
	set str = INNUM.byte()
	if INNUM2.exists() set str=str_INNUM2.byte()
	if INNUM3.exists() set str=str_INNUM3.byte()
	if INNUM4.exists() set str=str_INNUM4.byte()
	if INNUM5.exists() set str=str_INNUM5.byte()
	if INNUM6.exists() set str=str_INNUM6.byte()
	if INNUM7.exists() set str=str_INNUM7.byte()
	if INNUM8.exists() set str=str_INNUM8.byte()
	if INNUM9.exists() set str=str_INNUM9.byte()
	if INNUM10.exists() set str=str_INNUM10.byte()
	if INNUM11.exists() set str=str_INNUM11.byte()
        if INNUM12.exists() set str=str_INNUM12.byte()
      quit str

public String BYTECODE(Number INNUM)       // Input number
      /*

      Return a string containing either "$C(x)" or
      "$ZCHAR(x)", depending on whether  the environment is
      configured for M or UTF-8 character sets.  This gets called at
      code-generation time by the SQL engine, and only one parameter is 
      passed to it.  If it is determined that this function needs to 
      support multiple input values in the future, it will be modified
      accordingly.
            
      */
	type String CHAR = $select(Runtime.charsetName="M":"$C(",1:"$ZCH(")
	
	set CHAR = CHAR_INNUM_")"
	quit CHAR

ByteString BSE(String str, Number start, Number end)
	/*
	This function provides the byte string extract for a string. It is
	a wrapper for .toByteString().extract() for use by existing M routines
	until they are converted to PSL, at which point this can be removed.

	ARGUMENTS:
	.str   - String
	.start - Start of Extract
	.end   - End of Extract

	RETURNS:
	.$$ Extract of string in bytes /TYP=T
	*/
	quit str.toByteString().extract(start,end)

ByteString BSP(String str, String del, Number pos, Number endpos)
	/*
	This function provides the byte string $piece for a string. It is
	a wrapper for .toByteString().piece() for use by existing M routines
	until they are converted to PSL, at which point this can be removed.

	ARGUMENTS:
	.str   -  String
	.del   -  Delimiter
	.pos   -  Position
	.endpos - Ending Position

	RETURNS:
	.$$ $Piece of string in bytes /TYP=T
	*/
	if 'endpos.get().isNull() quit str.toByteString().piece(del,pos,endpos)
	quit str.toByteString().piece(del,pos)

public void SAVE(String name,String vsql(),String exe()) 

	/* private; Save context into ^SQLCUR
	Saves vsql and exe arrays into ^SQLCUR(%TOKEN,object_name)
	Maximum total array size is 32K due to GTM string limit
	String is broken into 255 byte global strings
	*/
	
	if 'vsql("K").exists() quit

	type String z
	type public String %TOKEN
	#ACCEPT GROUP=ACCESS;CR=38852;DATE=2009-04-10;PGM=Frans S.C. Witte
	set z = 0.char()_2.char()_0.char()_2.char()_$$PACK^SQLCACHE(vsql(),exe())
	
	type RecordSQLCUR sqlcur = Db.getRecord("SQLCUR","TOKEN = :%TOKEN, CNAME = :name",1)
	set sqlcur.vsqlarr = z
	
	do sqlcur.save()
	quit

public void RESTORE(String name, String vsql(), String exe())	

	/* Restore symbol table for server fetch
	    Restore exe and vsql arrays from ^SQLCUR(%TOKEN,object_name)
	*/

	type Number  i,z
	type public Number ER,sqlcnt
	type public String RM, sqldta, %TOKEN
	
	type RecordSQLCUR sqlcur = Db.getRecord("SQLCUR","TOKEN = :%TOKEN,CNAME = :name",1)
	if sqlcur.getMode() = 0 set ER=1,RM="Cursor "_name_" is not OPEN",sqlcnt=0,sqldta="" quit
	
	set z = sqlcur.vsqlarr
	#ACCEPT GROUP=ACCESS;CR=38852;DATE=2009-04-10;PGM=Frans S.C. Witte
	do UNPACK^SQLCACHE(z,vsql(),exe())
	
	quit	
	
public void CLOSE(String token, String name)
			
	// Delete sqlcur entries on a close cursor
	do Db.fastDelete("SQLCUR","TOKEN = :token, CNAME = :name")
	
	quit

	
String SCATBL5A(String RPCID,		// SCATBL5A.RPCID
		 String userClass)
	 
	/*
	Wrapper used by FUNC^SQL to avoid global reference, since data may
	be in RDB.
	
	Returns null if entry is not defined, otherwise, returns
	SCATBL5A.LOGFLG
	*/
	
	type RecordSCATBL5A scatbl5a = Db.getRecord("SCATBL5A", "RPCID=:RPCID,UCLS=:userClass", 1)
	
	if (scatbl5a.getMode() = 0) quit ""
	if scatbl5a.logflg quit 1
	quit 0
	
	
String VALID24X7(String ROUTINE)

	/*
	Wrapper used by FUNC^SQL to avoid global reference, since data may
	be in RDB.
	
	Returns setting of UTBLRTNS.VALID24X7
	*/
	
	type RecordUTBLRTNS utblrtns = Db.getRecord("UTBLRTNS", "ROUTINE=:ROUTINE", 1)
	
	quit utblrtns.valid24x7
 #OPTION ResultClass ON
public String vSIG()	quit "61461^41316^Frans S.C. Witte^8156"	// Signature - LTD^TIME^USER^SIZE
