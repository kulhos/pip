	/*
	ORIG: Frans S.C. Witte 
	DESC: PSL Object Class Library - Methods of Class Reference 

	---- Comments ----------------------------------------------------------
	The M implementation of Reference objects uses the local array vobj(,)
	to store the objects. The first subscript is an integer object id (oid).
	This value will be assigned to the instance variable.
	The state of the object is stored in the lvns vobj(oid), and
	vobj(oid,node). The lvn vobj(oid) is called the top node.
	Negative numeric node values are reserved for use by PSL. All other
	nodes (including the top node, and non-numeric nodes) are available to
	the class designer.

	PSL uses the following specical purpose nodes:
	vobj(oid,-1) = className _ 9.char() _ stackLevel _ 9.char()_ destructor
		* The className can be accessed as Object.getClass(oid)
		* The stackLevel contains the runtime stackLevel ($STACK) of the
			outermost variable or property that may reference the
			object.
		* The destructor contains the M_lableref that need to be called
			just prior to the object's destruction.
	vobj(oid,-999,) = stored value container
		vobj(oid,-999,valueId) = stored value
		Use Reference.setStoredValue(valueID,value) to assign a value,
		use Reference.getStoredValue(valueID) to obtain the value.

	Other PSL Intrinsic Classes that use special purpose nodes:
	- Record	see UCRECORD
	- ResultSet	see UCRESULT
	- RowSet	see UCROWSET

	Limitations of the current M implementation
	===========================================
	The current implementation of Reference objects has a couple of
	limitations that almost all have to do with the scope maintenance of the
	objects in the vobj(,) array:
	* Multiple Rerefence
		If a Reference descendant is referenced by 2 variables that have
		different scope, the compiler will generate code that deletes
		the object when the innermost reference goes out of scope.

	---- Revision History --------------------------------------------------
	07/04/07 - Frans S.C. Witte - CR 27800
		* Added description of vobj() structure and the nodes that are
		  reserved for all Reference descendants.
		* Modified setValue to generate SET instead of DO.
		* Modified getPointer to deal with cases where ObjectName is not
		  a variable (e.g. when it is a function or another method call)
		* Modified all method generating code that would accept a
		  String implementation of a Reference descendant.

	12/23/05 - Frans S.C. Witte - CRs: 18727 / 18728
		Replaced this. by PSL. and removed #XECUTE

	10/26/04 - Frans S.C. Witte - CRs: 11441 / 11442
		Code from PSL procedure UCOBJECT moved to this PSL procedure.
		
	*/
	#PACKAGE framework.psl

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	// ---------------------------------------------------------------------
copy	// method Reference.copy; Returns Reference
	/*
	INPUTS:
	. PSL.objectName

	OUTPUTS:
	. PSL.return = $$copy^UCGMR(PSL.objectName)
	*/
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String class = $$getClass^UCGM(PSL.objectName,PSL.objectLevel)

	set PSL.return="$$copy^UCGMR("_PSL.objectName_")"
	quit
	
	// ---------------------------------------------------------------------
equals	//method Reference.equals; Returns boolean
	/*
	INPUTS:
	. PSL.objectName
	. PSL.actual(1) = variable that references the second object to compare

	OUTPUTS:
	. PSL.return = $$equals^UCGMR(PSL.objectName,PSL.actual(1))

	NOTES:
	. If comparing RecordXXX classes, need to turn Object optimization off.
	  However, even then the outcome depends on the nodes that have actually
	  been loaded from the database.
	*/
	type String class1,class2

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set class1=$$getClass^UCGM(PSL.objectName)
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set class2=$$getClass^UCGM(PSL.actual(1))

	if class1'=class2 do PSL.error("Objects must the same type") quit

	set PSL.return="$$equals^UCGMR("_PSL.objectName_","_PSL.actual(1)_")"
	quit
	
	// ---------------------------------------------------------------------
getPointer     // method Reference.getPointer; returns Number (integer)
	/*
	INPUTS:
	. PSL.objectName
	. PSL.objectLevel
	. PSL.msrc

	OUTPUTS:
	. PSL.return = $GET(PSL.ObjectName)
	. object optimization unconditionally turned on
	*/

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	do WARNDEP^UCGM( 2.7, 0,"Reference.getPointer() - consider using Object.exists()")
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$isVar^UCGM( PSL.objectName) ! $$isArr^UCGM( PSL.objectName) set PSL.return="$G("_PSL.objectName_")"
	else  set PSL.return="+"_PSL.objectName
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$getOpti^UCGM(PSL.objectName,PSL.objectLevel)>PSL.msrc do setOpti^UCGM(PSL.objectName,PSL.objectLevel,0)
        quit
	
	// ---------------------------------------------------------------------
getValue	// method Reference.getStoredValue(String tag)
	/*
	INPUTS:
	. PSL.objectName
	. PSL.actual(1) = name of runtime property /REQ
	
	OUTPUTS:
	. PSL.return = $GET(PSL.olvn(PSL.objectName,-999,PSL.actual(1)))
	*/
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String class = $$getClass^UCGM(PSL.objectName,PSL.objectLevel)	

	if PSL.actual(1).isNull(1) do PSL.error("Tag parameter is required")

	set PSL.return="$G("_PSL.oLvn_"("_PSL.objectName_",-999,"_PSL.actual(1)_"))"

	quit

	// ---------------------------------------------------------------------
setValue	// method Reference.setStoredValue(String tag,Object value)
	/*
	INPUTS:
	. PSL.objectName
	. PSL.actual(1) = name of runtime property /REQ
	. PSL.actual(2) = value of runtime property /REQ
	
	OUTPUTS:
	. PSL.return = S:PSL.postcond vobj(PSL.objectName, -999, PSL.actual(1)) = PSL.actual(2)
	. mcode backed up
	*/
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set PSL.mcode  = $$backup^UCGM( PSL.mcode)
        set PSL.return = "S"_ PSL.postCond_ " "_ PSL.oLvn_ "("_ PSL.objectName_",-999,"_PSL.actual(1)_")="_PSL.actual(2)
	quit

	// ---------------------------------------------------------------------
toString	// method Reference.toString; Returns String
	/*
	INPUTS:
	. PSL.objectName
	
	OUTPUTS:
	. PSL.return = $$toString^UCGMR(PSL.objectName)
	*/
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String class = $$getClass^UCGM(PSL.objectName,PSL.objectLevel)

	set PSL.return="$$toString^UCGMR("_PSL.objectName_")"
	quit
	
 #OPTION ResultClass ON
public String vSIG()	quit "61058^29757^Frans S.C. Witte^7389"	// Signature - LTD^TIME^USER^SIZE
