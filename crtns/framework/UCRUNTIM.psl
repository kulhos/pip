	/*
	ORIG: FSANCHEZ - 04/06/98
	DESC: Library of Runtime methods

	KEYWORDS: 

	---- Comments ----------------------------------------------------------
	 Note that property Runtime.charsetName is implemented in UCBYTSTR

	---- Revision History --------------------------------------------------
	2008-10-29, Frans S.C. Witte, CR 35741/35918
		renamed CALLxxx properties to EREFxxx to prevent case confusion
		with method names callXxx()

	05/14/07 - Frans S.C. Witte - CR: 27800
		Replaced $D(labels()) with $$hasSubr^UCGM()

	12/05/07 - Frans S.C. Witte - CR: 30811
		* Converted to PSL
		* Modified TP related procedures to use new vRuntime.m

	08/20/07 - KWANL / Frans S.C. Witte - CR 28995
		* Adapted to new CATCH/THROW mechanism

	10/09/06 - Frans S.C. Witte - CRs 22719 / 20613
		Calls to %DBAPI now pass 0 (zero) for vIndex (was "").

	08/30/06 - Badrinath Giridharan - CR 22807 / 20163
		* Modified the delayCommit method to set the COMMIT_WRITE
		  parameter.
		* Modified routine to correct indenting of code in several places.

	06/14/06 - Frans S.C. Witte - CRs: 22060 / 22061
		* Deprecated Runtime.charset().

	04/06/06 - Frans S.C. Witte - CRs: 20280 / 18164
		* Added delayCmt. Modified public lvn vCmtCnt to vRunCmCt and
		  public lvn cSavePnt to vRunSvPt.

	02/24/06 - Frans S.C. Witte - CRs: 19772 / 18164
		* Corrected Runtime.start to deal with array parameter

	01/31/06 Frans S.C. Witte - CRs: 18163 / 18164
		* Replaced $G(list) by """".
		* Rewrote Charset to prevent call to DBSPARS2 and to correct
		  problem with assignment.
		* Generated labels now start with "vRun"

	01/24/06 - RussellDS - CR19046
		* Added code to start section to perform a rollback in the
		  event of a GT.M restart.  A restart always returns to the
		  outermost transaction level, rolling back any MDB updates.
		  This change will also rollback the RDB updates.

	12/01/05 - Frans S.C. Witte - CRs: 18727 / 18728
		* Replaced $G(index) by """"

	11/04/05 - Frans S.C. Witte - CRs: 17937 / 15593
		* type(level,"Runtime") replaced by type(0,"Runtime"), to place
		  calls to vRunCmtF at the "quit from subroutine" level (instead
		  of "quit from do-level").

	08/31/05 - Frans S.C. Witte - CRs: 17056 / 17057
		* Replaced call to $$CmtCnt^UCOPTS by call to
		  $$getPslValue^UCOPTS("batchCommitCount")

	06/27/05 - RussellDS - CR16442
		* Corrected reference to vEr after calls to ^%DBAPI.

	06/15/05 - RussellDS - CR16303
		* Corrected defect in commit section - missing dot in structured
		  DO preventing appending of RDB commit logic

	06/05/05 - RussellDS - CR16207
		* Added section CommitC to consolidate code used by commit
		  section and saveTP^UCRECORD for generation of vRunCmtC
		  section.

	05/26/05 - RussellDS - CR16079
		Major changes to start, commit, and rollback sections for
		handling RDBs.  This includes:
		* Using vEr and vRm instead of ER and RM
		* Structing generated code as calls to sub-routines to avoid
		  changes in intended user flow
		* In start section, set up type() array to add call to final
		  commit when leaving this stack level to deal with RDB
		  delayed commits; save transactionID to type() and eliminate
		  use of %TranID variable
		* Make use of new CmitCnt^UCOPTS to retrieve commit count for
		  delayed commits
		* Added save point logic to commit and rollback sections for RDBs
		  so that if we do a rollback, we do it to the right point

	04/07/05 - Frans S.C. Witte - CRs: 14919 / 14920
		$$rdb^UCDB() changed to $$rdb^UCDBRT() (3 occurrences)
		Removed code that has been commented out.

	10/19/04 - Frans S.C. Witte - CRs: 11445 / 11446
		Commented out procedure setTrap (it is no longer used by PSL).
		Moved code for Runtime methods .charset(), .delErrXBAD(),
		.setErrMSG(), .setErrSTBLERR(), and .setErrXBAD() from UCERROR
		to this routine.

	05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

	02/12/04 - GIRIDHARANB - CR 8287
		Modified section rollback to rollback to last known commit
		if no savepoitn parameter is passed in.
		Modified section start to store the transaction ID in %TranID.
		Modified section commit to check %TranID on a relational database

	08/15/03 - GIRIDHARANB -51637
		Minor change to correct an error in the Tcommit linetag for the
		relational database

	08/05/03 - SPIER - 51423
	        Modified sections start,commit and rollback to initialize
		variable return to prevent duplication when these commands
		are used in the same procedure.

	07/31/03 - GIRIDHARANB - 45497
		Modified the runtime start,commit and rollback sections to
		add support for non-M databases

	07/11/03 - SPIER - 51423
	        Change to code generated to use conditional tests.

	01/10/03 - SPIER - 51423
	        Bug fixes to 51089 release

	11/14/02 - SPIER - 51089
		Changes to start,commit and rollback to reflect
		changed requirement for v7.0

	10/15/02 - SPIER - 51089
		Modifications for v7.0 enhancements
	*/
	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	#PACKAGE framework.psl
	#CLASSDEF extends=Primitive public delimiter=9

	#PROPERTYDEF EREFCOMMIT   = "commit^vRuntime"   class=String private literal
	#PROPERTYDEF EREFROLLBACK = "rollback^vRuntime" class=String private literal
	#PROPERTYDEF EREFSTART    = "start^vRuntime"    class=String private literal

	/* Primitive descendant needs at least one property ...
	   */
	#PROPERTYDEF dummy				class=String position=2

	/* ================================================================== */
	/* method generators for properties				      */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
static void database() // code generator for Runtime.database property
	/* ---------------------------------------------------------------------
	*/
	set PSL.return = "$$database^vRuntime"
	quit

	// ---------------------------------------------------------------------
static void isRdb() // code generator for Runtime.isRdb property
	/* ---------------------------------------------------------------------
	*/
	set PSL.return = "$$isRdb^vRuntime"
	quit

	/* ================================================================== */
	/* method generators for TP related methods			      */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
static void commit() // code generator for Runttime.commit()
	/* ---------------------------------------------------------------------
	This subroutine calls commitInline^vRuntime() if there is no postcond on
	the PSL command. In that case, the code is target language independent.
	If there is a postconditional, the returned code will contain a call to
	commit^vRuntime(), which is not completely target language independent,
	but could be if there were a compiler method that would return the
	target language code for a conditional call of a method.
	*/
	type static PSLParser

	type Number cmitcnt = 0

	if Runtime.isRdb {
		/* tranid will default to "CS", (not "BA") if type(0,"Runtime")
		   is not defined. This will happen if the commit occurs in
		   a different subroutine from where start was done.
		   */
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		type String tranid = $$getAtt^UCGM("Runtime",0,11)
		if tranid="BA" {
			set cmitcnt =  PSL.batchCommitCount - 1
			if cmitcnt.isNull() set cmitcnt = 499
			if cmitcnt'>0 set cmitcnt = 0	// No commit count, commit each time
		}
	}

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set PSL.mcode = $$backup^UCGM( PSL.mcode) // Remove DO command
	if PSL.postCond.isNull() {
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		if Runtime.isRdb do pslNew^UCGM("vIgn")	// new vIgn

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set PSL.return = $$commitInline^vRuntime(cmitcnt)
	}
	else set PSL.return = " D"_ PSL.postCond_ " "_ UCRUNTIM.EREFCOMMIT_ "("_ cmitcnt_ ")"
	quit

	// ---------------------------------------------------------------------
static void rollback() // code generator for Runtime.rollback
	/* ---------------------------------------------------------------------
	This method calls rollbackInline^vRuntime() if there is no postcond on
	the PSL command. In that case, the code is target language independent.
	If there is a postconditional, the returned code will contain a call to
	rollback^vRuntime(), which is not completely target language
	independent, but could be if there were a compiler method that would
	return the target language code for a conditional call of a method.
	*/
	type static PSLParser

	type String saveptr = PSL.actual(1)
	if saveptr.extract()="""" {
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do WARNDEP^UCGM( 3, 0,"literalized savepoint name; Use standard ret parameter")
		set saveptr = saveptr.stripQuotes()
	}
	if saveptr.isNull() set saveptr = 0

	// Remove D command
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set PSL.mcode = $$backup^UCGM( PSL.mcode)

	/* If the command includes a postCondition generate call to vRuntime,
	   else use in-line code.
	   */
	if PSL.postCond.isNull() {
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		if Runtime.isRdb do pslNew^UCGM("vIgn")	// new vIgn

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set PSL.return = $$rollbackInline^vRuntime( saveptr)
	}
	else  set PSL.return = " D"_ PSL.postCond_ " "_ UCRUNTIM.EREFROLLBACK_ "("_ saveptr_ ") "
	quit

	// ---------------------------------------------------------------------
static void start()	// code generator for Runtime.start()
	/* ---------------------------------------------------------------------
	This method shall not have a postCond.

	This method calls startInline^vRuntime() if there is no postcond on the
	PSL command. In that case, the code is target language independent.
	If there is a postconditional, the returned code will not only contain a
	call to start^vRuntime, but will also contain the ISO-M TSTART command,
	which makes the code target language dependent. Note that due to the
	ISO-M rules for TP, the returned code must contain the TSTART.
	*/
	if 'PSL.postCond.isNull() do PSL.error("MISMATCH: postcondition not allowed on this method") quit
	
	type String param1 = PSL.actual(1)
	if param1.extract() = """" {
		set param1 = param1.stripQuotes()
	}
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	else  do:'param1.isNull() WARNDEP^UCGM( 3, 0,"transactionid shall be literal parameter")
	if param1 '= "CS", param1 '= "BA" do PSL.error("SYNTAX: Transaction ID required") quit

	type String param2 = PSL.actual(2)
	if param2.extract() = """" {
		set param2 = param2.stripQuotes()
	}
	else  {
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do:'param2.isNull() WARNDEP^UCGM( 3, 0,"list of restart variables shall be literal parameter")

		/* if sourcecode contained Runtime.start(,array()), then UCGM
		   will have forced the pass-by-reference.
		   */
		if param2.extract() = "." set param2 = param2.extract( 2, param2.length())
	}
	if param2.isNull() set param2 = "vobj"
	else  if param2 '= "*", 'param2.contains("vobj") set param2 = param2_ ",vobj"

	type String param3 = PSL.actual(3)
	if param3.extract()="""" {
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do WARNDEP^UCGM( 3, 0,"literalized savepoint name; Use standard ret parameter")
		set param3 = param3.stripQuotes()
	}
	set:param3.extract()="." param3 = param3.extract( 2, param3.length())

	/* Add code to deal with restart if not on MDB. In order to deal with a
	   GT.M TRESTART, the call to start^vRuntime() must occur AFTER the
	   GT.M TSTART:
		TSTART  DO start^vRuntime($TLEVEL)
	   */

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set PSL.mcode = $$backup^UCGM( PSL.mcode)	//remove "D " from generated code

	// Step 1: deal with explicit savepoint
	if param3.isNull() set PSL.return = ""
	else  {
		set PSL.return = " S "_param3_"=$TL "

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		if '$$getInst^UCGM( param3) do setInst^UCGM( param3, PSL.msrc + 1,"")
	}

	// Step 2: append restart lvns
	if param2 = "*" set PSL.return = PSL.return_ "TS *"
	else  set PSL.return = PSL.return_ "TS ("_ param2_ ")"

	// Step 3: add transactionid and the call to start^vRuntime
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set PSL.return = PSL.return_ ":transactionid="""_ param1_ """"_ $$startInline^vRuntime(true)

	/* Set up clean-up code when leave this subroutine - finish commits
	   Note that we do this regardless of the transactionID (CS or BA) for
	   the transaction since we may be doing nested TP and don't commit to
	   the RDB until the final commit ($TLevel=0).
	   The code manipulates WARN,MISMATCH to prevent the warning du to the
	   call to typDec^UCGM("Runtime","Runtime","NEW").
	   */
	if Runtime.isRdb {
		type public String methods(,,)
		type public PSLParser pslPrsr

		type Number level = 0	// force DO-level zero for call to UCGM
		type Boolean curval = pslPrsr.getSetting("WARN","MISMATCH",false)
		if curval do pslPrsr.addSetting("WARN","MISMATCH",false)

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do typeDec^UCGM( "Runtime", "Runtime", "NEW")
		if curval do pslPrsr.addSetting("WARN","MISMATCH",true)

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do typeFldSet^UCGM("Runtime", 11, param1)	// Save CS or BA transaction ID

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do pslNew^UCGM("vIgn")	// new vIgn

		set methods("Object","killCasc","Runtime") = pslPrsr.getPSLClass("Runtime").destructor
	}
	quit

	// ---------------------------------------------------------------------
static String callCommitCS() // return the code that corresponds to a commit CS
	/* ---------------------------------------------------------------------
	This is called by save^UCRECORD
	*/
	type literal String commitCS = UCRUNTIM.EREFCOMMIT_ "(0)"
	quit commitCS

	// ---------------------------------------------------------------------
static String callRollback( String vLvl	// string to add as actual parameter
		) // return the code that corresponds to a commit CS
	/* ---------------------------------------------------------------------
	This is called by CATCH^UCGM
	*/
	quit UCRUNTIM.EREFROLLBACK_ "("_ vLvl_ ")"

	// ---------------------------------------------------------------------
static String callStart() // return the code that corresponds to a commit CS
	/* ---------------------------------------------------------------------
	This is called by save^UCRECORD
	*/
	type literal String startLbl = UCRUNTIM.EREFSTART_ "()"
	quit startLbl

	/* ================================================================== */
	/* method generators for other methods				      */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
static void Charset() // code generator for Runtime.charset()
	/* ---------------------------------------------------------------------
	*/
	if Runtime.charsetName = "UTF-8" do PSL.error("MISMATCH: method not available for Unicode") quit

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	do WARNDEP^UCGM( 2.6, 3,"method Runtime.charset() will not be available for Unicode version")

	#ACCEPT CR=30811;DATE=2007-12-05;PGM=Frans S.C. Witte;GROUP=BYPASS
	#BYPASS
	NEW ascList SET ascList=$$charAscii()
	IF $LENGTH(ascList)<450 SET return="$C("_ascList_")" QUIT	; inline
	;
	; Use subroutine
	NEW lbl SET lbl="vRunChrs"
	SET return="$$"_lbl_"()"
	IF $$hasSubr^UCGM(lbl) QUIT		; already defined
	;
	; Create subroutine vRunChrs
	NEW max SET max=$$getPslValue^UCOPTS("maxLineLength")
	DO addSubr^UCGM(lbl,"()","get characterset")
	;
	; Fits on single line
	IF $LENGTH(ascList)+6<max DO append^UCGM(" Q $C("_ascList_")",lbl) QUIT
	;
	; Need multiple lines
	NEW line,pos
	DO append^UCGM(" N vRet",lbl)
	SET max=max-50,line=" S vRet=$C(",pos=$FIND(ascList,",",max)
	DO append^UCGM(line_$EXTRACT(ascList,1,pos-2)_")",lbl)
	DO append^UCGM(" Q vRet_$C("_$EXTRACT(ascList,pos,$LENGTH(ascList))_")",lbl)
	#ENDBYPASS
	quit

	// ---------------------------------------------------------------------
private static String charAscii() // Return list of $ASCII() values of character set
	/* ---------------------------------------------------------------------
	This function returns a comma separated list of all $ASCII() values.
	The values occur in the order in which they are returned by $ORDER()
	of the individual characters.

	NOTES:
	. Because the individual digits sort as canonic numbers, they preceed
		all other characters.
	. This code is derived from charset^DBSPARS2 that parsed var=&&charset
	*/
	type String c, char(), v
	type Number n
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set v = $$LC^%CHARSET_ $$UC^%CHARSET_ "/0123456789@[\]^_`%!~$#&*()-+={}<>?:."
	for n = 1:1:v.length() set char(v.extract( n)) = "" // M-sort it in order
	set c = "", v = ""
	for  set c = char( c).order() quit:c.isNull()  set v = v_ ","_ c.ascii()
	quit v.extract( 2, v.length())

	// ---------------------------------------------------------------------
static void delayCmt() ; Implementation of Runtime.delayCommit()
	;----------------------------------------------------------------------
	; NOTES:
	; . The generated code shall be enhanced with a catch-block that will
	;	ensure that the final commit and disable COMMIT_WRITE are always
	;	executed. 
	;
	type public PSLParser pslPrsr
	type public String called()

	type String cmtF = pslPrsr.getPSLClass("runtime").destructor

	// check value of call as if DO call occurred in the code
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String call = $$actual^UCGM( PSL.actual(1).stripQuotes(),.called)

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$isRdb^vRuntime() {
		type String cmt,lbl
		set cmt="delay commits for "_call
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set lbl=$$findSubr^UCGM("vRunDC",cmt)
		set PSL.return=lbl_"()"
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		quit:$$hasSubr^UCGM(lbl)

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do addSubr^UCGM(lbl,"()",cmt)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do append^UCGM(" N vRunDlay S vRunDlay=1",lbl)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do append^UCGM(" N vEr,vRm",lbl)

		// enable COMMIT_WRITE setting.
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do append^UCGM(" S vEr=$$EXECUTE^%DBAPI(0,""ALTER SESSION SET COMMIT_WRITE=NOWAIT,BATCH"",$C(124),"""",.vRm)",lbl)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do append^UCGM(" D "_call,lbl)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do append^UCGM(" K vRunDlay",lbl)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do append^UCGM(" D "_cmtF_"(0)",lbl)

		// disable COMMIT_WRITE setting.
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do append^UCGM(" S vEr=$$EXECUTE^%DBAPI(0,""ALTER SESSION SET COMMIT_WRITE=WAIT,IMMEDIATE"",$C(124),"""",.vRm)",lbl)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do append^UCGM(" Q",lbl)
	}
	else  set PSL.return=call
	quit

	// ---------------------------------------------------------------------
static void delxbad() // code generator for Runtime.delErrXBAD
	/* ---------------------------------------------------------------------
	Runtime.delErrXBAD(object,error_code)
	*/
	if PSL.actual(1).stripQuotes() = "*" set PSL.mcode = PSL.mcode.extract( 1, PSL.mcode.length()-2), PSL.return = "kill verrors" quit
	set PSL.return = "DELERR^DBSEXECU("_ PSL.actual(1)_ ",""XBAD"","_ PSL.actual(2)_ ")"
	quit

	// ---------------------------------------------------------------------
static void er() // code generator for Runtime.setErrSTBLER( object, errcode)
	/* ---------------------------------------------------------------------
	*/
	set PSL.return = "SETERR^DBSEXECU("_ PSL.actual(1)_ ",""ER"","_ PSL.actual(2)_ ")"
	quit

	// ---------------------------------------------------------------------
static void msg() // code generator for Runtime.setErrMSG method
	;----------------------------------------------------------------------
	; syntax: do Runtime.setErrMSG(object,msg_number,variable)
	;
	;----------------------------------------------------------------------
	#ACCEPT CR=30811;DATE=2007-12-05;PGM=Frans S.C. Witte;GROUP=BYPASS
	#BYPASS
	N p1,p2,p3
	S p1=actual(1),p2=actual(2),p3=$G(actual(3))
	I p3?1a.an1"."1a.an S actual(2)=actual(3) D procPar(.fsn,1) S p3=actual(2)
	;
	S return="SETERR^DBSEXECU("_p1_",""MSG"","_p2
	I $E(p3,$L(p3))="," S p3=$E(p3,1,$L(p3)-1)	; Remove extra comma
	I p3'="" S return=return_","_p3
	S return=return_")"
	#ENDBYPASS
	quit

	// ---------------------------------------------------------------------
static void procPar( String fsn(),
		noret Boolean sparse)
	/* ---------------------------------------------------------------------
	Process input parameters

	NOTES:
	. Now that UCRUNTIM is a PSL procedure, this subroutine has been moved
		from UCDB to UCRUNTIM. Nevertheless its code needs to be adapted
		as it uses fsn(), and PSL.actual(), whereas the caller should be
		able to pass in an accesskey and a table descriptor (or table
		name)
	*/
	type public PSLTable pslTbl()

	type String table = PSL.actual(1).get()
	type String akeys = PSL.actual(2).get()

	if table.extract() = """" set table = table.stripQuotes( """")

	type PSLTable td = PSL.cachePSLTable( pslTbl(), table, 1)

	set PSL.actual(1) = table
	set PSL.actual(2) = $$akey2apl^UCDB( td, PSL.var.get(), akeys, sparse)

	if PSL.return'="" set PSL.return = PSL.return_"("_ PSL.actual(2)_")"

	quit

	// ---------------------------------------------------------------------
static void xbad() // code gewnerator for Runtime.setErrXBAD()
	/* ---------------------------------------------------------------------
	Runtime.setErrXBAD(object,error_code,column,current_value,alternate_value)
	*/
	#ACCEPT CR=30811;DATE=2007-12-05;PGM=Frans S.C. Witte;GROUP=BYPASS
	#BYPASS
	N i,expr,save2
	S save2=actual(2)
	S expr="SETERR^DBSEXECU("_actual(1)_",""XBAD"","_actual(2)
	I $G(actual(4))?1a.an1"."1a.an S actual(2)=actual(4) D procPar(.fsn,1) S actual(4)=actual(2)
	I $G(actual(5))?1a.an1"."1a.an S actual(2)=actual(5) D procPar(.fsn,1) S actual(5)=actual(2)
	S actual(2)=save2
	F i=3:1:5 I $G(actual(i))'="" S expr=expr_","_actual(i)
	S return=expr_")"
	#ENDBYPASS
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61298^29758^Frans S.C. Witte^23398"	// Signature - LTD^TIME^USER^SIZE
