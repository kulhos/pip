	/*
	ORIG:	Frans S.C. Witte, 2007-06-22
	DESC:	Class Definition Module for PSL class PSLMethod

	---- Comments ----------------------------------------------------------

	---- Revision History --------------------------------------------------
	2009-04-02, Frans S.C. Witte, CR 39242
		Turned most methods into 'final' methods.

	2008-07-09, Frans S.C. Witte, CR34739
		* Added support for Polymorphism in PSL-to-M

	06/22/07 - Frans S.C. Witte - CR 27800
		New unit
	*/
	#PACKAGE  framework.psl
	#CLASSDEF extends=Primitive public delimiter=9

	/* ---------------------------------------------------------------------
	class - name of class
		*/
	#PROPERTYDEF class			class=String public position=2
	/* ---------------------------------------------------------------------
	method - name of method
		*/
	#PROPERTYDEF method			class=String public position=3
	/* ---------------------------------------------------------------------
	resultClass - datatype of value returned by method, or void
		*/
	#PROPERTYDEF resultClass		class=String public position=4
	/* ---------------------------------------------------------------------
	formalList - semicolon-delimited list of formal parameter declarations
		Each element of the List is a triple consisting of
		- access (ret or val)
		- class (datatype of parameter)
		- vsig (variable signature: name, name(), name(,), etc.)
		There are several getFpXxx methods to access the individual
		elements and pieces.
		*/
	#PROPERTYDEF formalList			class=List public position=5

	/* ---------------------------------------------------------------------
	accessLevel - visibility of method (protected, private, package, or
		public), coded as an Integer. Use the literals in general PSL
		code.

		NOTES:
		. Some PSL compiler code uses the order of the values, and the
			mapping of Integer to Boolean of these values.
			DO NOT CHANGE THESE VALUES unless you know what you are
			doing !!
		*/
	#PROPERTYDEF accessLevelPROTECTED = -1	class=Number public literal
	#PROPERTYDEF accessLevelPRIVATE   =  0	class=Number public literal
	#PROPERTYDEF accessLevelPACKAGE   =  1	class=Number public literal
	#PROPERTYDEF accessLevelPUBLIC    =  2	class=Number public literal

	#PROPERTYDEF accessLevel		class=Number public position=6

	/* ---------------------------------------------------------------------
	methodType - type of method according to one of the following integer
		values (Instance mathod, final method, static method, method
		withouf formal parameter list, label inside method):
		*/
	#PROPERTYDEF methodTypeINSTANCE	= 0	class=Number public literal
	#PROPERTYDEF methodTypeFINAL	= 1	class=Number public literal
	#PROPERTYDEF methodTypeSTATIC	= 2	class=Number public literal
	#PROPERTYDEF methodTypeNOFPL	= 3	class=Number public literal
	#PROPERTYDEF methodTypeLABEL	= 4	class=Number public literal

	#PROPERTYDEF methodType			class=Number public position=7

	/* ---------------------------------------------------------------------
	codeLine - indicator of position of method declaration in intermediate
		code
		*/
	#PROPERTYDEF codeLine			class=Number public position=8

	/* ---------------------------------------------------------------------
	codeLine - indicator of position of method declaration in source code
		*/
	#PROPERTYDEF sourceLine			class=Number public position=9

	/* ---------------------------------------------------------------------
	codeLine - indicator of position of method declaration in target code
		*/
	#PROPERTYDEF targetLine			class=Number public position=10

	/* ---------------------------------------------------------------------
	methodProc - PSL labelref of subroutine that generates the code for this
		method
		*/
	#PROPERTYDEF methodProc			class=String public position=11

	/* ---------------------------------------------------------------------
	inLiteral - can the method be applied in LITERAL context such as:
		- type literal declations
		- argument of #IF, #WHILE, or #XECUTE
		*/
	#PROPERTYDEF inLiteral			class=Boolean public position=12

	/* ---------------------------------------------------------------------
	comment - Comment found after closing parenthesis of declaration
		*/
	#PROPERTYDEF comment			class=String public position=13

	/* ---------------------------------------------------------------------
	Other PSLMethod constants
		*/
	#PROPERTYDEF FPBYLITERAL = "literal"	class=String public literal
	#PROPERTYDEF FPBYRETURN  = "ret"	class=String public literal
	#PROPERTYDEF FPBYVALUE   = "noret"	class=String public literal

	/* The name of the array used for polymorphic dispatches
		*/
	#PROPERTYDEF POLYDISPATCH = "vPslPoly"	class=String public literal

	#PROPERTYDEF STACKFPN = "vcdmS"		class=String private literal

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	/* ================================================================== */
	/* Non-local static methods					      */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
public static PSLMethod fromJSON( String json()	// json(propName) = propValue
		)	// return new PSLMethod with properties from json()
	/* ---------------------------------------------------------------------
	Return a new PSLMethod with properties assigned from the json() array.
	This constructor is the inverse of PSLMethod.toJSON().

	NOTES:
	. This code should be kept in sync with toJSON().
	*/
	type PSLMethod omd = Class.new("PSLMethod")

	/* Fill the properties from the array */
	set omd.class       = json("class")
	set omd.method      = json("method")
	set omd.resultClass = json("resultClass")
	set omd.formalList  = json("formalList")
	set omd.accessLevel = json("accessLevel")
	set omd.methodType  = json("methodType")
	set omd.methodProc  = json("methodProc")
	set omd.inLiteral   = json("inLiteral")
	set omd.comment     = json("comment")

	quit omd

	// ---------------------------------------------------------------------
public static Number rowPos( String prop	// property name
		)	// return position of column in Row
	/* ---------------------------------------------------------------------
	TEMPORARY SUPPORT FUNCTION, USED BY M-ONLY MODULES TO OBTAIN THE
	POSITION OF A FIELD BY ITS NAME INSTEAD OF USING HARD-CODED NUMBERS.
	*/
	quit ({List}"1,CLASS,METHOD,RESULTCLASS,FORMALLIST,ACCESSLEVEL,METHODTYPE,CODELINE,SOURCELINE,TARGETLINE,METHODPROC,INLITERAL,COMMENT").position( prop, ",", 1)

	/* ================================================================== */
	/* Non-local instance methods					      */
	/* ****************************************************************** */


	// ---------------------------------------------------------------------
public final String getAccess() // Return the access modifier of the method
	/* ---------------------------------------------------------------------
	*/
	type Number acc = this.accessLevel
	if acc = this.accessLevelPUBLIC    quit "public"
	if acc = this.accessLevelPRIVATE   quit "private"
	if acc = this.accessLevelPROTECTED quit "protected"
	quit ""	// accessLevelPACKAGE   

	// ---------------------------------------------------------------------
public final String getCall4M( String inst	// instance variable ("" if n.a.)
		, String args()		// actual arguments
		, String module		// current module
		, PSLParser prsr	// parser context
		) // Return the M code for a call to this method in an M environment
	/* ---------------------------------------------------------------------
	Return the M code for a call to this method in an M environment

	NOTES:
	. This function will include the $$ for functions, which assumes that
		the resultClass correctly specifies "void" for all methods that
		do not return a function. This implies that the handling of the
		quit-statement must change "" to "void" when an argumentless
		quit exits the methods, or from "" to the resultClass of the
		expression if the quit-statement has an argument.
	*/
	type String call = this.method
	type String dlm = "("
	type Number n = args("").order(-1)
	type String resCls = this.resultClass
	type PSLClass ocd = prsr.getPSLClass( this.class)

	if this.class '= module set call = call_ "^"_ this.class

	if this.methodType > this.methodTypeSTATIC quit call	// no formallist

	if this.methodType '> this.methodTypeFINAL {
		/* append instance variable.
		   The current version always adds the variable as
		   pass-by-return, except if the class type is
		   classTypeREFERENCE or (unlikely) classTypePRIM0PROP.
		   A later version may be able to trace that a method of a
		   classTypePRIM0NODE class does not modify any property, and
		   does not need the dot.
		   If inst="super", it is replaced by "this", and the "v0"
		   version of the implementing ancestor is returned
		   */
		if inst = "super" {
			set call = "v0"_ this.method_ "^"_ prsr.getSuper( module_ "."_ this.method)
			set inst = "this"
		}
		if ocd.classType '= ocd.classTypeREFERENCE, ocd.classType '= ocd.classTypePRIM0PROP set inst = "."_inst
		set call = call_ "("_ inst, dlm= ","
	}

	/* If the method returns a Reference descendant that has an adjustor,
	   add formal parameter for stack level of caller
	   */
	if resCls '= "void" {
		set call = "$$"_ call
		set ocd = prsr.getPSLClass( resCls)
		if 'ocd.adjustor.isNull() set call = call_ dlm_ "$ST", dlm = ","
	}

	type List fpl = this.formalList
	for n = 1:1:n {
		set ocd = prsr.getPSLClass( this.getFpClass( n))

		/* Force pass-by-return for classTypePRIMITIVE/PRIM0NODE
		   */
		if ocd.classType '= ocd.classTypePRIM0PROP, ocd.classType '= ocd.classTypeREFERENCE, args(n).extract()'=".", prsr.isName(args(n)) set args(n) = "."_args(n)
		set call = call_ dlm_ args(n), dlm=","
		if 'ocd.adjustor.isNull() set call = call_ ",$ST"
	}

	if dlm = "(" set call = call_ dlm
	quit call.trim( 1, ",")_ ")"

	// ---------------------------------------------------------------------
public final String getDecl4M( PSLParser prsr		// parser context
		)	// Return method declaration for M
	/* ---------------------------------------------------------------------
	Return the M code for a declaration of this method in an M environment.

	NOTES:
	. This method will not include the vcdmS0 formal parameter if the method
		has an empty resultClass. The assumption is that all methods that
		do return a class that requires adjustment also do specify the
		resultClass. The handling of the QUIT command shall take care of
		this.
	*/
	type String decl = this.method
	type String dlm = "("
	type String resCls = this.resultClass
	type PSLClass ocd

	if this.methodType > this.methodTypeSTATIC quit decl_" ; "_ this.comment	// no formallist

	if this.methodType '> this.methodTypeFINAL set decl = decl_ "(this", dlm=","	// append instance var

	/* If the method returns a Reference descendant that has an adjustor,
	   add formal parameter for stack level of caller
	   */
	if resCls '= "void", 'resCls.isNull() {
		set ocd = prsr.getPSLClass( resCls)
		if 'ocd.adjustor.isNull() set decl = decl_ dlm_ this.STACKFPN_ "0", dlm = ","
	}

	type Number n
	type List fpl = this.formalList
	for n = 1:1:fpl.count( ";") {
		set decl = decl_ dlm_ fpl.elementAt(n,";").piece(" ",3).piece("("), dlm=","
		quit:this.getFpAccess(n) '= this.FPBYRETURN
		set ocd = prsr.getPSLClass( this.getFpClass( n))
		if 'ocd.adjustor.isNull() set decl = decl_ ","_ this.STACKFPN_ n
	}
	
	if dlm = "(" set decl = decl_ dlm
	set decl = decl_ ") ; "_ this.comment

	/* If this is an instance method, add the code for run-time polymorphism
	   support (provided the accessLevel is not accessLevelPRIVATE)
	   */
	if this.methodType = this.methodTypeINSTANCE, this.accessLevel '= this.accessLevelPRIVATE {
		type String lbl = decl.piece("(")
		type String poly = decl.piece(" ;")
		type String apl = "(.this"	// turn all fps into pass-by-return aps
		if poly.contains(",") {
			for n=2:1:poly.length(",") set apl = apl_",."_ poly.piece( ",", n)
		}
		else set apl = apl_ ")"
		type String pre, post
		set ocd = prsr.getPSLClass( this.class)

		/* for void methods, we generate DO v0method QUIT, and for other
		   methods we generate QUIT $$v0method.
		   */
		if this.resultClass = "void" set pre = " D v0", post = " Q"
		else set pre = " Q $$v0", post = ""

		set poly = poly_ " ; polymorphism dispatch"
		set poly = poly_ 10.char()_ " N vC S vC="_ ocd.getClassnameExpr( "this")
		set poly = poly_ 10.char()_ " I $D("_ this.POLYDISPATCH_ "(vC,"""_ this.method_ """))"_ pre_ lbl_ "^@"_ this.POLYDISPATCH_ "(vC,"""_ this.method_ """)"_ apl_ post
		set poly = poly_ 10.char()_ pre_ lbl_ apl_ post
		set decl = poly_ 10.char()_ "v0"_ decl
	}
	quit decl

	// ---------------------------------------------------------------------
public final String getFp( Number pos) quit this.formalList.elementAt( pos, ";")
	/* ---------------------------------------------------------------------
	Return the specified formal parameter (access class signature)

	RETURNS:
	. $$ = the complete definition of the formal parameter at the specified
		position
	*/

	// ---------------------------------------------------------------------
public final String getFpAccess( Number pos) //
	/* ---------------------------------------------------------------------
	Return the access modifier for the specified formal parameter

	RETURNS:
	. $$ = 	this.FPBYRETURN ("ret") or this.FPBYVALUE ("local")
	*/
	type String fp = this.formalList.elementAt( pos, ";")
	quit fp.piece(" ")

	// ---------------------------------------------------------------------
public final String getFpClass( Number pos) quit this.formalList.elementAt(pos, ";").piece(" ",2)
	/* ---------------------------------------------------------------------
	Return the class (data type) of the specified formal parameter

	RETURNS:
	. $$ = the class (data type) of the specified formal parameter.
	*/

	// ---------------------------------------------------------------------
public final String getFpCount()	// PSL Method descriptor (*1)
	/* ---------------------------------------------------------------------
	Return the number of parameters for this method

	RETURNS:
	. $$ = number of parameters, or -1 if label without parameters
	*/
	if this.methodType > this.methodTypeSTATIC quit -1	// no formallist
	//type String fpl = this.formalList
	//if fpl.isNull() quit 0
	//quit fpl.length(";")
	quit this.formalList.count(";")

	// ---------------------------------------------------------------------
final Number getFpPosition( String sig	// formal parameter name or sig
		) // Return position of formal parameter name or signature in formalList
	/* ---------------------------------------------------------------------
	Returns the position of the supplied formal parameter name in the
	formalList.

	OUTPUTS:
	. $$ = position of parameter name, or 0 if not found

	NOTES:
	. This is function has package visibility
	*/
	type String fpl = this.formalList.toString()
	if fpl.isNull() quit 0

	type Number p1 = 0
	for   set p1 = fpl.find( " "_ sig, p1) quit:fpl.extract(p1)?1P  quit:p1=0

	if p1=0 quit 0		// signature not found
	quit fpl.extract(1, p1 - 1).length(";")

	// ---------------------------------------------------------------------
public final String getFpVsig( Number pos) quit this.formalList.elementAt(pos, ";").piece(" ",3)
	/* ---------------------------------------------------------------------
	Return the parameter definition for the specified formal parameter

	RETURNS:
	. $$ = number of parameters, or -1 if label without parameters
	*/

	// ---------------------------------------------------------------------
public final Boolean hasAccess( PSLCC cc	// compiler cache
		,PSLClass module	// class of SCM seeeking access
		)	// does caller have access to this method
	/* ---------------------------------------------------------------------
	Return if the supplied class can access this method:
	- true if in current module, or if method is public
	- false if method is private
	- true if accessLevel is protected, and module is descendant class
	- true if module's package is same as or subpackage of ours

	RETURNS:
	. $$ = true if method can be accessed by supplied module
	*/
	// cases we can decide ourselves
	if this.class = module.class quit true
	if this.accessLevel = this.accessLevelPUBLIC quit true
	if this.accessLevel = this.accessLevelPRIVATE quit false

	// cases we need to ask the class
	type PSLClass ocd = cc.getPSLClass( this.class)
	if module.inPackage( ocd.package) quit true		// package
	quit module.isDescendantOf( cc, ocd.class)		// proteced

	// ---------------------------------------------------------------------
public String toJSON( PSLTokenizer tknzr	// PSLTokenizer that can add JSON quotes
		)	// Produre JSON version of descriptor
	/* ---------------------------------------------------------------------
	Return this method declaration as a JSON object.
	The returned string will have a TAB character after each comma. This
	allows the caller to break down the string into multiple lines, using
	the TAB character as separator.

	NOTES:
	. The current implementation assumes that this.comment does not contain
		"invalid" JSON characters that need to be escaped.
	. This code would benefit from some general JSON related utilities.
	. This code shall be kept in sync with fromJSON()
	*/
	type String json = "{ "
	set json = json_ """class"" : "_ this.class.addQuotes()
	set json = json_ ","_ 9.char()_ """method"" : "_ this.method.addQuotes()
	set json = json_ ","_ 9.char()_ """resultClass"" : "_ this.resultClass.addQuotes()
	set json = json_ ","_ 9.char()_ """formalList"" : "_ this.formalList.toString().addQuotes()
	set json = json_ ","_ 9.char()_ """methodProc"" : "_ tknzr.addQuotes( this.methodProc)
	set json = json_ ","_ 9.char()_ """inLiteral"" : "_ $SELECT(this.inLiteral:"true",1:"false")
	set json = json_ ","_ 9.char()_ """accessLevel"" : "_ this.accessLevel
	set json = json_ ","_ 9.char()_ """methodType"" : "_ this.methodType
	set json = json_ ","_ 9.char()_ """comment"" : "_ tknzr.addQuotes( this.comment)
	quit json_" }"

	// ---------------------------------------------------------------------
public final Number typeDecl( String clsdes	// PSLClass descriptor
		) // Add declarations of formal parameters to type(,) array
	/* ---------------------------------------------------------------------
	Add the type declarations of the formal parameters to the compiler's
	type() array.

	NOTES:
	. This version works (only) with the currrent version of UCGM. It calls
		typeDec^UCGM() and trackNam^UCGM() for every formal parameter,
		and it calls setAssign^UCREC4OP(,,-1) for Record descendants
		that are NORET.
		It will also add a declaration for "this" if the method is an
		instance method.
	*/
	type Number fpn
	type List fpl = this.formalList
	type String cls, dups(), fp, fps, var
	type static PSLClass

	// add formal parameters to type(,)
	for fpn=1:1:fpl.count(";") {
		set fp = fpl.elementAt(fpn,";")
		set fps = fp.piece(" ").upperCase() set:fps=this.FPBYVALUE.upperCase() fps=""
		set cls = fp.piece(" ",2)
		set var = fp.piece(" ",3)
		if dups( var.piece("(")).exists() do PSL.error("Parameter "_var_" is multiply defined")

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		do typeDec^UCGM(var,cls,"FORMAL"_ fps), trackNam^UCGM(var)
		if PSLClass.isRecord( cls),fp.piece(" ")'=this.FPBYRETURN do setAssign^UCREC4OP( PSL.subRou, var, -1)
		set dups(var.piece("("))=""
	}

	// add this to type() if this is an instance method
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if this.methodType '> this.methodTypeFINAL do typeDec^UCGM("this", this.class, "FORMALRET")

	quit 0
 #OPTION ResultClass ON
public String vSIG()	quit "61461^42876^Frans S.C. Witte^20231"	// Signature - LTD^TIME^USER^SIZE
