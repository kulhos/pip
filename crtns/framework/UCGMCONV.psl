	/*
	ORIG: FSANCHEZ - 03/11/2003
	DESC: PSL compiler, Object Group, PSL and M conversion utilities library

	
	---- Revision History ------------------------------------------------
	03/30/07 - Frans S.C. Witte - CR: 27800
		* Replaced commands("WARN",) by do warnGroup^UCGM()
		* Added #OPTION ResultClass ON

	08/16/06 - Frans S.C. Witte - CRs: 22720 / 22274
		* Removed tryClass(), tryMeth(), tryMethA(), and tryPropA()
		  because functionality is now implemented in UCXOBJ.

	05/24/06 - Frans S.C. Witte - CRs: 21394 / 21395
	* Warnings now reported through warnGroup^UCGM()

	05/11/06 - Frans S.C. Witte - CRs: 21101 / 18164
		* Modified call to PSL.warn()
		* Modified search order in tryMethA

	01/05/06 - Frans S.C. Witte - CRs: 18163 / 18164
		* Added .toString() to ResultSet.getRow()

	11/14/05 - Frans S.C. Witte - CRs: 18247 / 15593
		* Modified tryMeth, tryMethA, and tryProp to modify the
		  formal parameter only if a match is found.

	04/07/05 - Frans S.C. Witte - CRs: 15592 / 15593
		* Function $$loadFunc() and subroutine init moved to UCDTASYS.
		* Replaced DbSet by ResultSet in all cases where data is used
		  exclusively for retrieval.

	12/21/04 - Frans S.C. Witte - CRs: 13403 / 13404
		* Inserted #ACCEPT before #BYPASS
		* Corrected spelling error in documentation.

	11/03/04 - Frans S.C. Witte - CRs: 11445 / 11446
		* Modified tryMethA to look only at methods of a restricted
		  number of primitive classes (see subroutine documentation).
		* Added accessability of subroutines.
		* Removed "#optimize" (no need to override environment settings)
		* Modified init() to include $FNUMBER, $ORDER, $QUERY, and $RANDOM
		  and updated class entry for $DATA (Object) and $GET (Primitive).
		* Changed pslPrsr("WARN","FUNCTION").data() to .get()
		* Added function $$isGlvn() to check for both lvn and gvn when
		  converting M functions to PSL methods.

	05/26/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

	05/20/04 - RussellDS - CR9172
		   Remove reference to objectmet.qualifiers in tryMeth.
		   Fixed scope errors.

        09/16/03 - Spier CR 6031,6032,6034  - arq 51423
		   Retrofit of changes made in v7.0 up to this date into Profile01
		   as well as release for v7.0

	04/07/03 - FSanchez arq 51423
		   Added tryProp procedure & changed warning message

	03/26/03 - Spier cr 3104
		   Retrofited to Profile01

	*/
	#PACKAGE framework.psl
	#OPTION ResultClass ON

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	// ---------------------------------------------------------------------
String convert( String expr
		, String funcs()
		, String tok
		)	// Convert function expression to method
	/* ---------------------------------------------------------------------
	Automated M function/subroutine to PSL method conversion.
	Translates legacy M extrinsic function calls and subroutine calls
	into equivalent PSL methods based on function template lookup

	DATA-QWIK table: STBLPSLFUNSUB	Columns: TEMPLATE - label^ROU(parameters)
	^STBL("PSLFUNSUB",TEMPLATE)	 METHOD   - PSL method name
						 
	Parameters in TEMPLATE contains list of function parameters with
	the value of the corresponding ordinal position of method parameter.  
	Position '0' [required] is used to indicate the function parameter 
	that contains the object of the method.  Empty parameter positions
	indicates no corresponding method parameter.  Position #10 and above
	use alpha (Example: 10='A',11='B')

	
	Function maps to the closest fitting template: (ie. all function parameters
	with actual values can be mapped to corresponding method paramaters).
	If there are no matching templates the function will not be replaced.

							 
	Examples:	$EXTRACT(0,1,2)=extract
			$$^SCAJD(0,1)=toDate
			$$NUM^%ZM(0,1,2)=toString
			$$^SCARND(0,,,,1,2)=roundDec						 
			$$^SCARND(0,,,1,,2)=roundCur

			$E(var,1)=var.extract(1)
			$$^SCAJD(var,"MM/DD/YY") = var.toDate("MM/DD/YY")

	*/

	type literal String tab = 9.char()

	type String parMap = expr.piece("(",1)_"("
	type String pars = expr.extract(parMap.length()+1,expr.length()-1)

	if pars.isNull() quit expr

	if expr.beginsWith("$"),'expr.beginsWith("$$") do {

		set parMap = parMap.piece("(",1).upperCase()
		type String f = "$ASCII,$CHAR,$DATA,$EXTRACT,$FIND,$FNUMBER,$GET,$LENGTH,$ORDER,$PIECE,$QUERY,$RANDOM,$REVERSE,$TRANSLATE"
		type Number y = f.find(parMap)

		if y set y = f.extract(1,y-1).length(","),parMap = f.piece(",",y)_"("
	}

	type Boolean ftok = tok.exists()

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if 'ftok set pars = $$TOKEN^%ZS(pars,.tok)

	type String atom
	type Number pos = 1 , ptr = 0

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	for  set atom = $$ATOM^%ZS(pars,.ptr,",",.tok,1) do { if ptr = 0 quit

		if atom = "," set parMap = parMap_"," , pos = pos+1
		else  set parMap = parMap_1 , parMap(pos) = atom
	}

	set parMap = parMap_")"

	type String record = funcs(parMap).get()

	if record.isNull() set record = $$loadFunc^UCDTASYS( parMap, funcs())

	type String template = record.piece(9.char(),1)
	type String method = record.piece(9.char(),2)
	type String class = record.piece(9.char(),3) 
	type String litreset = record.piece(9.char(),4) 

	if template.isNull() quit expr
	
	type Number i
	type String object = ""

	set pars = ""
	set template = template.piece("(",2).piece(")",1)
	set parMap = parMap.piece("(",2).piece(")",1)
	for i = 1:1:parMap.length(",") if parMap.piece(",",i) do {

		type String pos = template.piece(",",i)
		if pos?1A set pos = pos.ascii()-55		// Convert Alpha to Num
		if pos = 0 set object = parMap(i)
		else  set pars.piece(9.char(),pos) = parMap(i)
	}

	// If the method template itself has parameters, insert them
	if method [ "(" do {

		type String mpars = method.piece("(",2,method.length())
		set mpars = mpars.extract(1,mpars.length()-1)

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set mpars = $$TOKEN^%ZS(mpars,.tok)
		set method = method.piece("(",1)

		for i = 1:1:mpars.length(",") if 'mpars.piece(",",i).isNull() set pars.piece(9.char(),i) = mpars.piece(",",i)
	}

	if object.isNull() quit expr			// No object if function! 

	set expr = object

	// If the object is an expression enclose it in paranthesis,
	// except if that is already the case
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if '$$isGlvn(expr) & '$$isLit^UCGM($$UNTOK^%ZS(expr,tok)) do {
		if expr.extract()="(",expr.extract(expr.length())=")" quit
		set expr = "("_expr_")"
	}

	if class.isNull() set class = "String"
	set expr = expr_"."_method_"("_pars.replace(9.char(),",")_")"
	;
	; FSCW CR11445: Class inherits from ancestor. Cast only needed if 'class'
	; not an ancester of $$getClass^UCGM(object) 
	;;if $$getClass^UCGM(object) '= class set expr = "{"_class_"}"_expr
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String objCls = $$getClass^UCGM(object)
	if objCls.isNull() set objCls = "Object"
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if class '= objCls,'$$isAncestor^UCGM(class,objCls) set expr = "{"_class_"}"_expr

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if 'ftok set expr = $$UNTOK^%ZS(expr,tok)

	if 'litreset.isNull() do {

		type public Number level,msrc

		#ACCEPT CR=27800;Date=2007-10-09;PGM=Frans S.C. Witte;Group=DEPRECATED; use of type()
		type public String type(,)

		type String lvn
		type Number i,j
		for i = 1:1:litreset.length(",") do {
			set lvn = litreset.piece(",",i)

			#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
			for j = level:-1:0 if type(j,lvn).exists() do setInst^UCGM(lvn,msrc+1,"") quit
			}
		}
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	do warnGroup^UCGM("FUNCTION","Extrinsic function replaced: "_$$UNTOK^%ZS(expr,tok))

	quit expr


	// ---------------------------------------------------------------------
private Boolean isGlvn( PSLExpression expr	// expression to be checked
		)
	/* ---------------------------------------------------------------------
	This function accepts both local variables and global variables.
	This appeared to be needed because some of the code generated by
	the triggers passes global variables in combination with $ORDER() or
	$DATA().
	*/
	if expr.extract() = "^" set expr = expr.extract(2, expr.length())

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if $$isVar^UCGM(expr) quit 1

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	quit $$isArr^UCGM(expr)
 #OPTION ResultClass ON
public String vSIG()	quit "61348^60742^Frans S.C. Witte^9377"	// Signature - LTD^TIME^USER^SIZE
