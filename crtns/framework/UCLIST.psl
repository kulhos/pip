	/*
	ORIG: FSANCHEZ - 02/17/2003
	DESC: PSL List Method library

	---- Environment Sensitive Elements ------------------------------------
	contains
		This subroutine contains an occurrence of String.upperCase()
		that deals with potentially arbitrary compile-time PSL literals,
		which makes this unit CharacterSet dependent.

	---- Revision History --------------------------------------------------
	09/10/07 - Frans S.C. Witte - CRs 27800
		* Clean up to conform to stricter PSL rules
		* Added implementation to List.isEmpty

	09/20/06 - Frans S.C. Witte - CRs 22720 / 22274
		Modified use of PSL.mExpr to include calls to $$tokenPush /
		$$tokenPop

	05/19/06 - Frans S.C. Witte - CRs: 22060 / 22061
		Removed code that had been commented out before (unimplemented
		methods).
		Replaced .isConstant() by .isLiteral(),
		and .fold() by .toValue().

	04/25/06 - Frans S.C. Witte - CRs: 20280 / 18164
		Corrected problem in code generated for position.

	12/19/05 - Frans S.C. Witte - CRs: 18727 / 18728
		Replaced this. by PSL. and removed #XECUTE
		Corrected List.count() when List.isNull()

	09/05/05 - Frans S.C. Witte - CRs: 15592 / 15593
		Standardized labels generated for methods (vLstXyz)

	29/03/05 - Frans S.C. Witte - CRs: 15212 / 12513
		Subroutine add: added explicit cast {List} when applying the
		.contains() method to ObjectName.

	10/22/04 - Frans S.C. Witte - CRs: 11441 / 11442
		Removed subroutines maximum, minimum, and remove, because they
		only generate a compile-time warning.
		Added visibility of subroutines (all private).
		Removed "#OPTIMIZE".
		Empty delimiter now consistently replaced by comma (in position
		and sort)
		Code generated for sort now conforms to specs in PSL Help.
		Bugfix subroutine add for code generated if allowDup=0, and list
		contains the element.
		Subroutine contains now consistently uses PSL expression.

	05/20/04 - RussellDS - CR9172
		   Fix scope error in sort.
 
        05/12/04 - RussellDS - CR9676
		   Move Profile04 version to Profile01 to support single code
		   base for PSL.
	   
        09/16/03 - Spier CR 6031,6032,6034  - arq 51423
             Retrofit of changes made in v7.0 up to this date into Profile01
             as well as release for v7.0

	NOTES:
	* Empty element
		The consistent behavior with empty elements shall be verified
	* Delimiter
		All methods use the comma as the default delimiter.
		Because all generated code uses the M function $PIECE(),
		multi-character delimiters will also work.
		There is no support for quoted elements.
	* Sorting
		The generated code uses the M "subsript follows operator".
		This implies that canonic Numbers sort numerically, and
		preceed Strings when intermixed.
	*/
	#PACKAGE framework.psl

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	// ---------------------------------------------------------------------
private add	// Method: List.add(element,delimiter,allowDuplicate,inOrder)
	/* Generate code for List.add(,,,) method that adds an element to the List
	INPUTS:
	. PSL.objectName = source object
	. PSL.actual(1) = String element, the element to be added
	. PSL.actual(2) = String delimiter, the element delimiter (see general notes)
	. PSL.actual(3) = Boolean allowDuplicate
	. PSL.actual(4) = Boolean inOrder
		If 1, the element will be inserted in ascending order.
		The generated code may yield incorrect results if the source list
		is not already sorted: Shortcuts will prepend the element if it
		preceeds the first element, and append the element if it follows
		the last element.
	*/
	if PSL.actual(1).isNull(1) set PSL.return=PSL.objectName quit
	if PSL.actual(2).isNull(1) set PSL.actual(2)=",".addQuotes()

	type String allowDup=PSL.actual(3)
	type String inOrder=PSL.actual(4)

	if allowDup.isNull(1) set allowDup = 1		// default = Yes
	if inOrder.isNull(1)  set inOrder  = 0		// default = No
	
	if allowDup.isLiteral(),inOrder.isLiteral(),'inOrder.stripQuotes() do { quit

		set allowDup=allowDup.stripQuotes()

		if PSL.objectName.isNull(1) set PSL.return = PSL.actual(1) quit

		type PSLExpression obj = $$tokenPush^UCPATCH( PSL.objectName, "List")
		type PSLExpression ap1 = $$tokenPush^UCPATCH( PSL.actual(1),  "String")
		type PSLExpression ap2 = $$tokenPush^UCPATCH( PSL.actual(2),  "String")

		if PSL.objectName.isLiteral() do {

			if ap2.isLiteral() set PSL.return = (obj.stripQuotes()_ ap2.stripQuotes()).addQuotes()_ "_"_ ap1
			else  set PSL.return = obj_ "_"_ ap2_ "_"_ ap1
		}

		else  set PSL.return = "$S("_ obj_ ".isNull():"_ ap1_ ",1:"_ obj_ "_"_ ap2_ "_"_ ap1_ ")"
		
		/* Use explicit cast {List} because objectName can be literal, in which case its class will be String */
		if 'allowDup set PSL.return = "$S(({List}"_ obj_ ").contains("_ ap1_ ","_ ap2_"):"_ obj_ ",1:"_ PSL.return_ ")"

		// translate PSL expression to M expression
		set PSL.return = $$tokenPop^UCPATCH( PSL.mExpr( PSL.return), 3)

	}

	type literal String label = "vLstAdd"

	if 'PSL.subrouExists(label) do {
		
		type PSLBuffer buf=PSL.openBuffer("(String object, String p1, String p2, Boolean p3, Boolean p4)","List.add")

		do buf.add("if object.isNull() quit p1")
		do buf.add("if p2.isNull() set p2="",""")
		do buf.add("if 'p3,'p3.isNull(),({List}object).contains(p1,p2) quit object")
		do buf.add("if 'p4 quit object_p2_p1")
		do buf.add("")
		do buf.add("if object.piece(p2,1)]]p1 quit p1_p2_object")
		do buf.add("if p1]]object.piece(p2,object.length(p2)) quit object_p2_p1")
		do buf.add("")
		do buf.add("type Number i")
		do buf.add("for i=1:1:object.length(p2) if object.piece(p2,i)]]p1 quit")
		do buf.add("quit object.piece(p2,1,i-1)_p2_p1_p2_object.piece(p2,i,object.length())")

		do buf.insert(label, "List")
	}

	set PSL.return="$$"_label_"("_PSL.objectName_","_PSL.actual(1)_","_PSL.actual(2)_","_allowDup_","_inOrder_")"

	quit

	// ---------------------------------------------------------------------
private contains	// Method List.contains(String expr,String delimiter,Boolean ignoreCase) 
	/* Generate code for List.contains(,,,) method that adds an element to the List
	INPUTS:
	. PSL.objectName = source object
	. PSL.actual(1) = String element, the element to look for
	. PSL.actual(2) = String delimiter, the element delimiter (see general notes)
	. PSL.actual(3) = Boolean ignoreCase, default = 0 (case sensitive)
	*/

	if PSL.actual(1).isNull(1) set PSL.return="("_PSL.objectName_"="""")" quit
	if PSL.actual(2).isNull(1) set PSL.actual(2)=",".addQuotes()
	if PSL.actual(3).isNull(1) set PSL.actual(3)=0

	set PSL.return = $$tokenPush^UCPATCH( PSL.objectName, "List")
	type PSLExpression ap1 = $$tokenPush^UCPATCH(  PSL.actual(1), "String")
	type PSLExpression ap2 = $$tokenPush^UCPATCH(  PSL.actual(2), "String")
	type PSLExpression ap3 = $$tokenPush^UCPATCH(  PSL.actual(3), "Number")

	// Apply ignorCase function if appropriate
	if ap3.isLiteral(),ap3.stripQuotes() do {

		if PSL.return.isLiteral() set PSL.return = PSL.return.upperCase()
		else  set PSL.return = "({String}"_PSL.return_").upperCase()"

		if ap1.isLiteral() set ap1 = ap1.upperCase()
		else  set ap1=ap1_".upperCase()"
	}

	if ap2.isLiteral() do {

		type String delim=ap2.stripQuotes()
		if PSL.return.isLiteral() set PSL.return = (delim_PSL.return.stripQuotes()_delim).addQuotes()
		if ap1.isLiteral() set ap1=(delim_ap1.stripQuotes()_delim).addQuotes()
	}

	//if 'PSL.return.isLiteral() set PSL.return="("_ap2_"_"_PSL.return_"_"_ap2_")"
	if 'PSL.return.isLiteral() set PSL.return="("_ap2_"_"_PSL.return_"_"_ap2_")"
	if 'ap1.isLiteral() set ap1="("_ap2_"_"_ap1_"_"_ap2_")"

	//set PSL.return=PSL.mExpr("({String}"_PSL.return_"["_ap1_")")
	if ap3.isLiteral() set PSL.return = "("_ PSL.return_ "["_ ap1_ ")"
	else  set PSL.return = "$S("_ ap3_ ":({String}"_ PSL.return_ ").upperCase()["_ ap1_ ".upperCase(),1:{String}"_ PSL.return_ ")["_ ap1_ ")"

	set PSL.return = $$tokenPop^UCPATCH( PSL.mExpr( PSL.return), 4)

	if PSL.objectName.isLiteral() set PSL.return=$$toLit^UCSTRING(PSL.return)

	quit

	// ---------------------------------------------------------------------
private count	// Method: List.count(String delimiter) - Number of elements in a list
	/* Generate code for List.count() method that counts the elements of the
	   List.
	INPUTS:
	. PSL.objectName = source object
	. PSL.actual(1) = String delimiter, the element delimiter (see general notes)
	
	OUTPUTS:
	PSL.return = code generated for {String}objectName.piece(PSL.actual(1),PSL.actual(2))
	*/

	if PSL.actual(1).isNull(1) set PSL.actual(1) = ",".addQuotes()
	set PSL.return=PSL.mExpr("$S(({List}"_PSL.objectName_").isEmpty():0,1:({String}"_PSL.objectName_").length("_PSL.actual(1)_"))")
	quit

	// ---------------------------------------------------------------------
private elemAt    // Method: List.elementAt(Number position,String delimiter)
 	/* Generate code for List.elementAt(,) method that returns a single
 	   element. This method is the equivalent of String.piece(delim,pos).
 	   By providing a separate method, no cast to String is needed to access
 	   individual elements. Note also that elementAt() has the position in
 	   the first parameter, and the delimiter in the second. This supports
 	   a "natural" syntax when the default delimiter is used.
	INPUTS:
	. PSL.objectName = source object
	. PSL.actual(1) = Number position, default = 1 (first element)
	. PSL.actual(2) = String delimiter, the element delimiter (see general notes)
	*/
	if PSL.actual(2).isNull(1) set PSL.actual(2) = ",".addQuotes()
	set PSL.return = PSL.mExpr( "({String}"_PSL.objectName_").piece("_PSL.actual(2)_","_PSL.actual(1)_")")
	quit

	// ---------------------------------------------------------------------
private isEmpty	// Method: List.isEmpty() - Shorthand for List.count() = 0
	/* ---------------------------------------------------------------------
	Generate code for List.isEmpty() method
	INPUTS:
	. PSL.objectName = source object
	
	OUTPUTS:
	PSL.return = code generated for {String}objectName.piece(PSL.actual(1),PSL.actual(2))
	*/
	set PSL.return= "("_ PSL.objectName_"="""")"
	quit

	// ---------------------------------------------------------------------
private position    // Method: List.position(String expr,String delimiter,Boolean ignoreCase) - String is at list position
 	/* Generate code for List.position(,,,) method that adds an element to the List
	INPUTS:
	. PSL.objectName = source object
	. PSL.actual(1) = String element, the element to locate
	. PSL.actual(2) = String delimiter, the element delimiter (see general notes)
	. PSL.actual(3) = Boolean ignoreCase, default =0 (case sensitive)
	*/
 
        /* FSCW CR11441: One line removed (no reason to exclude empty element)
        if PSL.actual(1).isNull(1) set PSL.return=32767 quit
        */
 
 	// reduce source object to Constant if possible
	type PSLExpression exp = PSL.objectName.toValue()

	type String val=PSL.actual(1)		// element to look for
	type String del=PSL.actual(2)		// delimiter
	type String ignore=PSL.actual(3)

	/* FSCW CR11441: default delimiter shall be consistent in all methods
	if del.isNull(1) set del=del.addQuotes()
	*/
	if del.isNull(1) set del=",".addQuotes()
	if ignore.isNull(1) set ignore=0

	if del.isLiteral(),ignore.isLiteral(),'ignore.stripQuotes() do { quit

		if exp.isLiteral() set exp = (del.stripQuotes()_exp.stripQuotes()_del.stripQuotes()).addQuotes()
		else  set exp = "("_del_"_{String}("_exp_")_"_del_")"

		if val.isLiteral() set val=(del.stripQuotes()_val.stripQuotes()_del.stripQuotes()).addQuotes()
		else  set val=del_"_"_val_"_"_del

		set PSL.return=PSL.mExpr("({String}"_exp_").piece("_val_",1).length("_del_")")
	}

	type String label="vlstPos"

	if 'PSL.subrouExists(label) do {
		
		type PSLBuffer buf=PSL.openBuffer("(String object, String p1, String p2, Boolean p3)","List.position")

		/* do buf.add("type Number return") */
		do buf.add("if p3 set object=object.upperCase(),p1=p1.upperCase()")
		do buf.add("set object=p2_object_p2,p1=p2_p1_p2")
		/* do buf.add("set return=object.piece(p1,1).length(p2)")
		do buf.add("quit return") */
		do buf.add("if object'[p1 quit 0")
		do buf.add("quit object.piece(p1,1).length(p2)")

		do buf.insert(label, "Number")
	}

	set PSL.return="$$"_label_"("_PSL.objectName_","_PSL.actual(1)_","_del_","_PSL.actual(3)_")"

	quit

	// ---------------------------------------------------------------------
private sort	// Method: List.sort( String delimiter, Boolean allowDuplicate) - Sort a list in collating order
	/*
	INPUTS:
	. PSL.objectName
	. PSL.actual(1) = String delimiter, default: comma
	. PSL.actual(2) = Boolean allowDuplicate, default 1 (YES)
	*/

	/* FSCW CR11441: delimiter default shall be consistent (comma)
	if PSL.actual(1).isNull(1) set PSL.return=PSL.objectName quit	// No delimiter
	*/
	if PSL.actual(1).isNull(1) set PSL.actual(1) = ",".addQuotes()	// Default = comma
	if PSL.actual(2).isNull()  set PSL.actual(2) = 1		// Default = YES

	type String label="vlstSor"

	if 'PSL.subrouExists(label) do {
		
		type PSLBuffer buf=PSL.openBuffer("(String object, String p1, Boolean p2)","List.sort")

		do buf.add("if object.isNull() quit object")
		do buf.add("")
		do buf.add("type String e")
		do buf.add("type Number n,s()")
		do buf.add("if p1.isNull() set p1="",""")
		do buf.add("for n=1:1:object.length(p1) do {")
		do buf.add("  set e=object.piece(p1,n)")
		do buf.add("  if e.isNull() quit")
		do buf.add("  if p2 set s(e) = 1 + s(e).get()")	// s(e) = # elems
		do buf.add("  else  set s(e) = 1")		// no dups: 1 elem
		do buf.add("}")
		do buf.add("set e=s("""").order(),s(e)=s(e)-1,object=e")
		do buf.add("while 'e.isNull() do {")
		do buf.add("  for n=1:1:s(e) set object=object_p1_e")
		do buf.add("  set e=s(e).order()")
		do buf.add("}")
		do buf.add("quit object")

		do buf.insert(label, "List")
	}

	set PSL.return="$$"_label_"("_PSL.objectName_","_PSL.actual(1)_","_PSL.actual(2)_")"

	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61061^59051^Frans S.C. Witte^14528"	// Signature - LTD^TIME^USER^SIZE
