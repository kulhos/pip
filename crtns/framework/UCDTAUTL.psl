	/*
	ORIG: SPIER - 10/23/2002
	DESC: PSL compiler data loading, Data group, Upgradeable

	*************************************************************************
	* IMPORTANT NOTE:							*
	*	According to the rules that apply to PSL compiler upgrades,	*
	*	this DQ procedure shall only access the database using		*
	*	Db.select(,,,,,"/PSLBOOT") and the ResultSet methods.		*
	*	Furthermore if this unit is included in an upgrade, the		*
	*	associated .DAT files must be included as well.			*
	*************************************************************************

	---- Environment Sensitive Elements ------------------------------------
	DBCTLDVFM
		Subroutine masks() uses Db.select(,"DBCTLDVFM") to ensure that
		cco("mask",) is available for all compiler units.

	STBLSYSKEYWD
		Subroutine keywords() uses Db.select(,"STBLSYSKEYWD") to produce
		an array of system keywords that are understood by the compiler.

	---- Comments ----------------------------------------------------------

	This procedure is intended to be used for any loading of data
	required by the PSL code generator, and accessible during compiler
	upgrades.

	Access to data other than through Db.select(,,,,,"/PSLBOOT"), shall
	be provided by subroutines and functions in UCDTASYS.

	Athough DBCTLDVFM is a "user table", its access will be implemented here
	until the table's data store model changes from DQINT to DBI. This is
	based on the observation that even when boot-restrictionlevel=2 applies,
	site dependent values shall be used whenever they are available.

	Lib

	JRNFUNCS  - (no op)
	keywords  - Load table STBLSYSKEYWD into array passed by reference

	---- Revision History --------------------------------------------------
	2009-05-08, Frans S.C. Witte, CRs: 41380
		Corrected issue with default time mask

	06/01/07 - Frans S.C. Witte - CR: 27800
		* Replaced commands(,) by pslPrsr(,)
		* Replaced 'public' by 'ret' in fp declarations, and removed the
		  modifier for arrays.
		* UCINIT() moved to PSLCC.

	05/30/07 - Frans S.C. Witte - CR: 27486
		* Subroutine keywords(): Added .toString() to convert Row to String

	02/11/07 - Frans S.C. Witte - CRs: 25185 / 25186 / 25187
		Added assignment of pslPrsr("mask","Boolean") to masks().

	07/24/06 - Frans S.C. Witte - CRs: 21397 / 22061
		* Added $$kwdRow() and $$kwdRowDef(), and modified $$getSysKwd()
		  to call $$kwdRow().

	07/03/06 - Frans S.C. Witte - CRs: 22060 / 22061
		* Rewrote keywords() to use literal ResultSet and #WHILE,
		  and $$getSysKwd() to call keywords() for all-or-nothing cache.
		* Added catch-block for Db.select() in masks()

	05/01/06 - Frans S.C. Witte - CRs: 21394 / 21395
		* Copied UCINIT (back) from UCDTASYS into this unit.
		  Modified UCINIT to support $SCAU_UCOPTS and "INFO"
 
	04/07/06 - Frans S.C. Witte - CRs: 20280 / 18164
		* Added #ACCEPT for /PSLBOOT usage.

	03/06/06 - Frans S.C. Witte - CRs: 19760 / 18728
		* getSysKwd now uses case-insensitive search.

	11/24/05 - Frans S.C. Witte - CRs 18727 / 18728
		* Added $$getSysKwd() (called by UCXDD)
		* Added masks() (called by UCGM)

	06/11/05 - Frans S.C. Witte - CRs 15592 / 15593
		* Renamed DQ procedure to match M routine name.
		* Access type of JRNFUNCS changed to public (it is called from
		  ^SQLCMP, which does not belong to the PSL compiler).
		  Function turned into no-op.
		* Subroutine keywords(): Db.selecDbSet() replaced by Db.select(),
		  to reduce access to the (R)DB. All Db.select() calls use the
		  /PSLBOOT qualifier, which places the unit in the Upgrade
		  group.
	*/
	#PACKAGE framework.psl
	#OPTION  ResultClass ON

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************

	// ---------------------------------------------------------------------
private void JRNFUNCS( String KEYWORDS())	// DEPRECATED;
	/* ---------------------------------------------------------------------
	No-op. Used to load table STBLJRNFUNC into array passed by reference

	OUTPUTS:
	. none
	*/

	/* ================
	   CR15592: This subroutine will no longer be called by the SQL engine,
	   which was the only known caller. For this reason, the subroutine is
	   now a no-op. Once that call is removed, this subroutine will be
	   removed as well.
	type literal ResultSet rs = Db.select("FUNC,CODE", "STBLJRNFUNC")
	#WHILE rs.next() set KEYWORDS(rs.getCol(1)) = rs.getCol(2)
	================ */

	quit 

	// ---------------------------------------------------------------------
public String getSysKwd( noret String KWD	// requested keyword
		  , String caKwd()		// optional keyword cache
		  )	// Get the keyword translation from the cache, load if needed
	/* ---------------------------------------------------------------------
	Get the keyword translation from the cache, and load the cache with the
	keyword data if needed.

	OUTPUTS:
	. $$ = translation of keyword (DES column)
	*/
	type Row kwdRow = $$kwdRow( KWD, caKwd()).toRow( "#$$kwdRowDef^UCDTAUTL")
	quit kwdRow.des

	// ---------------------------------------------------------------------
public void keywords( String KWDS()	// supported keywords
		)	// Load table STBLSYSKEYWD into supplied array
	/* ---------------------------------------------------------------------
	Load table STBLSYSKEYWD into array passed by reference

	OUTPUTS:
	. KWDS(keyword) = des | globalscope | class


	 Example call 
		do keywords^UCDTAUTL(.KEYWORDS)

	NOTES:
	. In earlier versions the contents of the KWDS() array was derived
		from STBLSYSKEYWD at runtime. In RDB versions this data ended up
		in the RDB and in MDB this ended up in ^STBL("SYSKEYWORDS").
		Given that the table is considered part of the Framework, and
		distributed with the compiler, it is not intended to be modified
		in the taget environment. Uninteded additions to the table may
		even severely impact the code that results from (re)compiling
		the Profile application.
		In addition, the use of the /PSLBOOT qualifier requires a very
		disciplined check-in process. Failure to adhere to the
		all-or-none check-in principle is likely to lead to upgrade
		problems at the target site.
		For this reason the KWDS() array is initialized here using a
		literal ResutSet and #WHILE. This will result in a series of
		direct assignments in the generated code.
		This will work in bootstrap/upgrade situations as well because
		LitOpen^UCDB and LitFetch^UCRESULT will call OPEN^SQL() and
		FETCH^SQL(), and the SQL engine is always database independent.
		So it will always correctly retrieve the literal result from the
		underlying database, and because .DAT files are loaded before
		code compilation, the contents of the table will be correct as
		well.
	. The contents of the KWDS() array depends on the available keywords
		per Profile version. The m routine that is distributed as part
		of the Framework will "only" recognize the keywords that occur
		in STBLSYSKEYWD at the ORIGINATING site.
		This is OK as long as the other Framework units do not rely on
		keywords that were not present in the environment where UCDTAUTL
		was prepared.
	*/
	type literal ResultSet rs = Db.select("KEYWORD,DES,GLOBALSCOPE,CLASS", "STBLSYSKEYWD")

	#WHILE rs.next() set KWDS(rs.getCol(1)) = rs.getRow("|").toString().piece("|",2,4)

	quit

	// ---------------------------------------------------------------------
public String kwdRow( noret String KWD	// requested keyword
		, String caKwd()	// optional keyword cache
		)	// Get the keyword descriptor row from the cache, load if needed
	/* ---------------------------------------------------------------------
	Get the keyword descriptor row from the cache, and load the cache with
	the keyword data if needed.

	OUTPUTS:
	. $$ = Row object containing KEYWORD, DES, GLOBALSCOPE, CLASS

	NOTES:
	. The cache is maintained as an all-or-nothing cache that does support
		case insensitive lookup, but that does not store names with
		incorrect case. This is in line with the treatment of case
		mismatches of classes, methods, and properties.
	. There is a small performance penalty for this inflexibility.
		UCDBRT is known to suffer from this because it will always
		supply upper-case names (identifiers and keywords will have been
		converted to upper-case for SQL compliance, and ease of
		processing inside UCDBRT).
	*/
	if 'caKwd.data() do keywords( caKwd())

	// found as supplied, return complete descriptor, cf UCGM
	if caKwd( KWD).exists() quit KWD_"|"_caKwd( KWD)

	// Not found, try case insensitive lookup, but do not modify caKwd()
	type String KWU = KWD.upperCase()
	type String kwd = ""
	for  set kwd = caKwd( kwd).order() quit:kwd.isNull()  quit:kwd.upperCase() = KWU

	// If not found, even after lookup, return empty string
	if kwd.isNull() quit ""

	// found, return complete descriptor, cf UCGM
	quit kwd_ "|"_ caKwd( kwd)

	// ---------------------------------------------------------------------
public String kwdRowDef()	// return defintion of Row returned by $$kwdRow()
	/* ---------------------------------------------------------------------
	*/
	type literal String KWDROWDEF = "KEYWORD,DES,GLOBALSCOPE,CLASS"
	quit KWDROWDEF_ 9.char()_ 124

	// ---------------------------------------------------------------------
public void masks( PSLParser prsr)	// compiler options	/MECH=REFARR:RW
	/* ---------------------------------------------------------------------
	Load string mask defaults into prsr("PSL",className_"Mask")
	For each class for which a default mask applies, the following algoritm
	is maintained:
	- if 'prsr.getSetting( "PSL", class_"Mask", "").isNull() don't overwrite
	- else if DBCTLDVFM row exists, add it to prsr
	- else add a hard-coded default

	OUTPUTS:
	. do prsr.addSetting("PSL", "BooleanMask", default Boolean mask)
		Soft-coded default: SELECT MSK FROM DBCTLDVFM WHERE TYP='L'
		Hard-coded default: "+,-"
	. do prsr.addSetting("PSL", "DateMask", default Date mask)
		Soft-coded default: SELECT MSK FROM DBCTLDVFM WHERE TYP='D'
		Hard-coded default: "YEAR-MM-DD" (ISO / SQL compliant)
	. do prsr.addSetting("PSL", "TimeMask", default Time mask)
		Soft-coded default: SELECT MSK FROM DBCTLDVFM WHERE TYP='C'
		Hard-coded default: "24:60:SS" (ISO / SQL compliant)

	NOTES:
	. Even though this subroutine contains Db.select(), the call does NOT
		contain the /PSLBOOT qualifier because DBCTLDVFM is not
		distributed as part of the Profile application.
	. A data store mismatch between the originating site and the target site
		may lead to incorrect behavior as long as this element is not
		recompiled at the target. Because this element is part of the
		UPGRADE group, it will be compiled relatively early.
		Furthermore, if the originating environment is RDB and the
		target environment is MDB, then the %DBAPI call may result in a
		runtime exception. Until that is resolved, the originating
		environment shall be MDB.
	*/
	type literal String MASKDATE = "YEAR-MM-DD"
	type literal String MASKTIME = "24:60:SS"
	type literal String MASKBOOL = "+,-"

	type String msk

	// Ensure Boolean mask value
	if prsr.getSetting( "PSL", "BooleanMask", "").isNull() do {
		/* ================ Soft-coded from standard var
		type public String %MSKL
		if '%MSKL.get().isNull() do prsr.addSetting( "PSL", "BooleanMask", %MSKL.extract()_","_%MSKL.extract(2)) quit
		================ */

		/* Soft-coded from DBCTLDVFM */
		set msk = ""
		do {
			catch vEx {
				set msk = ""
			}
			type ResultSet rsD = Db.select( "MSK", "DBCTLDVFM", "TYP='L'")
			if rsD.next() set msk = rsD.getCol(1)
		}
		if 'msk.isNull() do prsr.addSetting( "PSL", "BooleanMask", msk.extract()_","_msk.extract(2)) quit

		/* Hard-coded */
		do prsr.addSetting( "PSL", "BooleanMask", MASKBOOL)
	}

	// Ensure Date mask value
	if prsr.getSetting( "PSL", "DateMask", "").isNull() do {
		/* ================ Soft-coded from standard var
		type public String %MSKD
		if '%MSKD.get().isNull() do prsr.addSetting( "PSL", "DateMask", %MSKD) quit
		================ */

		/* Soft-coded from DBCTLDVFM */
		set msk = ""
		do {
			catch vEx {
				set msk = ""
			}
			type ResultSet rsD = Db.select( "MSK", "DBCTLDVFM", "TYP='D'")
			if rsD.next() set msk = rsD.getCol(1)
		}
		if 'msk.isNull() do prsr.addSetting( "PSL", "DateMask", msk) quit

		/* Hard-coded */
		do prsr.addSetting( "PSL", "DateMask", MASKDATE)
	}

	// Ensure Time mask value
	if prsr.getSetting( "PSL", "TimeMask", "").isNull() do {
		/* ================ Soft-coded from standard var
		type public String %MSKT
		if '%MSKT.get().isNull() do prsr.addSetting( "PSL", "TimeMask", %MSKT) quit
		================ */

		/* Soft-coded from DBCTLDVFM */
		set msk = ""
		do {
			catch vEx {
				set msk = ""
			}
			type ResultSet rsT = Db.select( "MSK", "DBCTLDVFM", "TYP='C'")
			if rsT.next() set msk = rsT.getCol(1)
		}
		if 'msk.isNull() do prsr.addSetting( "PSL", "TimeMask", msk) quit

		/* Hard-coded */
		do prsr.addSetting( "PSL", "TimeMask", MASKTIME)
	}
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61530^32638^Frans S.C. Witte^13556"	// Signature - LTD^TIME^USER^SIZE
