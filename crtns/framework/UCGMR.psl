	/*
	ORIG: FSANCHEZ - 01/15/98
	DESC: Library of runtime utilities (with target language dependent code)

	---- Environment Sensitive Elements ------------------------------------
	Target Language Dependency
		This unit implements the runtime behavior of the following
		methods:
		- Object.toString()
		- Object.equals()
		- Object.copy()
		Furthermore it implements the MTL runtime exception handling
		code.

	---- Comments ----------------------------------------------------------
	This unit implements the PSL runtime system. Some of the functions are
	Target Language Independent. The code of these functions occurs at the
	beginning of this unit. However, most of the functions are target
	language dependent. The code for these functions will be grouped per
	target language.

	----- Revision History -------------------------------------------------
	2008-10-20, Frans S.C. Witte - CRs 35741/35918/35922
		Added call to garbageCollect^vRuntime() in ZX().

	09/03/07 - Frans S.C. Witte - CR: 27800
		* Removed $$isClass(). It is no longer called.
		* Removed $$clsByName() because it just returned
		  $$rtClsByName^UCXOBJ().
		* Adapted cls* to call new UCXOBJ functions

	08/20/07 - KWANL / Frans S.C. Witte - CR 28995
		* Adapted to new CATCH/THROW mechanism
		* Removed ZT() (not called, no referenced found in either of the
		  crtns/*.m files in /p01dev1, /p04devlx, /v71devlx, or
		  /v72dev_gtm).

	04/27/06 - Frans S.C. Witte - CR 26334
		Corrected value of $$clsByName() if class not found

	08/18/06 - Frans S.C. Witte - CRs 22720 / 22274
		* Converted to PSL
		* Added $$UPPER() and $$LOWER() to be called by "phase 0" and
		  "phase 1" units during bootstrap.
		* Added $$clsByName and deprecated isClass().
		* Re-grouped labels (see intro) and documented target language
		  specifics.

	03/07/06 - RussellDS - CRs 19962 / 18164
		Modify ZX section to remove use of %ZTRAP and replace with
		use of %ZTPTRAP to correspond with changes to server code.

	11/07/05 - Frans S.C. Witte - CRs 18163/18164
		Added $$isClass() that returns if expr is a class without
		causing side-effects. $$clsIsAnc and $$clsIsCls now call
		$$isClass.

	 04/06/05 - Frans S.C. Witte - CRs 14919 / 14920
		Runtime code for Object.copy() now uses M MERGE command.

	12/07/04 - Frans S.C. Witte - CRs 11445 / 11446
		Subroutines clsIsAnc and clsIsClass: added new reClass because
		the routines may be called at runtime.

	10/12/04 - Frans S.C. Witte - CRs 11441 / 11442
		* Added function clsIsAnc(), a runtime wrapper for
		  Class.isAncestor and Class.isDescendant.
		* Added function clsIsClass(), a runtime wrapper for
		  Class.isClass.
		* Added code to subroutine ZX() that takes care of %ZTRAP to
		  deal with GT.M runtime errors (after handling all scoped catch
		  blocks).

	05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

	07/31/00 - Terrie Dougherty - 40587
		Collapse routine to allow roll forward from V6.0 through V6.3

	10/07/99 - Chiang - 33890
		Modified 'copy' and 'equals' sections to support record
		type 1 file.
	*/
	#PACKAGE framework.psl

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	/* ================================================================== */
	/* Target Language Independent functions and subroutines              */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
clsIsClass(c) // runtime wrapper for Class.isValid
	/* ---------------------------------------------------------------------
	This function "wraps" the call to $$rtClsByName^UCXOBJ(). It checks for
	an empty value, because that is not handled by $$rtClsByName^UCXOBJ()

	ARGUMENTS:
	. c = name of class
	*/
	if c="" quit ""
	quit $$rtClsByName^UCXOBJ(c)'=""

	// ---------------------------------------------------------------------
clsIsAnc(a,d) // runtime wrapper for Class.isAncestor / Class.isDecendant
	/* ---------------------------------------------------------------------
	This function "wraps" the call to $$isAncestor^UCGM().
	It validates input values (empty values are not accepted by
	isAncestor^UCGM), and sets reClass.

	ARGUMENTS:
	. a = name of anscestor class
	. d = name of descendant class
	*/
	if a="" quit ""
	if d="" quit ""
	set a=$$rtClsByName^UCXOBJ(a) if a="" quit 0
	set d=$$rtClsByName^UCXOBJ(d) if d="" quit 0
	quit $$rtClsIsAnc^UCXOBJ(a,d)

	// ---------------------------------------------------------------------
public LOWER( String S) // Return S.lowerCase()
	/* ---------------------------------------------------------------------
	Stub for M routines to obtain the lowercase conversion in a Character
	Set Indendent way.
	*/
	quit S.lowerCase()

	// ---------------------------------------------------------------------
public UPPER( String S) // Return S.upperCase()
	/* ---------------------------------------------------------------------
	Stub for M routines to obtain the uppercase conversion in a Character
	Set Indendent way.
	*/
	quit S.upperCase()

	#IF 1
	/* ================================================================== */
	/* MTL code                                                           */
	/* ****************************************************************** */

	// ---------------------------------------------------------------------
public copy( Number v1) // MTL runtime for Object.copy()
	/* ---------------------------------------------------------------------
	MTL copy instantiates a new entry in vobj() and MERGEs the source vobj()
	tree into the new target vobj() tree. It returns the object id of the
	new object.
	*/
	type Number vOid

	#ACCEPT CR=22720; Date=2006-08-18; PGM=Frans S.C. Witte; Group=BYPASS
	#BYPASS
	set vOid=$O(vobj(""),-1)+1
	merge vobj(vOid)=vobj(v1)
	#ENDBYPASS

	quit vOid

	// ---------------------------------------------------------------------
public equals( Number p1, Number p2) // MTL runtime for Object.equals()
	/* ---------------------------------------------------------------------
	MTL Object.equals() compares two vobj() trees.
	To compare equal, both the structure and the contents must be identical:
	- Each node in vobj(p1) must have an identical node in vobj(p2).
	- Each node in vobj(p2) must have an identical node in vobj(p1).

	NOTES:
	. This function is completely implemented in PSL, using
		- Primitive values
		- Object.query()
		- access to vobj() "hidden" in PSL variable indirection
	*/
	type Boolean equals
	type String z1, z1e, z2, z2e
	set z1 = "vobj("_ p1, z1e = z1, z1 = z1_ ")"
	set z2 = "vobj("_ p2, z2e = z2, z2 = z2_ ")"

	set equals = 1
	if @z1.get() '= @z2.get() quit 0	// compare top nodes
	for  set z1 = @z1.query(), z2 = @z2.query()  quit:z1.extract( 1, z1e.length())'=z1e  do { if equals=0 quit

		if z1.extract( z1e.length()+1, z1.length()) '= z2.extract( z2e.length()+1, z2.length()) set equals = 0
		else  if @z1 '= @z2 set equals = 0
	}
	quit equals

	// ---------------------------------------------------------------------
public toString( Number p1) // MTL runtime for Object.toString()
	/* ---------------------------------------------------------------------
	MTL Object.toString() produces a TAB separated List of node-value pairs,
	with node the list of subscripts descending from vobj(p1).

	NOTES:
	. This function is completely implemented in PSL, using
		- Primitive values
		- Object.query()
		- access to vobj() "hidden" in PSL variable indirection
	*/
	type String return,zo,ze
	set zo = "vobj("_ p1, ze = zo, zo = zo_ ")"

	if @zo.exists() set return = @zo_ 9.char()
	else  set return = ""

	for  set zo = @zo.query() quit:'zo.beginsWith(ze)  set return = return_ zo.extract( ze.length()+2, zo.length())_ "="""_ @zo_ """"_ 9.char()

	quit return.extract( 1, return.length()-1)

	// ---------------------------------------------------------------------
public ZX( Number voPtr, String voGoto, String voTag)  // MTL General error handler
	//public ZX( Number voPtr )
	/* ---------------------------------------------------------------------
	Note related to %ZTPTRAP usage -- %ZTPTRAP is set by the PBSSRV server
	to specify the error handling action for GTM-TPTIMEOUT error.  This
	action will force a return to the server and allow it to construct an
	appropriate reply, without getting caught in any application level
	error handling loops.  Basically, this ensures immediate return to the
	server in the event of a TPTIMEOUT.  All other errors, whether GTM, PSL,
	or other, are handled as defined by the currently set trap.

	The placement of the execution of %ZTPTRAP is in order to ensure that
	PSL catch blocks in scope are first executed, and that vobj is cleaned
	up, prior to execution of %ZTPTRAP.

	NOTES:
	. This subroutine is coded as a single #BYPASS block because there is
		no additional advantage to coding one or two lines in "basic
		PSL".
	. Code generated by UCGM per CR28995 does no longer pass the voGoto and
		voTag parameters. However, code that has not yet been recompiled
		may end up in catch-blocks that passes these parameters, and
		expects ZX^UCGMR() to break down the stack. To deal with this,
		the current version contains all 3 parameters, and if the second
		is supplied at runtime, it expects the third to be present as
		well, and will break down the stack inside this subroutine.
		If the second parameter is not present, then the "new" behavior
		will be exhibited. Cleanup can occur as soon as CR28995 has
		been included in a Framework label, because that ensures that
		all Phase 0 / Phase 1 elements will be distributed with the
		correct runtime behavior.
	*/
	#ACCEPT CR=22720; Date=2006-08-18; PGM=Frans S.C. Witte; Group=BYPASS
	#BYPASS
	;;do @voTag
	;
	; reset $EC to end error processing mode
	SET $ECODE="",$ZERROR=""
	;
	IF $DATA(vobj) FOR  SET voPtr=$ORDER(vobj(voPtr)) QUIT:voPtr=""  KILL vobj(voPtr)
	DO garbageCollect^vRuntime($STACK-1)
	IF $GET(%ZTPTRAP)'="",$PIECE($ZSTATUS,",",3)["%GTM-E-TPTIMEOUT" XECUTE "set %ZTPTRAP="""" "_%ZTPTRAP
	;;zgoto voGoto-1
	IF $DATA(voGoto) ZGOTO @("voGoto:"_voTag)
	#ENDBYPASS
	quit

	// ---------------------------------------------------------------------
public vobjDfer( String vObjDfer)  //
	/* ---------------------------------------------------------------------
	Run-time support utility to conditionally destroy the objects in the
	"deferred destroy" list.

	NOTES:
	. This entry will not be called until the vobj-management proposal has
		been implemented.
	*/
	#ACCEPT CR=27800; Date=2007-07-12; PGM=Frans S.C. Witte; Group=BYPASS
	#BYPASS
	NEW vD,vN,vO,vS
	SET vS=+vobjDfer
	FOR vN=2:1:$LENGTH(vobjDfer,",") SET vO=$PIECE(vobjDfer,",",vN) IF vO]"""",$PIECE($GET(vobj(vO,-1)),$CHAR(9),2)'<vS DO
	.	SET vD=$PIECE(vobj(vO,-1),$CHAR(9),3)
	.	IF vD="" KILL vobj(vO) QUIT
	.	DO @(vD_"(vO)")
	#ENDBYPASS
	quit	

	// ---------------------------------------------------------------------
public vobjDes( Number vS, Object vO)  //
	/* ---------------------------------------------------------------------
	Runtime support ustility that destroys the object who's ID is supplied,
	provided the object's STACK level is greater than or equal to vS.

	NOTES:
	. This entry will not be called until the vobj-management proposal has
		been implemented.
	*/
	#ACCEPT CR=27800; Date=2007-07-12; PGM=Frans S.C. Witte; Group=BYPASS
	#BYPASS
	QUIT:vO=""  QUIT:$PIECE($GET(vobj(vO,-1)),$CHAR(9),2)<vS
	NEW vD SET vD=$PIECE(vobj(vO,-1),$CHAR(9),3)
	IF vD="" KILL vobj(vO) QUIT
	DO @(vD_"(vO)")
	#ENDBYPASS
	quit	

	//---------------------------------------------------------------------
private ZE // General error handler pre-processor
	/* --------------------------------------------------------------------
	This subroutine is a error handler pre-processor that constructs the 
	value of $ZE from $ZS if $ZE is empty, before executing the error trap.
	*/

	#ACCEPT CR=28995; Date=2007-08-12; PGM=KWANL; Group=BYPASS
	#BYPASS
	if $ZE="" set $ZE="0,"_$P($ZS,",",2,999)
	#ENDBYPASS
	quit

	//---------------------------------------------------------------------
public LOG(String vLabref, Error vErr) // Entry point to call error logger
	/* --------------------------------------------------------------------
	This is a wrapper subroutine to call the logger specified in the catch-
	statement. There are several reasons to use a wrapper:
	1) Any logger, including the default error logger in UTLERR, may contain
		a catch-statement, which resets the value of $ECODE to the empty
		string.
		Because the $ETRAP constructed by the compiler relies on a
		non-empty $ECODE to "unwind" the DO stack until the DO-level of
		the catch-block is reached, this wrapper will have to ensure
		that $ECODE is non-empty on quit from this subroutine.
	2) The logger may itself throw an exception.
		The effect of such an exception depends on the M processing mode
		when the exception is thrown. It that were in Errorhandling mode
		then M will automatically pop a DO-level, and invoke the $ETRAP
		at that DO-level. If, on the other hand, the exception occurs
		while in Normal mode, M will invoke the current $ETRAP value at
		the DO-level whre the exception occurs. If the $ETRAP that
		called this wrapper is still in effect, this will end in a
		stack overflow.
	
	The wrapper calls the logger under the protection of a catch-statement.
	This ensures that the logger is called in M Normal processing mode.
	However this also implies that the wrapper must (re)throw vErr (as
	modified by the logger) to force a non-empty $ECODE. As this exception
	will be handled by the $ETRAP tyhat called the wrapper, vErr.logged is
	set to true to prevent additional calls to this wrapper and the logger.

	Any exception thrown by the logger will be ignored (i.e. the logger will
	never cause side effects other than its logging activitity).

	As a result, a logger will be called exactly once per thrown exception
	within the scope of the catch-statement.
	*/
	do {	// call logger under protection of an ignore-all catch-statement
		catch xIgnore {
		}

		#ACCEPT CR=28995; Date=2007-08-12; PGM=KWANL; Group=BYPASS
		#BYPASS
		do @(vLabref_"(.vErr)")
		#ENDBYPASS
	}  // end code protected by catch

	/* Indicate that the logger has been called regardless of the result,
	   and (re)throw vErr as modified by the logger.
	   */
	set vErr.logged = true
	throw vErr
	quit	// will never be reached

	/* ======== END TARGET = M ======== */
	#END
 #OPTION ResultClass ON
public String vSIG()	quit "61293^42583^Frans S.C. Witte^15106"	// Signature - LTD^TIME^USER^SIZE
