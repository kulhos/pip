
	/*
	ORIG: Frans S.C. Witte 
	DESC: PSL Object Class Library - Methods of Class Primitive 

	******** Revision History **********************************************
	2009-03-11, Frans S.C. Witte, CR 35741/37572
		primRel() now recognizes Integer as PRIM0PROP.

	2008-12-11, Frans S.C. Witte, CR 35741/36952
		* Corrected isNull to support underscore in quoted column name

	2008-04-03, Frans S.C. Witte, CR: 33569
		Corrected mtd2m() for literal String result.

	03/21/07 - Frans S.C. Witte / Kevin Braun - CR: 27800
		* Add isNotNull, setNull, and runtime implementation
		* Fixed bug in isNull (when two double quotes were considered
		  null, so was a single double quote).
		* Removed $$primNext() because it is no longer used (see UCXOBJ)
		* Modified calls to UCXOBJ to conform to new signatures.
		* Rewrote $$primDes() and $$primVar() to call oc*^UCXOBJ().
		* init() now only sets primtype(type,op,type)
		
	08/16/06 - Frans S.C. Witte - CRs: 22720 / 22274
		Replaced methods(,) by pslMtd(,)

	06/01/06 - Frans S.C. Witte - CRs: 22060 / 22061
		Replaced '255' by PSL.maxLitLength, and public vars by PSL.var

	04/07/06 - Frans S.C. Witte - CRs: 20280 / 18164
		Corrected #ACCEPT to  supply all required tags

	12/23/05 - Frans S.C. Witte - CRs: 18727 / 18728
		Replaced this. by PSL. and removed #XECUTE

	11/17/04 - Frans S.C. Witte - CRs 11439 11441 / 11440 11442
		Initial version. Derived from code in M Routine UCGM.
		copied isNull from String.
	*/
	#PACKAGE framework.psl

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	// ---------------------------------------------------------------------
get()	// generate code for Prmitive.get
	/* If objectName is a literal, then $GET() is a no-op, and objectName
	   can be returned. Else, psl2m(0,1) will be called to handle the
	   "standard" case.
	INPUTS:
	type public String actual()	/* actual parameters
		(1) = default if supplied

	NOTES:
	- Should check that objectName is a variable or an array
	*/

	if PSL.objectName.isLiteral() set PSL.return = PSL.objectName
	else  do psl2m(0,1)

	quit

	// ---------------------------------------------------------------------
init()	// initialize compiler structures to handle primitives
	/*
	INPUTS:
	
	OUTPUTS:
	. primtyp(,,) = array of data type mappings
	*/
	type public Number primtyp(,,)
	
	/* Initialize type for results of certain binary operations
	*/
	set primtyp("Date","+","Number")="Date"
	set primtyp("Date","-","Number")="Date"

	set primtyp("Time","+","Number")="Time"
	set primtyp("Time","-","Number")="Time"
	
	quit

	// ---------------------------------------------------------------------
isNotNull()	// Method Blob/Column/Date/Memo/String/Time.isNotNull - Primitive is a null
	/* Generate code to check if value is not null
	INPUTS:
	type public String actual()	/* actual parameters
		(1) = literal 0 or 1			/TYP=Boolean/REQ
			Indicates whether the string consisting of
			two quotes shall be treated as null
	*/
	do isNull()
	if PSL.return = "0" set PSL.return="1"
	else  if PSL.return = "1" set PSL.return="0"
	else  set PSL.return = "'"_PSL.return
	quit

	// ---------------------------------------------------------------------
isNullOrLiteralNull( Primitive val)	//Runtime implementation used by isNull method
	/*
	Return true if the given value is the empty string or a string of two double quotes (a "literal null")
	This method is only used by the method generator isNull() in the case where two double quotes
	are also considered null.
	*/
	quit (val = "" ! (val = """"""))

	// ---------------------------------------------------------------------
isNull()	// Method String/Date/.../Primitive.isNull - Primitive is a null
	/* Generate code to check if a primitive is null
	INPUTS:
	type public String actual()	/* actual parameters
		(1) = literal 0 or 1			/TYP=Boolean/REQ
			Indicates whether the string consisting of
			two quotes shall be treated as null
	*/
	type Boolean specialNull	//if true, two double quotes count as null

	//by default, do not treat the string consisting of two quotes as null
	if PSL.actual(1).isNull() set specialNull = 0
	else  set specialNull = PSL.actual(1).stripQuotes()

	/* FSCW 2007-06-01: The code below is INCORRECT PSL.objectName will
	   already contain generated M code, and is likely to contain constructs
	   that are invalid in PSL expessions. For example if PSL.objectName
	   contains a M $$extRef(.passByRef,$ZNOPSL), the dot does indicate a
	   column reference.
	//this method handles columns also.  If objectName refers to a column, then
	//replace it with the curVal for the column
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if PSL.objectName.class="Column" set PSL.objectName=$$valExpr^UCGM(PSL.objectName.expr)
	*/
	// Handle Column.isNull()
	if PSL.objectName.class = "Column" {
		//Use valExpr to replace the column reference with the column's curVal.
		//Tokenize objectName before sending to valExpr, untokenize after
		type String lexpr
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set lexpr = $$TOKEN^%ZS(PSL.objectName.expr,.PSL.tok,"")
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set lexpr=$$valExpr^UCGM(lexpr)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set lexpr=$$UNTOK^%ZS(lexpr,.PSL.tok)
		set PSL.objectName = lexpr
	}

	if specialNull {
		//For a simple expression, use the following as we can refer to 
		//objectName twice without side-effects.
		//For non-simples, use the runtime implementation to avoid side-effects of evaluating
		//the expression twice in something like expr="" ! expr=""""""
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		if $$isSimple^UCGM(PSL.objectName) set PSL.return = "("_PSL.objectName_"=""""!("_PSL.objectName_ "=""""""""""""))"
		else  set PSL.return="$$isNullOrLiteralNull^UCPRIM("_PSL.objectName_")"
	}		
	else  set PSL.return = "("_ PSL.objectName_ "="""")"

	if PSL.objectName.isLiteral() set PSL.return = $$toLit^UCSTRING( PSL.return)

	quit

	// ---------------------------------------------------------------------
setNull()	// Method Primdesc.setNull - set the Primitive descendant to null
	/* ---------------------------------------------------------------------
	Generate code to set the instance to null
	INPUTS:
	type public String actual()	/* actual parameters
		(1) = literal 0 or 1			/TYP=Boolean/REQ
			Indicates whether the string consisting of
			two quotes shall be treated as null
	*/
	type static PSLClass

	if PSL.objectName.class = "Column" {
		if PSL.postCond'="" throw Class.new("Error", "%PSL-E-POSTCOND: Post conditional on Column.setNull() not allowed.")

		type Number ptr = 0
		type String lexpr	//rec.col
		type String lvar,lcls	// instance variable and its class
		/* PSL.objectName.expr will be untokenized, but
		   curVal^UCCOLUMN requires a tokenized value
		   */
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set lexpr = $$TOKEN^%ZS(PSL.objectName.expr,.PSL.tok,"")

		/* Use curVal^UCCOLUMN to get correct pass-1 M code for setting
		   the column. It will give something like
		   $C(7)_"31.00001="_$C(31)_$C(8)
		   We'll need to replace the $C(31) with the RHS;
		   optNload^UCREC4OP will convert it into a real set.
		   NOTE: curVal^UCCOLUMN expects the table name in the second
		   actual. We derive it here from the instance variable, which
		   will be incorrect in case of a cast:
		   	{RecordDEP}acn.depcol.setNull()
		   */
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set lvar = lexpr.piece(".", 1), lcls = $$getClass^UCGM( lvar)
		set PSL.return = $$curVal^UCCOLUMN( lvar, PSLClass.tableNameOf( lcls), lexpr.piece(".",2), 1, "", .ptr)
		set PSL.return = PSL.return.replace( 31.char(), """""")

		/* PSL.class gets set in curVal and makes DO^UCGM complain that
		   a void method was expected.  Force PSL.class back to void.
		   */
		set PSL.class="void"
	}
	else  {
		/* The expression must be assignable, so it must be a variable
		   (possibly array) or a property (not a method) */
		type Boolean assignable
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set assignable = $$isVar^UCGM(PSL.objectName)!$$isArr^UCGM(PSL.objectName)!($$isObj^UCGM(PSL.objectName)&(PSL.objectName'["("))
		if 'assignable {
			throw Class.new("Error", "%PSL-E-SETNULL: Can only use setNull on a variable or property")
		}
		
		if PSL.postCond="" {
			/* no post-conditional so we know we've set the value to
			   empty string.
			   */
			#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
			do setInst^UCGM( PSL.objectName, "", """""", PSL.level)
		}
		else  {
			/* post-conditional: we may or may not have set the
			   value to empty string, so indicate value is now
			   unknown
			   */
			#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
			do setInst^UCGM( PSL.objectName, "", "", PSL.level)
		}
		set PSL.return = " S"_PSL.postCond_" "_PSL.objectName_"="""""
	}
	
	/* The DO command will already be in mcode; we don't want a do, so back
	   it off.
	   */
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	set PSL.mcode = $$backup^UCGM(PSL.mcode)

	quit

	// ---------------------------------------------------------------------
prim2prim( String tt	// target datatype to be assigned to PSL.class
		)		// "code generator" for Xxx.toYyy()
	/* ---------------------------------------------------------------------
	Per CR27800, classes that are implemented as a single M string do not
	automatically have a .toString() "no-op" method. Furthermore, the
	String class does not contain methods that "convert to" the target class
	(another no-op). This subroutine can be used as the "code generator"

	It is used for Row.toString() and List.toString()
	*/
	set PSL.class = tt, PSL.return = PSL.objectName

	quit

	// ---------------------------------------------------------------------
primRel( String cls1
		, String cls2
		)
	/* ---------------------------------------------------------------------
	Return if two primitive classes are related.
	Currently all Intrinsic zero property classes are considered related.

	A future versoin of this function is likely to use #PSL Version to
	successively limit the number of acceptable compatibilities.

	OUTPUTS:
	. $$ =	0 if classes are not related (probably an error)
		1 if classes are equal or mutually compatible
	*/
	type literal List BYOVERRIDE = "Boolean,ByteString,Date,Integer,List,Memo,Number,Primitive,String,Time,PSLExpression"
	if BYOVERRIDE.contains( cls1), BYOVERRIDE.contains( cls2) quit 1

	/* ================ FSCW CR27800:
	   The hardcoded combinations below are temporary !!
	  As long as the PSLColumn and PSLTable classes are not implemented as
	   Class Definition Module, the instantiation code needs to treat the
	   instance as a String in order to be able to set the read-only
	   property values. The overhead of "hiding" these type conversions in
	   dummy function calls is frequently unacceptable: the classes are used
	   by SQL runtime.
	   The lines shall be removed as soon as the classes are implemented as
	   Class Definition Modules. ================ */
	if cls1 = "String" quit ({List}"PSLColumn,PSLTable,SchemaColumn,SchemaTable").contains( cls2)
	if cls2 = "String" quit ({List}"PSLColumn,PSLTable,SchemaColumn,SchemaTable").contains( cls1)

	quit 0

	// ---------------------------------------------------------------------
primStr( PSLParser pslPrsr
		, String sCls
		) // is class implemented as a single String?
	/* ---------------------------------------------------------------------
	With the new primitive class types, single node and multiple node
	primitives cannot be treated eqaul under all circumstances.
	*/
	type static PSLClass

	quit:sCls.isNull() 0
	quit pslPrsr.getPSLClass( sCls).classType > PSLClass.classTypePRIMITIVE

	// ---------------------------------------------------------------------
primVal( PSLParser pslPrsr
		, String sCls
		) // is class implemented as a primitive value (PRIM0PROP)
	/* ---------------------------------------------------------------------
	With the new primitive class types, single node and multiple node
	primitives cannot be treated equal under all circumstances.
	*/
	type static PSLClass

	quit:sCls.isNull() 0
	quit pslPrsr.getPSLClass( sCls).classType = PSLClass.classTypePRIM0PROP

	// ---------------------------------------------------------------------
primVar( PSLParser pslPrsr	// PSLParser
		, String sCls		// name of class
		)	// is class implemented as primitive value?
	/*
	RETURNS:
	. 1 if class implementation always uses straight M (primitive) variables
	. 0 if class implementation may use vobj()
	
	NOTES:
	. This function returns '0' for all Record classes, even though the
	  implementation may sometimes be optimized to use straight variables.
	*/

	quit:sCls="" 0		// empty class does not use primitive vars

	quit pslPrsr.getPSLClass( sCls).classType > 0

	// ---------------------------------------------------------------------
	//private primDes( String class)    // is class descendent of Primitive?
	/*
	ARGUMENTS:
	. class = name of class
	
	INPUTS:
	. pslPrsr("pslCls",class) = class descriptor

	RETURNS:
	. $$ocPrimDes^UCXOBJ()
	
	NOTES:
	. This function returns '1' for class Primitive, even though a class is
	  not a descendent of itself.
	*/
	//type public String pslPrsr(,)

	//quit:class="" 0		// empty class does not descent from Primitive

	//type Number val = $$getPSLClass^PSLParser( pslPrsr(,), class).classType - 1
	//quit $SELECT(val'<0:val,1:0)
	
	// ---------------------------------------------------------------------
psl2m(	Number minArg,	// minimum number of arguments	/REQ/MECH=VAL
		Number maxArg)	// maximum number of arguments	/REQ/MECH=VAL
	/* This subroutine generates the code to transform a method of a primitive
	   class to its M equivalent. E.g. String.ascii() to $ASCII().
	   In general an absent parameter for an intrinsic function cannot be
	   substituted by an empty string (i.e actual.isNull() will be used).
	   Furthermore M intrinsic functions only support trailing absent
	   parameters.
	   The only optimization performed by this subroutine is that if the
	   subject (ObjectName) and all supplied arguments are literals, then the
	   function will be applied at compile time, and its value will be
	   assigned to result.

	   Place a call to this method in OBEJCTMET.ROU for all primitive methods
	   that translate drectly into M intrinsic functions. E.g for String.ascii
	   the OBJECTMET.ROU entry shall contain: psl2m^UCPRIM(0,1)
	   
	   If the first argument of the M intrinsic function is not an expression
	   such as in $GET() or $DATA(), then also set OBJECTMET.VALLIT=0.
	   This will prevent the compiler from trying to optimize the function to
	   its value at compile time.
	INPUTS:
	*/
	type public PSLParser pslPrsr
	type public PSLTokenizer tknzr

	type String mid = pslPrsr.findPSLMethod( tknzr, PSL.mclass_ "."_ PSL.method, 0)
	type Boolean allowLit = false
	if 'mid.isNull() set allowLit = pslPrsr.pslMtd( mid).inLiteral
	do mtd2m( PSL.method, allowLit, minArg, maxArg)
	quit

	// ---------------------------------------------------------------------
mtd2m(	String mname,	// M name
		Boolean isLit,	// Allow literal replacement
		Number minArg,	// minimum number of arguments	/REQ/MECH=VAL
		Number maxArg)	// maximum number of arguments	/REQ/MECH=VAL
	/* This subroutine generates the code to transform a method of a primitive
	   class to its M equivalent. E.g. String.ascii() to $ASCII().
	   In general an absent parameter for an intrinsic function cannot be
	   substituted by an empty string (i.e actual.isNull() will be used).
	   Furthermore M intrinsic functions only support trailing absent
	   parameters.
	   The only optimization performed by this subroutine is that if the
	   subject (ObjectName) and all supplied arguments are literals, then the
	   function will be applied at compile time, and its value will be
	   assigned to result.

	   Place a call to this method in OBEJCTMET.ROU for all primitive methods
	   that translate drectly into M intrinsic functions. E.g for String.ascii
	   the OBJECTMET.ROU entry shall contain: psl2m^UCPRIM(0,1)
	   
	   If the first argument of the M intrinsic function is not an expression
	   such as in $GET() or $DATA(), then also set OBJECTMET.VALLIT=0.
	   This will prevent the compiler from trying to optimize the function to
	   its value at compile time.
	INPUTS:
	*/
	type literal String sErrMin = "method misses required parameters: "
	type literal String sErrNul = "method does not support missing parameters: "

	type Number ER = 0
	type Number nArg,supArg

	/* If isLit is FORCED OFF (e.g in case of Number.random), ensure that
	   objectVar is used in constructed return value */
	if isLit set isLit = PSL.objectName.isLiteral()
	else  set PSL.objectName = PSL.objectVar

	/* check that the minimum number of arguments are supplied, and check
	   if all supplied parameters are literals */
	for nArg=1:1:minArg do {
		if PSL.actual(nArg).isNull() do PSL.error( sErrMin_ mname) quit
		set isLit = isLit & PSL.actual( nArg).isLiteral()
	}
	if ER'=0 quit

	/* find the number of actual parameters that is supplied, and check if
	   all supplied parameters are literals */
	if minArg=0 set minArg = 1	// never check actual(0)
	for nArg=minArg:1:maxArg+1 quit:PSL.actual(nArg).get().isNull()  set isLit = isLit & PSL.actual(nArg).isLiteral()
	set supArg = nArg - 1

	/* no other arguments are allowed after the first missing parameter */
	for nArg=supArg+1:1:maxArg if 'PSL.actual(nArg).isNull() do PSL.error( sErrNul_ mname) quit
	if ER'=0 quit

	/* construct the return value */
	set PSL.return = "$"_ mname_"("_ PSL.objectName
	
	for nArg=1:1:supArg set PSL.return = PSL.return_ ","_ PSL.actual(nArg)
	set PSL.return = PSL.return_ ")"

	/* If all literal, apply at compile time */
	if isLit do {
		type String newret
		#ACCEPT PGM=FSCW; DATE=2004-11-17; CR=11439;GROUP=XECUTE
		xecute "set newret="_ PSL.return
		if newret.length() > PSL.maxLitLength quit
		if 'newret.isNumber() set PSL.return = newret.addQuotes() quit
		set PSL.return = newret
	}
	quit

	// ---------------------------------------------------------------------
toVal(	String expr,	// string to convert	/REQ/MECH=VAL
		Primitive def)	// default if not lit.	/REQ/MECH=VAL
	/* If the supplied expression represents a numeric literal or string
	literal, convert it to its literal value.
	Else return the supplied default.
	If the expr is numeric, its canonical value is returned
	*/
	if expr.isNumber() quit +expr

	#ACCEPT CR=11441; PGM=FSCW; DATE=2004-11-17; GROUP=XECUTE,ACCESS
	if $$isStr^UCGM(expr) xecute "set def="_expr

	quit def
 #OPTION ResultClass ON
public String vSIG()	quit "61436^42425^Frans S.C. Witte^19331"	// Signature - LTD^TIME^USER^SIZE
