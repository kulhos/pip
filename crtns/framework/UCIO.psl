	/*
	ORIG: Jeff Walton 10/19/1999
        DESC: Library of IO methods

	---------- Revision History --------------------------------------------
	2008-11-13, Frans S.C. Witte, CR 35741/36391
		* Corrected issue with use of SCAU_SPOOL as the default
		  directory in open().

	05/30/07 - Frans S.C. Witte - CRs: 27800
		* Added $$locate()
		* Removed call to ^MSG().
		* Replaced ^UCXCUVAR("SPLDIR") by $$TRNLNM^%ZFUNC("SCAU_SPOOL").
		* Call for spooldir will only occur if IO.directory.isNull(),
		  and IO.fileName does not include a directory.

	10/30/06 - Frans S.C. Witte - CRs: 23841 / 23842
		Modified open() to use /CHSET device parameter instead of
		/ICHSET and /OCHSET

	07/10/06 - Frans S.C. Witte - CRs: 22273 / 22274
		Converted to PSL. Added support for charsetName, charsetElemType
		and charsetElemName for Unicode independence. Split into runtime
		part (this unit) and compiletime part (UCIO0).

	11/16/05 - Frans S.C. Witte - CRs: 18247 / 15593
		Replaced call to$$^CUVAR() by call to $$^UCXCUVAR()

	05/02/05 - Frans S.C. Witte - CRs: 17056 / 17057
		Subroutine write: added code to SET $X=0 when non-standard
		write terminator is used.
		Subroutines close, open, read, write: modified all local variable
		names to start with v.
		Generated lables now conform to vIoXyz.

	11/25/04 - Frans S.C. Witte - CRs: 12808 / 12809
		Generated code for IO.open now throws exception when open fails.
		Generated code for "argumentless" IO.read now throws exceptions
		for all abnormal conditions.
		Generated code for IO.read and IO.write save and restore $IO.
		Generated code for IO.write in case of "default EOL character"
		has been modified to provide cleaner code.
		Generated code for IO.close no longer calls CLOSE^SCAIO, but
		closes device directly (to prevent uncontroled side effects).
		Subroutine error commented out (not used in this routine)

	05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

	 10/15/02 - SPIER - 51089
	       Modifications for v7.0 enhancements
	*/
	#PACKAGE framework.psl
	#OPTION  ResultClass ON
	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	// ---------------------------------------------------------------------
private void close( IO vOid	// Object
		) // Runtime implementation of IO.close
	/* ---------------------------------------------------------------------
	Runtime implementation of IO.close
        */
	type String vIo = vOid.device quit:vIo.isNull()

	/* Assignment to read-only property IO.device must be hard-coded as
	   change to vobj(vOid) */
	#ACCEPT CR=22273; DATE=2006-07-10; PGM=Frans S.C. Witte; GROUP=DEPRECATED
	set vobj(vOid.getPointer(),1).piece("|",6) = ""

	#ACCEPT CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte;GROUP=DEPRECATED
	close vIo
	quit

	// ---------------------------------------------------------------------
public Boolean locate( IO vOid	// IO object
		, List vSearch	// search path
		, String vDelim	// List delimiter for vSearch
		, String vFile	// name of file to look for
		, Number vCase	// 0 = case sensitive, 1 = case insens.
		)
	/* ---------------------------------------------------------------------
	Locate a file in one of the directories specified by the search path.

	If the filename includes a path, the search path will be ignored.

	If case sensitive search is requested, each directory on the search path
	will first be examined for the file with matching case. If none of these
	directories contains a file with the exact case, the directories will be
	searched again for a case-insensitive match. In short: a file with the
	exact name has precedence over the order of the directories in the search
	path.

	On return IO.directory will contain the directory where the file was
	found, and IO.fileName will contain the name of the file (using the case
	that was actually found).
	If the file was not found, IO.directory and IO.fileName will be returned
	unchanged.
	*/
	type String vDum = ""
	type String vDir = ""
	type Number vElm = 0
	type String vFul = ""
	type Number vMax = vSearch.count(vDelim)
	type Boolean vOK = false

	/* If vSeach.isEmpty(), vMax will be zero, and as we want to try at
	   least once, we need to correct vMax. Note that this will only work
	   because:
	   1) Referencing List.elementAt(tooBig) does not throw an exception
	   2) $$FILE^%TRNLNM(vElm,"") will not use a "default" directory)
	   */
	set:vMax = 0 vMax = 1

	/* Step 1: case-sensitive */
	for vElm = 1:1:vMax { quit:vOK
		set vDir = vSearch.elementAt( vElm, vDelim)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set vFul = $$FILE^%TRNLNM(vFile,vDir)
		#ACCEPT CR=27800; DATE=2007-05-07; PGM=Frans S.C. Witte; GROUP=BYPASS
		#BYPASS
		SET vDum=$ZSEARCH("reset",0),vFul=$ZSEARCH(vFul,0)
		#ENDBYPASS
		quit:vFul.isNull()

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set vOid.directory = $$PARSE^%ZFUNC( vFul,"DIRECTORY")
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set vOid.fileName  = $$PARSE^%ZFUNC( vFul,"NAME")_ $$PARSE^%ZFUNC( vFul,"TYPE")
		set vOK = true
	}
	if vCase=0!vOK quit vOK

	/* Step 2: case insensitive.
	   This is very expensive!
	   */
	type String vLow = ""
	for vElm = 1:1:vSearch.count(vDelim) { quit:vOK
		set vDir = vSearch.elementAt( vElm, vDelim)
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set vLow = $$LOWER^UCGMR( $$FILE^%TRNLNM( vFile, vDir))

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set vDir = $$FILE^%TRNLNM("*",vDir)

		#ACCEPT CR=27800; DATE=2007-05-07; PGM=Frans S.C. Witte; GROUP=BYPASS
		#BYPASS
		SET vDum=$ZSEARCH("reset",0)
		FOR  SET vFul=$ZSEARCH(vDir,0) QUIT:vFul=""!($$LOWER^UCGMR(vFul)=vLow)
		#ENDBYPASS

		quit:vFul.isNull()

		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set vOid.directory = $$PARSE^%ZFUNC( vFul,"DIRECTORY")
		#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
		set vOid.fileName  = $$PARSE^%ZFUNC( vFul,"NAME")_ $$PARSE^%ZFUNC( vFul,"TYPE")
		set vOK = true
	}
	quit vOK

	// ---------------------------------------------------------------------
private void open( IO vOid	// object
		, String vRtn	// name of calling routine
		, String vSrn	// name of calling subroutine
		, String vOnm	// name of IO instance variable	
		) // Runtime implementation of IO.open with support for character sets
	/* ---------------------------------------------------------------------
	The method supports the charset properties as follows:
	- If IO.charsetName is specified explicitly, it will be appended to the
		open parameters unconditionally.
	- If IO.charsetName is NULL, then $$UCIOENCD() will be called with the
		values of charsetElemType and charsetElemName, subroutine name,
		and instance variable name.
		If charsetElemType is NULL, then charsetElemType="Routine" and
		charsetElemName=$T(+0) will be supplied.
		The value returned by the function will be appended to the
		open parameters unconditionally.
	- If an exception occurs while obtaining the charsetName (e.g. because
		routine UCIOENCD is not found) then no charset specification
		will be appended to the open parameters.

	NOTES:
	. The absence of an explicit charsetElemType will result in default
		values for both charsetElemType and charsetElemName.
	. The intention is to provide a default UCIOENCD routine as part of the
		compiler boostrap process. However, because that process itself
		uses class IO to read and write files, vIoOpen() must be able to
		deal with an environment that does not have a UCIOENCD routine.
		Until it is known how this will be dealt with, the code
		generated here will include exception handling to deal with
		$$UCIOENC() exceptions.
	. This method assumes that all files are supplied using the URL / unix
		convention ("/"-delimited). Future enhancements to the IO class
		should make this the standard, and translate to OS specifics
		"under the covers".
	*/
	type literal String SEPARATOR = "/"

	type String vF = vOid.fileName
	if vF.isNull() throw Class.new("Error","%PSL-E-IOOPEN,missing file name")
	if 'vOid.device.isNull() throw Class.new("Error","%PSL-E-IOOPEN,device already open")

	type String vD = vOid.directory
	// if vD.isNull(),$$PARSE^%ZFUNC(vF,"DIRECTORY").isNull() set vD = $$^UCXCUVAR("SPLDIR")
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	if vD.isNull(), vF'[ SEPARATOR set vD = $$TRNLNM^%ZFUNC("SCAU_SPOOL")

	type String vP = vOid.openParams
	type String vC = vOid.charsetName

	if vC.isNull() do {	// no IO.charsetName specified, derive it
		type String vT = vOid.charsetElemType
		type String vN = vOid.charsetElemName
	
		if vT.isNull() set vT = "Routine" , vN=vRtn
		do {
			catch vX {
				// ignore exceptions thrown due to $$^UCIOENCD()
			}
			#ACCEPT CR=22273; DATE=2006-07-10; PGM=Frans S.C. Witte; GROUP=ACCESS
			set vC=$$^UCIOENCD(vT,vN,vSrn,vOnm)
			set vOid.charsetName = vC
		}
	}

	// Independent of call to $$^UCIOENCD(): if characterset, then add it (quoted)
	//if 'vC.isNull() set vP = vP_ "/ICHSET="_ vC_ "/OCHSET="_ vC
	if 'vC.isNull() set vP = vP_ "/CHSET="""_ vC_ """"

	/* Assignment to read-only property IO.device must be hard-coded as
	   change to vobj(vOid) */
	#ACCEPT CR=22273; DATE=2006-07-10; PGM=Frans S.C. Witte; GROUP=DEPRECATED,ACCESS
	set vobj(vOid.getPointer(),1).piece("|",6) = $$FILE^%TRNLNM(vF,vD)

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String vR = $$FILE^%ZOPEN( vOid.device, vP, vOid.timeout, vOid.recordSize)
	if vR.toNumber()=0 throw Class.new("Error","%PSL-E-IOOPEN,"_ vR.piece( "|", 2))
	quit

	// ---------------------------------------------------------------------
private String read( IO vOid	// Object
		) // Runtime implementation of IO.read()
	/* ---------------------------------------------------------------------
	*/
	type String vEr

	#ACCEPT CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte;GROUP=DEPRECATED
	type String vIo = $I // save current device

	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	type String vRd = $$^%ZREAD( vOid.device, .vEr)

	#ACCEPT CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte;GROUP=DEPRECATED
	if vIo'=$I use vIo // restore previous device if needed

	if vEr.toNumber()'=0 throw Class.new("Error","%PSL-E-IO"_ "EOF,NOTOPEN,OTHER".piece(",",vEr)_ ","_ vEr.piece("|",2))
	quit vRd

	// ---------------------------------------------------------------------
private void write( IO vOid	// Object
		, String vStr	// data to write
		, String vEol	// end-of-line indicator
		) // Runtime implementation of IO.write
	/* ---------------------------------------------------------------------
        */
	#ACCEPT CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte;GROUP=DEPRECATED
	type String vIo = $I	// save current device

	#ACCEPT CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte;GROUP=DEPRECATED
	if 'vEol.exists() use vOid.device write vStr,!
	#ACCEPT CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte;GROUP=DEPRECATED
	else  use vOid.device write vStr,vEol set $X=0

	#ACCEPT CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte;GROUP=DEPRECATED
	if vIo'=$I use vIo	// restore previous device if needed
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61314^43156^Frans S.C. Witte^11953"	// Signature - LTD^TIME^USER^SIZE
