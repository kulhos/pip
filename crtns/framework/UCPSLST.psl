	/*
	DESC: Utilities to manipulate PSL.pslSt - Insensitive Group
 
	KEYWORDS:	PSL COMPILER

	---- Comments ----------------------------------------------------------
	This unit contains functions and subroutines to support the PSL state
	stack. Even though there is currently no "PSLState object", all
	functions and subroutines pass a "PSLState object" as the first
	parameter. This makes them natural candidates for the runtime
	implementation of class methods.

	PSL Code blocks
	===============
	The concept of code blocks in PSL is derived from the code block concept
	of the ISO programming language M. There are two notions of code blocks:
	1) DO block
	2) Code following a conditional or iterative statement

	PSLSate properties
	==================
	. DOstack - nested code block information
		It holds a unique representation of a code block, and can be
		used to identify the code block in which a declaration,
		instantiation, access, or call occurs.
		It contains the comma separated list of all nested blocks, in
		which the leftmost value is associated with the innermost code
		block.
	. IFstack - conditional code indicator of nested code blocks
		It is the concatenation of the boolean values that indicate
		whether the associated code block is created due to a
		conditional statement.
		The leftmost character in IFstack corresponds to the innermost
		code block.
	. FORstack - iterative code indicator of nested code blocks
		It is the concatenation of the boolean values that indicate
		whether the associated code block is created due to an iterative
		statement.
		The leftmost character in forState corresponds to the innermost
		code block.

	---------- Revision History --------------------------------------------
	04/11/06 - Frans S.C. Witte - CRs: 20280 / 18164
		Added function $$botDo(). Corrected $$topDo().

	11/01/05 - Frans S.C. Witte - CRs: 18163 / 18164
		Initial program.
	*/
	#PACKAGE framework.psl

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	// ---------------------------------------------------------------------
botDo( String pslSt)	// PSLState "object"
	/* ---------------------------------------------------------------------
	return the bottom doState value of pslSt
	*/
	type String sDo = pslSt.piece("|")

	quit sDo.piece( ",", sDo.length(","))

	// ---------------------------------------------------------------------
getDo( String pslSt)	// PSLState "object"
	/* ---------------------------------------------------------------------
	return the complete doState value of pslSt
	*/
	quit pslSt.piece("|")

	// ---------------------------------------------------------------------
getFor( String pslSt)	// PSLState "object"
	/* ---------------------------------------------------------------------
	return the complete forState value of pslSt
	*/
	quit pslSt.piece("|",3)

	// ---------------------------------------------------------------------
getForBlock( String pslSt,	// PSLState "object"
		String outer)		// outer scope
	/* ---------------------------------------------------------------------
	return the doState of the outermost iterative code block inside outer.
	*/
	type Number sub
	if outer.get().isNull() set sub = 0
	else  set sub=outer.length(",")

	type String fSt = pslSt.piece("|",3)
	type Number siz = fSt.length()
	for sub=siz-sub:-1:0 quit:fSt.extract(sub)="1"
	if 'sub quit ""
	quit pslSt.piece("|").piece(",",sub,siz)

	// ---------------------------------------------------------------------
getIf( String pslSt)	// PSLState "object"
	/* ---------------------------------------------------------------------
	return the complete ifState value of pslSt
	*/
	quit pslSt.piece("|",2)

	// ---------------------------------------------------------------------
isDoScope( String pslSt,	// PSLState "object" (inner scope)
		String outer)		// outer scope doStack
	/* ---------------------------------------------------------------------
	Helper function that returns 1 if either
	- outer = inner
	- inner.endsWith(outer) and the overlap is at a true block boundary
	*/
	type String inner = pslSt.piece("|")
	if inner = outer quit 1

	type Number diff = inner.length() - outer.length()
	if inner.extract( diff) = "," quit inner.endsWith( outer)
	quit 0

	// ---------------------------------------------------------------------
new( String  doVal,	// value for doState
		Boolean ifVal,	// value for ifState
		Boolean forVal)	// value for forState
	/* ---------------------------------------------------------------------
	Return a new PSLState object with the supplied values.


	NOTES:
	. It is the calles responsibiliy to supply a consisitent set of values:
		- doVal.length(",") = ifVal.length() = forVal.length()
		- forVal.extract(n) = 1 ==> ifVal.extract(n) = 1
	*/
	quit doVal_ "|"_ ifVal_ "|"_ forVal

	// ---------------------------------------------------------------------
pop( ret String pslSt,	// PSLState "object"		/MECH=REFVAR:RW
		String doVal,	// lvn for top of doState	/MECH=REFVAR:W
		Boolean ifFl,	// lvn for top of ifState	/MECH=REFVAR:W
		Boolean forFl) 	// lvn for top of forState	/MECH=REFVAR:W
	/* ---------------------------------------------------------------------
	Pop one level of PSL.pslSt
	*/
	type String dSt = pslSt.piece("|")
	type String iSt = pslSt.piece("|",2)
	type String fSt = pslSt.piece("|",3)

	type Number top = iSt.length()
	set doVal = dSt.piece( ",")
	set ifFl  = iSt.extract()
	set forFl = fSt.extract()

	set pslSt = dSt.piece(",",2,top)_ "|"_ iSt.extract(2,top)_ "|"_ fSt.extract(2,top)
	quit

	// ---------------------------------------------------------------------
push( ret String pslSt,	// PSLState "object"		/MECH=REFVAR:W
		String doVal,	// value to push on doState
		Boolean ifFl,	// value to push on ifState
		Boolean forFl) 	// value to push on forState
	/* ---------------------------------------------------------------------
	*/
	type String dSt = doVal_ ","_ pslSt.piece("|")
	type String iSt = ifFl_  pslSt.piece("|",2)
	type String fSt = forFl_ pslSt.piece("|",3)

	set pslSt = dSt_ "|"_ iSt_ "|"_ fSt
	quit

	// ---------------------------------------------------------------------
set( ret String pslSt,	// PSLState "object"		/MECH=REFVAR:W
		String doVal,	// value to replace top of doState
		Boolean ifFl,	// value to replace top of ifState
		Boolean forFl) 	// value to replace top of forState
	/* ---------------------------------------------------------------------
	*/
	type String dSt = pslSt.piece("|")
	type String iSt = pslSt.piece("|",2)
	type String fSt = pslSt.piece("|",3)

	set dSt.piece( ",") = doVal
	set iSt.extract() = ifFl
	set fSt.extract() = forFl

	set pslSt = dSt_ "|"_ iSt_ "|"_ fSt
	quit

	// ---------------------------------------------------------------------
topDo( String pslSt)	// PSLState "object"
	/* ---------------------------------------------------------------------
	return the top value of doState
	*/
	quit pslSt.piece("|").piece(",")

	// ---------------------------------------------------------------------
topFor( String pslSt)	// PSLState "object"
	/* ---------------------------------------------------------------------
	return the top value of forState
	*/
	quit pslSt.piece("|",3).extract()

	// ---------------------------------------------------------------------
topIf( String pslSt)	// PSLState "object"
	/* ---------------------------------------------------------------------
	return the top value of ifState
	*/
	quit pslSt.piece("|",2).extract()

	/* ================================================================== */
	/* LOCAL SUPPORT FUNCTIONS AND SUBROUTINES			      */
	/* ------------------------------------------------------------------ */
 #OPTION ResultClass ON
public String vSIG()	quit "61045^43029^Frans S.C. Witte^8483"	// Signature - LTD^TIME^USER^SIZE
