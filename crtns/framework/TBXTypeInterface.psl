	/*
	ORIG:	Frans S.C. Witte, 2009-01-14
	DESC:	TBX TypeInterface class

	----------- Comment ----------------------------------------------------
	The TBX "toolbox" provides a set of intefaces to manipulate the
	different Profile Framework element types. The interface is used in two
	areas:
	1) An MRPC interface to client systems that manipulate the elements.
		This interface supports sending an element from the host to a
		client and from the client to the host.
	2) An INSTALL interface on the host for Service Pack and Fix Pack
		loading (and obsoletion) of elements.

	The INSTALL interface is by definition file based: each element to be
	installed comes from a file in an installation directory.
	The earlier versions of the MRPC interface used M globals and local
	arrays to exchange data. This made sense in an M environment, but will
	not port to Java. This version of the MRPC interface uses files, just
	like the INSTALL interface. See elsewhere for issues with respect to
	sending large amounts of data to the client.

	Descendent classes must override at least the following methods:
	- elemDrop()	delete the element
	- elemGet()	write element's contents to file
	- elemPut()	read element's contents from file
	- getLastMod()	return user, date, and time of last modification
	- getMode()	return the mode of the element (new, exisiting)

	----------- Revision History -------------------------------------------
	2009-01-14, Frans S.C. Witte
		Initial program
	*/
	#PACKAGE framework.tbx
	#CLASSDEF extends=Primitive

	/* ---------------------------------------------------------------------
	returnXXX - literal values used to compose the string returned by the
		interface functions.
		returnSUCCESS and return returnFAILURE define the "status value"
		part of the string, whereas returnDELIM defines the delimiter
		used to separate the status value from a status message.
		returnDELIM defines the delimiter used in the INSTALL part of
		the interface.
		*/
	#PROPERTYDEF returnSUCCESS = "1" class=String protected literal
	#PROPERTYDEF returnFAILURE = "0" class=String protected literal
	#PROPERTYDEF returnDELIM   = "|" class=String protected literal

	/* ---------------------------------------------------------------------
	element - the identification of the element.
		Usually this is the identifier that names the element. In some
		cases, such as element types DAT and G, it refers to a
		collection.
		*/
	#PROPERTYDEF element		class=String public readonly position=2

	/* ---------------------------------------------------------------------
	elemType - the type of element.
		The stored value shall be one of the following elemTypeXXX
		values. Each supported element type has an entry in the list.

		Because Class.new() requires a literal value for the first
		parameter (the class name), the instantiation of a descendant
		class requires knowledge of the type-to-class mapping. It seems
		that this ancestor class is the most natural module to be aware
		of all its descendants.

		By convention the value of XXX in the property name corresponds
		to the extension of the file (in uppercase).
		*/
	#PROPERTYDEF elemType		class=String public readonly position=3

	#PROPERTYDEF elemTypeAGR   = "AGR"   class=String protected literal
	#PROPERTYDEF elemTypeBATCH = "BATCH" class=String protected literal
	#PROPERTYDEF elemTypeCOL   = "COL"   class=String protected literal
	#PROPERTYDEF elemTypeDAT   = "DAT"   class=String protected literal
	#PROPERTYDEF elemTypeFKY   = "FKY"   class=String protected literal
	#PROPERTYDEF elemTypeG     = "G"     class=String protected literal
	#PROPERTYDEF elemTypeIDX   = "IDX"   class=String protected literal
	#PROPERTYDEF elemTypeJDF   = "JFD"   class=String protected literal
	#PROPERTYDEF elemTypeLUD   = "LUD"   class=String protected literal
	#PROPERTYDEF elemTypeM     = "m"     class=String protected literal
	#PROPERTYDEF elemTypePPL   = "PPL"   class=String protected literal
	#PROPERTYDEF elemTypePROC  = "PROC"  class=String protected literal
	#PROPERTYDEF elemTypePSL   = "psl"   class=String protected literal
	#PROPERTYDEF elemTypePSLX  = "pslx"  class=String protected literal
	#PROPERTYDEF elemTypeQRY   = "QRY"   class=String protected literal
	#PROPERTYDEF elemTypeRPT   = "RPT"   class=String protected literal
	#PROPERTYDEF elemTypeSCR   = "SCR"   class=String protected literal
	#PROPERTYDEF elemTypeTBL   = "TBL"   class=String protected literal
	#PROPERTYDEF elemTypeTRIG  = "TRIG"  class=String protected literal

	#PROPERTYDEF elemTypeUNKNOWN = "N-N" class=String protected literal

	/* ---------------------------------------------------------------------
	elemName - the descriptive name of the element type.
		The stored value shall be one of the following elemNameXXX
		values. Each supported element type has an entry in the list.

		The constants below follow the same conventions as the elemType
		literals. The reason to iunclude them here (as opposed to having
		them in the descendant classes only) is that the MRPC interface
		uses the descriptive type name when it requests an element froma
		the host.
		*/
	#PROPERTYDEF elemName		class=String public readonly position=4

	#PROPERTYDEF elemNameAGR   = "Aggregate"    class=String protected literal
	#PROPERTYDEF elemNameBATCH = "Batch"        class=String protected literal
	#PROPERTYDEF elemNameCOL   = "Column"       class=String protected literal
	#PROPERTYDEF elemNameDAT   = "Data"         class=String protected literal
	#PROPERTYDEF elemNameFKY   = "Foreign Key"  class=String protected literal
	#PROPERTYDEF elemNameG     = "Global"       class=String protected literal
	#PROPERTYDEF elemNameIDX   = "Index"        class=String protected literal
	#PROPERTYDEF elemNameJDF   = "Journal"      class=String protected literal
	#PROPERTYDEF elemNameLUD   = "Lookup Doc"   class=String protected literal
	#PROPERTYDEF elemNameM     = "M routine"    class=String protected literal
	#PROPERTYDEF elemNamePPL   = "Pre Post Lib" class=String protected literal
	#PROPERTYDEF elemNamePROC  = "Procedure"    class=String protected literal
	#PROPERTYDEF elemNamePSL   = "psl File"     class=String protected literal
	#PROPERTYDEF elemNamePSLX  = "pslx File"    class=String protected literal
	#PROPERTYDEF elemNameQRY   = "Query"        class=String protected literal
	#PROPERTYDEF elemNameRPT   = "Report"       class=String protected literal
	#PROPERTYDEF elemNameSCR   = "Screen"       class=String protected literal
	#PROPERTYDEF elemNameTBL   = "Table"        class=String protected literal
	#PROPERTYDEF elemNameTRIG  = "Trigger"      class=String protected literal

	#PROPERTYDEF elemNameUNKNOWN = "Unknown Type" class=String protected literal

	/* ---------------------------------------------------------------------
	elemTypeList and elemNameList - sorted lists of types and names
		The positions in both lists must match because the lists will be
		used to convert names to types vice versa.
		*/
	#PROPERTYDEF elemTypeList  = "AGR,BATCH,COL,DAT,FKY,G,IDX,JDF,LUD,PPL,PROC,psl,pslx,QRY,RPT,SCR,TBL,TRIG"  class=List protected literal
	#PROPERTYDEF elemNameList  = "Aggregate,Batch,Column,Data,Foreign Key,Global,Index,Journal,Lookup Doc,Pre Post Lib,Procedure,psl file,pslx file,Query,Report,Screen,Table,Trigger"  class=List protected literal

	/* ---------------------------------------------------------------------
	elemModeXXX - literals that represent the element mode (new element or
		existing element). All code shall use these literals instead of
		$DATA() values.
		*/
	#PROPERTYDEF elemModeNEW    = 0	class=Integer protected literal
	#PROPERTYDEF elemModeEXISTS = 1	class=Integer protected literal

	#PROPERTYDEF tbxTypeINST = 1	class=Integer protected literal
	#PROPERTYDEF tbxTypeMRPC = 3	class=Integer protected literal

	// ---------------------------------------------------------------------
protected static String getMrpcDir()
	/* ---------------------------------------------------------------------
	Return the directory that will be used by the MRCP interface to store
	elements (as if they are to be installed).

	NOTES:
	. Several alternatives have been considered. See $$cmp0dir^PSLC().
		- The current working directory (%UserDirectory)
			The disadvantage of this value is that it may conflict
			with "standard" source or target directories, in which
			case temporary files will unintentionally overwrite
			permanent files.
		- The spool dirtectory from CUVAR.SPLDIR
			The disadvantage of this value is that it places the
			compiler in the Data group, making it very hard to
			bootstrap.
		- The user's home directory
			This is risky because in production environments users
			may have captive accounts without a home directory.
			Furthermore, if temporary files are not cleaned up, it
			may not be obvious to the user which files can be
			removed manually.
	*/
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	quit $$TRNLNM^%ZFUNC("SCAU_SPOOL")_"/"

	// ---------------------------------------------------------------------
protected static String MRPCTERM()
	/* ---------------------------------------------------------------------
	Temporary function until PSL supports properydefs with simple literal
	expressions.
	*/
	type literal String MRPCTERM = 13.char()_10.char()
	quit MRPCTERM

	// ---------------------------------------------------------------------
protected static String name4type( String elemType)
	/* ---------------------------------------------------------------------
	*/
	type Integer pos = TBXTypeInterface.elemTypeList.position( elemType, , true)
	if pos = 0 quit TBXTypeInterface.elemNameUNKNOWN

	quit TBXTypeInterface.elemNameList.elementAt( pos)

	// ---------------------------------------------------------------------
protected static TBXTypeInterface newInstance( String file	// [package/]elem.type
		) // return a new instance based on the supplied file
	/* ---------------------------------------------------------------------
	The file may include a package name, and must include the element type.
	If the element type is known, then an instance of the appropriate
	descendant class will be returned, else an instance of TBXTypeInterface
	will be returned.
	*/
	if file.length(".") '= 2 or (file.length("/") > 2) throw Class.new("Error", "%TBX-E-TYPE,Invalid filename '"_file_"'")

	type String ext = file.piece( ".", 2).upperCase()
	type String elem = file.piece( ".")

	type TBXTypeInterface tti

	if false  // more to come
	else if ext = TBXTypeInterface.elemTypePSL.upperCase()   set tti = Class.new( "TBXPSL",  elem), tti.elemType = tti.elemTypePSL
	else if ext = TBXTypeInterface.elemTypePSLX.upperCase()  set tti = Class.new( "TBXPSLX", elem), tti.elemType = tti.elemTypePSLX
	else set tti = Class.new( "TBXTypeInterface", elem), tti.elemType = tti.elemTypeUNKNOWN

	set tti.elemName = TBXTypeInterface.name4type( ext)	
	quit tti

	// ---------------------------------------------------------------------
protected static TBXTypeInterface newInstance4name( String name	// element type name
		, String elem	// element name
		) // return a new instance based on the supplied name and element
	/* ---------------------------------------------------------------------
	*/
	//type static TBXTypeInterface
	type String elemType = TBXTypeInterface.type4name( name, elem)
	quit TBXTypeInterface.newInstance( elem_ "."_ elemType)

	// ---------------------------------------------------------------------
protected static String type4name( String name, String elem)
	/* ---------------------------------------------------------------------
	*/
	//type static TBXDATA		// needed for ".DAT" versus ".G"
	type Integer pos = TBXTypeInterface.elemNameList.position( name, , true)
	if pos = 0 quit TBXTypeInterface.elemTypeUNKNOWN

	type String elemType = TBXTypeInterface.elemTypeList.elementAt( pos)
	//if elemType = TBXTypeInterface.elemTypeDATA quit TBXTDATA.type4elem( elem)
	quit elemType

	// ---------------------------------------------------------------------
private void initialize( Object initObj)
	/* ---------------------------------------------------------------------
	initialize method. Pass the name of the element as the second argument
	in Class.new().
	*/
	set this.element = {String}initObj
	quit

	// ---------------------------------------------------------------------	
protected String elemDrop()	// Drop an obsolete element
	/* ---------------------------------------------------------------------
	Descendent classes shall override this method.

	RETURNS:
	. $$ = Success ("1") or failure ("0|message")
	*/
	quit this.failure("not implemented")

	// ---------------------------------------------------------------------
protected String elemGet( String path	// target path
		, String file		// target file
		) // write the element's data into path/file
	/* ---------------------------------------------------------------------
	Descendent classes shall override this method.

	RETURNS:
	. $$ = Success ("1") or failure ("0|message")
	*/
	quit this.failure("not implemented")

	// ---------------------------------------------------------------------
protected String elemPut(String path	// source path
		, String file		// source file (including extension)
		, Integer reltype	// Release type (1=FP, 2=SP, 3=MRPC)
		, String lmu		// Last modified user
		, Date lmd		// Last modified date
		, Time lmt		// Last modified time
		)	// read contents of element from path/file
	/* ---------------------------------------------------------------------
	Descendent classes shall override this method.

	RETURNS:
	. $$ = Success ("1") or failure ("0|message")
	*/
	quit this.failure("not implemented")

	// ---------------------------------------------------------------------	
protected String failure( String msg)	// Create a return string for a failure
	/* ---------------------------------------------------------------------
	RETURNS:
	. $$ = returnFAILURE (if msg.isNull())
		returnFAILURE_ returnDELIM_ msg (otherwise)
	*/
	if msg.isNull() quit this.returnFAILURE
	quit this.returnFAILURE_ this.returnDELIM_ msg

	// ---------------------------------------------------------------------
protected void getLastMod( ret String lmu	// user of Last Modification
		, ret Date lmd		// date of Last Modification
		, ret Time lmt		// time of Last Modification
		)	// return the user, date and time of last modification
	/* ---------------------------------------------------------------------
	The implementation in this class returns %UserID, %CurrentDate and
	%CurrentTime.
	Child classes shall override this method.
	*/
	set lmu = %UserID
	set lmd = %CurrentDate
	set lmt = %CurrentTime
	quit


	// ---------------------------------------------------------------------
protected Integer getMode()	// Return mode of element
	/* ---------------------------------------------------------------------
	The implementation in this class returns 0 (new element).
	Descendant classes shall return
		* this.elemModeNEW if this.element represents a new element
		* this.elemModeEXISTS if this.element represents an existing
			element
	*/
	quit this.elemModeNEW


	// ---------------------------------------------------------------------
protected final String mrpcGet( String token
		, ret String fileName	// target file name
		)	// Get element contents
	/* ---------------------------------------------------------------------
	*/
	set fileName = this.element_ "."_ this.elemType
	type String retval = this.elemGet( this.getMrpcDir(), token)
	quit retval.replace( this.returnDELIM, this.MRPCTERM())


	// ---------------------------------------------------------------------
protected final String mrpcLastMod(
		)	// return the user, date and time of last modification
	/* ---------------------------------------------------------------------
	*/
	type String retval = this.elemName_ ": "_ this.element

	if this.getMode() = 0 {
		set retval = "Create new "_ retval
	}
	else {
		type String lmu
		type Date   lmd
		type Time   lmt
		do this.getLastMod( .lmu, .lmd, .lmt)
		set retval = "Update "_ retval_ " Modified by "_lmu_ " on "_ lmd.toString()_ " at "_ lmt.toString()
	}	
	#ACCEPT GROUP=ACCESS;CR=27800;DATE=2008-02-27;PGM=Frans S.C. Witte
	quit "1"_ this.MRPCTERM()_ retval_ " in "_ $$SCAU^%TRNLNM("DDPLOG")

	// ---------------------------------------------------------------------
protected final String mrpcPut( String tmpfile	// name of temporary file
		, String lmu			// user that puts the element
		)
	/* ---------------------------------------------------------------------
	Save data for element elemName. Mark as modified by specified user.
	This method calls this.elemPut() and needs not be overwritten by
	descendant classes.
	*/
	type String retval = this.elemPut( this.getMrpcDir(), tmpfile, this.tbxTypeMRPC, lmu, %CurrentDate, %CurrentTime)
	quit retval.replace( this.returnDELIM, this.MRPCTERM())


	// ---------------------------------------------------------------------
protected final IO openRead( String dir	// directory
		, String file		// file name
		)
	/* ---------------------------------------------------------------------
	Instantiate an IO object for the file and directory, open it for READ,
	and pass it back to the caller.
	*/
	type IO retval = Class.new("IO")
	set retval.directory = dir
	set retval.fileName  = file
	set retval.openParams = "READ"
	set retval.recordSize = PSL.maxStringLength

	do retval.open()
	quit retval

	// ---------------------------------------------------------------------
protected final IO openWrite( String dir	// directory
		, String file			// file name
		)
	/* ---------------------------------------------------------------------
	Instantiate an IO object for the file and directory, open it for WRITE,
	and pass it back to the caller.
	*/
	type IO retval = Class.new("IO")
	set retval.directory = dir
	set retval.fileName  = file
	set retval.openParams = "NEWV"
	set retval.recordSize = PSL.maxStringLength

	do retval.open()
	quit retval

	// ---------------------------------------------------------------------	
protected String success( String msg)	// Create a return string for success
	/* ---------------------------------------------------------------------
	RETURNS:
	. $$ =	returnSUCCESS (if msg.isNull())
		returnSUCCESS_ returnDELIM_ msg (otherwise)
	*/
	if msg.isNull() quit this.returnSUCCESS
	quit this.returnSUCCESS_ this.returnDELIM_ msg
 #OPTION ResultClass ON
public String vSIG()	quit "61495^37421^e0101572^17984"	// Signature - LTD^TIME^USER^SIZE
