	/*
	ORIG: FSANCHEZ - 11/11/2003
	DESC: Data-Qwik runtime filer and PSL utilities

	---- Comments ----------------------------------------------------------
	Library of DATA-QWIK runtime procedures to support filers. Includes
	functions previously located in UCUTIL and %ZS

	---- Revision History --------------------------------------------------
	05/30/07 - Frans S.C. Witte - CR: 27800
		Removed keyword 'public' from fp declaration of array.

	10/12/06 - Frans S.C. Witte - CRs: 22719 / 20613
		Modified AUDIT to support new -100 tree structure and use
		column delimiter in audit().
 
	06/26/06 - Frans S.C. Witte - CRs: 21397 / 21937
		* corrected value returned for $$setPar^UCUTILN("","")
		* added /LOG to list returned by $$initPar()

	02/02/05 - Pete Chenard - CR 18163
		* Modified AUDIT section to correctly deal with memo/blob
		  references.
		* simplified use of pos in combination with nod.

	01/23/06 - Pete Chenard - CR 19046
		* Modified AUDIT section to correct undefined error when setting
		  new value for memo/blobs.

	07/06/05 - Frans S.C. Witte - CR16346
		* Modified subroutine AUDIT to prevent $P() on key columns, and
		  use "0*" in -100 tree.
		* Added documentation

	07/19/05 - RussellDS - CR16614
		* Modified initPar section to no longer pass insert by reference
		  as it will not be modified for return to the caller.
		* Modify setPar section to eliminate vpar array creation, which
		  was for legacy purposes (need eliminated); eliminated double
		  delimiters and ensure trailing delimiter on parameter string

	05/26/05 - Frans S.C. Witte - CRs: 15028 / 16039
		* $$rdb^UCDB() changed to $$rdb^UCDBRT() (1 occurrence)
		* Changed accessiblity of AUDIT to public.
		* Modified to use SchemaTable / PSLColumn classes
		* Subroutine AUDIT: removed check for NULLIND columns. It belongs
		  somewhere else (column assingnment, filer, or DB API).
		* Removed retrieval of table name, and call to detect
		  table.recordType. There is a Record typing problem for ACN/DEP
		  and ACN/LN that results in an incorrect type in vobj(oid,-1).

	05/09/05 - SWARNALATHAP - CR 13665
		Modified Section AUDIT to include the check for the NULLIND flag
		availabe in DBTBL1D.  If the flag is set then the value is 
		treated like a 0, if it is null.

	02/11/05 - GIRIDHARANB - CR14407
		Modified Section AUDIT to set up the file types when on a Rdb.

	11/01/04 - Frans S.C. Witte - CRs 13403 / 13404
		Added accessibility of procedures.
		Replace .data() by .exists()
		Inserted quit before first subroutine.

	05/12/04 - RussellDS - CR9676
		Move Profile04 version to Profile01 to support single code
		base for PSL.

	03/26/04 - RussellDS - CR9172
		New procedure, part of movement of filers to PSL.

		Added coding to support Profile01 CR1390.  This modifies
		the AUDIT section.

		NOTE that support for CR1390 is not yet fully implemented.
		This change just brings PSL in line across the versions.
	*/
	#PACKAGE framework.psl
	#OPTION  ResultClass ON

	// I18N=QUIT
	// *******************************************************************
	// * IMPORTANT NOTE:                                                 *
	// * According to the rules that apply to PSL compiler upgrades,     *
	// * the generated M routine associated with this procedure must be  *
	// * checked into StarTeam and released with the procedure whenever  *
	// * changes are made to this procedure.                             *
	// *                                                                 *
	// * The M routine will be loaded to the mrtns directory during      *
	// * upgrades and will then be removed from that directory as part   *
	// * of the upgrade process.  Therefore, other than during an        *
	// * upgrade an mrtns version of this routine should not exist.      *
	// *                                                                 *
	// * Keep these comments as single line to ensure they exist in the  *
	// * generated M code.                                               *
	// *******************************************************************
	quit

	// ---------------------------------------------------------------------
public void AUDIT( Record obj		// The Record descendant
		, String audit()	// audit array		/MECH=REFARR:W
		, Number rectyp		// recordType (ignored)
		, String dlm		// column delimiter
		)	// copy the modified columns into the supplied audit() array
	/* ---------------------------------------------------------------------
	Convert vobj(obj,-100,...) into audit(column)
	This function replaces AUDIT^UCUTIL

	INPUTS:
	. vobj(obj,-100) = audit base information
	  vobj(obj,-100,node,column) = Type_ position_ oldValue |
	  				sub-field-delimiter_position

	OUTPUTS:
	. audit(column)=oldValue dlm newValue
	. vobj(1,-100,node)=1
	
	EXAMPLE:
		vobj(1,-100,52,"BOO") = "N0012"

		audit("BOO") = "2|1"
		if vobj(1,-400,"BOO") = 0   set obj.property.journal = 0
		audit("BOO") = "2|1|1"

	NOTES:
	. Even though the column delimiter is passed as a parameter, the -100
		node that contains the 'oldval' uses the vertical bar as the
		delimiter. This will lead to incorrect values in audit() when
		"oldval" contains the vertical bar
	. The subfield information is insufficient. The subfield is
		characterized by all three parameters (position, major, and
		minor delimiter). Furthermore the current layout does not
		support the $EXTRACT() case of subfields (delimiter is null).
	*/
	type public String vobj(,,)

	type String fmtable,nvl,ovl,pos,sfd,typ,v
	type String nod = "",di = ""
	type Boolean is400 = vobj(obj,-400).exists()

	for  set nod = vobj(obj,-100,nod).order() quit:nod.isNull()  do {

		if vobj(obj,-100,nod).get() =  1 quit	// not changed
		set vobj(obj,-100,nod) = 1		// set build flag

		for  set di = vobj(obj,-100,nod,di).order() quit:di.isNull()  do {

			set v = vobj(obj, -100, nod, di)	// old value data
			set typ = v.extract( 1)			// data type
			set pos = v.extract( 2, 4)		// position
			set ovl = v.extract( 5, v.length()).piece( dlm)	// old value
			set sfd = v.piece( dlm, 3)		// subfield data

			/* "0*" = default node, n"*" = access key (no position),
			    all others must be data nodes. */
			if nod="0*" set nvl = vobj(obj)
			else  if nod["*" set nvl = vobj(obj,-2-nod),pos=0
			else  if "BM"[typ do {		// blob or memo
				set nvl = vobj( obj, nod.piece(","), nod.piece(",",2))
				set pos = 0		// no position
			}
			else  set nvl = vobj( obj, nod)

			// if pos>0,(nod'["*")!(nod="0*") set new = new.piece(del,pos)
			if pos>0 set nvl = nvl.piece( dlm, pos)
			if 'sfd.isNull() do {
				type String d2 = $select(dlm="~":";",1:"~")
				set nvl = $$getSf^UCCOLSF( nvl, sfd.piece( d2), sfd.piece( d2, 2), sfd.piece( d2, 3), sfd.piece(d2,4))
			}

			if ovl = nvl quit				// Don't set up 

			/* Pass the standard entries. The data ends with the
			   delimiter, in case the caller passes the array to
			   code that does not know the column delimiter */
			set audit(di) = ovl_ dlm_ nvl_ dlm_ dlm_ typ_ dlm

			/* A zero in vobj(obj,-400,column) indicates "suppress
			   journalling for this column". If no -400 node exist,
			   or if it is non-zero, then journalling shall be as
			   usual. The "suppress" translates into a 1 in
			   audit( coulumn).piece( dlm, 3).
			   */
			if is400,vobj(obj,-400,di).get() = 0 set audit(di).piece( dlm, 3) = 1

			/* Pass $$FMTABLE^DBSMACRO() if present, and append the
			   delimiter. Note that this code assumes that it sets
			   the highest piece (and appends the trailing
			   delimiter).
			   */
			if 'v.piece( dlm, 11).isNull() set audit(di).piece( dlm, 11) = v.piece( dlm, 11)_ dlm
		}
	}

	quit

	// ---------------------------------------------------------------------
public String initPar( String insert) // filer parameters to insert into default list
	/* ---------------------------------------------------------------------
	Intialize filer parameters.

	OUTPUTS:
	. $$ = filer parameters that are in effect.
		This function calls $$setPar(defList,insert) with the following
		default list:
		/CASDEL/INDEX/JOURNAL/LOG/TRIGAFT/TRIGBEF/UPDATE
		/VALDD/VALFK/VALREQ/VALRI/VALST
	*/
	quit $$setPar("/CASDEL/INDEX/JOURNAL/LOG/TRIGAFT/TRIGBEF/UPDATE/VALDD/VALFK/VALREQ/VALRI/VALST/", insert.get())

	// ---------------------------------------------------------------------
public String setPar( String parList,
		String insert)
	/* ---------------------------------------------------------------------
	Intialize filer parameters

	ARGUMENTS:
	. insert	List of parameters	/REQ/MECH = VAL
			/NOVALDD/NOVALST

	OUTPUTS:
	. $$ = filer parameters that are in effect.
		If parList and insert are both empty, then the empty string will
		be returned. In all other cases the result will begin with and
		end with a slash.
		If conflicting parameters are inserted, then the rightmost
		insert will take precedence.
	*/
	type public String vpar()

	type Number c,i
	type String z

	if parList.get().isNull() set parList = ""

	if 'parList.beginsWith("/") set parList = "/"_parList
	if parList.endsWith("/") set parList = parList.extract(1, parList.length() - 1)

	if ("/"_insert_"/")["/NOVAL/" set insert = ("/"_insert_"/").piece("/NOVAL/",1)_"/NOVALDD/NOVALFK/NOVALREQ/NOVALRI/NOVALST/"_("/"_insert_"/").piece("/NOVAL/",2)

	for i = 1:1:insert.length("/") do {
		set z = insert.piece("/",i)
		if z.isNull() quit
		
		set c = 1
		if z["=" set c = z.piece("=",2),z = z.piece("=",1)
		
		if z.beginsWith("NO") set c = 'c,z = z.extract(3,z.length())
		
		if z["FKCHK" set z = "VALFK"			// Legacy

		if 'c set parList = parList.piece("/"_z,1)_"/NO"_z_parList.piece("/"_z,2)
		else  set parList = parList.piece("/NO"_z,1)_"/"_z_parList.piece("/NO"_z,2)

	}

	if 'parList.isNull(),'parList.endsWith("/") set parList = parList_"/"

	quit parList
 #OPTION ResultClass ON
public String vSIG()	quit "61263^26519^Frans S.C. Witte^9523"	// Signature - LTD^TIME^USER^SIZE
