private PBSNSM(String vzpkt,
	       String vznsmpgm,
	       Number vstart,
	       Number vtprest)
	       
	/* Non-standard message handler

	ORIG: MATTSON - 05/09/2000
	DESC: Non-Standard Message Handler

	---- Revision History ------------------------------------------------
	08/30/07 - RussellDS - CR28928
		   Added start time and TP restarts to parameters for entry
		   from top and as public scope to NSMLOG to allow logging.
	
	03/08/06 - RussellDS - CR19962
		   Eliminate use of %ZTRAP since PBSSRV now has a trap set
		   for this stack level.  Remove ZT section, since no longer
		   needed.
		   
		   Clean up PSL warnings.
		   
		   Remove old revision history.
	----------------------------------------------------------------------

	*/

	//---------------------------------------------------------------------
	//Process message
	//---------------------------------------------------------------------

	type public String %STFHOST, vzsav

	type String reply,x

	// Initialize system variables
	S:$G(vzsav)="" vzsav=$$INIT^PBSUTL D VLOD^PBSUTL(vzsav)
		
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	if %SystemDate'=cuvar.tjd do {
		set vzsav=$$INIT^PBSUTL
		do VLOD^PBSUTL(vzsav)
	}

	set %STFHOST=$$%STFHOST^PBSUTL()

	#ACCEPT DATE=12/17/03; PGM=John Carroll; CR=unknown
	set x="S reply=$$^"_vznsmpgm_"(vzpkt)" x x

	quit reply


	//---------------------------------------------------------------------
DUPMSG(msgtyp,msgid)	//Public/Duplicate message?
	//---------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . msgtyp	Message type		/TYP=T/REQ/MECH=VAL
	     . msgid	Message ID		/TYP=T/REQ/MECH=VAL
	*/
	//---------------------------------------------------------------------


	if Db.isDefined("NSMLOG","msgtyp,msgid") quit 1
	quit 0


	//---------------------------------------------------------------------
NSMLOG(msgtyp,msgid,clmsg,reply,status)	//Public/Log non-standard message
	//---------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . msgtyp	Message type		/TYP=T/REQ/MECH=VAL
	     . msgid	Message ID		/TYP=T/REQ/MECH=VAL
	     . clmsg	Client message		/TYP=T/REQ/MECH=VAL
	     . reply	Server reply		/TYP=T/REQ/MECH=VAL
	     . status	Status (error)		/TYP=T/NOREQ/MECH=VAL
	*/
	//---------------------------------------------------------------------
	
	type public Number vzstart, vztprest
	
	type Number vztime

	if $G(msgtyp)="" quit
	if $G(msgid)="" quit
	if $G(clmsg)="" quit
	if $G(reply)="" quit
	
	if vzstart.get().isNull() set vzstart = $$GETTIM^%ZFUNC
	
	set vztime = (($$GETTIM^%ZFUNC - vzstart) / 1000000).roundDec(3)

	type RecordNSMLOG nsmlog=Class.new("RecordNSMLOG")

	set nsmlog.msgtyp=msgtyp
	set nsmlog.msgid=msgid

	set nsmlog.pid=%ProcessID
	set nsmlog.cdat=%CurrentDate
	set nsmlog.ctim=%CurrentTime
	set nsmlog.status=$G(status)
	set nsmlog.tpd=%SystemDate
	set nsmlog.elapsed = vztime
	set nsmlog.tprest = vztprest.get()

	do nsmlog.bypassSave()

	do log(clmsg,1)
	do log(reply,2)
	quit


	//---------------------------------------------------------------------
log(msg,typ)	//Private/Log messag,e in 400 byte segments, to NSMLOG
	//---------------------------------------------------------------------

	type public String msgid, msgtyp

	type Number i,seq

	type RecordNSMLOGD rec()

	for i=1:400:$L(msg) do {
		set seq = (i \ 400) + 1

		set rec(seq)=Class.new("RecordNSMLOGD")
		set rec(seq).msgtyp=msgtyp
		set rec(seq).msgid=msgid
		set rec(seq).typ=typ
		set rec(seq).seq=seq

		set rec(seq).dtl=$e(msg,i,i+399)

		do rec(seq).bypassSave()
	}

	quit


	//---------------------------------------------------------------------
PGMNAM(clmsg)	//Private//Non-standard message template
	//---------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . clmsg	Client message		/TYP=T/REQ/MECH=VAL

	RETURNS:
	     $$		Reply message
	*/
	//---------------------------------------------------------------------
	
	type public Boolean ER
	
	type String fields, reply

	set ER=$$MSGINP(.clmsg,.fields)

	set ER=$$EXEC(.fields)

	set ER=$$MSGOUT(.reply,.fields)
	quit reply


	//---------------------------------------------------------------------
EXEC(fields)	//Private/Parse client message
	//---------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . fields	Input array		/TYP=T/NOREQ/MECH=REFARR:RW

	RETURNS:
	     $$		Error status
	*/
	//---------------------------------------------------------------------

	//Insert code to process client message
	quit 0


	//---------------------------------------------------------------------
MSGINP(clmsg,fields)	//Private/Parse client message
	//---------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . clmsg	Client message		/TYP=T/REQ/MECH=REF
	     . fields	Input array		/TYP=T/NOREQ/MECH=REFARR:W

	RETURNS:
	     $$		Error status
	*/
	//---------------------------------------------------------------------

	//Insert code to parse client message
	quit 0


	//---------------------------------------------------------------------
MSGOUT(reply,fields)	//Private//Build server reply
	//---------------------------------------------------------------------
	/*
	ARGUMENTS:
	     . reply	Server reply		/TYP=T/REQ/MECH=REF
	     . fields	Input array		/TYP=T/NOREQ/MECH=REFARR:R

	RETURNS:
	     $$		Error status
	*/
	//---------------------------------------------------------------------


	//Insert code to construct server reply
	quit 0
 #OPTION ResultClass ON
public String vSIG()	quit "60876^56527^Dan Russell^5302"	// Signature - LTD^TIME^USER^SIZE
