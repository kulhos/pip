DBSVER	

	// **********************************************************************
	// * IMPORTANT NOTE:                                                    *
	// * According to the rules that apply to PSL compiler upgrades,        *
	// * the generated M routine associated with this procedure must be     *
	// * checked into StarTeam and released with the procedure whenever     *
	// * changes are made to this procedure.                                *
	// *                                                                    *
	// * The mrtns version will be used during upgrades and will then be    *
	// * removed from the mrtns directory.  Therefore, other than in a      *
	// * development environment, or during an upgrade, an mrtns version of *
	// * this routine should not exist.                                     *
	// *                                                                    *
	// * Keep these comments as single line to ensure they exist in the     *
	// * generated M code.                                                  *
	// **********************************************************************
		 
	/*
	DATA-QWIK Field Validation Utility
	
	---- Revision History -------------------------------------------------
	2009-04-14 - RussellDS - CR39504
		* Added validation for data type "U"
		* Removed old revision history

	-----------------------------------------------------------------------
	*/
	
	quit				// No entry from top
	
	
public VAL(String typ,		// Data Type (TUFLDCN$)
	   Number len,		// Maximum Field Length		/NOREQ
	   Boolean req,		// Required			/NOREQ/NONULL
	   String tbl,		// Lookup Table			/NOREQ
	   String pat,		// Pattern Match		/NOREQ
	   String min,		// Minimum Value		/NOREQ
	   String max,		// Maximum Value		/NOREQ
	   Number dec,		// Decimal Precision		/NOREQ
	   String noc,		// Not Allowed Character(s)	/NOREQ
	   String dinam,	// Data item - [FID]DI format	/NOREQ
	   Boolean mode,	// Interactive mode		/NOREQ/DFT=0
	   String tbldesc)	// Table Description Display	/NOREQ/MECH=REF:W
	   
	/*
	Input Validation
	
	Validate input string X against dictionary attributes

	INPUTS:
		. X	Input String

	RETURNS:
		. $$	Null if the input string passes edit checks
			Error description if input string fails edit checks
	*/
	
	type public Number NI, vdsp
	type public String vdft(), X
	
	type Boolean ER = 0
	type String return

	if req.get(), X.isNull(), (typ '= "L") quit $$REQERR	// Required
	
	if X.isNull() quit ""
	
	if (len.get() > 0), (X.length() > len) quit $$LENERR(len)

	if ((typ = "N") ! (typ = "$")), (dec.get() > 0), (X.piece(".", 1).length()) > (len - dec - 1) quit $$LENERR((len - dec - 1)_"."_dec)

	if ((typ = "T") ! (typ = "U")), 'noc.get().isNull(), (X.translate(noc, "") '= X) quit $$DELERR(noc.ascii())
	
	if (typ = "U"), (X '= X.upperCase()) quit $$TYPERR(typ)
	
	if (typ = "L"), '((X = 1) ! (X = 0)) quit $$TYPERR(typ)
	
	if (typ = "F") do { quit return
		
		type String vx = X
		
		do DBSEDT^UFRE(dinam.get(), mode.get())
		
		// Force redisplay of frequency in DBSCRT interactive mode
		if 'ER, (vx '= X) do {
			
			set vdsp = 2			// Re-display flag
			
			// Poke value back into buffer
			if vdft(NI).exists() set vdft(NI).piece("|", 1) = X
		}
		
		if ER set return = $$FRQERR
		else  set return = ""
	}

	if ((typ = "D") ! (typ = "C")), (X '? .N)) quit $$TYPERR(typ)
	
	if (typ = "N"), (+dec.get() = 0), X.isLike("%.%") quit $$TYPERR(typ)
	
	if ((typ = "N") ! (typ = "$")) do { if 'return.isNull() quit return
		
		set return = ""
		
		if 'X.translate("0123456789-.", "").isNull() set return = $$TYPERR(typ)
		else  if X.extract(2, X.length()).isLike("%-%") set return = $$TYPERR(typ)
		else  if (X.length(".") > 2) set return = $$TYPERR(typ)
		else  if (dec.get() > 0), (X.piece(".", 2).length() > dec) set return = $$DECERR(dec)
	}

	if 'min.get().isNull(), $$vmin(X, .min, typ) quit $$MINERR($$EXT^%ZM(min, typ, dec))
	
	if 'max.get().isNull(), $$vmax(X, .max, typ) quit $$MAXERR($$EXT^%ZM(max, typ, dec))
	
        if 'pat.get().isNull() do { if 'return.isNull() quit return
        
        	if '(pat.beginsWith("I ") ! pat.beginsWith("if ")) set pat = "if "_pat
        	
        	set return = ""
        	
        	#ACCEPT Date=12/20/05; Pgm=RussellDS; CR=18400
        	xecute pat
        	else  set return = $$PATERR(pat)
        }

	if 'tbl.get().isNull() set tbldesc = $$VER^DBSTBL(tbl, X, typ) if tbldesc.isNull() quit $$TBLERR(X)
	
	quit ""


vmin(String X,		// Input value
     String min,	// Minimum value
     String typ)	// Data type

	/*
	Check for => minimum value
	*/
	
	type RecordSTBLJRNFUNC jrnfunc = Db.getRecord("STBLJRNFUNC", "FUNC=:min", 1)
	
	if (jrnfunc.getMode() > 0) do {
		
		#ACCEPT Date=12/20/05; Pgm=RussellDS; CR=18400
		xecute "set min="_jrnfunc.code
	}
	
	if min.beginsWith("<<"), min.endsWith(">>") set min = $$var(min)

	if ("DC$N" [ typ), (X < min) quit 1
	
	if ("TUFL" [ typ), (min ] X) quit 1
	
	quit 0


vmax(String X,		// Input value
     String max,	// Maximum value
     String typ)	// Data type
     
	/*
	Check for <= maximum value
	*/
	;----------------------------------------------------------------------
	
	type RecordSTBLJRNFUNC jrnfunc = Db.getRecord("STBLJRNFUNC", "FUNC=:max", 1)
	
	if (jrnfunc.getMode() > 0) do {
		
		#ACCEPT Date=12/20/05; Pgm=RussellDS; CR=18400
		xecute "set max="_jrnfunc.code
	}
	
	if max.beginsWith("<<"), max.endsWith(">>") set max = $$var(max)

	if ("DC$N" [ typ), (X > max) quit 1
	
	if ("TUFL" [ typ), (X ] max) quit 1
	
	quit 0


var(String X)		// Variable << >> syntax
    
	/*
	Convert <<xxx...>> to it's underlying value
	*/
	
	type String return = ""

	set X = X.extract(3, X.length() - 2)		// Strip << >>
	
	if ((X ? 1A.AN) ! (X ? 1"%".AN)) quit @X.get()	// Local variable
	
	if (X ? 1"$$"1E.E) do { quit return		// $$^routine
		
		#ACCEPT Date=12/20/05; Pgm=RussellDS; CR=18400
		xecute "set return="_X
	}
		
	if ((X ? 1A.AN1"("1E.E1")") ! (X ? 1"%".AN1"("1E.E1")")) quit @X.get()	// Local array
	
	quit X						// Literal
	
	
	// *********************************************************************
	// * NOTE:  The error message functions below are for use only by this *
	// *        procedure and are not be be called externally.             *
	// *********************************************************************

DECERR(Number dec)	// Decimal error NN.~p1

	quit $$^MSG(774, "NNNNNNNNNNNNNNNNNNNN".extract(1, dec))

DELERR(Number del)	// Invalid input, replace vertical bar character with $C(~p1)

	quit $$^MSG(1380, del)
	
FRQERR()		// Frequency error

	type public String RM

	if RM.exists()  quit RM
	
	quit $$TYPERR("F")		

LENERR(Number len)	// Field length ~p1 exceeded

	quit $$^MSG(1076, len)

MAXERR(X)		// Value above maximum range ~p1

	quit $$^MSG(2919, X)

MINERR(String X)	// Value below minimum range ~p1

	quit $$^MSG(2920, X)
	
PATERR(String pat)	// Invalid format ~p1

	quit $$^MSG(1350, pat)		
REQERR()		// Data Required

	quit $$^MSG(741)
		
TBLERR(String val)	// Invalid table value ~P1

	quit $$^MSG(1485, val)

TYPERR(String typ)	// Data type is defined as ~p1

	type RecordDBCTLDVFM dvfm = Db.getRecord("DBCTLDVFM", "TYP=:typ", 1)
	
	quit $$^MSG(742, dvfm.des)
 #OPTION ResultClass ON
public String vSIG()	quit "61465^44671^Dan Russell^6933"	// Signature - LTD^TIME^USER^SIZE
