public DBSRULE(Boolean skipmsg)	
		 
	/*
	Build runtime rules processing routine.
	
	Rules are expected to be in SQL WHERE clause format.
	
	ARGUMENTS:
		. skipmsg	Skip compiler message		/NOREQ/DFT=0
	
	RETURNS:
		. $$		description		/TYP=N

	---- Revision History -------------------------------------------------
	05/08/06 - RussellDS - CR20967
		   Converted to PSL.

	-----------------------------------------------------------------------
	*/
	
	type public Boolean ER
	type public String RM
	
	type String CODE(), PGMNAME, TAB
	
	set ER = 0
	
	set PGMNAME = "VRULES"
	
	set TAB=$C(9)
	
	set CODE(1) = "public "_PGMNAME_TAB_"// Validate rules "_%CurrentDate.toString()_" "_$$TIM^%ZM_" - "_%UserID.get()
	set CODE(2) = TAB_"// Product rules routine compiled by DBSRULE from table UTBLPRODRL"
	set CODE(3) = TAB_"// Run routine DBSRULE or build DEP/LN filer to re-create this routine"
	set CODE(4) = ""
	set CODE(5) = TAB_"quit"_TAB_"// No entry from top"
	
	type DbSet ds = Db.selectDbSet("UTBLPRODRL", "", "RULEID ASC")
	
	quit:ds.isEmpty()			// No rules defined
	
	while ds.next() do { quit:ER
		
		type Number N, RULEID
		type String FILES, INPUT(), JOINFILS, PRIMARY, QRYS()
		
		type RecordUTBLPRODRL prodrl = ds.getRecord("UTBLPRODRL")
		
		set RULEID = prodrl.ruleid
		set FILES = prodrl.files
		
		if {List}FILES.contains("DEP") set PRIMARY = "DEP"
		else  if {List}FILES.contains("LN") set PRIMARY = "LN"
		else  set PRIMARY = "ACN"
		
		// Entry tag
		do ADDCODE("", .CODE())
		
		set CODE = "public vr"_RULEID_"(Record"_PRIMARY_" "_PRIMARY_")"
		set CODE = CODE_TAB_"// Rule - "_RULEID_"  "_prodrl.des
		do ADDCODE(CODE, .CODE())
		do ADDCODE("", .CODE())
		
		// Get rule tests
		type ResultSet rs = Db.select("DECISION,TEST", "UTBLPRODRLDT", "RULEID=:RULEID", "DECISION ASC")
		
		while rs.next() do {
			
			type String TEST
			
			set TEST = rs.getCol("TEST")
			
			quit:TEST.isNull()
			
			set QRYS(rs.getCol("DECISION")) = TEST
			
			do ADDCODE(TAB_"// "_rs.getCol("DECISION")_"  "_TEST, .CODE())
		}
		
		do ADDCODE("", .CODE())
		
		// If FILES is null, build it from the tables used in the queries
		if FILES.isNull() do { quit:ER
			
			type String PSLOBJ(,), PSLQRY(), WHERE
			
			set (N, WHERE) = ""
			for  set N = QRYS(N).order() quit:N.isNull()  do {
				
				if 'WHERE.isNull() set WHERE = WHERE_" OR "
				set WHERE = WHERE_"("_QRYS(N)_")"
			}
			
			set INPUT("FROM") = ""
			set INPUT("WHERE") = WHERE
			
			do ^UCQRYBLD(.INPUT, "ACN=ACN", .FILES, .PSLOBJ(), .PSLQRY())
			
			if FILES.isNull() do {

				set ER = 1
				// Invalid rule ID ~p1 - Invalid Table Value
				set RM = $$^MSG(3683, RULEID)_" - "_$$^MSG(7194)
			}
			else  if ER do {

				// Invalid rule ID ~p1
				set RM = $$^MSG(3683, RULEID)_" - "_RM
			}
		}	
	
		set JOINFILS = FILES
		if (PRIMARY = "ACN"), '{List}FILES.contains("ACN") set JOINFILS = "ACN,"_FILES
		
		set INPUT("FROM") = $$DQJOIN^SQLCONV(JOINFILS)		// For UCQRYBLD
		
		// If more than just the primary file, add loading code
		if (FILES.isLike("%,%") ! '{List}"DEP,LN".contains(PRIMARY)) do {
			
			type Number I, J
			type String PSLOBJ(,), PSLQRY(), TABLES
			
			set INPUT("WHERE") = ""
			
			do ^UCQRYBLD(.INPUT(), PRIMARY_"="_PRIMARY, .TABLES, .PSLOBJ(), .PSLQRY())
			
			set (I, J) = ""
			for  set I = PSLOBJ(I).order() quit:I.isNull()  do {
				
				for  set J = PSLOBJ(I, J).order() quit:J.isNull()  do ADDCODE(TAB_PSLOBJ(I, J), .CODE())
			}
			
			do ADDCODE("", .CODE())
		}
		
		// Set up each query, to return rule number (DECISION) if successful
		set N = ""
		for  set N = QRYS(N).order() quit:N.isNull()  do {
			
			type Number I
			type String PSLOBJ(,), PSLQRY(), TABLES
			
			set INPUT("WHERE") = QRYS(N)
			
			do ^UCQRYBLD(.INPUT(), PRIMARY_"="_PRIMARY, .TABLES, .PSLOBJ(), .PSLQRY())
			
			set (CODE, I) = ""
			for  set I = PSLQRY(I).order() quit:I.isNull()  do {
				
				if 'CODE.isNull() set CODE = CODE_" & "
				
				set CODE = CODE_"("_PSLQRY(I)_")"
			}
			
			do ADDCODE(TAB_"if "_CODE_" quit "_N, .CODE())
		}
		
		// Add return for failure of all tests
		do ADDCODE(TAB_"quit 0", .CODE())
	}
	
	if ER do { quit
		
		if 'skipmsg.get() do {
		
			// Compilation error - ~p1
			write !, $$^MSG(587, RM)
		}
	}
	
	if 'skipmsg.get() do {
	
		// ~p1 - compile run-time routine ~p2 ...
		write !,$$^MSG(3005, "", PGMNAME), " " ,$$TIM^%ZM
	}
	
	D cmpA2F^UCGM(.CODE(), PGMNAME,,,,,,)
	
	quit
	
	
ADDCODE(String LINE,	// Line of code to add
	String CODE())	// Code array
	
	type Number SEQ 
	
	set SEQ = CODE("").order(-1) + 1
	
	set CODE(SEQ) = LINE
	
	quit
			

public RTCNT(String COLUMN,		// Column name
	     Number RESULTID)		// Results Set ID
	     
	/*
	Return decision count from Product Attribute Results Set table
	
	Supports computed UTBLPRODRT.RTCNT
	*/
	
	type ResultSet rs = Db.select("COUNT(DECISION)", "UTBLPRODRTDT", "COLNAME=:COLUMN AND RESULTSID=:RESULTID")
	
	if rs.next() quit +rs.getCol(1)
	
	quit 0
	
	
public RUCNT(Number RULEID)	// Rule Set ID

	/*
	Return decision count from Product Attribute Rule Set table
	
	Supports computed UTBLPRODRL.RULECNT
	*/
	
	type ResultSet rs = Db.select("COUNT(DECISION)", "UTBLPRODRLDT", "RULEID=:RULEID")
	
	if rs.next() quit +rs.getCol(1)
	
	quit 0
 #OPTION ResultClass ON
public String vSIG()	quit "60444^50878^Dan Russell^4993"	// Signature - LTD^TIME^USER^SIZE
