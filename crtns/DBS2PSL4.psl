DBS2PSL4(RecordDBTBL2 dbtbl2)	//DBS2PSL4; - V7.0 - PSL Screen compiler
	/*
	       ORIG:  CHIANG - 1/15/86
	       DESC:  PSL Screen Compiler

	   I18N=QUIT : Excluded from I18N standards.
	  ---------- Revision History -----------------------------------------
	  02/27/08 - Pete Chenard - CR32585
	  	     Modified to check if there is no file def on the control page
	  	     for the screen.  If there is no file, then build the top line
	  	     of the screen program without the extra comma after the
	  	     %ProcessMode parameter:  V01S151(%ProcessMode) instead of
	  	     V01S151(%ProcessMode,).
	  	     
	  05/28/07 - Pete Chenard - CR26480
	  	     Modified DEFAULT section to quit if the table has no
	  	     default values defined.
	  	     
	  03/19/07 - Pete Chenard - CR26024
	  	     Modified DEFAULT section to deal with access keys that
	  	     are not yet defined when the screen gets called (i.e., do
	  	     not try to load defaults if all keys are not defined).
	  	     
	  02/22/07 - Pete Chenard - 23555
	  	     Cleaned up compiler warnings.
	  	     Corrected issue with default values not setting up level -100.
	  	     Corrected issue with Default values on screens.
	  	
	   03/29/06 - Pete Chenard - CR 20396
	   	      Modified SET section to reference the parameter 'line'
	   	      rather than public variable TEXT.  TEXT is not defined.
	   	      
	   02/23/06 - Pete Chenard - CR19551
	   	      Fixed issue in REPEATCK section.
		
           08/13/05 - TITOVE - 18351
                      Added code to check for Item Set data in DBTBL2PP
                      table and set VSCRPP flag if it exists.

	   05/23/05 - Pete Chenard - CR14146
		      Added code to define the keys in the VRDA section
		      for the Class.new method.  
		      Also cleaned up some warnings.

	   5/26/04 - GHODKEY - 10182
	   	     Modifications done to handle the situation where the file
	   	     is null i.e. when no table specified on the control page 
	   	     of screen(s).
	   	      	
	   12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	   10/02/02 - CHENARDP - 45497
		      Converted to PSL from DBSSCR4.M.  Removed old revision
		      history.

	*/
	#WARN FUNCTIONS OFF
	
	type Public String %DBL,%FDBL,%MODGRP,%XDB,%XDBL,AKEY,AR,BLD(),C1,C2,C3,C(),C3P(),CT,CTL,D,DB,DEC,DFT
	type Public String DFV,DI,DILNM,DINAM,diset(),DVF,ER,FILES,FMT,fsn(),FX(),KEYS(),KVAR,LF,LINE,LEN,LN,LOOP
	type Public String lvn,lvns,MAX,MIN,NL,NS,PFID,PGM,PP,Q,REF,RM,OS,PO,PRO,REQ,RPCFLG,RPTDA,rptlvns
	type Public String SCREEN,SEQ,SFC,SID,src(),tag,TAB,TB(),TBL,TMP(),TMPC(),TMPD(),TMPX(),TMPZ()
	type Public String USERVLOD,VARLIST(),vFID(),VFSN,VNEW(),vobjlst(),VPTBL,VZSEQ,X1,X41,XLT()
	type String CN,DE,DF,file,i,I,K,KEYNM,LL,N,OM,P,PMT,SAVC,SAVD,SCRVLOD(),sn,TT,X,XY,Y,z,Z
	
	set SAVD=D 
	set SAVC=C

	// check for user-defined vlod section
	set USERVLOD=Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=101")
	set C(2)=C(2)_",PGM=$T(+0),DLIB="_Q_"SYSDEV"_Q_",DFID="_Q_PFID_Q

	// Record level protection
	if 'dbtbl2.resflg set C3P(1)=" //"
	else  do ^DBSPROT4(dbtbl2.pfid,"*",.C3P,,,.vobjlst())

	// Data entry post proc
	if Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=21") set C(2)=C(2)_",VSCRPP=1"
	if Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=21")!Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=41") set C(2)=C(2)_",VSCRPP=1"

	set RPCFLG=1 if (dbtbl2.norpc+dbtbl2.repeat) set RPCFLG=0
	if RPCFLG,CUVAR.editmask set RPCFLG=0
	if USERVLOD set RPCFLG=0

	// Screen Pre-processor
	kill OM
	type DbSet ds=Db.selectDbSet("DBTBL2PP","LIBS='SYSDEV' AND SID=:SID and SEQ=0 and PSEQ between 69.999 and 80.999")
	while ds.next() do {
		type String code,pseq
		type RecordDBTBL2PP dbtbl2pp=ds.getRecord("DBTBL2PP")
		set pseq=dbtbl2pp.pseq
		set code=dbtbl2pp.code
		set OM(pseq)=code
		}  // whi	le ...

	do {
		type String vsqltag,PSEQ
		do PPLIB(.OM)	// parse for PP Libs
		}

	// Display rep-processor
	kill OM
	type DbSet rs1=Db.selectDbSet("DBTBL2PP","LIBS='SYSDEV' AND SID=:SID and SEQ=0 and PSEQ between 120.999 and 140.999")
	while rs1.next() do {
		type String code,pseq
		type RecordDBTBL2PP dbtbl2pp=rs1.getRecord("DBTBL2PP")
		set pseq=dbtbl2pp.pseq
		set code=dbtbl2pp.code
		set OM(pseq)=code
		}  // while ...

	do {
		type String vsqltag,PSEQ
		do PPLIB(.OM)	// parse for PP Libs
		}

	if $G(ER),$G(RM)'="" write !,RM
	kill VNEW  // patch


	// user-defined VLOD section
	if USERVLOD do {
		// Insert VCOM first
		type Number I,X
		set X="" for  set X=$O(SCRVLOD(X)) quit:X=""  if SCRVLOD(X)?1"VCOM".E quit
		if X>0 do {
			set X=$O(SCRVLOD(X),-1) 
			for I=1:1 set X=$O(SCRVLOD(X)) quit:X=""  set BLD(Z+I)=SCRVLOD(X) kill SCRVLOD(X)
			}

		type Number Z
		set Z=$O(BLD(""),-1)+1
		set BLD(Z)=" #ACCEPT date=11/05/03;pgm=Screen compiler;CR=UNKNOWN;GROUP=SYNTAX"
		set BLD(Z+1)=" quit" 
		set BLD(Z+2)="VLODDQ("_vobjlst("formal")_") //Original VLOD section" 
		set BLD(Z+3)=" " 
		set Z=Z+4
		}

	set X="" 
	for I=1:1 set X=$O(SCRVLOD(X)) quit:X=""  set BLD(Z+I)=SCRVLOD(X)

	// Build Run-time program
	kill XLT,SCREEN
	do ^ULODTMPL("DBS2PSLT","TMPZ")	//load template procedure
	set N=""
	for  set N=$O(TMPZ(N)) quit:N=""  do {
		quit:$E(TMPZ(N))=" "!($E(TMPZ(N))=$C(9))!(TMPZ(N)="")
		set TMPZ(N)=$TR(TMPZ(N),$C(9)," ")
		set XLT($P(TMPZ(N)," ",1))=N
		}
	// Remove VLOD entry
	set X=XLT("VLOD") kill TMPZ(X)
	if 'vobjlst("formal").isNull() set TMPZ(1)=PGM_"(Number %ProcessMode,"_vobjlst("formal")_")   //"_dbtbl2.apl_" - "_dbtbl2.sys_" - SID= <"_SID_"> "_dbtbl2.desc
	else  set TMPZ(1)=PGM_"(Number %ProcessMode)   //"_dbtbl2.apl_" - "_dbtbl2.sys_" - SID= <"_SID_"> "_dbtbl2.desc
	do ^SCACOPYR(.X1)
	set TMPZ(2)=X1 
	kill X1

	// program header section
	set X1=2.001
	// Documentation
	kill OM
	type DbSet rs2=Db.selectDbSet("DBTBL2PP","LIBS='SYSDEV' AND SID=:SID and SEQ=0 and PSEQ between 80.999 and 100.999")
	while rs2.next() do {
		new code,pseq
		type RecordDBTBL2PP dbtbl2pp=rs2.getRecord("DBTBL2PP")
		set pseq=dbtbl2pp.pseq
		set code=dbtbl2pp.code
		set TMPZ(X1)=" // "_code
		set X1=X1+.01
		}  // while ...

	new ppre,ppro
	set ppre=Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=61")	//Screen Pre-proc
	set ppro=Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=121")  //Screen display pre-proc
	set X1=XLT("V5")
	set TMPZ(X1)="" set X1=X1+1
	set TMPZ(X1)=" if %ProcessMode=5 do VPR("_vobjlst("actual")_"),VDA1("_vobjlst("actual")_"),^DBSPNT() quit"
	if '(ppre!ppro) do {
		set X1=XLT("V5")+2.001
		set TMPZ(X1)=" if '%ProcessMode do VNEW("_vobjlst("actual")_"),VPR("_vobjlst("actual")_"),VDA1("_vobjlst("actual")_")"
		set X1=X1+.001
		set TMPZ(X1)=" if %ProcessMode do VLOD("_vobjlst("actual")_") quit:$G(ER)  do VPR("_vobjlst("actual")_"),VDA1("_vobjlst("actual")_")"
		}

	//---------- Screen Pre-Processor
	else  do {
		if ppre do {
			set tag="VSCRPRE("_vobjlst("formal")_")  // Screen Pre-Processor"
			do PPUTIL(61,tag)
			set X1=XLT("V5")+2.001
			set TMPZ(X1)=" set ER=0 do VSCRPRE("_vobjlst("actual")_") if ER quit  // Screen Pre-Processor"
			set X1=X1+.001 
			set TMPZ(X1)=" "
			}  // if ppre

		if 'ppro do {
			set X1=X1+.001
			set TMPZ(X1)=" if '%ProcessMode do VNEW("_vobjlst("actual")_"),VPR("_vobjlst("actual")_"),VDA1("_vobjlst("actual")_")" 
			set X1=X1+.001
			set TMPZ(X1)=" if %ProcessMode do VLOD("_vobjlst("actual")_") quit:$G(ER)  do VPR("_vobjlst("actual")_"),VDA1("_vobjlst("actual")_")"
			}  // if ' ppro

	// ---------- Display Pre-Processor
		if ppro do {
			set tag="VDSPPRE("_vobjlst("formal")_")  // Display Pre-Processor"
			do PPUTIL(121,tag)
			set X1=XLT("V5")
			set TMPZ(X1)=""
			set X1=X1+2.005
			set TMPZ(X1)=" // Display Pre-Processor" set X1=X1+.001
			set TMPZ(X1)=" //" set X1=X1+.001
			set TMPZ(X1)=" if '%ProcessMode do VNEW("_vobjlst("actual")_"),VDSPPRE("_vobjlst("actual")_") quit:$G(ER)  do VPR("_vobjlst("actual")_"),VDA1("_vobjlst("actual")_")"
			set X1=X1+.001
			set TMPZ(X1)=" if %ProcessMode do VLOD("_vobjlst("actual")_") quit:$G(ER)  do VDSPPRE("_vobjlst("actual")_") quit:$G(ER)  do VPR("_vobjlst("actual")_"),VDA1("_vobjlst("actual")_")"
			}  // if ppro
		}  // else do ..

	set VFSN="" set file=""
	for  set file=$O(fsn(file)) quit:file=""  do {
		set sn=$P(fsn(file),"|",1)
		if $E(sn,$L(sn))'=")" set sn=$P(sn,"(",1)
		set VFSN=VFSN_",VFSN("""_file_""")=""z"_$TR(sn,"%")_""""
		}  // for ..

	if VFSN'="" set VFSN=" set "_$E(VFSN,2,$L(VFSN))

	set X1=XLT("VSTART")
	set TMPZ(X1)=" #WARN SCOPE OFF"
	set X1=XLT("V0")

	set TMPZ(X1)="" set X1=X1+1.5
	// If printing blank screen will not get objects, so instantiate empty ones
	set TMPZ(X1) = " if (%ProcessMode = 5) do {" set X1 = X1 + .001
		
	for i = 1:1:vobjlst("formal").length(",") do {
		
		type String NAME, RECORD, X
		
		set X = vobjlst("formal").piece(",", i)
		set RECORD = X.piece(" ", 1)
		set NAME = X.piece(" ", 2)
		if NAME.isNull() quit
		if NAME.endsWith("()") set NAME=NAME.piece("()",1)_"(1)"
		set TMPZ(X1) = "  if '"_NAME_".exists() set "_NAME_" = Class.new("""_RECORD_""")"
		set X1 = X1 + .001
	}
	
	set TMPZ(X1) = " }" set X1 = X1 + .001
	set TMPZ(X1)=" set KVAR="""_KVAR_""",VSID="""_$S($E(SID)="z":$E(SID,2,10),1:SID)_""",VPGM=$T(+0),VSNAME="""_dbtbl2.desc_""""
	set X1=X1+.001
	if VFSN'="" set TMPZ(X1)=VFSN
	set X1=X1+.001
	set TMPZ(X1)=" set vPSL=1"
	set X1=X1+.001
	
	do setkeys(.dbtbl2,.KEYS())	// set up KEYS array used in VRDA section

	set X1=X1+.001

	// Record level protection
	for I=1:1 quit:'C3P(I).exists()  set TMPZ(X1)=C3P(I) set X1=X1+.001

	//
	if dbtbl2.repeat do {
		set X1=XLT("V5")+1
		set I=23-dbtbl2.repeat if $G(%MODGRP)>1000 set I=(I+1)\(%MODGRP\1000)
		set TMPZ(X1)=" if %ProcessMode=5 set %MODS=1,%REPEAT="_I_" do VPR("_vobjlst("actual")_"),VDA1("_vobjlst("actual")_"),V5^DBSPNT quit"
		}  //if dbtbl2.repeat


	// print prompts
	set X1=XLT("VPR")
	set TMPZ(X1)="VPR("_vobjlst("formal")_") // Display screen prompts"
	set X1=XLT("VPR")+.001
	for I=1:1 set X=$G(TMPC(I)) quit:X=""  set TMPZ(X1)=X set X1=X1+.001


	// display data
	set X1=XLT("VDA")
	set TMPZ(X1)="VDA1("_vobjlst("formal")_")  // Display screen data"
 
	if lvns.data() do {
		type String n,new,new5,set
		set n="" set new="" set new5="" set set=""

		for  set n=$O(lvns(n)) quit:n=""  do {
			set lvn=lvns(n)
			if lvn="%O" quit
			if lvn="%ProcessMode" quit
			if '((lvn?1A.AN)!(lvn?1"%".AN)) quit
			set new5=new5_","_lvn
			if $E(lvn)="v" set new=new_","_lvn set set=set_","_lvn_"=$G("_n_")" quit
			set set=set_","_lvn_"=$G("_n_")" quit
			}  // for ...

		set new5=$E(new5,2,$L(new5)) if new5="" quit
		set TMPD(.1)=" if %ProcessMode=5 new "_new5
		set TMPD(.2)=" if  set ("_new5_")="""""
		if new'="" set TMPD(.3)=" else  new "_$E(new,2,$L(new))
		if set'="" do {
			set set=$E(set,2,$L(set))
			if $L(set)<500 set TMPD(.4)=" else  set "_set quit
			// Split the list
			set z=$L(set,",")\2
			// in half
			set TMPD(.4)=" else  set "_$P(set,",",1,z)
			set TMPD(.41)=" else  set "_$P(set,",",z+1,9999)
			}

		set TMPD(.5)=" "
		}  // if $D(lvns)
 
	if rptlvns.data() do {

		type String n,new,new5,set,set1,set2
		set n="" set new="" set new5="" set set="" set set1="" set set2=""
		set RPTDA=RPTDA-1

		for  set n=$O(rptlvns(n)) quit:n=""  do {
			set lvn=rptlvns(n)
			if lvn="%O" quit
			// Not valid
			if '((lvn?1A.AN)!(lvn?1"%".AN)) quit
			set new5=new5_","_lvn
			if $E(lvn)="v" set new=new_","_lvn
			// Overflow line
			if $L(set1)>440 set set2=set2_",("_lvn_","_n_")=$G("_n_")" quit
			// Overflow line
			if $L(set)>440 set set1=set1_",("_lvn_","_n_")=$G("_n_")" quit
			set set=set_",("_lvn_","_n_")=$G("_n_")" quit
			}

		set new5=$E(new5,2,$L(new5)) if new5="" quit
		set TMPD(RPTDA+.1)=" if %ProcessMode=5 new "_new5
		set TMPD(RPTDA+.2)=" if  set ("_new5_")="""""
		if new'="" set TMPD(RPTDA+.3)=" else  new "_$E(new,2,$L(new))
		if set'="" set TMPD(RPTDA+.4)=" else  set "_$E(set,2,$L(set))
		// Overflow line
		if set1'="" set TMPD(RPTDA+.41)=" else  set "_$E(set1,2,$L(set1))
		// Overflow line
		if set2'="" set TMPD(RPTDA+.42)=" else  set "_$E(set2,2,$L(set2))
		set TMPD(RPTDA+.5)=" "
		}

	// Init user-defined variables
	set X1=$O(TMPD(1),-1)+.0001 set N=""
	for  set N=$O(VARLIST(N)) quit:N=""  do {
		new var
		set var="" for  set var=fsn(var).order() quit:var=""  quit:fsn(var).piece("|",1).extract(1,N.length())=N
		if var'="" quit
		set TMPD(X1)=" s "_N_"=$G("_N_")" set X1=X1+.001
		}
	set TMPD(X1)=" //"
	set X1=XLT("VDA") set N=""
	set X1=X1+.001 set TMPZ(X1)=" new V"         // *** 08/03/94 BC

	for  set N=$O(TMPD(N)) quit:N=""  set X1=X1+.001 set TMPZ(X1)=TMPD(N)

	set X1=XLT("VDA1")
	//mas
	//set TMPZ(X1)="VDA("_vobjlst("formal")_")"
	set TMPZ(X1)="VDA"
	//
	// CR10182 - GHODKEY
	if FILES'="" do {
		for i=1:1:$L(FILES,",") do {
			type String file,sn
			set file=FILES.piece(",",i)
			set sn=$P(vobjlst(i),"|",1)
			if $E(sn,$L(sn))="(" set sn=$E(sn,1,$L(sn)-1)
			set X1=X1+.001
			set TMPZ(X1)=" type Public Record"_file_" "_sn_$S(vFID(file).exists():"()",1:"")
			}
		}
	set X1=X1+.001 set TMPZ(X1)=" do VDA1("_vobjlst("actual")_")"
	set X1=X1+.001 set TMPZ(X1)=" quit"
	set X1=X1+.001 set TMPZ(X1)=""
	
	set X1=XLT("VREPRNT")
	set TMPZ(X1)="VREPRNT"

	if FILES'="" do {
		for i=1:1:$L(FILES,",") do {
			type String file,sn
			set file=FILES.piece(",",i)
			set sn=$P(vobjlst(i),"|",1)
			if $E(sn,$L(sn))="(" set sn=$E(sn,1,$L(sn)-1)
			set X1=X1+.001
			set TMPZ(X1)=" type Public Record"_file_" "_sn_$S(vFID(file).exists():"()",1:"")
			}
		}
	// Add protection logic
	if $O(C3P(1))>0 do {
 		set X1=X1+.001
		set TMPZ(X1)=" do VPROT("_vobjlst("actual")_") quit:ER"
		}

	set X1=X1+.001 set TMPZ(X1)=" do VPR("_vobjlst("actual")_")"
	set X1=X1+.001 set TMPZ(X1)=" do VDA1("_vobjlst("actual")_")"
	set X1=X1+.001 set TMPZ(X1)=" do ^DBSPNT()"
	set X1=X1+.001 set TMPZ(X1)=" quit"
	set X1=X1+.001 set TMPZ(X1)=""
	
	
	set X1=XLT("VW")
	set TMPZ(X1)="VW("_vobjlst("formal")_")"
	set TMPZ(X1+.001)=" do VDA1("_vobjlst("actual")_")"
	set TMPZ(X1+.002)=" do ^DBSPNT(10)"
	set TMPZ(X1+.003)=" quit"
	set TMPZ(X1+.004)=""

	set X1=XLT("VDAPNT")
	set TMPZ(X1)="VDAPNT("_vobjlst("formal")_")"
	set TMPZ(X1+.002)=" do VDA1("_vobjlst("actual")_")"
	set TMPZ(X1+.003)=" do ^DBSPNT(0,2)"
	set TMPZ(X1+.004)=" quit"
	set TMPZ(X1+.005)=""
	
	set X1=XLT("vTBL")
	set TMPZ(X1)=" if %ProcessMode<2 do VTAB("_vobjlst("actual")_")"
	
	
	/* If there's a repeat region, we need to clean up any rows that were
	   instantiated with Class.new inside this screen, but never actually
	   populated.  If we don't there will be "empty" objects laying around
	   that will likely cause undefined or null subscript errors in the 
	   filers.	*/
	if dbtbl2.repeat do {
		type String bkey,keys,fid,sn
		set fid = ""
		for  set fid = vFID(fid).order()  quit:fid.isNull()  do {
			do fsn^SQLDD(.fsn,fid)
			set keys = fsn(fid).piece("|",3)
			set bkey = keys.piece(",",keys.length(","))
			if bkey?.N quit  //ignore literal key
			set sn = vFID(fid)
			set X1=X1+.01
			set TMPZ(X1)=" type Number ptr",X1=X1+.01
			set TMPZ(X1)=" set ptr=""""",X1=X1+.01
			set TMPZ(X1)=" for  set ptr = "_sn_"(ptr).order() quit:ptr.isNull()  do {",X1=X1+.01
			set TMPZ(X1)="     if "_sn_"(ptr)."_bkey_"="""" kill "_sn_"(ptr)",X1=X1+.01
			set TMPZ(X1)="     }",X1=X1+.01
		}
	}
		
			
	if 'TAB.data() for I="VPOS","VPRE" do DELETE(I)
	set X1=XLT("VTAB")
	set TMPZ(X1)="VTAB("_vobjlst("formal")_")"

	// Build %TAB
	set X1=XLT("VTAB")+0.001 set TMPZ(X1)=" " set X1=X1+.001

	// K REQ,%TAB ...
	set TMPZ(X1)=C(1) set X1=X1+.001

	// S %MAX=...
	set TMPZ(X1)=C(2) set X1=X1+.001

	// S OLNTB=...
	set TMPZ(X1)=C(3) set X1=X1+.001 set TMPZ(X1)=" " set X1=X1+.001
	if VFSN'="" do {
		set TMPZ(X1)=VFSN set X1=X1+.001
		set TMPZ(X1)=" //" set X1=X1+.001
		}

	set X="" 
	for  set X=$O(FX(X)) quit:X=""  set TMPZ(X1)=FX(X) set X1=X1+.001
	set X1=X1+.001

	kill FX
	


	set TMPZ(XLT("VTBL"))="VTBL("_vobjlst("formal")_") //Create %TAB(array)"
	if TAB.data() do {
		set TMPZ(X1)=X41 
		set X1=X1+2.001 
		set N=""
		for  set N=$O(TAB(N)) quit:N=""  set TMPZ(X1)=TAB(N) set X1=X1+.001

		if VPTBL.data() do {
			// ========== data item protection logic
			set TMPZ(X1)=" " set X1=X1+.001
			set TMPZ(X1)=" // Data item protection" set TMPZ(X1+.001)=" //"
			set TMPZ(X1)=" set z=0 for  set z=$O(VPTBL(z)) quit:z="_$C(34,34)_"  set %TAB(z)=$E(%TAB(z),1,3)_(VPTBL(z)+2)_$E(%TAB(z),5,999)"
			set X1=X1+.001
			}
		}

	// Data entry pre-processor
	new vspre
	set vspre=Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=1")
	//set X1=XLT("VTAB1")
	set TMPZ(X1)=" do VTBL("_vobjlst("actual")_")"
	if vspre do {
		//set X=XLT("VTAB1") 
		set TMPZ(X1)=" do VTBL("_vobjlst("actual")_"),VDEPRE("_vobjlst("actual")_") if $G(ER) quit"
		}

	// Required data item set definitions
	new vspp
	set vspp=Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=41")
	if vspp do {
		set VZSEQ=40 set X=""
		type DbSet pproc=Db.selectDbSet("DBTBL2PP","LIBS='SYSDEV' AND SID=:SID and SEQ=0 and PSEQ between 41 and 60")
		while pproc.next() do {
			new code,pseq
			type RecordDBTBL2PP dbtbl2pp=pproc.getRecord("DBTBL2PP")
			set pseq=dbtbl2pp.pseq
			set code=dbtbl2pp.code
			set diset(pseq)=code
			}  // while ...


		set VZSEQ=""
		for  set VZSEQ=$O(diset(VZSEQ)) quit:VZSEQ=""  do {
			set X=diset(VZSEQ) if X?." " quit
			if X'[";" do ^DBS2PSL5 Q:ER  quit
			// (DI,DI...)  OR (...) OR ;
		
			set X=$P(X,";",1)
			for  set VZSEQ=$O(diset(VZSEQ)) quit:VZSEQ=""  set X=X_diset(VZSEQ) quit:X'[";"  set X=$P(X,";",1)

			; Process set definitions
			do ^DBS2PSL5 quit:ER  quit
			}  //for loop
		}  // if vspp ...

	// Data entry post processor
	set X1=XLT("VSPP")
	set TMPZ(X1)="VSPP  // Post Processor"
	set vspp=Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=21")
	if 'vspp do { 
		do DELETE("VSPP") 
		}
	else  do {

		set X1=XLT("VSPP")
		set TMPZ(X1)="VSPP   // screen post proc"
		set X1=X1+.001 
		
		if FILES'="" do {
			for i=1:1:$L(FILES,",") do {
				type String file,sn
				set file=FILES.piece(",",i)
				set sn=$P(vobjlst(i),"|",1)
				if $E(sn,$L(sn))="(" set sn=$E(sn,1,$L(sn)-1)
				set TMPZ(X1)=" type Public Record"_file_" "_sn_$S(vFID(file).exists():"()",1:"")
				set X1=X1+.001
				}
			}
		set TMPZ(X1)=" do VSPP1("_vobjlst("actual")_")" 
		set X1=X1+.001
		set TMPZ(X1)=" #ACCEPT Date=11/05/03; pgm=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX"
		set X1=X1+.001
		set TMPZ(X1)=" quit"
		set X1=X1+.001
		set TMPZ(X1)="VSPP1("_vobjlst("formal")_")"
		set X1=X1+.001

		set vspp=Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=41")
		if vspp do {
			set X1=X1+.001 set TMPZ(X1)=" D VSPPREQ("_vobjlst("actual")_") I ER Q",X1=X1+.001
			set TMPZ(X1)=" ;",X1=X1+.001
			}

		set X="" 
		for  set X=$O(TMP(999,X)) quit:X=""  set TMPZ(X1)=TMP(999,X),X1=X1+.001
		set TMPZ(X1)=" #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX"
		set X1=X1+.001
		set TMPZ(X1)=" quit" 
		set X1=X1+.001
		}  // else ...


	set X="" 
	for  set X=$O(TMP(1000,X)) quit:X=""  do {
		set TMPZ(X1)=TMP(1000,X)
		set X1=X1+.001
		}

	set X="" 
	for  set X=$O(TMP(998,X)) quit:X=""  do {
		set TMPZ(X1)=TMP(998,X)
		set X1=X1+.001
		}


	set X1=XLT("VNEW")
	set TMPZ(X1)="VNEW("_vobjlst("formal")_") // Initialize arrays if %O=0"
	set X1=XLT("VNEW")+.001 
	set TMPZ(X1)=" " 
	set X1=X1+.001
	//set VNEW(1)=" do VLOD("_vobjlst("actual")_")"
	//set X1=X1+.001
	
	// user defined VLOD
	if USERVLOD do {
		// split VNEW into two sections
		set VNEW(1)=" do VLOD("_vobjlst("actual")_")"
		set X=0 
		for I=1:1 set X=$O(VNEW(X)) quit:X=""!(+X>99)  do {
			set TMPZ(X1)=VNEW(X) 
			set X1=X1+.001 kill VNEW(X)
			}
		} // do

	else  do {   // Set up VNEW section
		set X="" 
		for  set X=$O(VNEW(X)) quit:X=""  do {
			set TMPZ(X1)=VNEW(X) 
			set X1=X1+.001
			}
		kill VNEW
		}
	set TMPZ(X1)=" do VDEF("_vobjlst("actual")_")"
	set X1=X1+.001
	set TMPZ(X1)=" do VLOD("_vobjlst("actual")_")"
	set X1=X1+.001
	set TMPZ(X1)=" #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX"
	set X1=X1+.001
	set TMPZ(X1)=" quit"

	/*  Use indirection to set the values into the object.  This is called
	    by DBSCRT8 after each field on the screen.			       */

	set X1=XLT("vSET")
	set TMPZ(X1)="vSET(sn,di,X)"
	set X1=X1+.001
	
	if FILES'="" do {
		for i=1:1:$L(FILES,",") do {
			new file,sn
			set file=$P(FILES,",",i)
			quit:file=""
			set X1=X1+.001
			set sn=$P(vobjlst(i),"|",1)
			if $E(sn,$L(sn))="(" set sn=$E(sn,1,$L(sn)-1)
			set TMPZ(X1)=" type Public Record"_file_" "_sn_$S(vFID(file).exists():"()",1:"")
			set X1=X1+.001
			if vFID(file).exists() set TMPZ(X1)=" if sn="""_file_""" do vSET"_i_"("_sn_"(I(1)),di,X)"
			else  set TMPZ(X1)=" if sn="""_file_""" do vSET"_i_"(."_sn_",di,X)"
			}
		}
	set X1=X1+.001
	set TMPZ(X1)=" #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX"
	set X1=X1+.001
	set TMPZ(X1)=" quit"
	
	if FILES'="" do {
		for i=1:1:$L(FILES,",") do {
			set file=$P(FILES,",",i)
			quit:file=""
			set sn=$P(vobjlst(i),"|",1)
			if $E(sn,$L(sn))="(" set sn=$E(sn,1,$L(sn)-1)
			set X1=X1+.001
			set TMPZ(X1)="vSET"_i_"(Record"_file_" "_sn_",di,X)"
			set X1=X1+.001
			set TMPZ(X1)=" do "_sn_".setAuditFlag(1)"
			set X1=X1+.001
			set TMPZ(X1)=" set "_sn_".@di=X"
			set X1=X1+.001
			set TMPZ(X1)=" #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX"
			set X1=X1+.001
			set TMPZ(X1)=" quit"
			}
		}


	/*  Use indirection to read values from object.  This is called
	    by DBSCRT8 to set up the value V prior to entering each
	    field on the screen. 					*/

	set X1=XLT("vREAD")
	set TMPZ(X1)="vREAD(fid,di)"
	set X1=X1+.001
	
	if FILES'="" do {
		for i=1:1:$L(FILES,",") do {
			new file,sn
			set file=$P(FILES,",",i)
			quit:file=""
			set X1=X1+.001
			set sn=$P(vobjlst(i),"|",1)
			if $E(sn,$L(sn))="(" set sn=$E(sn,1,$L(sn)-1)
			set TMPZ(X1)=" type Public Record"_file_" "_sn_$S(vFID(file).exists():"()",1:"")
			set X1=X1+.001
			if vFID(file).exists() set TMPZ(X1)=" if fid="""_file_""" quit $$vREAD"_i_"("_sn_"(I(1)),di)"
			else  set TMPZ(X1)=" if fid="""_file_""" quit $$vREAD"_i_"(."_sn_",di)"
			}
		}
	set X1=X1+.001
	set TMPZ(X1)=" quit """""
	
	if FILES'="" do {
		for i=1:1:$L(FILES,",") do {
			set file=$P(FILES,",",i)
			quit:file=""
			set sn=$P(vobjlst(i),"|",1)
			if $E(sn,$L(sn))="(" set sn=$E(sn,1,$L(sn)-1)
			set X1=X1+.001
			set TMPZ(X1)="vREAD"_i_"(Record"_file_" "_sn_",di)"
			set X1=X1+.001
			set TMPZ(X1)=" if "_sn_".get().isNull() quit """""
			set TMPZ(X1)=" quit "_sn_".@di"
			}
		}

	// Default values
	set X1=XLT("VDEF")
	set TMPZ(X1)="VDEF("_vobjlst("formal")_")"
	set X1=X1+.001
	type String zdft()
	if 'FILES.isNull() do DEFAULT(FILES.piece(",",1),.zdft)
	set i=""
	for  S i=$O(zdft(i)) Q:i=""  set TMPZ(X1)=zdft(i),X1=X1+.001
	set TMPZ(X1)=" #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX"
	set X1=X1+.001
	set TMPZ(X1)=" quit"  // temp patch until default section of filer works
	set X1=X1+.001

	if USERVLOD do {
		set TMPZ(X1)=" #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX"
		set X1=X1+.001
		set TMPZ(X1)=" quit" 
		set TMPZ(X1+.001)="VNEWDQ("_vobjlst("formal")_") // Original VNEW section"
		set TMPZ(X1+.002)=" " set X1=X1+.003
		set X="" for  set X=$O(VNEW(X)) quit:X=""  set TMPZ(X1)=VNEW(X) set X1=X1+.001
		set TMPZ(X1)=" #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX"
		set X1=X1+.001
		set TMPZ(X1)=" quit" set X1=X1+.001
		kill VNEW
		}  // if USERVLOD


	set X="" 
	for  set X=$O(BLD(X)) quit:X=""  set TMPZ(X1)=BLD(X) set X1=X1+.001
	kill BLD
	kill C,C1,C2,C3,Z,NL,NS,OS,P,PMT,PO,PRO,REQ,TT,Y,XY,SEQ,LF,BLD,DFV,FX
	kill LL,LINE,AR,CN,DE,DEC,DF,DI,DILNM,DINAM,FMT,ER,I,LEN,VNEW,TMPX

	// Data item pre/post processor
	if 'TMP("PO").data() do {
		do DELETE("VPOS")
		}
	else  do {
		set X1=XLT("VPOS")
		set TMPZ(X1)="  //user-defined post procs"
		set X1=X1+.001
		set TMPZ(X1)=" //" set X1=X1+.001
		set X="" for  set X=$O(TMP("PO",X)) quit:X=""  set TMPZ(X1)=TMP("PO",X) set X1=X1+.0001
		}

	kill %FDBL,%XDB,%XDBL,AKEY,CT,DB,DFT,FMT,K,KEYNM,KVAR,LEN,LN,PP,REF,TBL,LOOP,MAX,MIN,SFC,%DBL,CTL

	do COMPILE(.TMPZ,PGM,SID)
	quit


private DELETE(String SUB)	// Delete a Subroutine and any following lines
	type Public String TMPZ(),XLT()
	type String N,X
	
	if 'XLT(SUB).exists() quit
	set N=XLT(SUB) kill XLT(SUB),TMPZ(N)
	for  set N=$O(TMPZ(N)) quit:N=""  set X=TMPZ(N) quit:$P(X," ",1)'=""  kill TMPZ(N)
	quit


	// Change every " to ""
private DOUBLE(String X)
	type Public String Q
	type String XL
	
	set XL=0
	for  set XL=$F(X,Q,XL) quit:XL<1  set X=$E(X,1,XL-2)_Q_Q_$E(X,XL,999) set XL=XL+1
	quit X


private PPUTIL(String node,	// DBTBL2PP node number		/REQ/MECH=VAL
		String tag)	// PP Label			/REQ/MECH=VAL

	type Public String TMPZ()
	type String I,OM,X,X1,X2

	set X=node-.001 
	set X2=X+20

	type DbSet rs=Db.selectDbSet("DBTBL2PP","LIBS='SYSDEV' AND SID=:SID and SEQ=0 and PSEQ between :X and :X2")
	while rs.next() do {
		type String code,pseq
		type RecordDBTBL2PP dbtbl2pp=rs.getRecord("DBTBL2PP")
		set pseq=dbtbl2pp.pseq
		set code=dbtbl2pp.code
		set OM(pseq)=code
		}  // while ...

	do PPLIB(.OM)	// parse for PP Libs
	
	set X1=$O(TMPZ(""),-1)+100 set TMPZ(X1)=" //" set X1=X1+.001
	set TMPZ(X1)=tag set X1=X1+.001
	set TMPZ(X1)=" new %TAB,vtab // Disable .MACRO. references to %TAB()" set X1=X1+.001
	set TMPZ(X1)=" //" set X1=X1+.001

	set X="" for I=1:1 set X=$O(OM(X)) quit:X=""  set TMPZ(X1)=OM(X) set X1=X1+.001
	set TMPZ(X1)=" #ACCEPT date=11/05/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX"
	set X1=X1+.001
	set TMPZ(X1)=" quit"
	quit
	
private PPLIB(String PP())	// Post Processor Library Array		/REQ/MECH=REF

	type Public String ZNQ
	type String code,end,i,ppnam,ptr
	//set pseq=0
	set i=""
	set end=$O(PP(""),-1)+10	// init pointer to last line of code +10
								// that's where the PP code will be inserted.
	for  set i=$O(PP(i)) quit:i=""  do {
		set code=PP(i)
		set code=$$REPEATCK(code)	//check if this DI is in a repeat region
		set PP(i)=code
		
		if $p(code,"//",1)'["@[" quit	// not pre/post processor library, so quit
		set ptr=0
		for  set ptr=$F(code,"@[",ptr) quit:ptr=0  if $L($E(code,1,ptr),"""")#2 do {
			new ptrz
			set ptrz=$F(code,"]",ptr) if ptrz=0 quit
			set ppnam=$E(code,ptr-1,ptrz-1),ptr=ptrz
			//if DINAM?1"[^"1E.E1"]" D MPGM Q
			if ppnam?1"["1E.E1"]" set ZNQ=$S(code["/NQ":"NQ",1:"") do PPLIB1(ppnam,.code,i)
			}
		set PP(i)=code	// stick modified code back into PP array.
	}  //$O(PP(i))

	quit
	
private PPLIB1(String ppnam,		// Post Proc Library Name	/REQ/MECH=VAL
		String code,		// Line of Code		  	/REQ/MECH=REF
		String i)		// Sequence Pointer		/REQ/MECH=VAL
		
	type Public String end,ER,PP(),PSEQ,RM,vpseq,ZNQ
	type String line,linenum,xpp
	
	// insert pp lib code into post processor array
	set linenum=0
	if PSEQ(ppnam).exists() set code=$P(code,"@"_ppnam,1)_"VPO"_PSEQ(ppnam)_"("_vobjlst("actual")_")"_$P(code,"@"_ppnam,2,99) quit
	set xpp=$E(ppnam,2,$L(ppnam)-1)		// strip off [ ]
	if 'Db.isDefined("DBTBL13","LIBS=:%Library,PID=:xpp") set ER=1,RM=$$^MSG(1425,xpp) quit	// invalid library name
	set vpseq=$G(vpseq)+1

	if ZNQ="" set PP(end+1)="VPO"_vpseq_"("_vobjlst("formal")_")  // user library "_xpp,end=end+1	// add tag for pp code
	
	//open result set to read code from DBTBL13D
	type DbSet ds=Db.selectDbSet("DBTBL13D","LIBS='SYSDEV' and PID=:xpp and SEQ>0")
	while ds.next() do {
		type RecordDBTBL13D dbtbl13d=ds.getRecord("DBTBL13D")
		set line=dbtbl13d.data
		set linenum=linenum+1
		do SET(line,linenum,end)
		}
	set linenum=linenum+1
	do SET(" #ACCEPT DATE=11/05/03;pgm=screen compiler;CR=UNKNOWN;GROUP=SYNTAX",linenum,end)
	set linenum=linenum+1
	do SET(" quit",linenum,end)
	if ZNQ="" do SUBNAME(.code) set PP(i)=code	//substitute pp name with VPOseq name
	
	quit	
	
private SET(String line,	// PP Library Line of Code	/REQ/MECH=VAL
		String linenum,	// PP Library Line Number	/REQ/MECH=VAL
		String end)	// PP Library Ending Line Num	/REQ/MECH=VAL
		
	type Public String FLG,PP(),RM,XOM

	if line="" quit
	set PP(linenum+end)=line if line?1" //".E quit
	if PP(linenum+end)?.E1"["1E.E1"]".E set XOM(linenum+end)="" 		// [FID]DI SYNTAX
	if PP(linenum+end)?.E1"."4U.U1"."1E.E,PP(linenum+end)'?1" //".E set XOM(linenum+end)="" // MACRO COMMAND
	if line'?.E1" //".E set FLG=1

	// Warning - line tag error - ~p1
	if $E(line)="V" set RM=$$^MSG(2967,line)
	quit

private SUBNAME(String code)
	type Public String end,linenum,OM(),PP(),ppnam,PSEQ(),vpseq,vobjlst()

	set PP(linenum+end+.999)=" #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX"
	set PP(linenum+end+1)=" quit",end=end+linenum+10
	set OM(194.99)=" #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX"
	set OM(195)=" quit"

	set code=$P(code,"@"_ppnam,1)_"VPO"_vpseq_"("_vobjlst("actual")_")"_$P(code,"@"_ppnam,2,99)
	set PSEQ(ppnam)=vpseq
	set vpseq=vpseq+1
	quit
	
private REPEATCK(String X)
	/* This function will scan the line of post processor code looking for data item
	   references.  For any data items it finds, it will check if it is in a repeat region 
	   on the screen.   If it is, it will replace its reference to reflect that it is a reference
	   to a column that is in an array of objects by adding a subscript to the short name array.
	   For example, the following line of code is a pos processor in the repeat region of a screen 
	   post processor.
	   
	   	S X=ABC.XYZ
	   	
	   This will be converted to:
	    S X=ABC(I(1)).XYZ
	    
	   where I(1) is an internal DQ structure that stores the current row within the repeat region.
	 */
	 type String di,dinam,ptr
	 type Public String DILIST(),P(),REPEAT(),vSN()
	 
	 set ptr=0
	 for  set di=$$FINDINAM^DBSDD(X,.ptr) quit:di=""  do {
	 	if $C(34,40,124)[$E(X,ptr) quit
	 	set DILIST(di)=""
	 	set dinam=di
		if $$vREPEAT(di,P(5).get()) set dinam=$P(di,".",1)_"(I(1))."_$P(di,".",2)
	 	//if $D(REPEAT($$UPPER^%ZFUNC(di)))!$$vREPEAT(P(5).get()) set dinam=$P(di,".",1)_"(I(1))."_$P(di,".",2)	// add row subscript
		set X=$P(X,di,1)_dinam_$P(X,di,2,99) 
		}
	quit X
vREPEAT( String di,	// data item referenced in post proc
	 String field)	// field on the screen where the post processor 

	/* determine if the column that is passed in is in a repeat region.
	   Format is [FID]DI	*/
	type Public String REPEAT(),vFID(),vSN()
	
	if REPEAT(di.upperCase()).exists() quit 1	// referenced column is in repeat region
	
	type String fid
	if di["." set fid = di.piece(".",1) quit vSN(fid).exists()  // not on screen but part of repeat region file

	if field.get().isNull() quit 0			// not a field post processor	
	set fid = field.piece("]",1).extract(2,9999)
	set fid=fid.piece(",",2)
	quit vFID(fid).exists()


	/* Defined KEYS() array with the key values from the master table on this screen. */
private setkeys(RecordDBTBL2 dbtbl2, 		// Screen object pointer.	/REQ/MECH=VAL
	String KEYS())			// KEYS array			/REQ/MECH=REF
	

	type Public String TMPZ(),vFID()
	type Public Number X1
	type String acckeys,fid,key,pfid,sn
	type Number count,i
	
	set pfid = dbtbl2.pfid
	quit:pfid=""
	set pfid = $$Primary(pfid)		// find master file
	
	set count = 0


	type RecordDBTBL1 file = Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:pfid")
	set acckeys = file.acckeys
	set sn = file.fsn
	for i = 1:1:acckeys.length(",") do {
		set key = acckeys.piece(",",i)
		quit:key.isLiteral()
		set count = count + 1
		// if it's an array of objects, use 1st element.  
		if 'vFID(pfid).exists() set TMPZ(X1)=" set KEYS("_count_")="_sn_"."_key
		else  set TMPZ(X1)=" set KEYS("_count_")="_sn_"(1)."_key_".get()"
		set X1 = X1 + .001
	}
		
	quit



private Primary(String pfid)	// File list from screen control page	/REQ/MECH=VAL	

	/* Locate the primary file def in the table list.  The primary table is considered
	   to be the table that maps the global to the highest key level.  so locate the one
	   with the fewest acccess keys. 
	   
	   
	   Returns: Master file name			*/	
	   
	

	type String fid, keys, keylen, mfid, pkeylen
	type Number i
	
	if pfid.length(",") = 1 quit pfid
	
	set pkeylen = 99999
	
	for i=1:1:pfid.length(",") do {
		set fid = pfid.piece(",",i)
		type RecordDBTBL1 f = Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:fid")
		set keys = f.acckeys
		set keylen = keys.length(",")
		if keylen < pkeylen do {
			set pkeylen = keylen
			set mfid = fid
		}
	}
	
	quit mfid
	

	/* Compile into source module */
private COMPILE(String TMPZ(),	// Source Code Array	/REQ/MECH=REF
		String PGM,	// M Program Name	/REQ/MECH=VAL
		String SID)	// Screen Name		/REQ/MECH=VAL
 
	type String I,mcode(),src()
	type Public String ER,RM,TB()

	for I="VNEWDQ","VLODDQ" do DELETE(I)
	for I="F","D","C" if 'TB(I).data() do DELETE("V"_I)
	set I="" for  set I=$O(TMPZ(I)) quit:I=""  set src(I)=TMPZ(I)
 
	do cmpA2F^UCGM(.src,PGM,,,,,,SID_"~Screen")
	quit
	
DEFAULT( String fid,		// Primary Table Name
	 String code())		// Code Array

	/* Return procedural code to create defaults in create mode
	----------------------------------------------------------------------
	Arguments:  	fid - table name
			code() - code array that will be passed out to caller */

	//N (%DB,fid,code,mode,%LIBS)
	type Public Number ER
	type Public String RM
	type String i,key,keys,N,NS,obj,q,sn,typ,v
	kill code
	type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1","%LIBS='SYSDEV',FID=:fid")
	if dbtbl1.listdft.isNull() quit			// No defaut data
	set keys = ""
	set sn = dbtbl1.fsn				// Object name
	set obj = sn					// Object name
	set key = dbtbl1.acckeys 			// Access keys
	for i=1:1:key.length(",") DO {
		quit:(key.piece(",",i).extract(1)="""")!(key.piece(",",i)?.N)	// ignore literal keys
		set keys=keys_","_key.piece(",",i)
	}
	if keys.extract(1) = "," set keys = keys.extract(2,999)
	if keys="" S code(1)=" if Db.isDefined("""_dbtbl1.fid_""","""_keys_""") S ER=1,RM=$$^MSG(2327) Q"
	else  do {					// Record defined? 
		type String where = ""
		set code(0) = " quit:"
		set N = ""
		if vFID(fid).exists() set sn = sn_"(I)"	// Repeat region
		for i=1:1:keys.length(",") do {
			set N=N_"!("_sn_"."_keys.piece(",",i)_"="""")"
			set where = where_" AND "_fid_"."_keys.piece(",",i)_"=:"_sn_"."_keys.piece(",",i)
			set code(0) = code(0)_sn_"."_keys.piece(",",i)_".isNull() ! "
			}
		set code(0) = code(0).extract(1,(code(0).length()-2))
		set where = where.extract(6,999)
		set code(1)=" quit:%ProcessMode  set ER=0 if "_N.extract(2,99999)
		set code(1)=code(1)_" set ER=1,RM=$$^MSG(1767,"_""""_keys_""""_") Q"
		set code(2)=" if Db.isDefined("""_dbtbl1.fid_""","""_where_""") S ER=1,RM=$$^MSG(2327) Q"
	}

	set q=""""
	set code(3) = " do "_sn_".setAuditFlag(1)"	// turn on audit flag
	
	for i=1:1:dbtbl1.listdft.length(",") do {
		type String dinam,item,v
		if dbtbl1.listdft.piece(",",i).isNull() quit
		set dinam = dbtbl1.listdft.piece(",",i)
		set v = $$DFT^DBSDD(fid_"."_dinam,.item)				// Default value
		if v.isNull() quit
		set typ = $$TYP^DBSDD(fid_"."_dinam,.item)
		set v = $$value(v,typ)					// Internal format
		set code(i+10) = " if "_sn_"."_dinam_"="_q_q_" set "_sn_"."_dinam_"="_v
	}

	/*
	I mode=2 D SCR Q					; short name format
	I rectyp#2=1 S code(3)=" S "_sn_"("_obj_")=$G("_sn_"("_obj_"))" 	; Init array 01/07/00
	;
	I rectyp=1!'$D(node) Q
	;
	S n=""
	F j=1:1 S n=$O(node(n)) Q:n=""  D
	.	S i=n I i'=+i S i=""""_i_""""		; "name"
	.	I $G(mode)=2 S node=sn_"("_i_")=$G("_sn_"("_i_"))"
	.	E  S node=sn_"("_obj_","_i_")=$G("_sn_"("_obj_","_i_"))"
	.	S code(j/100+4)=" S "_node
	*/
	Q
	
value(v,typ,var)	; Convert internal to external format
	;----------------------------------------------------------------------
	;
	N q
	S q=""""
	S v=$$value^DBSFILER(v,typ)
	I $G(var),v?1A.AN!(v?1"%".AN) S v=q_"<<"_v_">>"_q	; <<variavle>>
	Q v
 #OPTION ResultClass ON
public String vSIG()	quit "61569^11634^Sha H Mirza^34637"	// Signature - LTD^TIME^USER^SIZE
