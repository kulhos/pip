V00S079(Number %ProcessMode,RecordDBTBL7 fDBTBL7)   //DBS -  - SID= <DBTBL7> Trigger Definition
 ;;Copyright(c)2010 Sanchez Computer Associates, Inc.  All Rights Reserved - 02/24/2010 18:33 - pip
  /*
ORIG: CHENARDP - 03/03/2003
DESC: PSL Screen Compiler Template

---- Comments --------------------------------------------------------
	This procedure is used as the base template for the PSL screen compiler.
	It is referenced by the PSL screen compiler - procedure DBS2PSL4
	
	
---- Revision History ------------------------------------------------
	02/18/07 - Pete Chenard - CR23555
		   Corrected compiler warnings.
		   
	02/23/06 - Pete Chenard - CR19551
		   Fixed routine label.
		   
	05/19/05 - Pete Chenard - CR 14146
		   Modified to type variables.
		   
	12/1/03 - Spier -cr7178
	   	     Modifications to correct dead code warnings and
	   	     other issues that occurred during mass compile of screens.

	09/24/03 - Pete Chenard - 45497
		       Created screen template for compiler.
----------------------------------------------------------------------

 */

 #WARN SCOPE OFF
	type Public String %MODS,%PAGE,%PG,%REPEAT,ER,RM
	type String KEYS(),KVAR,VFSN(),VO,VODFT,VPGM,vPSL,VSID,VSNAME

	// %O (0-Create  1-Modify  2-Inquiry  3-Delete  4-Print  5-Blank screen)

	set:'%ProcessMode.exists() %ProcessMode=5
 if (%ProcessMode = 5) do {
  if 'fDBTBL7.exists() set fDBTBL7 = Class.new("RecordDBTBL7")
 }
 set KVAR="kill %TAB,VFSN,VO,VPTBL,vtab",VSID="DBTBL7",VPGM=$T(+0),VSNAME="Trigger Definition"
 set VFSN("DBTBL7")="zfDBTBL7"
 set vPSL=1
 set KEYS(1)=fDBTBL7.%LIBS
 set KEYS(2)=fDBTBL7.TABLE
 set KEYS(3)=fDBTBL7.TRGID
 //
	// ==================== Display blank screen         (%O=5)

 if %ProcessMode=5 do VPR(.fDBTBL7),VDA1(.fDBTBL7),^DBSPNT() quit

 set ER=0 do VSCRPRE(.fDBTBL7) if ER quit  // Screen Pre-Processor
 
 if '%ProcessMode do VNEW(.fDBTBL7),VPR(.fDBTBL7),VDA1(.fDBTBL7)
 if %ProcessMode do VLOD(.fDBTBL7) quit:$G(ER)  do VPR(.fDBTBL7),VDA1(.fDBTBL7)

	// ====================  Display Form
	do ^DBSPNT()
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=XECUTE
	if %ProcessMode=2!(%ProcessMode=3) do ^DBSCRT8A X:'$D(%PAGE) KVAR quit  // Inquiry/Delete
	// ====================  Set up data entry control table


 if %ProcessMode<2 do VTAB(.fDBTBL7)
	quit


VNEW(RecordDBTBL7 fDBTBL7) // Initialize arrays if %O=0
 
 do VDEF(.fDBTBL7)
 do VLOD(.fDBTBL7)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
VDEF(RecordDBTBL7 fDBTBL7)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
 ;
VLOD(RecordDBTBL7 fDBTBL7) // Load data from disc - %O = (1-5)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


	type Public String %MODS,%REPEAT
	quit
	

VPR(RecordDBTBL7 fDBTBL7) // Display screen prompts
 set VO="50||13|0"
 set VO(0)="|0"
 set VO(1)=$C(2,1,80,0,0,0,0,0,0,0)_"11Tlqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk"
 set VO(2)=$C(3,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(3)=$C(3,9,11,0,0,0,0,0,0,0)_"01TTable Name:"
 set VO(4)=$C(3,44,13,0,0,0,0,0,0,0)_"01TLast Updated:"
 set VO(5)=$C(3,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(6)=$C(4,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(7)=$C(4,7,13,0,0,0,0,0,0,0)_"01TTrigger Name:"
 set VO(8)=$C(4,49,8,0,0,0,0,0,0,0)_"01TBy User:"
 set VO(9)=$C(4,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(10)=$C(5,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(11)=$C(5,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(12)=$C(6,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(13)=$C(6,7,13,1,0,0,0,0,0,0)_"01T Description:"
 set VO(14)=$C(6,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(15)=$C(7,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(16)=$C(7,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(17)=$C(8,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(18)=$C(8,12,57,0,0,0,0,0,0,0)_"01T-------------------- Trigger Actions --------------------"
 set VO(19)=$C(8,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(20)=$C(9,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(21)=$C(9,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(22)=$C(10,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(23)=$C(10,12,14,0,0,0,0,0,0,0)_"01TBefore INSERT:"
 set VO(24)=$C(10,32,14,0,0,0,0,0,0,0)_"01TBefore UPDATE:"
 set VO(25)=$C(10,53,14,0,0,0,0,0,0,0)_"01TBefore DELETE:"
 set VO(26)=$C(10,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(27)=$C(11,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(28)=$C(11,13,13,0,0,0,0,0,0,0)_"01TAfter INSERT:"
 set VO(29)=$C(11,33,13,0,0,0,0,0,0,0)_"01TAfter UPDATE:"
 set VO(30)=$C(11,54,13,0,0,0,0,0,0,0)_"01TAfter DELETE:"
 set VO(31)=$C(11,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(32)=$C(12,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(33)=$C(12,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(34)=$C(13,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(35)=$C(13,14,56,0,0,0,0,0,0,0)_"01TA list of column names associated with the UPDATE action"
 set VO(36)=$C(13,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(37)=$C(14,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(38)=$C(14,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(39)=$C(15,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(40)=$C(15,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(41)=$C(16,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(42)=$C(16,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(43)=$C(17,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(44)=$C(17,14,58,0,0,0,0,0,0,0)_"01TExecute trigger only if the following condition is true   "
 set VO(45)=$C(17,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(46)=$C(18,1,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(47)=$C(18,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(48)=$C(19,1,2,0,0,0,0,0,0,0)_"11Tx "
 set VO(49)=$C(19,80,1,0,0,0,0,0,0,0)_"11Tx"
 set VO(50)=$C(20,1,80,0,0,0,0,0,0,0)_"11Tmqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj"
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VDA1(RecordDBTBL7 fDBTBL7)  // Display screen data
 new V
 //
 set VO="65|51|13|0"
 set VO(51)=$C(1,1,80,2,0,0,0,0,0,0)_"01T"_$S(%ProcessMode=5:"",1:$$BANNER^DBSGETID($G(%FN)))
 set VO(52)=$C(3,21,12,2,0,0,0,0,0,0)_"01T"_$E(fDBTBL7.TABLE,1,12)
 set VO(53)=$C(3,58,10,2,0,0,0,0,0,0)_"01D"_$$DAT^%ZM(fDBTBL7.TLD)
 set VO(54)=$C(3,69,10,2,0,0,0,0,0,0)_"01C"_$$TIM^%ZM(fDBTBL7.TIME)
 set VO(55)=$C(4,21,20,2,0,0,0,0,0,0)_"01T"_$E(fDBTBL7.TRGID,1,20)
 set VO(56)=$C(4,58,20,2,0,0,0,0,0,0)_"01T"_$E(fDBTBL7.USER,1,20)
 set VO(57)=$C(6,21,40,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL7.DES,1,40)
 set VO(58)=$C(10,27,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL7.ACTBI:"Y",1:"N")
 set VO(59)=$C(10,47,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL7.ACTBU:"Y",1:"N")
 set VO(60)=$C(10,68,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL7.ACTBD:"Y",1:"N")
 set VO(61)=$C(11,27,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL7.ACTAI:"Y",1:"N")
 set VO(62)=$C(11,47,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL7.ACTAU:"Y",1:"N")
 set VO(63)=$C(11,68,1,2,0,0,0,0,0,0)_"00L"_$S(fDBTBL7.ACTAD:"Y",1:"N")
 set VO(64)=$C(15,3,76,2,0,0,0,0,0,0)_"00U"_$E(fDBTBL7.COLUMNS,1,76)
 set VO(65)=$C(19,3,76,2,0,0,0,0,0,0)_"00T"_$E(fDBTBL7.IFCOND,1,76)
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
	
	
VTAB(RecordDBTBL7 fDBTBL7)
 
 kill VSCRPP,REQ,%TAB,%MOD,%MODOFF,%MODGRP,%REPREQ,vtab
 set %MAX=14,VPT=1,VPB=20,PGM=$T(+0),DLIB="SYSDEV",DFID="DBTBL7",VSCRPP=1,VSCRPP=1
 set OLNTB=20001
 
 set VFSN("DBTBL7")="zfDBTBL7"
 //
 // 
	
	
 set %TAB(1)=$C(2,20,12)_"20U12402|1|[DBTBL7]TABLE|[DBTBL1]||||||||25"
 set %TAB(2)=$C(2,57,10)_"20D12409|1|[DBTBL7]TLD"
 set %TAB(3)=$C(2,68,10)_"20C12411|1|[DBTBL7]TIME"
 set %TAB(4)=$C(3,20,20)_"20T12403|1|[DBTBL7]TRGID"
 set %TAB(5)=$C(3,57,20)_"20T12410|1|[DBTBL7]USER"
 set %TAB(6)=$C(5,20,40)_"01T12401|1|[DBTBL7]DES"
 set %TAB(7)=$C(9,26,1)_"00L12402|1|[DBTBL7]ACTBI|||do VP1^V00S079(.fDBTBL7)"
 set %TAB(8)=$C(9,46,1)_"00L12403|1|[DBTBL7]ACTBU"
 set %TAB(9)=$C(9,67,1)_"00L12404|1|[DBTBL7]ACTBD|||do VP2^V00S079(.fDBTBL7)"
 set %TAB(10)=$C(10,26,1)_"00L12405|1|[DBTBL7]ACTAI|||do VP3^V00S079(.fDBTBL7)"
 set %TAB(11)=$C(10,46,1)_"00L12406|1|[DBTBL7]ACTAU"
 set %TAB(12)=$C(10,67,1)_"00L12407|1|[DBTBL7]ACTAD|||do VP4^V00S079(.fDBTBL7)"
 set %TAB(13)=$C(14,2,76)_"00U12408|1|[DBTBL7]COLUMNS|||do VP5^V00S079(.fDBTBL7)||||||255"
 set %TAB(14)=$C(18,2,76)_"00T12412|1|[DBTBL7]IFCOND|||||||||255"
 do VTBL(.fDBTBL7)
	do ^DBSCRT8 	// data entry
	quit


VREQ   // Create REQ() array
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VTBL(RecordDBTBL7 fDBTBL7) //Create %TAB(array)
 	// 1 2 3  4 5   6   7-9 10-11
 	// DY,DX,SZ PT REQ TYPE DEL POS |NODE|ITEM NAME|TBL|FMT|PP|PRE|MIN|MAX|DEC

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


VSPP   // screen post proc
 type Public RecordDBTBL7 fDBTBL7
 do VSPP1(.fDBTBL7)
 #ACCEPT Date=11/05/03; pgm=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
VSPP1(RecordDBTBL7 fDBTBL7)
 type Public String VFMQ,VFSN
 type String code,i,seq,TABLE,TRGID,zux1
 set TABLE = fDBTBL7.table
 set TRGID = fDBTBL7.trgid
 set fDBTBL7.time = $P($H,",",2)
 set fDBTBL7.tld = +$H
 set zux1 = 0
 if %ProcessMode = 0 do fDBTBL7.save()
 if %ProcessMode > 0, (fDBTBL7.isChanged()) set zux1 = 1 do fDBTBL7.save()
 set seq=0
 type DbSet ds = Db.selectDbSet("DBTBL7D","%LIBS='SYSDEV' AND TABLE=:TABLE AND TRGID=:TRGID")
 while ds.next() do {
	type RecordDBTBL7D dbtbl7d = ds.getRecord("DBTBL7D")
	set seq=seq+1
	set code(seq) = dbtbl7d.code
	}
 do ^DBSWRITE("code")
 if VFMQ="Q", zux1 quit
 if VFMQ="Q" set ER=1 set RM=$$^MSG(6710,TRGID) do VREPRNT quit
 // delete source code from disk and replace it with code()
 do Db.delete("DBTBL7D","%LIBS='SYSDEV' AND TABLE=:TABLE AND TRGID=:TRGID AND SEQ>0")
 set i = ""
 for  set i = code(i).order() quit:i.isNull()  do {
	type RecordDBTBL7D rec = Class.new("RecordDBTBL7D","'SYSDEV',:TABLE,:TRGID,SEQ=:i")
	do rec.setAuditFlag(1)
	set rec.code = code(i)
	do rec.save()
	}
	
 set filed=1                            // Avoid call to filer again
 kill VFSN
 quit 
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit


  //user-defined post procs
 //
VP1(RecordDBTBL7 fDBTBL7) //
 type Public String RM,TMP(),TMP1()
 type Public Number ER

 if 'X quit 
 if 'TMP(2).exists() quit 

 type String trgid
 set trgid=TMP(2,"").order()            // Trigger name
 if trgid=fDBTBL7.trgid quit            // Current triggger name

 if fDBTBL7.trgid.extract(1)="Z",trgid.extract(1)'="Z" Q    // User-defined trigger
 set ER=1 set RM="Already defined by trigger "_trgid    // Duplicate definition
 quit
VP2(RecordDBTBL7 fDBTBL7) //
 type Public String RM,TMP(),TMP1(),X
 type Public Number ER

 if 'X quit 
 if 'TMP(4).exists() quit 

 type String trgid
 set trgid=TMP(4,"").order()            // Trigger name
 if trgid = fDBTBL7.trgid quit          // Current triggger name
 if fDBTBL7.trgid.extract(1)="Z",trgid.extract(1)'="Z" quit  // User-defined triger
 set ER=1 set RM="Already defined by trigger "_trgid    // Duplicate definition
 quit
VP3(RecordDBTBL7 fDBTBL7) //
 type Public String RM,TMP(),TMP1(),X
 type Public Number ER

 if 'X quit
 if 'TMP(5).exists() quit
 
 type String trgid
 set trgid=TMP(5,"").order()            // Trigger name
 if trgid = fDBTBL7.trgid quit          // Current triggger name
 if fDBTBL7.trgid.extract(1)="Z",trgid.extract(1)'="Z" quit  // User-defined tr$
 set ER=1 set RM="Already defined by trigger "_trgid    // Duplicate definition
 quit
VP4(RecordDBTBL7 fDBTBL7) //
 type Public Number ER

 do chk0(.fDBTBL7) if ER quit 
 do chk1(.fDBTBL7) if ER quit 
 do chk2(.fDBTBL7) 
 quit 

chk0(RecordDBTBL7 fDBTBL7)	// Check missing required field
 type Public String RM,X
 type Public Number ER

 if X quit
 if fDBTBL7.ACTBI quit
 if fDBTBL7.ACTBU quit
 if fDBTBL7.ACTBD quit
 if fDBTBL7.ACTAI quit
 if fDBTBL7.ACTAU quit
 ;
 set ER=1,RM=$$^MSG(1768) 
 quit

chk1(RecordDBTBL7 fDBTBL7)	// Check duplicate trigger action

 type Public String RM,X
 type Public Number ER

 if 'X quit 
 if 'TMP(7).exists() quit 
 type String trgid
 set trgid=TMP(7,"").order()            // Trigger name
 if trgid=fDBTBL7.TRGID quit
 if fDBTBL7.trgid.extract(1)="Z",trgid.extract(1)'="Z" quit  
 set ER=1 set RM="Already defined by trigger "_trgid    // Duplicate definition
 quit 

chk2(RecordDBTBL7 fDBTBL7)
 // Skip column name prompt if not BU or AU actions

  if fDBTBL7.actbu ! fDBTBL7.actau quit    ; UPDATE action defined
  if 'fDBTBL7.columns.isNull() D DELETE^DBSMACRO("[DBTBL7]COLUMNS","1","0")
 do GOTO^DBSMACRO("NEXT")
 quit
VP5(RecordDBTBL7 fDBTBL7) //
	type public String RM,TMP(,),TMP1(,,),X
	type public Number ER

	type Number i
	type String col, column
 
	quit:X.isNull()

	// Validate column names
	for i = 1:1:X.length(",") do { quit:ER

		set col = X.piece(",",i)
		set column = fDBTBL7.table_"."_col
		if '$$VER^DBSDD(column) do { quit

			set ER=1
			// Invalid column name - ~p1
			set RM=$$^MSG(1286, column)
		}

		if fDBTBL7.actbu set ER = $$chk(3, col, fDBTBL7.trgid, .RM) quit:ER
		if fDBTBL7.actau set ER = $$chk(6, col, fDBTBL7.trgid, .RM) quit:ER
	}

	quit


chk(String opt,		// Type of trigger (3 = bu, 6 = au)
    String col,		// Column to check
    String trigid,	// Trigger ID being checked
    String RM)		// Return error message

	/* Check to see if column used by other, non Z-named triggers.
	   We allow Z-names to use same columns to support customization.
	*/

	type public String TMP1(,,)

	type Number ret = 0
	type String trig

	if (trigid.extract() = "Z") quit 0

	set (RM, trig) = ""

	for  set trig = TMP1(col, opt, trig).order() quit:(trig '= trigid)

	if 'trig.isNull() do {

		set ret = 1
		set RM = "Column "_ col_ " already defined by trigger "_trig
	}

	quit ret
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit								// User defined post processor's


VRV(V,L) quit V_$J("",L-$L(V))
VREPRNT
 type Public RecordDBTBL7 fDBTBL7
 do VPR(.fDBTBL7)
 do VDA1(.fDBTBL7)
 do ^DBSPNT()
 quit

VW(RecordDBTBL7 fDBTBL7)
 do VDA1(.fDBTBL7)
 do ^DBSPNT(10)
 quit

VDAPNT(RecordDBTBL7 fDBTBL7)
 do VDA1(.fDBTBL7)
 do ^DBSPNT(0,2)
 quit

VDA
 type Public RecordDBTBL7 fDBTBL7
 do VDA1(.fDBTBL7)
 quit

	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
 
vSET(sn,di,X)
 type Public RecordDBTBL7 fDBTBL7
 if sn="DBTBL7" do vSET1(.fDBTBL7,di,X)
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
vSET1(RecordDBTBL7 fDBTBL7,di,X)
 do fDBTBL7.setAuditFlag(1)
 set fDBTBL7.@di=X
 #ACCEPT Date=11/5/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
	
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
vREAD(fid,di)
 type Public RecordDBTBL7 fDBTBL7
 if fid="DBTBL7" quit $$vREAD1(.fDBTBL7,di)
 quit ""
vREAD1(RecordDBTBL7 fDBTBL7,di)
 quit fDBTBL7.@di
	#ACCEPT DATE=11/05/03; PGM=Screen Compiler;CR=UNKNOWN;GROUP=DEAD
	quit
 //
VSCRPRE(RecordDBTBL7 fDBTBL7)  // Screen Pre-Processor
 new %TAB,vtab // Disable .MACRO. references to %TAB()
 //
 // Restrict implicit definitions
 type public String TMP(,),TMP1(,,),UX

 type String col,column,i,j,status,trgid

 set UX=1                               // Force <f>ile action

 // Build temporary index file TMP(ACTION,TRGID) and TMP1()

 kill TMP,TMP1

 type DbSet ds = Db.selectDbSet("DBTBL7","%LIBS='SYSDEV' AND TABLE=:fDBTBL7.table")
 while ds.next() do {

	type RecordDBTBL7 record = ds.getRecord("DBTBL7")

	if record.actbi set TMP(2,record.trgid) = ""
	if record.actbd set TMP(4,record.trgid) = ""
	if record.actai set TMP(5,record.trgid) = ""
	if record.actad set TMP(7,record.trgid) = ""

	for i = 1:1:record.columns.length(",") do {

		set col = record.columns.piece(",",i)
		if record.actbu set TMP1(col,3,record.trgid) = ""
		if record.actau set TMP1(col,6,record.trgid) = ""
	}

 }

 quit
 #ACCEPT date=11/05/03;PGM=Screen Compiler;CR=UNKNOWN;GROUP=SYNTAX
 quit
