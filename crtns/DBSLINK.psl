DBSLINK(RecordDBTBL2 dbtbl2)	//;DBS - U - v7.0 - PSL Linked Screen Compiler
	/*
	   ORIG:  Frank R. Sanchez  (2497)
	   DESC:  Compiles driver section of multiple page screens

	    I18N=QUIT: Excluded from I18N standards
	  ---------- Revision History -------------------------------------------
	  
	10/08/2008 - RussellDS - CR35918
		* Modified to make PGM public in generated VPGn sections.  Needed
		  to support browse help.
		* Cleaned up PSL warnings.
		* Removed old revision history.
		  
	08/27/07 - Pete Chenard - CR 28226
		* Modified BUILD section to save the name of the program into DBTBL2
		  in the event that it was null and a new name had to be generated.
	  -----------------------------------------------------------------------

	*/
	type Public String ER,fsn(),RM,SID
	type String %,%TAB,BLD,CMD,D,DEF,DES,DLIB,EXTSID,FA,FB,FILE,FILER,FILES,FLAG,HELP,HV,i,I,IDXX,ISEQ,KVAR,LOOP,MAXLN,MPLCT,N,NEW,NI,NOLINK,NS,NUL,OD,OK,OL
	type String P15,P2,P8,P9,PFID,PGM,PON,Q,Q2,REL,RPCFLG,S,SAVPGM,SCRER,SCRNUM
	type String SEQ,SVLSVSID,SVSID,SYS,T,TB,TEMP,TMP,USERVLOD,Vprot,X,X1,X2,XCOMP,XLINK,XNEW,VPG,ZSID,ZZ
	type String comp,expr,fid,l,lvn,mcode,n,newLevel,optFlag,pprocs,return,sidArray
	type String vdd,vFID(),vobjlst()

	set Q=34.char( 
	set %="|" 
	set NUL=Q_Q 
	set Q2=NUL 
	set FLAG=0
	set (PON,ISEQ)=0 
	set MAXLN=1 
	set (T,D,CMD)=0 
	set (OL,OD)=""

	do VALID(.dbtbl2,SID,.SCRNUM) if ER write !,RM quit
	if dbtbl2.lnk1="" set ER=0 set RM=$$^MSG(2019) quit

	// Disable LOOP
	set LOOP="NOLOOP"

	set PGM=dbtbl2.vpgm
	set FILES=dbtbl2.pfid
	set PFID=FILES.piece(",",1)
	if PGM.isNull() do {
		do GTPGM^DBSDS
		if PGM["*" set PGM=PGM.extract(1,3)_"S"_PGM.extract(5,9)
		set dbtbl2.vpgm=PGM do dbtbl2.save()
		}

	set SAVPGM=PGM 
	set SVSID=SID 
	do PARLIST^DBS2PSL0(.dbtbl2,vobjlst(),FILES,vFID())	// build formal and actual parameter lists
	set SCRER=0

	type ResultSet rs=Db.select("LNK1,LNK2,LNK3,LNK4,LNK5,LNK6,LNK7,LNK8,LNK9,LNK10,LNK11,LNK12,LNK13,LNK14,LNK15,LNK16,LNK17,LNK18,LNK19,LNK20,LNK21,LNK22,LNK23,LNK24,LNK25,LNK26,LNK27,LNK28","DBTBL2","LIBS=:%Library and SID=:SID")
	if 'rs.next() quit
	set i=""
	for SCRNUM=1:1 set SID=sidArray(SCRNUM).get() quit:SID.isNull()  do BUILD(SID,SCRNUM) quit:ER
	if SCRER quit
	do FILE(SCRNUM)
	quit


BUILD(SID,SCRNUM)	// Build multiple screen program

	type Public String %Library, CMD, TMP(), VPG()
	type String DFID,DLIB,DT,EXTSID,FILES,LIB,parlst(),PFID,PGM,SCRER,SEQ,vFID(),Vprot,X,Z
	type DbSet ds=Db.selectDbSet("DBTBL2D","LIBS=:%Library and SID=:SID and SEQ>0")
	type RecordDBTBL2D dbtbl2d() 
	type DbSet pproc
	type RecordDBTBL2PP dbtblpp()
	
	if %Library.get().isNull() set %Library = "SYSDEV"
	if SID.extract()="@" do APPEND set SCRNUM=SCRNUM-1 quit
	if SID["[" set X=SID.piece("]",1) set %Library=X.piece("[",2) set SID=SID.piece("]",2)

	//  Invalid screen name
	if 'Db.isDefined("DBTBL2","LIBS=:%Library,SID=:SID") write ?20,$$^MSG(1458,SID) set SCRER=1 quit      // Invalid screen name ~p1

	kill DT
	type RecordDBTBL2 dbtbl2=Db.getRecord("DBTBL2","LIBS=:%Library,SID=:SID")
	set FILES=dbtbl2.pfid
	
	// set up parameter list for this screen only (not the main screen)
	do PARLIST^DBS2PSL0(.dbtbl2,parlst(),FILES,vFID())
	
	set PFID=FILES.piece(",",1) 
	set PGM=dbtbl2.vpgm 
	if PGM.isNull() do {
		do GTPGM^DBSDS
		if PGM["*" set PGM=PGM.extract(1,3)_"S"_PGM.extract(5,9)
		set dbtbl2.vpgm = PGM
		do dbtbl2.save()
	}
	set EXTSID=SID write !,?20,SID,?40,PGM
	set VPG(SCRNUM)=dbtbl2.desc_"|"_SID
	do LOAD(.dbtbl2,.ds,.dbtbl2d(),.pproc,.dbtblpp()) 
	set SEQ=0
	set CMD=CMD+1 set TMP(CMD)="VPG"_SCRNUM_"("_vobjlst("formal")_")  // "_dbtbl2.desc
	set CMD=CMD+1 set TMP(CMD)=" type Public String %MODS,%REPEAT,ET,PGM,SID,VPGM,VPTBL"
	set CMD=CMD+1 set TMP(CMD)=" type String DFID"
	set CMD=CMD+1 set TMP(CMD)=" set SID="""_SID_""",DFID="""_DFID_""""
	set CMD=CMD+1 set TMP(CMD)=" do ^USID if PGM="""" set ET=""INVLDSCR"" do ^UTLERR Q"


	do REPEAT(.dbtbl2)	// check for repeating screen
	set CMD=CMD+1

	set Vprot=0		// check for protetion flag
	set Z="" if dbtbl2.resflg do {
		set Vprot=1
		do STATUS^UPID(PFID,"*",.Z)
		if Z set Z="set Z=""do VPROT^""_PGM_""("_parlst("actual")_")"" quit:ER  "
		else  set Z=""
		}

	// Display pre-proc
	if Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=121") do {
		set TMP(CMD)=" do VDSPPRE^"_PGM_"("_parlst("actual")_")"
		}

	set TMP(CMD)=" kill VPTBL"
	set CMD=CMD+1 set TMP(CMD)=" set VPGM=PGM"
	if Z'="" set CMD=CMD+1 set TMP(CMD)=" x Z"
	
	//jambotka CR10072	
	set CMD=CMD+1 set TMP(CMD)=" do VREPRNT^"_PGM
	set CMD=CMD+1 set TMP(CMD)=" if %ProcessMode>1 quit"   // ***XUS
	set CMD=CMD+1 set TMP(CMD)=" do VTAB^"_PGM_"("_parlst("actual")_")"
	set CMD=CMD+1 set TMP(CMD)=" quit"
	set CMD=CMD+1 set TMP(CMD)=" "

	set SEQ=""
	for  set SEQ=dbtbl2d(SEQ).order() quit:SEQ=""  do SEQ(.dbtbl2d(SEQ))
	quit
	
SEQ(RecordDBTBL2D dbtbl2d)
	
	type Public String fsn(),vdd(),Vprot
	type Public Number ER
	type String comp,di,DINAM,fid,P2,P8,P9,P15,vp(),VP,X

	set P2=dbtbl2d.DTYPE		// display type
	set P15=dbtbl2d.decpre		// decimal precision
	set P8=dbtbl2d.pp			// post processor flag
	set P9=dbtbl2d.pre			// pre-processor flag
	set DINAM=dbtbl2d.name		// data item name
	if DINAM'?1"[".E1"]".E quit
	//set X=vdd(DINAM).get()
	//do PARSE^DBSDD(.DINAM,.X,.comp,.fsn,"",.vdd) quit:ER
	//if ER="" write !,$$MSG^%TRMVT($$^MSG(587,DINAM),0,0)

	if 'Vprot quit
	//set fid=$P(DINAM,".",2) set di=$P(DINAM,".",3)
	set di=DINAM.piece("]",2)
	set fid=DINAM.piece("]",1).piece(",",2)
	do STATUS^UPID(fid,di,.VP)	// protection status
	if VP set vp(fid,di)=""
	quit

	
LOAD(RecordDBTBL2 dbtbl2,DbSet ds,RecordDBTBL2D dbtbl2d(),DbSet pprocs,RecordDBTBL2PP dbtbl2pp())

	type Public String DFID
	type Number i,pseq
	type String %LINS,LIB,SEQ,X
	// IMPLICIT SCREEN
	set LIB="SYSDEV"
	set DFID=dbtbl2.PFID.piece(",",1)
	set SEQ=0
	
	// Load all screen pre and post processor code
	set pprocs=Db.selectDbSet("DBTBL2PP","LIBS='SYSDEV' AND SID=:SID and SEQ=0")
	while pprocs.next() do {
		type RecordDBTBL2PP dbtbl2pp=pprocs.getRecord("DBTBL2PP")
		set X=dbtbl2pp.code
		//do ^DBSPARS
	    }  // while ...

	// Load all screen elements into the DT array
	set ds=Db.selectDbSet("DBTBL2D","LIBS='SYSDEV' AND SID=:SID and SEQ>0")
	set i=0
	while ds.next() do {
		set i=i+1
		set dbtbl2d(i)=ds.getRecord("DBTBL2D")
		do setSeq(dbtbl2d(i),i)
		//set SEQ=dbtbl2d(i).seq

		//load column pre/post procs
		type DbSet ds2 = Db.selectDbSet("DBTBL2PP","LIBS=:%Library and SID=:SID and SEQ=:SEQ")
		while ds2.next() do {
			type RecordDBTBL2PP dbtbl2pp=ds2.getRecord("DBTBL2PP")
			set X=dbtbl2pp.code
			//do ^DBSPARS
		    }  // while ...
		}
	quit


setSeq(RecordDBTBL2D scr,i)
	type Public Number SEQ
	set SEQ=scr.seq
	quit

	
FILE( Number SCRNUM)

	type Public Number ER
	type Public String BLD(),CMD,FILE,PFID,Q,SCREEN,SID,SAVPGM,SCRVLOD(),SVSID,TMP(),vobjlst(),VPG()
	type String AR,bld(),COMVAR,DFV,DT,FID,fsn(),KVAR,L,LOOP(),N,NEW,OM(),PGM,REPORT(),VNEW(),X,X1,XLT(),Z
	type Boolean USERVLOD
	type Number I,RPCFLG
		
	set SID=SVSID 
	set PGM=SAVPGM 
	do ^DBSREL 
	if ER do ERR^DBSBLD if X="Q" quit
	set L=0 
	set FID=PFID 
	set SCREEN=1 
	do FLD^DBSBLD 
	kill SCREEN

	type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS=:%Library,FID=:FID")
	type RecordDBTBL2 dbtbl2=Db.getRecord("DBTBL2","LIBS=:%Library,SID=:SID")
	//type RecordCUVAR cuvar=Db.getRecord("CUVAR")	
	set USERVLOD=Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=101")

	set RPCFLG=1 

	#IF CUVAR.EDITMASK
	if RPCFLG set RPCFLG=0
	#ENDIF
	if USERVLOD set RPCFLG=0
	
	set Z=BLD("").order(-1)+1
	if USERVLOD do USRVLOD
	set X="" for I=1:1 set X=SCRVLOD(X).order() quit:X=""  set BLD(Z+I)=SCRVLOD(X)
	set AR=""
	for  set AR=FILE(AR).order() quit:AR=""  do BLD1(AR) 
 
	kill FILE
	set SID=SVSID 
	set PGM=SAVPGM 
	set (N,COMVAR,KVAR)="" 
	set SCRNUM=SCRNUM-1
	if BLD(2).exists(),BLD(2).piece(" ;",1)="EXEC" set BLD(2)="VLOD // Load data from disc - %O = (1-5)"

	if USERVLOD do {   // user defined vlod section
		type String OM
		type Number i
		set X=100.99 
		type DbSet ds=Db.selectDbSet("DBTBL2PP","LIBS=:%Library and SID=:SID and SEQ=0 and PSEQ between 101 and 120")
		set i=0
		while ds.next() do {
			type RecordDBTBL2PP dbtblpp=ds.getRecord("DBTBL2PP")
			set i=i+1
			set OM(i)=dbtblpp.code
			}
		}

	set BLD(2)="VLOD("_vobjlst("formal")_")  // User defined access section"
	set X=0 for I=1:1 set X=OM(X).order() quit:X=""  set BLD(I/1000+2)=OM(X)
	kill OM

	set KVAR="kill %A,%TAB,vtab,VFSN,%OLD,%NEW,%FILE,%INDEX,%PAGE,%PG,UX,MULSCR"
	type String fid = "" 
	for  set fid=LOOP(-1,fid).order() quit:fid=""  do LOOP(fid)

	
	do ^ULODTMPL("DBSSCRTMP","REPORT")	// Load linked screen template
	set N=""
	for  set N=REPORT(N).order() quit:N=""  do {
		quit:REPORT(N).extract()=" "!(REPORT(N)="")
		set XLT(REPORT(N).piece(" ",1))=N
		}
	
	// Program Id & Copyright Message
	do ^SCACOPYR(.X1)
	set REPORT(1)=PGM_"( Number %ProcessMode,"_vobjlst("formal")_")   //"_dbtbl2.apl_" - "_dbtbl2.sys_" - SID= <"_SID.get()_"> "_dbtbl2.desc
	set REPORT(2)=X1 kill X1
	set REPORT(2.001)=" #WARN ACCESS,MISMATCH OFF"

	set X1=XLT("VPAGE")+.001 
	set REPORT(X1)=" " set X1=X1+.001
	for I=1:1:CMD set REPORT(X1)=TMP(I),X1=X1+.001

	// build VPG section
	set X1=XLT("VPG")
	set REPORT(X1)="VPG("_vobjlst("formal")_")",X1=X1+.001 
	set REPORT(X1)=" type Public Number %PG,%PGSV",X1=X1+.001
	set REPORT(X1)=" type Number vDONE",X1=X1+.001
	set REPORT(X1)=" set vDONE=0",X1=X1+.001
	set REPORT(X1)=" for  do { quit:vDONE",X1=X1+.001
	for I=1:1:SCRNUM do {
		set REPORT(X1)="  if %PG=(%PGSV+"_(I-1)_") do VPG"_I_"("_vobjlst("actual")_"),VPG0("_vobjlst("actual")_") quit:vDONE" 
		set X1=X1+.001
		}
	set REPORT(X1)="  }",X1=X1+.001
	set REPORT(X1)=" quit"
			
	// build VPG0 section
	set X1=XLT("VPG0")
	set REPORT(X1)="VPG0("_vobjlst("formal")_")",X1=X1+.001
	set REPORT(X1)=" type Public String vDONE,VFMQ,VPG()",X1=X1+.001
	set REPORT(X1)=" type Public Number %PAG,%PAGE,%PG,%PGSV",X1=X1+.001
	set REPORT(X1)=" type String %LINK",X1=X1+.001
	set REPORT(X1)=" set %LINK=""""",X1=X1+.001
	set REPORT(X1)=" if %ProcessMode=2!(%ProcessMode=3)!(%ProcessMode=4) do VBTM("_vobjlst("actual")_") if VFMQ.get()=""D"" set vDONE=1 quit"
	set X1=X1+.001
	set REPORT(X1)=" if '%PAGE.exists() set vDONE=1 quit",X1=X1+.001
	set REPORT(X1)=" if %PG'<%PAG kill %PAG,%PGSV,VPG set vDONE=1 quit",X1=X1+.001
	set REPORT(X1)=" set %PG=%PG+1",X1=X1+.001
	set REPORT(X1)=" quit",X1=X1+.001
	
	// build VNEW section
	set X1=XLT("VNEW")
	set REPORT(X1)="VNEW("_vobjlst("formal")_")",X1=X1+.001
	set REPORT(X1)=" " set X1=X1+.001

	if USERVLOD do {
		set REPORT(X1)=" do VLOD("_vobjlst("actual")_")" 
		set REPORT(X1+.001)=" quit"
		set REPORT(X1+.002)="VNEWDQ("_vobjlst("formal")_") // Original VNEW section" 
		set REPORT(X1+.003)=" " 
		set X1=X1+.005
		}
		
	set X="" for  set X=VNEW(X).order() quit:X=""  set REPORT(X1)=VNEW(X) set X1=X1+.001

	// Default values
	if PFID'="" do {
		if 'fsn(PFID).exists() do fsn^DBSDD(fsn(),PFID)
		if dbtbl1.listdft="" quit   // no defaults
		set X1=X1+.001
		}

	// TAG BUILD SECTION
	set REPORT(X1)=" quit" set X1=X1+.001 
	set REPORT(X1)=" //" set X1=X1+.001
	set X="" 
	for  set X=BLD(X).order() quit:X=""  set REPORT(X1)=BLD(X) set X1=X1+.001

	// Screen pre-processor ( level 0 ... 61-80)
	set X1=XLT("V1") kill REPORT(X1)
	set X1=X1+1.001

	// ---------- Without Display Pre-processor
	if 'Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=121") do {
		set REPORT(X1)=" if '%ProcessMode do VNEW("_vobjlst("actual")_")" set X1=X1+.001
		set REPORT(X1)=" if %ProcessMode do VLOD("_vobjlst("actual")_") if $G(ER) set VFMQ=""Q"" quit" set X1=X1+.001
		set REPORT(X1)=" do VPG("_vobjlst("actual")_")",X1=X1+.001
		set REPORT(X1)=" quit",X1=X1+.001
		}

	// ---------- With screen display pre-processor
	else  do {
		type String tag
		set tag="VDSPPRE("_vobjlst("formal")_") // Screen Display Pre-Processor"
		do PPUTIL(121,tag)
		set X1=X1+.001
		set REPORT(X1)=" "
		set REPORT(X1)=" if '%ProcessMode do VNEW("_vobjlst("actual")_")  // Screen Display Pre-Processor" set X1=X1+.001
		set REPORT(X1)=" if %ProcessMode do VLOD("_vobjlst("actual")_") if $G(ER) set VFMQ=""Q"" quit" set X1=X1+.001
		set REPORT(X1)=" do VDSPPRE("_vobjlst("actual")_") if $G(ER) set VFMQ=""Q"" quit" set X1=X1+.001
		set REPORT(X1)=" do VPG("_vobjlst("actual")_")" set X1=X1+.001
		set REPORT(X1)=" quit"		
		}

	set X1=XLT("VBTM")
	set REPORT(X1)="VBTM("_vobjlst("formal")_")"
	
	// Computed variables
	set X1=XLT("V0")+.001 kill REPORT(XLT("V0"))

	// ---------- With screen pre-processor
	if Db.isDefined("DBTBL2PP","LIBS=:%Library,SID=:SID,SEQ=0,PSEQ=61") do {
		type String tag
		set tag="VSCRPRE("_vobjlst("formal")_") // Screen Pre-Processor"
		do PPUTIL(61,tag)
		set REPORT(X1)=" set ER=0 do VSCRPRE("_vobjlst("actual")_") if ER quit  // Screen Pre-Processor"
		set X1=X1+.001 set REPORT(X1)=" //" set X1=X1+.001
		}
		
	set REPORT(X1)=" type Public Number ER",X1=X1+.001
	set REPORT(X1)=" type Public String %PAG,%PAGE,%PG,%PGSV,MULSCR,RM,VFMQ",X1=X1+.001
	set REPORT(X1)=" type String KVAR,PGM,VPG(),vPSL,VSID",X1=X1+.001
	set REPORT(X1)=" set VSID="_Q_SID_Q set X1=X1+.001
	if COMVAR'="" set REPORT(X1)=" set ("_COMVAR.extract(1,COMVAR.length()-1)_")="_Q_Q

	set X1=X1+.001 set REPORT(X1)=" set KVAR="_Q_KVAR_Q set X1=X1+.001
	set REPORT(X1)=" set:'%PG.exists() %PG=1 set %PAG=%PG+"_(SCRNUM-1)_" set %PAGE=$S(%PAGE.exists():%PAGE-1,1:0)+"_SCRNUM
	set X1=X1+.001 set REPORT(X1)=" set vPSL=1  //compiled for PSL"
	set X1=X1+.001 set REPORT(X1)=" //" set X1=X1+.001
	for I=1:1:SCRNUM set REPORT(X1)=" set VPG(%PG+"_(I-1)_")="_Q_VPG(I)_Q set X1=X1+.001
	set X1=XLT("VPAGE") kill REPORT(X1)
	kill XLT,BLD,VNEW,DFV,COMVAR,VPG,OM,NEW,LOOP

	do BUILDRTN^UCGM(.REPORT,PGM,,SID_"~Screen")
	quit


DOUBLE(X)	//
	type Public String Q,N
	type Number I,L = 0
	for I=1:1 set L=X.find(Q,L) quit:L<1  set X=X.extract(1,L-2)_Q_Q_X.extract(L,999) set L=L+1
	do LOOP(N)
	quit
	

LOOP(fid)	// Build appropiate arrays from LOOP(array)	// Build appropiate arrays from LOOP(array)

	quit

REPEAT(RecordDBTBL2 dbtbl2)

	type Public String SID, TMP(), ZZREPSCR()
	type Public Number CMD
	type String Z, Z1

	quit:'dbtbl2.repeat
	if ZZREPSCR(SID).exists() set Z1=ZZREPSCR(SID) set Z=" set %MODS="_(Z1+1)_",%REPEAT=zzREPEAT#"_Z1
	else  S Z=" set %MODS=1 I '%REPEAT.exists() set %REPEAT="_(23-dbtbl2.repeat)
	set ZZREPSCR(SID)=23-dbtbl2.repeat
	set CMD=CMD+1,TMP(CMD)=Z
	quit


PPUTIL( String node, String tag)

	type Public String REPORT
	type String I,OM,X,X1,X2,Z
	set X=node-.001 set X2=X+20

	type DbSet ds=Db.selectDbSet("DBTBL2PP","LIBS=:%Library and SID=:SID and SEQ=0 and PSEQ between :X and :X2")
	set I=0
	while ds.next() do {
		type String code
		type RecordDBTBL2PP dbtbl2pp=ds.getRecord("DBTBL2PP")
		set code=dbtbl2pp.code
		if code.piece(" //",2)?.E1"["1A.AN1"]"1A.AN set code=code.piece(" //",1)
		else  if code.piece(" ;",2)?.E1"["1A.AN1"]"1A.AN set code=code.piece(" ;",1)
		set I=I+1
		set OM(I)=code
		}
		
	// end of program
	set X1=REPORT("").order(-1)+100
	set REPORT(X1)=tag set X1=X1+.001
	set REPORT(X1)=" new %TAB,vtab  // Disable .MACRO. references to %TAB()" set X1=X1+.001
	set REPORT(X1)=" //" set X1=X1+.001

	set Z="" for  set Z=OM(Z).order() quit:Z=""  set REPORT(X1)=OM(Z) set X1=X1+.001
	set REPORT(X1)=" quit"
	quit


VALID( RecordDBTBL2 dbtbl2, String SID, Number scrnum)	// Validate screen linkage file relationships

	/*
	   Verify that the file names defined in the linked screens are included
	   in the master screen

	   ARGUMENT: SID Scrren Name /TYP=T/REQ/REF=VAL

	   RETURNS: ER Error Flag /TYP=N
	    RM Error Message /TYP=T

	   EXAMPLE:      D VALID^DBSDSMP("DEP001")

	*/
	type Public Number ER
	type Public String RM,sidArray()
	type String file,i,j,mfile,SF,sid,z,zfile
	set ER=0
	set scrnum=0
	if dbtbl2.lnk1="" quit							// not a linked screen


	// Acccess files (master screen)
	set mfile=","_dbtbl2.pfid_","
	// Check each screen

	type ResultSet rs=Db.select("LNK1,LNK2,LNK3,LNK4,LNK5,LNK6,LNK7,LNK8,LNK9,LNK10,LNK11,LNK12,LNK13,LNK14,LNK15,LNK16,LNK17,LNK18,LNK19,LNK20,LNK21,LNK22,LNK23,LNK24,LNK25,LNK26,LNK27,LNK28","DBTBL2","LIBS=:%Library and SID=:SID")
	if 'rs.next() quit
	for i=1:1:28 do {  quit:ER
		set sid=rs.getCol(i)
		quit:sid=""
		if 'Db.isDefined("DBTBL2","LIBS=:%Library,SID=:sid") Set ER=1,RM=$$^MSG(1458,sid) quit
		set sidArray(i)=sid
		set scrnum=scrnum+1
		if sid.extract()="@" quit			// @[lib]sid

		type RecordDBTBL2 scr=Db.getRecord("DBTBL2","LIBS=:%Library,SID=:sid")
		set file=scr.pfid

		for j=1:1:file.length(",") do { if ER quit
			set zfile=","_file.piece(",",j)_","
			// Valid relationships?
			if mfile[zfile quit
			// Invalid file relationship between ~p1 and ~p2
			set ER=1 set RM=$$^MSG(1340,sid,SID)
			}
		}
	quit


USRVLOD  // User defined VLOD section
	// Insert VCOM first

	type Public String BLD(),SCRVLOD(),Z
	type String X
	type Number I
	
	set X="" for  set X=SCRVLOD(X).order() quit:X=""  if SCRVLOD(X)?1"VCOM".E quit
	if X'="" set X=SCRVLOD(X).order(-1) for I=1:1 set X=SCRVLOD(X).order() quit:X=""  set BLD(Z+I)=SCRVLOD(X) kill SCRVLOD(X)

	set Z=BLD("").order(-1)+1

	set BLD(Z)=" quit" set BLD(Z+1)="VLODDQ("_vobjlst("formal")_") // Original VLOD section" set BLD(Z+2)=" ;" set Z=Z+3
	quit


BLD1( String AR)

	type Public String FILE(),FILER(),FX(),LOOP(),Q

	if FILE(AR).extract(1)'="*" do BLX1 quit
	if 'FILER(AR).exists() quit

	type String fid,keys,lastkey,X
	
	set fid="" 
	for  set fid=LOOP(-1,fid).order() quit:fid=""!(LOOP(-1,fid)=AR)
	type RecordDBTBL1 dbtbl1=Db.getRecord("DBTBL1","%LIBS=:%Library,FID=:fid")
	set keys=dbtbl1.acckeys
	set lastkey=keys.piece(",",keys.length(",")) // get last key
	set X="set "_FILE(AR).extract(2,99)_"="_AR_"("_Q_lastkey_Q_")" do DOUBLE(X)
	set FX(AR)=" set %FILE("_Q_AR_Q_")="_Q_X_Q
	quit

	
BLX1
	type Public String AR,FILE(),FX(),Q
	type String X
	set X="set X=-"""" for  set X="_AR_"(X).order() quit:X=""  set "_FILE(AR).piece(")",1)_",X)="_AR_"(X)" do DOUBLE(X)
	set FX(AR)=" set %FILE("_Q_AR_Q_")="_Q_X_Q
	quit


APPEND	// Append screens, if defined (syntax = @[Library]SID)
	quit
 

APPSID	
	type Public String %LIBS,LIB,SID
	if LIB'=%LIBS set SID="["_LIB_"]"_SID
 	quit

	
END	//
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61277^63996^Dan Russell^17651"	// Signature - LTD^TIME^USER^SIZE
