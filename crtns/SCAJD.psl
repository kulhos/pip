public SCAJD(STRING,MASK)	// SCA Julian Date Conversion
	/*	  
	   ORIG:  BALDWIN - 15 APR 1991
	
	   SCA external to internal date conversion utility
	
	   KEYWORDS: Date and Time
	
	   ARGUMENTS:
	
	     . STRING External date format 		/TYP=T/REQ/MECH=VAL
	     . Mask Date edit mask  			/TYP=T/NOREQ/MECH=VAL
	
	   INPUTS:
	     . System    %MS (a list of short names for month of the year)
	
	   RELATED:
	   . $$DAT^%ZM(%CurrentDate) Date utility, with date mask
	   . ^SCADAT1 Date utility, returns string format
	   . $$^SCAJD Date utility, returns converted format w/ Mask
	
	   EXAMPLE:
	
	       $$^SCAJD("8/10/92","MM/DD/YY")  For format type US
	       $$^SCAJD("8-10-92","MM/DD/YY")
	       $$^SCAJD("AUG1092","MM/DD/YY")
	       $$^SCAJD("10AUG92","MM/DD/YY")
	       $$^SCAJD("10AUG92","DDMONYY")   For format type PCS/CDW
	       $$^SCAJD("92AGO10","YY/MM/DD")  For format type PT
	
	---- Revision History ------------------------------------------------

	08/07/06 - KELLYP - CR 22586
		   Modified VALIDATE section to prevent a problem that occurred
		   when validating a day in the month of February.  The code
		   was previously indicating that a day was invalid when it was
		   b/w 1 and 28 and the year was a non-leap year.

	08/02/06 - KELLYP - CR 22048
		   Modified the CALCYEAR, VALIDATE, and NAMETONUM sections to
		   eliminate PRECEDENCE warnings.

	11/14/02 - ZWITKOWITSM - 43583
		   Change TODAY section to use cuvar.

	10/01/01 - MBUIM - 43583
		   Converted to PSL	   

	*/

	new %MLIST,ALPHA,DAY,DE,DN,DS,ME,MONTH,MS,ORDER,YE,YEAR,YS

	if '$D(MASK) set MASK="MM/DD/YY"
	set ER=0
	do CONVERT

	quit DN


CONVERT	// Converts String date into Julian format

	// Returned
	set DN=-1

	// Nulls are disallowed

	if STRING="" do ERR quit
	if $G(MASK)="" do GETMASK
	if $G(%MLIST)="" do GETMASK

	// No alpha characters, yet.
	set ALPHA=0

	// Lowercase
	if STRING?.E1L.E set STRING=$$UPPER^%ZFUNC(STRING)
	if STRING="T" do TODAY quit 
	if STRING?1"T"1P1N.N do TODAY quit 
	if STRING="C" do CALENDAR quit 
	if STRING?1"C"1P1N.N do CALENDAR quit 

	// Contains alpha characters
	if STRING?.E1U.E do HASALPHA do VALIDATE quit

	// Has punctuation characters
	if STRING?.E1P.E do HASPUNC do VALIDATE quit

	// All numeric with 2 digit year
	if STRING?6N do ALLNUM do VALIDATE quit

	// All numeric with 4 digit year
	if STRING?8N do ALLNUM do VALIDATE quit

	// Already Julian 
	if STRING?1.5N set DN=STRING quit

	// Use default mask
	do USEMASK(MASK) 
	do VALIDATE

	quit 


ALLNUM	// All Numeric

	new I,J,K,ORDER

	do PARSEMASK(MASK,.YS,.YE,.MS,.ME,.DS,.DE)
	if YS set ORDER(YS)=""
	if MS set ORDER(MS)=""
	if DS set ORDER(DS)=""

	set (YEAR,MONTH,DAY)=""
	set J="" 
	set K=1
	for I=1:1:3 do AllN1 quit:J="" 

	quit 


AllN1	// Determine which piece we've got

	set J=$O(ORDER(J)) quit:J=""
	if J'=MS do { quit
		if J'=DS do { quit
			new YL

			if $L(STRING)=6 set YL=2
			else  set YL=4
			set YEAR=$E(STRING,K,K+YL-1)
			set K=K+YL
			}

		set DAY=$E(STRING,K,K+1)
		set K=K+$L(DAY)
		}
	set MONTH=$E(STRING,K,K+1)
	set K=K+$L(MONTH)	

	quit


USEMASK(MASK)	// Input does not use Default Format

	do PARSEMASK(MASK,.YS,.YE,.MS,.ME,.DS,.DE)
	set YEAR=$E(STRING,YS,YE)
	set MONTH=$E(STRING,MS,ME)
	set DAY=$E(STRING,DS,DE)

	quit 


HASALPHA	// Contains a named month, probably.

	new I,J,PARTS

	set ALPHA=1

	// Punctuation
	if STRING?.E1P.E do HASPUNC do HASA2 quit
	if STRING?2N3U.U4N do USEMASK("DDMONYEAR")     
	if STRING?2N3U.U2N do USEMASK("DDMONYY")       
	if STRING?3U.U4N do USEMASK("MONDDYY") do HASA2 quit
	if STRING?3U.U6N do USEMASK("MONDDYEAR") do HASA2 quit

	// Parse
	do PARSEALPHA(STRING,.PARTS)
	do PARSEMASK(MASK,.YS,.YE,.MS,.ME,.DS,.DE)
	if YS set ORDER(YS)=""
	if MS set ORDER(MS)=""
	if DS set ORDER(DS)=""

	set (YEAR,MONTH,DAY)=""
	set J=""
	for I=1:1:PARTS do HASA1 quit:J="" 


HASA2	

	new X

	quit:ER 
	if DAY?1U.U do SWAP(.DAY,.MONTH)
	if YEAR?1U.U do SWAP(.YEAR,.MONTH)
	if MONTH'?1U.U quit 

	set X=$$NAMETONUM(MONTH)

	// Not valid
	if X<1 do BADMONTH(MONTH) quit
	set MONTH=X

	quit 


HASA1	// Determine which piece we've got

	set J=$O(ORDER(J)) quit:J=""
	if J=MS set MONTH=PARTS(I) quit 
	if J=DS set DAY=PARTS(I) quit 
	if J=YS set YEAR=PARTS(I) quit 

	quit 


HASPUNC	// Date has puncuation characters

	new I,J,PARTS

	do PARSEPUNC(STRING,.PARTS)

	// Can't have more than 3 parts
	if PARTS>3 do BadDate(STRING) quit
	do PARSEMASK(MASK,.YS,.YE,.MS,.ME,.DS,.DE)
	if YS set ORDER(YS)=""
	if MS set ORDER(MS)=""
	if DS set ORDER(DS)=""

	set (YEAR,MONTH,DAY)=""
	set J=""
	for I=1:1:PARTS do HASP1 quit:J="" 

	quit


HASP1	// Determine which piece we've got

	set J=$O(ORDER(J)) quit:J=""
	if J=MS set MONTH=PARTS(I) quit 
	if J=DS set DAY=PARTS(I) quit 
	if J=YS set YEAR=PARTS(I) quit 

	quit 


PARSEPUNC(TEXT,ARRAY)	// Parse Text with Puncuation Delimiters	

	new J,X,Y,Z

	set ARRAY=0
	set J=0
	for  set J=J+1 set X=$E(TEXT,J) do PPUNC1 quit:X="" 

	quit


PPUNC1	// Collect non-punctuation characters

	quit:X="" 

	// Skip one/many punctuation characters
	if X?1P do PPUNC2 quit
	set ARRAY=ARRAY+1
	set Y=X
	for  set Z=$E(TEXT,J+1) quit:Z=""  quit:Z?1P  set Y=Y_Z set J=J+1
	set ARRAY(ARRAY)=Y

	quit 


PPUNC2	// Skip puncuation characters

	// Look ahead one character
	set X=$E(TEXT,J+1)
	quit:X="" 
	quit:X'?1P 
	set J=J+1

	quit 


PARSEALPHA(TEXT,ARRAY)	// Parse Text with mixed Alpha/Numeric

	// Note that the string can only contain alpha and numeric!
	new J,PAT,X,Y

	set PAT(0)="1N"
	set PAT(1)="1U"

	if $E(TEXT)?1N set PAT=0
	else  set PAT=1

	set ARRAY=0
	set J=0
	for  set J=J+1 set X=$E(TEXT,J) quit:X=""  do PALPHA1

	quit


PALPHA1	// Collect characters

	new Z

	// Have to toggle patterns
	if X'?@PAT(PAT) set PAT='PAT
	set ARRAY=ARRAY+1
	set Y=X

	for  set Z=$E(TEXT,J+1) quit:Z=""  quit:Z'?@PAT(PAT)  set Y=Y_Z set J=J+1
	set ARRAY(ARRAY)=Y

	quit 


CALCYEAR	// Calculate Current Year

	type Date D

	set D=+%SystemDate		       

	set YEAR=D.year()

	quit 


VALDAY(DAY)	// Validate Day

	if DAY<1 quit 0
	if DAY>31 quit 0

	quit 1


VALMONTH(MONTH)	// Validate Month

	if MONTH<1 quit 0
	if MONTH>12 quit 0

	quit 1


VALYEAR(YEAR)	// Validate Year 

	if YEAR<100 set YEAR=YEAR+$S(YEAR>50:1900,1:2000)
	if YEAR<1 quit 0
	if YEAR<1841 quit 0

	quit 1


VALIDATE	// Validate Date Components

	new DL,%DJ

	// Might have been an error
	quit:ER

	// Make all pieces numeric
	set DAY=+DAY
	set MONTH=+MONTH

	// Provide year if not specified
	if YEAR="" do CALCYEAR

	// Guess Month, Day & Year
	if '$$VALMONTH(MONTH),'$$MONTHGUESS do BADMONTH(MONTH) quit
	if '$$VALDAY(DAY),'$$DAYGUESS do BADDAY(DAY) quit
	if '$$VALYEAR(YEAR),'$$YEARGUESS do BADYEAR(YEAR) quit

	set DL=0
	if YEAR<100 set YEAR=YEAR+$S(YEAR>50:1900,1:2000)   

	// Leap year
	if (YEAR#4=0)&('(YEAR#100=0)!(YEAR#400=0)) set DL=1

	if DAY>30,MONTH=4!(MONTH=6)!(MONTH=9)!(MONTH=11) do BADDAY(DAY) quit 
	if MONTH=2,(('DL&(DAY>28))!(DL&(DAY>29))) do BADDAY(DAY) quit 

	if DL=0 set %DJ=$P("0,31,59,90,120,151,181,212,243,273,304,334",",",MONTH)+DAY
	else  set %DJ=$P("0,31,60,91,121,152,182,213,244,274,305,335",",",MONTH)+DAY

	// Days in normal 365 day years
	set DN=%DJ+((YEAR-1841)*365)

	// Add one day for each leap year
	set DN=DN+((YEAR-1841)\4)

	// Subtract one day for each century
	set DN=DN-((YEAR-1)\100-18)

	// Add one day for each fourth century
	set DN=DN+((YEAR-1)\400-4)

	quit 


DAYGUESS()	// Try to get a valid day

	// Can't use the month if it wasn't ambiguous, e.g. AUG
	new S1,S2

	set S1=0
	set S2=0

	if $$VALYEAR(DAY) if $$VALDAY(YEAR) set S1=1
	if 'ALPHA if $$VALMONTH(DAY) if $$VALDAY(MONTH) set S2=1

	/*
	  If both swaps are possible, and the month and year are not the
	  same, then it's ambiguous and we can't swap.
	*/

	if (S1&S2)&(MONTH'=YEAR) quit 0
	if S1 do SWAP(.DAY,.YEAR) quit 1
	if S2 do SWAP(.DAY,.MONTH) quit 1

	// No swap possible

	quit 0


MONTHGUESS()	// Try to get a valid month

	// Can't swap with Day or Year if the month was not amibiguous
	if ALPHA quit 0

	new S1,S2

	set S1=0
	set S2=0

	if $$VALDAY(MONTH) if $$VALMONTH(DAY) set S1=1
	if $$VALYEAR(MONTH) if $$VALMONTH(YEAR) set S2=1

	// Ambiguous
	if (S1&S2)&(DAY'=YEAR) quit 0
	if S1 do SWAP(.MONTH,.DAY) quit 1
	if S2 do SWAP(.MONTH,.YEAR) quit 1

	// No swap possible

	quit 0


YEARGUESS()	// Try to get a valid year

	new S1,S2			      

	set S1=0
	set S2=0

	if $$VALDAY(YEAR) if $$VALYEAR(DAY) set S1=1
	if 'ALPHA if $$VALMONTH(YEAR) if $$VALYEAR(MONTH) set S2=1

	// Ambiguous
	if (S1&S2)&(DAY'=MONTH) quit 0
	if S1 do SWAP(.YEAR,.DAY) quit 1
	if S2 do SWAP(.YEAR,.MONTH) quit 1

	// No swap possible

	quit 0


SWAP(X,Y)	// Swap X and Y values

	new Z 

	set Z=X 
	set X=Y 

	// Swap X and Y values
	set Y=Z
	
	quit


TODAY	// T = today's system date from CUVAR(2)

	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	if cuvar.tjd set DN=cuvar.tjd
	else  set DN=%CurrentDate
	if STRING?1"T+".E set DN=DN+$E(STRING,3,$L(STRING))
	else  if STRING?1"T-".E set DN=DN-$E(STRING,3,$L(STRING))
	else  if '(STRING="T") do BADEXPR(STRING)

	quit 


CALENDAR	// C = today's calendar (+%CurrentDate) date

	set DN=%CurrentDate
	if STRING?1"C+".E set DN=DN+$E(STRING,3,$L(STRING))
	else  if STRING?1"C-".E set DN=DN-$E(STRING,3,$L(STRING))
	else  if '(STRING="C") do BADEXPR(STRING)

	quit 

	//  Date Mask Parsing Functions


PARSEMASK(MASK,YS,YE,MS,ME,DS,DE)	// Parse Mask for Postitions

	/*
	  Input:   Mask  = Mask of the allowable date format
	  90% of the time, should get hits on these 2 formats
	*/

	if $E(MASK,1,7)="MM/DD/Y" do { quit
		set YS=7 
		set YE=$L(MASK) 
		set MS=1 
		set ME=2 
		set DS=4 
		set DE=5  
		}
	if $E(MASK,1,7)="DD/MM/Y" do { quit
		set YS=7 
		set YE=$L(MASK) 
		set MS=4 
		set ME=5 
		set DS=1 
		set DE=2 
		}
	do FINDYEAR(MASK,.YS,.YE)
	do FINDMONTH(MASK,.MS,.ME)
	do FINDDAY(MASK,.DS,.DE)

	quit 


GETMASK	// Locate Date Mask

	// Define Date-Mask variable and month-list (I18n_#9 edit mask)

	if $G(%MS)'="" set %MLIST=","_$$UPPER^%ZFUNC(%MS)_","
	else  set %MLIST=",JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC,"

	// Already defined
	if $G(MASK)'="" quit
	set MASK="MM/DD/YY"

	quit 


FINDYEAR(MASK,YS,YE)	// Locate year portion

	// Year masks can me "YY" or "YEAR"
	new X

	set X="YY"
	set YS=$$FINDSTART(MASK,X)

	if YS set YE=YS+$L(X)-1 quit
	set X="YEAR"
	set YS=$$FINDSTART(MASK,X)

	if YS set YE=YS+$L(X)-1 quit
	set YE=0

	// No year in mask

	quit


FINDMONTH(MASK,MS,ME)	// Locate month portion

	// Month mask part can be "MM" or "MON"
	new X

	set X="MM"
	// Locate
	set MS=$$FINDSTART(MASK,X)
	if MS set ME=MS+$L(X)-1 quit

	set X="MON"
	set MS=$$FINDSTART(MASK,X)

	if MS set ME=MS+$L(X)-1 quit
	set ME=0

	// No month in mask

	quit


FINDDAY(MASK,DS,DE)	// Locate day portion

	// Day mask part can only be "DD"
	new X

	set X="DD"
	set DS=$$FINDSTART(MASK,X)

	if DS set DE=DS+$L(X)-1 quit
	set DE=0

	// No day in mask

	quit


FINDSTART(STRING,SUB)	// Find Start of Substring

	new X

	// Finds end of the substring
	set X=$F(STRING,SUB)

	// Back up to first character of the substring
	if X quit X-$L(SUB)

	quit X


NAMETONUM(MONTH)	// Month Name to Number Translation

	set ALPHA=1

	// Too long
	if $L(MONTH)>3 set MONTH=$E(MONTH,1,3)

	quit ($F(%MLIST,","_MONTH_",")-2)\4


BADMONTH(M)	// Invalid Month

	// ~p1 is an invalid month
	set RM=$$^MSG(1407,M)
	do ERR

	quit 


BADDAY(D)	// Invalid Day

	// ~p1 is an invalid day
	set RM=$$^MSG(1312,D)
	do ERR

	quit 


BADYEAR(Y)	// Invalid Year

	// ~p1 is an invalid year
	set RM=$$^MSG(1510,Y)
	do ERR

	quit 


BadDate(D)	// Invalid date

	// Invalid date ~p1
	set RM=$$^MSG(1308,D)
	do ERR

	quit 


BADEXPR(S)	// Invalid expression

	// Invalid expression ~p1
	set RM=$$^MSG(8045,S)
	do ERR

	quit 


ERR	set DN=-1 
	set ER=1

	quit 
 #OPTION ResultClass ON
public String vSIG()	quit "60487^37529^Pat Kelly^11073"	// Signature - LTD^TIME^USER^SIZE
