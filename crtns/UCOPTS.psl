private UCOPTS( String Options()) // PSL Compiler Environment Options
 // *******************************************************************
 // * IMPORTANT NOTE:                                                 *
 // * According to the rules that apply to PSL compiler upgrades,     *
 // * this routine is generated by the compiler from the PSL Compiler *
 // * Environemnt Options file $SCAU_DIR/UCOPTS.ini                   *
 // *                                                                 *
 // * To modify environment settings on a permanent basis:            *
 // * 1) change $SCAU_DIR/UCOPT.ini                                   *
 // * 2) call bootUCOPTS^UCGMCU() to rebuild UCOPTS.m                 *
 // *                                                                 *
 // * To modify WARN, OPTIMIZE and Options settings on an incidental  *
 // * basis, ensure that the environment variable $SCAU_UCOPTS names  *
 // * the file that specifies these overwrites.                       *
 // *                                                                 *
 // * Note that you cannot specify incidental overwrites for values   *
 // * to be returned by $$getPslValue().                              *
 // *******************************************************************
 //
 // ---- WARN settings --------------------------------------------------
 set Options("WARN") = "ACCESS,BYPASS,DATABASE,DEAD,DEPRECATED,DYNAMIC,FUNCTION,GLOBAL,LENGTH,MISMATCH,PRECEDENCE,READ,RECEXISTS,SCOPE,SYNTAX,SYSVAR,XECUTE"
 //
 // ---- INFO settings --------------------------------------------------
 set Options("INFO") = "ACCESS,BYPASS,DATABASE,DEAD,DEPRECATED,DYNAMIC,FUNCTION,GLOBAL,LENGTH,MISMATCH,PRECEDENCE,PSLBOOT,READ,RECEXISTS,SCOPE,SYNTAX,SYSVAR,XECUTE"
 //
 // ---- OPTIMIZE settings ----------------------------------------------
 set Options("OPTIMIZE") = "FUNCTIONS,OBJECTS"
 //
 // ---- Options settings -----------------------------------------------
 set Options("Options") = ""
 //
 // ----  PSL settings ---------------------------------------------------
 set Options("PSL","BooleanMask") = ""
 set Options("PSL","DateMask") = ""
 set Options("PSL","TimeMask") = ""
 set Options("PSL","CompileSummary") = true
 set Options("PSL","Version") = 3
 quit

 // *******************************************************************
private charsetName() // return current character set as runtime value
 quit Runtime.charsetName

 // *******************************************************************
private getPslValue( String property) // return value of PSL.xxxYyyZzz property
 // ---- PSL.maxCharValue ----
 // This value indicates the maximum value that is allowed in $CHAR().
 // The value depends on the GT.M version and if the GT.M version
 // supports Unicode it also depends on the setting of $ZCHSET.
 // Note that GT.M treats 0x10FFFF and 0x10FFFE as unmapped characters.
 //
 #IF $$rtChset^UCBYTSTR()="UTF-8"
 if property = "maxCharValue" quit 1114109
 #ELSE
 if property = "maxCharValue" quit 255
 #END
 //
 // ---- PSL.maxLineLength ----
 // This value indicates the split value that will be used to determine
 // if a line of M code must be split over multiple lines.
 // For example, assigning a constant with a length close to
 // PSL.maxStringLength to a variable requires multiple lines:
 //     set var = "FIRST PIECE"
 //     set var = var_"SECOND PIECE"
 // The value leaves room for additional characters such as the
 //     'set var = var_'
 // in the example above.
 //
 #IF $$gtmLevel^UCGM(4)
 if property = "maxLineLength" quit 1980
 #ELSE
 if property = "maxLineLength" quit 450
 #END
 //
 // ---- PSL.maxLitLength ----
 // The PSL compiler will try to generate code that uses literal values
 // whenever possible. To prevent the construction of lines that exceed
 // PSL.maxLineLength when multiple long literals occur, the maximum
 // length of such a literal will be limited to PSL.maxLineLength / 4
 //
 #IF $$gtmLevel^UCGM(4)
 if property = "maxLitLength" quit 511
 #ELSE
 if property = "maxLitLength" quit 255
 #END
 //
 // ---- PSL.maxNameLength ----
 // This value indicates how many characters are allowed in names.
 // The value applies to names of
 // - local variables (error)
 // - labels (info)
 // - routines (info)
 // The compiler will issue a LENGTH error or information message
 //  when the length of a name exceeds this value
 //
 #IF $$gtmLevel^UCGM(5)
 if property = "maxNameLength" quit 31
 #ELSE
 if property = "maxNameLength" quit 8
 #END
 //
 // ---- PSL.maxStringLength ----
 // This value indicates the maximum length that is assumed for local
 // variables. You can use this constant in constructs like
 // String.extract(first,PSL.maxStringLength)
 //
 #IF $$gtmLevel^UCGM("4.4-004")
 if property = "maxStringLength" quit 1048575
 #ELSE
 if property = "maxStringLength" quit 32767
 #END
 //
 // ---- supplied by UCOPTS.ini ----
 //
 if property = "batchCommitCount" quit 500
 //
 if property = "maxCacheSize" quit 100
 //
 if property = "maxDataLength" quit 450
 quit ""
