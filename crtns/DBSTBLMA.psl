DBSTBLMA	// C-S-UTBL Table Maintenance Code Generator
	/*
	DESC:  Generates procedure DBSTBLMB - compiled table maintenance
	
	---- Comments ---------------------------------------------------------
	This procedure generates DBSTBLMB which has two purposes.
	
	Entry from the top of DBSTBLMB, for CTBL, STBL, and UTBL tables
	that have screens defined for maintenance (DBTBL1.SCREEN), DBSTBLB
	contains the necessary code to load the data from the database, call
	the screen, and perform the necessary update.
	
	Entry at LOWERLVL does checks for any tables that may have related
	tables with more keys and have data at that lower level.  From an
	M global perspective, would be a lower level of the same global.
	
	This procedure can be run independently to build DBSTBLMB, and is also
	rebuilt whenever DBSTBLM is rebuilt through an XECUTE command in
	DBSTBLM.
	      
	RETURNS:
		. ER		Error indicator		/TYP=L
				 0 = no error
				 1 = no error
				 
		. RM		Error message		/TYP=T
		
	
	---- Notes ------------------------------------------------------------
	
	The following is the arguments definition section for the generated
	procedure DBSTBLMB if entered at the top.
	
	ARGUMENTS:
		. ProcMode	Process mode (0,1,3)	/REQ/MECH=VAL
		
		. dbtbl1	DBTBL1 object for	/REQ/MECH=REF:R
				table being maintained
				
		. KEY()		List of values for the	/REQ/MECH=REF:R
				keys to the table
 
	RETURNS:
		. $$		Error message,		/TYP=L
				null indicates
				no error
				
				
	------ Revision History -----------------------------------------------
	
	08/11/2008 - RussellDS - CR30801
		
		Removed use of ^MSG to avoid bootstrap issues.
		
		Fixed PSL warnings.
	
	03/04/07 - RussellDS - CR25558
		   Added check of ER in generated code when return from screen
		   call in generated.
		   
		   Fixed PSL warnings in generated code.
	
	09/16/04 - RussellDS - CR8102
		   Created.
	
	-----------------------------------------------------------------------
	*/
	
	// I18N=OFF
	
	type public Number ER = 0
	type public String RM = ""
		
	type Number ID
	type String CMPERR(),CODE,pslcode(),TAB,TBLLIST()
	
	set ID = 1
	set TAB = 9.char()

	do addcode(0 ,"DBSTBLMB(Number %ProcessMode, RecordDBTBL1 dbtbl1, String KEY())"_TAB_"// C-S-UTBL Table Maintenance Compiled Program")
	do addcode(1, "// Last compiled:  "_%CurrentDate.toString()_" "_$$TIM^%ZM_" - "_%UserName)
	do addcode(0, "")
	do addcode(1, "// THIS IS A COMPILED ROUTINE.  Compiled by procedure DBSTBLMA")
	do addcode(0, "")
	do addcode(1, "// See DBSTBLMA for argument definitions")
	do addcode(0, "")
	
	// Get all appropriate tables and assign ID numbers
	type DbSet ds = Db.selectDbSet("DBTBL1", "%LIBS = 'SYSDEV' AND (GLOBAL = 'CTBL' OR GLOBAL = 'STBL' OR GLOBAL = 'UTBL') AND SCREEN IS NOT NULL AND FILETYP <> 5")
	
	// If there are no results, just build in error return
	if ds.isEmpty() do { quit
		do addcode(1, "// No C-S-UTBL maintenance screens defined")
		do addcode(0, "")
		do addcode(1, "quit $$^MSG(7609)"_TAB_TAB_"// Invalid value")
	}
	
	// Start building
			
	do addcode(1, "type String ERMSG, SCREEN, TABLE")
	do addcode(0, "")
	
	do addcode(1, "set SCREEN = dbtbl1.screen")
	do addcode(1, "set TABLE = dbtbl1.fid")
	do addcode(0, "")
	
	// Assign IDs and build call section
	while ds.next() do {
		
		type RecordDBTBL1 dbtbl1 = ds.getRecord("DBTBL1")
		
		set TBLLIST(ID) = dbtbl1.fid
		set CODE = "if TABLE = """_dbtbl1.fid_""" set ERMSG = $$tm"_ID_"(%ProcessMode, .KEY(), SCREEN)"
		if ID > 1 set CODE = "else  "_CODE
		do addcode(1, CODE)
		set ID = ID + 1
	}
	
	do addcode(0, "")
	do addcode(1, "quit ERMSG")
	
	// Build section for each table.
	
	set ID = 0
	for  set ID = TBLLIST(ID).order() quit:ID.isNull()  do {
		
		type Number I, KEYCNT
		type String ACCKEYS, KEYLIST, KEYLISTG, TABLE
		
		set TABLE = TBLLIST(ID)
		
		type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1","%LIBS = ""SYSDEV"", FID = :TABLE")

		do addcode(0, "")
		do addcode(0, "")
		do addcode(0, "tm"_ID_"(ProcMode, String KEY(), String SCREEN)  // "_TABLE_" - "_dbtbl1.des)
		do addcode(0, "")
		do addcode(1, "type public String VFMQ")
		do addcode(0, "")
		do addcode(1, "type Number ER = 0")
		do addcode(1, "type String ERMSG, RM")
		do addcode(0, "")
		do addcode(1, "set (ERMSG, VFMQ) = """"")
		do addcode(0,"")
		
		// Build access key list
		set KEYCNT = $$KEYINFO(dbtbl1.acckeys, "", "", .KEYLIST)
		set KEYLISTG = KEYLIST.replace(" AND", ", ")
		
		do addcode(1, "type Record"_TABLE_" "_dbtbl1.fsn_" = Db.getRecord("""_TABLE_""","""_KEYLISTG_""",1)")
		do addcode(0, "")
		do addcode(1,"#ACCEPT Date=03/04/07; Pgm=RussellDS; CR=25558; Group=MISMATCH")
		do addcode(1, "do DRV^USID(ProcMode, SCREEN, ."_dbtbl1.fsn_")")
		do addcode(1, "if 'ER, (VFMQ '= ""Q"") do {")
		do addcode(0, "")		
		
		do addcode(2, "if ProcMode < 2 do "_dbtbl1.fsn_".save()")
		do addcode(2, "if ProcMode = 3 do Db.delete("""_TABLE_""","""_KEYLIST_""")")
		do addcode(1, "}")
		do addcode(0, "")
		do addcode(1, "if ER set ERMSG = RM.get()")
		do addcode(0, "")
		do addcode(1, "quit ERMSG")
	}
	
	do BLDLOWER(pslcode())	
	
	// Build compiled routine
	do BUILDRTN^UCGM(pslcode(), "DBSTBLMB", .CMPERR)
	if CMPERR.data() do {
		
		type String N = ""

		for  set N=CMPERR(N).order() quit:N=""  do {
			if 'ER set ER = 1, RM = CMPERR(N)
			write CMPERR(N),!
		}
	}
	
	quit
	
	
BLDLOWER(String pslcode())	// Build lower level check section

	/*
	The following is the arguments definition section for the generated
	procedure LOWERLVL^DBSTBLMB.
	
	ARGUMENTS:
		. fid		DQ table name		/REQ/MECH=VAL
		. KEY()		List of values for the	/REQ/MECH=REF:R
				keys to the table
				provided by the higher
				level table.
 
	RETURNS:
		. $$		0 = no lower level	/TYP=L
				entries
				1 = lower level
				entries
	*/

	type Number ID, keycnt
	type String acckeys, CODE, fid, FID2, key1, SORT(), SORT2(), TAB
	
	set TAB = 9.char()
	
	do addcode(0,"")
	do addcode(0,"")
	do addcode(0,"LOWERLVL(String fid, String KEY())  // Check tables at lower level")
	
	type DbSet ds = Db.selectDbSet("DBTBL1", "%LIBS = 'SYSDEV' AND (GLOBAL = 'CTBL' OR GLOBAL = 'STBL' OR GLOBAL = 'UTBL') AND FILETYP <> 5 AND DFLAG <> 1")
	
	while ds.next() do {
		type RecordDBTBL1 dbtbl1 = ds.getRecord("DBTBL1")
		
		set acckeys = dbtbl1.acckeys
		set key1 = acckeys.piece(",",1)
		
		quit:'key1.isLiteral()
		quit:acckeys.length(",") '> 1	// Ignore single level entries
		
		set key1 = dbtbl1.global_"_"_key1
		set SORT(key1) = SORT(key1).get() + 1
		set SORT(key1, acckeys.length(",") -1, dbtbl1.fid) = acckeys.piece(",",2,99)
	}
	
	// Ignore any *TBL tables that only have a single table associated with them
	// For the others, determine if there's a lower level overlap
	set (key1, keycnt) = ""
	for  set key1 = SORT(key1).order() quit:key1.isNull()  if SORT(key1) > 1 do {
		for  set keycnt = SORT(key1, keycnt).order() quit:keycnt.isNull()  do {
			
			type Number N
			
			quit:SORT(key1, keycnt).order().isNull()	// No greater keys
			
			set fid = ""
			for  set fid = SORT(key1, keycnt, fid).order() quit:fid.isNull()  do {
				
				set acckeys = SORT(key1, keycnt, fid)
			
				// Step through each higher key count table to see if key overlap
				set N = keycnt
				for  set N = SORT(key1, N).order() quit:N.isNull()  do {
				
					set FID2 = ""
				
					for  set FID2 = SORT(key1, N, FID2).order() quit:FID2.isNull()  do {
						
						type Boolean hit
						type Number I
						type String ACCKEYS2
						
						set ACCKEYS2 = SORT(key1, N, FID2)
						
						// If any literal keys, they need to be the same, otherwise,
						// not part of same *TBL
						
						set hit = 1
						for I = 1:1:acckeys.length(",") do { quit:'hit
							
							type String X = acckeys.piece(",", I)
							
							// Mismatch on literal in fid
							if X.isLiteral(), ACCKEYS2.piece(",", I) '= X set hit = 0
							
							// Mismatch on literal in FID2
							set X = ACCKEYS2.piece(",", I)
							if X.isLiteral(), acckeys.piece(",", I) '= X set hit = 0
						}
						
						if hit set SORT2(fid, FID2) = ""	// FID2 is lower level of fid
					}
				}
			}
		}
	}
	
	// No lower level entries (unlikely, but ...)
	if 'SORT2.data() do { quit
		do addcode(1, "// No tables with lower level tables defined")
		do addcode(0, "")
		do addcode(1, "quit 0")
	}
	
	// Pass SORT2 and build code to perform test for data at lower level
	
	do addcode(1, "type Boolean RETURN = 0")
	do addcode(0, "")
	
	// Build call section
	set ID = 1
	set fid = ""
	for  set fid = SORT2(fid).order() quit:fid.isNull()  do {
		
		set CODE = "if fid = """_fid_""" set RETURN = $$LL"_ID_"(.KEY())"
		if ID > 1 set CODE = "else  "_CODE
		do addcode(1,CODE)
		set SORT2(fid) = ID
		set ID = ID + 1
	}
	
	do addcode(0, "")
	do addcode(1, "quit RETURN")
	
	// Build common select section -- need to use dymanic select to avoid
	// an excess of vFetch tags exceeding the limit
	do addcode(0, "")
	do addcode(0, "")
	do addcode(0, "LLSELECT(String SELECT, String FROM, String WHERE)")
	do addcode(0, "")
	do addcode(1, "type public String KEY1, KEY2, KEY3, KEY4, KEY5, KEY6, KEY7, KEY8")
	do addcode(1, "#ACCEPT Date=09/21/04; PGM=Dan Russell; CR=unknown")
	do addcode(1, "type ResultSet rs = Db.select(SELECT, FROM, WHERE)")
	do addcode(0, "")
	do addcode(1, "if rs.next() quit 1")
	do addcode(0, "")
	do addcode(1, "quit 0")
		
	// Build section for each table.
	set (fid,FID2) = ""
	for  set fid = SORT2(fid).order() quit:fid.isNull()  do {
		
		type Number I
		
		do addcode(0, "")
		do addcode(0, "")
		do addcode(0, "LL"_SORT2(fid)_"(String KEY())  // "_fid)
		do addcode(0, "")
		
		type RecordDBTBL1 dbtblf1 = Db.getRecord("DBTBL1", "%LIBS = ""SYSDEV"", FID = :fid")
		
		set keycnt = $$KEYINFO(dbtblf1.acckeys, fid)
		
		for I = 1:1:keycnt do addcode(1,"type String KEY"_I_" = KEY("_I_")")
		
		for  set FID2 = SORT2(fid, FID2).order() quit:FID2.isNull()  do {
			
			type Number X
			type String select, where
			
			type RecordDBTBL1 dbtblf2 = Db.getRecord("DBTBL1", "%LIBS = ""SYSDEV"", FID = :FID2")
			
			set X = $$KEYINFO(dbtblf2.acckeys, FID2, .select, .where)
			
			// Just go for a match on the higher level table keys
			set select = select.piece(",", 1, keycnt)
			set where = where.piece(" AND ", 1, keycnt)
			
			// Replace KEY() array references with KEYn references
			for I = 1:1:keycnt set where = where.replace("KEY("_I_")","KEY"_I)
			
			do addcode(1, "if $$LLSELECT("""_select_""", """_FID2_""", """_where_""") quit 1")
			do addcode(0,"")
		}
		
		do addcode(1, "quit 0")
	}
	
	quit
	
	
KEYINFO(String acckeys,		// Get key information
	String fid,
	String select,
	String where)
	
	/*
	ARGUMENTS:
		. acckeys	DBTBL1.ACCKEYS		/REQ/MECH=VAL
		. fid		DQ table name		/NOREQ/MECH=VAL
		. select	Select list		/NOREQ/MECH=REF:W
		. where		Where clause		/NOREQ/MECH=REF:W
		
	If don't pass fid, won't append to select and where.  Don't pass if
	building those for Db.delete or Db.delete or Db.getRecord
	*/
	
	type Number I, keycnt
	type String key
	
	if 'fid.get().isNull() set fid = fid_"."
	
	set keycnt = 0
	set (select, where) = ""
	
	set acckeys=$$TOKEN^%ZS(acckeys)
	for I=1:1:acckeys.length(",") do {
		
		set key = acckeys.piece(",",I)
		quit:key?1.N				// Ignore numeric keys
		quit:key.extract(1)=0.char()		// Ignore literal strings
			
		set keycnt = keycnt + 1
		
		// Note:  Append fid to avoid problems with column names,
		//   e.g., STBLIRSTAPE2.GROUOP
		set select = select_fid_key_","
		set where = where_fid_key_" = :KEY("_keycnt_") AND "
	}
	
	set select = select.extract(1, select.length()-1)
	set where = where.extract(1,where.length()-5)
				
	quit keycnt


addcode(Number TABS,		// Add new line to CODE array
	String CODE)
		
	/*
	ARGUMENTS:
		. TABS		Number of tabs to add		/REQ/MECH=VAL
		
		. CODE		Code to add to array		/REQ/MECH=VAL
	*/

	type public String pslcode()
	
	type Number I, LINENO
	
	set LINENO = pslcode("").order(-1) + 1 	// Add to end
	
	if TABS for I = 1:1:TABS set CODE=9.char()_CODE
	
	set pslcode(LINENO) = CODE

	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61239^41322^Dan Russell^11534"	// Signature - LTD^TIME^USER^SIZE
