DBSPROT3

	/*
	Data Item Protection Utility (build run time program)
	
	ORIG: BOB CHIANG (8447) - 11/24/87
	
	This procedure builds the run-time protection program VP01nnnn.
	A separate VP program exists for each table with record or data item
	protection.  There are four public entry points in the VP program:
	
	  . %EXT	- called by screens (see DBSPROT4) and DBSLOD to
	  		  determine protection for individual columns
	  . EXT		- called by utilities UACN, UCIF, and MRPC012 to
	  		  determine record level protection
	  . ptinfo	- called by SQLPROT to get all necessary columns
	  		  for select as well as protection map
	  . status	- called by SQLPROT to determine protection status
	  		  and modify selected data as appropriate
	  		  
	Note that no other tags in the VP program, including the top, should
	be called directly.  This is a change from prior usage, but allows
	elimination of routine DBSPROT7 and the VQ01nnnn programs that it
	generated.
	
	The %EXT, EXT, and status sections will remap data into variables (vpxx)
	to be used by queries.  This allows data from an object, if passed in or
	loaded by %EXT and EXT, or from the selected data, by status.
	
	Structure of SORT array used throughout - (DINAM = protected column):
	
	  SORT(DINAM, GROUP) = description | protection option | user class(es)
	  SORT(DINAM, GROUP, "COLS", COLUMN) = "" -> columns required at this
	    				               group level
	  SORT(DINAM, GROUP, "PSLQRY", SEQ) = PSLQRY -> WHERE clause converted to
	    					       PSL query code, with variables
	    					       substituted for column names
	  SORT(DINAM, GROUP, "QUERY", SEQ) = Original query
	  SORT(DINAM, GROUP, "UCLSWHR") = Userclass WHERE clause
	  SORT(DINAM, GROUP, "WHERE") = WHERE clause

	------ Revision History ------------------------------------------------
	
	01/16/09 - giridhab (per RussellDS) - CR37511
		   Corrected section UCLS2WHR to handle the not operator when
		   restricting access.
	
	08/01/06 - RussellDS - CR22447
		   Corrected error in BUILD section - was using period when
		   should have been a comma.
	
	12/19/05 - RussellDS - CR18400
		   Add public to BUILD tag.
		   
		   Fix deprecated feature warning.,
	
	03/21/05 - RussellDS - CR14908
		   Converted to PSL.
		   
		   Major logic rewrite to eliminate need to VQ01nnnn program.
	
	11/17/04 - RussellDS - CR13258
		   Remove call to QA^DBSTBLC.  No longer need with changes to
		   UACN and UCIF.
	
	01/08/03 - Dan Russell - 51351
		   Modified to correct call to ^SCACOPYR to conform to
		   new parameters.
	
		   Removed old change history.
	-----------------------------------------------------------------------
	*/
	
	// I18N=OFF

	type Number %FRAME
	type String %READ, %TAB(), VFMQ, ZFID

	set %TAB("ZFID") = ".FID1/TBL=[DBTBL14]FID:DISTINCT/XPP=D PP^DBSPROT3"
	set %FRAME = 2
	set %READ = "@@%FN,,ZFID/NOREQ,"		;
	
	do ^UTLREAD quit:VFMQ="Q"
	quit:ZFID.isNull()

	do BUILD(ZFID)

	quit
	
	
PP	// Screen post processor

	type public Boolean ER
	type public String %NOPRMT, RM, X
	
	type String XPGM
	
	if X.isNull() set %NOPRMT = "Q" quit

	do ^UPID(X, .XPGM)
	if XPGM.isNull() set ER=1 quit

	// Display run-time program name
	set RM=XPGM_"|3050"
	
	quit


public BUILD(String FID)	// Table name

	/*
	Build run-time routine VP01xxxx
	*/
	
	type Boolean ER, isRECPRT, setVARS
	type Number I, POS, QSEQ
	type String acckeys, CMPERR(), CODE, DI, GROUP, KEYLIST, LINES, LINES2, NEWLIST
	type String OBJNAME, pslcode(), RECOBJ, SORT(,,,), SUBSLIST(,), TAB, VAR, WHERE, XPGM
	
	quit:'$$VER(FID)				// Protection logic not defined
	
	set ER = 0

	do ^UPID(FID, .XPGM) quit:XPGM.isNull()	// program name not available

	// Build the VP01* routine
	
	// Compile routine
	write !!, $$^MSG(8021), " ", XPGM, "  ", $$TIM^%ZM, !
	
	set LINES = "// ------------------------------------------------------------------"
	set LINES2 = "// =================================================================="
	set QSEQ = 1
	set SUBSLIST = 0
	set TAB = $C(9)
	
	type RecordDBTBL1 dbtbl1 = Db.getRecord("DBTBL1", "%LIBS=""SYSDEV"",FID=:FID")
	
	set RECOBJ = "Record"_FID.upperCase()
	set OBJNAME = dbtbl1.fsn
	
	set KEYLIST = ""
	set acckeys=$$TOKEN^%ZS(dbtbl1.acckeys)
	for I=1:1:acckeys.length(",") do {
		
		type String key
		
		set key = acckeys.piece(",",I)
		quit:key?1.N				// Ignore numeric keys
		quit:key.extract(1)=$C(0)		// Ignore literal strings
		set KEYLIST = KEYLIST_key_","
	}
	set KEYLIST = KEYLIST.extract(1, KEYLIST.length() - 1) 
	
	// Header
	do addcode(0 , XPGM_"()"_TAB_"// Date Item Protection procedure for "_FID)
	do addcode(1, "// Last compiled:  "_%CurrentDate.toString()_" "_$$TIM^%ZM_" - "_%UserName)
	do addcode(0, "")
	do addcode(1, "// THIS IS A COMPILED ROUTINE.  Compiled by procedure DBSPROT3")
	do addcode(0, "")
	do addcode(1, "quit"_TAB_"// No entry from top")
	do addcode(0, "")
	
	type DbSet ds = Db.selectDbSet("DBTBL14", "PLIBS='SYSDEV' AND FID=:FID")
	
	// Get protection data and sort, convert query info and get variable substitution data
	while ds.next() do { quit:ER
		
		type RecordDBTBL14 dbtbl14 = ds.getRecord("DBTBL14")
		
		set DI = dbtbl14.dinam
		
		set SORT(DI, dbtbl14.group) = dbtbl14.desc_"|"_dbtbl14.prot_"|"_dbtbl14.rucls1
		
		do SUBSADD(DI, .SUBSLIST(,))
		
		set ER = $$BLDQRYS(FID, dbtbl14.dinam, dbtbl14.group, .SORT(,,,), .SUBSLIST(,))
	}
	
	quit:ER
	
	// Build record level protection at top
	set ER = $$BUILDDI(FID, "*", OBJNAME, .SORT(,,,), KEYLIST, .QSEQ, .SUBSLIST(,))
	if ER quit 1
	
	// Build data item protection code
	set DI = ""
	for  set DI = SORT(DI).order() quit:DI.isNull()  if '(DI = "*") set ER = $$BUILDDI(FID, DI, OBJNAME, .SORT(,,,), KEYLIST, .QSEQ, .SUBSLIST(,)) quit:ER
	if ER quit 1
	
	// Get list of variables to be substituted (sort)
	set (NEWLIST, VAR) = ""
	for  set VAR = SUBSLIST("VAR", VAR).order() quit:VAR.isNull()  set NEWLIST = NEWLIST_VAR_", "
	set NEWLIST = NEWLIST.extract(1, NEWLIST.length() - 2)
		
	// Build %EXT section *************************************************
	do addcode(0, "")
	do addcode(1, LINES2)
	do addcode(0, "public %EXT("_RECOBJ_" "_OBJNAME_","_TAB_"// External entry point")
	do addcode(1, "    String VP())"_TAB_"// Data item name array [*]"_TAB_"/MECH=REFAFF:RW")
	do addcode(0, "")
	do addcode(1, "/*")
	do addcode(1, "ARGUMENT NOTES:")
	do addcode(2, ". VP"_TAB_TAB_"Incoming data item name array, returns")
	do addcode(4, "restriction flag.  VP(*) = record level protection")
	do addcode(0, "")
	do addcode(1, "INPUT:")
	do addcode(2, ". %UCLS"_TAB_TAB_"Userclass")
	do addcode(1, "*/")
	
	do addcode(0, "")
	do addcode(1, "type public String "_KEYLIST)
	do addcode(0, "")
	do addcode(1, "type Number vprot")
	do addcode(1, "type String "_NEWLIST)
	do addcode(0, "")
	do addcode(1, "quit:'%UserClass.exists()")
	do addcode(1, "quit:(VP.data() '> 0)")
	do addcode(0, "")
	
	// Instantiate object if it wasn't passed in - backward compatible for old screen calls
	do addcode(1, $$INSTCODE(FID, OBJNAME, .KEYLIST))
	do addcode(0, "")
	
	do BLDSUBS(OBJNAME, .SUBSLIST(,))
	
	if (SORT("*").data() > 0) do {
		do addcode(1, "// Record level protection")
		do addcode(1, "set vprot = $$RECPROT if vprot set VP(""*"") = vprot")
		do addcode(0, "")
	}
	
	do addcode(1, "// Get data item protection for each data item requested")
	set DI = ""
	for  set DI = SORT(DI).order() quit:DI.isNull()  if (DI '= "*") do {
		do addcode(1, "if VP("""_DI_""").exists() set vprot = $$"_DI_" if vprot set VP("""_DI_""") = vprot")
	}
	
	do addcode(0, "")
	do addcode(1, "quit")
	do addcode(0, "")
	
	// Build EXT section **************************************************
	do addcode(0, "")
	do addcode(1, LINES2)
	do addcode(0, "public EXT("_RECOBJ_" "_OBJNAME_")"_TAB_"// Return record level protection indicator")
	do addcode(0, "")
	
	do addcode(1, "type public String "_KEYLIST)
	do addcode(0, "")
	do addcode(1, "type String "_NEWLIST)

	// Instantiate object if it wasn't passed in - backward compatible for old screen calls
	do addcode(1, $$INSTCODE(FID, OBJNAME, KEYLIST))
	do addcode(0, "")
	
	do BLDSUBS(OBJNAME, .SUBSLIST(,))
	
	do addcode(1, "quit $$RECPROT")
	do addcode(0, "")
	
	/* Build ptinfo section ***********************************************
	   Builds a list of required columns to all to select, based on the columns
	   in the primary select list.  These are columns that are involved in
	   queries for columns in the select list.
	*/
	do addcode(0, "")
	do addcode(1, LINES2)
	do addcode(0, "public ptinfo(String sel)"_TAB_"// Select list")
	do addcode(0, "")
	do addcode(1, "/*")
	do addcode(1, "Return a new select list including required column names,")
	do addcode(1, "as well as column mapping information for use by status section.")
	do addcode(0, "")
	do addcode(1, "RETURNS:")
	do addcode(2, ". $$   newlist|vmatch|vmap")
	do addcode(0, "")
	do addcode(2, "       newlist  A list of column names required to process")
	do addcode(2, "                this protection logic")
	do addcode(2, "       vmatch   A list of column positions with protection")
	do addcode(2, "                logic defined")
	do addcode(2, "       vmap     Internal variable mapping table")
	do addcode(0, "")
	do addcode(1, "EXAMPLES:")
	do addcode(2, "- $$ptinfo(""DEP.CID,DEP.BAL,DEP.BOO"")")
	do addcode(0, "")
	do addcode(2, "    Returns DEP.CID,DEP.BAL,DEP.BOO,DEP.IRN|2|2,3,4")
	do addcode(1, "*/")
	do addcode(0, "")
	
	/* If there is record level protection, don't need vp variable to indicate that
	   protection applies, since will always apply.  Therefore, can generate slightly
	   more efficient code.
	*/
	if (SORT("*").data() > 0) set isRECPRT = 1
	else  set isRECPRT = 0

	if 'isRECPRT do addcode(1, "type Boolean vp = 0")
	do addcode(1, "type Number vpos")
	do addcode(1, "type String vmatch, vmap")
	do addcode(0, "")
	do addcode(1, "set vmatch = """"")
	do addcode(0, "")
	
	do addcode(1, "// Add required column names to the original list")

	set DI = ""
	for  set DI = SORT(DI).order() quit:DI.isNull()  do {
		
		type String REQDCOLS = $$REQDCOLS(DI, FID, .SORT(,,,))
		
		if (DI = "*") do {
			do addcode(1, "// Record level protection")
			do addcode(1, "set sel = $$ADDCOLM^SQLPROT(sel ,"""_REQDCOLS_""")")
		}
		else  do {
			
			do addcode(1, "set vpos = $$COLMPOS^SQLPROT(sel ,"""_FID_"."_DI_"""), vmatch = vmatch_"",""_vpos")
			
			if (REQDCOLS = (FID_"."_DI)), 'isRECPRT do {		// No queries
				do addcode(1, "if (vpos > 0) set vp = 1")
			}
			else  do {
				set CODE = "if (vpos > 0) set sel = $$ADDCOLM^SQLPROT(sel, """_REQDCOLS_""")"
				if 'isRECPRT set CODE = CODE_", vp = 1"
				do addcode(1, CODE)
			}
		}
	}

	if 'isRECPRT do addcode(1, "if 'vp quit sel"_TAB_"// Protection logic not required")
	do addcode(0, "")
	
	do addcode(1, "// Match column position")
	do addcode(1, "set vmap=""""")
	
	set DI = ""
	for  set DI = SUBSLIST("DI", DI).order() quit:DI.isNull()  do {
		do addcode(1, "set vmap = vmap_"",""_$$COLMPOS^SQLPROT(sel, "_""""_FID_"."_DI_""""_", 1)")
	}
	do addcode(0, "")
	do addcode(1, "quit sel_""|""_vmatch.extract(2, vmatch.length())_""|""_vmap.extract(2, vmap.length())")
	do addcode(0, "")
	
	/* Build status section ***********************************************
	   Builds code to return protections status for the columns involved in
	   the select statement.
	*/
	do addcode(0, "")
	do addcode(1, LINES2)
	do addcode(0, "public status(String val,"_TAB_"// Column values (tab separated)"_TAB_"MECH=REF:RW")
	do addcode(1, "      String vsts,"_TAB_"// Protection status"_TAB_"MECH=REF:RW")
	do addcode(1, "      String ptinfo)"_TAB_"// Protection API info [*]")
	do addcode(0, "")
	do addcode(1, "/*")
	do addcode(1, "Return data item protection status")
	do addcode(0, "")
	do addcode(1, "Return a possibly modified list of values, if some are protected,")
	do addcode(1, "as well as the protection status map in vsts.")
	do addcode(0, "")
	do addcode(1, "ARGUMENT NOTES:")
	do addcode(2, ". ptinfo   vmatch|vmap|orgcolm|newcolm|vptopt")
	do addcode(2, "             vmatch   List of protected columns")
	do addcode(2, "             vmap     List of internal variable mapping table")
	do addcode(2, "             orgcolm  Total number of columns (original SELECT)")
	do addcode(2, "             newcolm  Total number of columns (new SELECT)")
	do addcode(2, "             vptopt   Protection option (0 = full access")
	do addcode(2, "                                         2 = read only access")
	do addcode(2, "                                         3 = no access)")
	do addcode(0, "")
	do addcode(1, "EXAMPLES:")
	do addcode(2, "do status(.val,.vsts,""2,|2,3,4|2|4"")  returns 02 in vsts")
	do addcode(1, "*/")
	do addcode(0, "")

	set setVARS = 0
	set DI = ""
	for I = 1:1 set DI = SORT(DI).order() quit:DI.isNull()  if (DI '= "*") set setVARS = 1 quit
	
	set CODE = "type Number i, newcolm, orgcolm"
	if setVARS set CODE = CODE_", vpos, vprot"

	do addcode(1, CODE)
	do addcode(1, "type String vmatch, vmap, vptopt")
	if 'NEWLIST.isNull() do addcode(1, "type String "_NEWLIST)
	do addcode(0, "")

	do addcode(1, "set vmatch = ptinfo.piece(""|"", 1)")
	do addcode(1, "set vmap = ptinfo.piece(""|"", 2)")
	do addcode(1, "set orgcolm = ptinfo.piece(""|"", 3)")
	do addcode(1, "set newcolm = ptinfo.piece(""|"", 4)")
	do addcode(1, "set vptopt = ptinfo.piece(""|"", 5)")
	do addcode(0, "")
	
	do addcode(1, "if vsts.isNull() set vsts.piece(0, orgcolm + 1)="""""_TAB_"// Init status to 0's")
	do addcode(0, "")
	
	do addcode(1, "// Map column values to internal variable names")
	set DI = ""
	for I = 1:1 set DI = SUBSLIST("DI", DI).order() quit:DI.isNull()  do {
		do addcode(1, "set "_SUBSLIST("DI", DI)_" = val.piece($C(9), vmap.piece("","", "_I_"))"_TAB_"// "_FID_"."_DI)
	}
	do addcode(0, "")
	
	set POS = 1
	do addcode(1, "// Get and insert protection status")
	for  set DI = SORT(DI).order() quit:DI.isNull()  if (DI '= "*") do {
		do addcode(1, "set vpos = vmatch.piece("","", "_POS_") if (vpos > orgcolm) set vpos = 0")
		set POS = POS + 1
		do addcode(1, "if (vpos > 0) set vprot = $$"_DI_" if (vprot > 0) set vsts.extract(vpos) = (vprot + 1)")
	}
	do addcode(0, "")
	do addcode(1, "// Truncate data to original length")
	do addcode(1, "if (newcolm > orgcolm) set val = val.piece($C(9), 1, orgcolm)")
	
	do addcode(0, "")
	do addcode(1, "// Null out column data")
	do addcode(1, "if (vptopt = 2) for i = 1:1:vsts.length() if vsts.extract(i) = 3 set val.piece($C(9), i) = """"")
	
	do addcode(0, "")
	do addcode(1, "quit")
	do addcode(0, "")
	
	/* Build RPWHERE sections ***********************************************
	   Builds code to return the Record Protection WHERE clause for use by
	   SQLPROT.  Always create these two tags, even if return empty string.
	   
	   Unless it is null, the WHERE clause is returned preceeded by a NOT,
	   since the records to be selected should be the ones that don't meet
	   the criteria.  I.e., those that do meet it are the ones that are
	   protected.
	   
	   RPWHERE1 will skip records covered by both record protection
	   option 1 (read access) and 2 (no access).  This is called by
	   SQLPROT for multi-row UPDATES and DELETES.  It is also called by
	   SQLPROT and SQLCMP to see if record level protection is defined -
	   if returns NULL, no record level protection.
	   
	   RPWHERE2 will ekip records covered by record protectio option 2 (no
	   access.  This is called by SQLPROT for SELECTS.
	*/
	do addcode(0, "")
	do addcode(1, LINES2)
	do addcode(0, "public RPWHERE1()"_TAB_"// Return WHERE clause, protection options 1 and 2")
	do addcode(0, "")
	do addcode(1, "/*")
	do addcode(1, "Return Record Protect WHERE clause where both protection options")
	do addcode(1, "(1 = read only access; 2 = no access) are included")
	do addcode(0, "")
	do addcode(1, "RETURNS:")
	do addcode(2, ". $$   WHERE clause")
	do addcode(1, "*/")
	do addcode(0, "")
	
	do BLDRPWHR(.SORT(,,,), 1)
	
	do addcode(0, "")
	do addcode(0, "")
	do addcode(1, LINES2)
	do addcode(0, "public RPWHERE2()"_TAB_"// Return WHERE clause, protection option 2")
	do addcode(0, "")
	do addcode(1, "/*")
	do addcode(1, "Return Record Protect WHERE clause where only protection option")
	do addcode(1, "2 (no access) is included")
	do addcode(0, "")
	do addcode(1, "RETURNS:")
	do addcode(2, ". $$   WHERE clause")
	do addcode(1, "*/")
	do addcode(0, "")
	
	do BLDRPWHR(.SORT(,,,), 2)
	
	// Build run-time routine *********************************************
	do BUILDRTN^UCGM(.pslcode(), XPGM, .CMPERR())
	
	if (CMPERR.get() > 0) write !!, "PSL error; unable to generate program - ", XPGM, !
	else  do {
		
		// Build SQL version - VQ01xxxx
		//set ER = $$^DBSPROT7(FID, XPGM)
	
		if 'ER do MSG
	}
	
	hang 5

	quit


BUILDDI(String FID,		// Table name
        String DINAM,		// Data item name
        String OBJNAME,		// Object name
        String SORT(,,,),		// Sorted query data		/MECH=REFAFF:R
        String KEYLIST,		// Table keys
        Number QSEQ,		// Query sequence			/MECH=REFNAM:RW
        Number SUBSLIST(,))	// Variable substitution list [*]	/MECH=REFARR:RW

	/*
	Build code for this data item
	
	ARGUMENT NOTES:
		. SUBSLIST("DI",DI)	= variable name to substitute
		           "VAR",VAR)	= data item name (index to "DI")
	
	RETURNS:
		. $$	Error flag			/TYP=L
	*/
	
	type public String LINES, LINES2
	
	type Boolean ER = 0
	type Number GROUP, GROUPNO(), N, QUERY
	type String CODE, FROM, NEWLIST, TAB
	
	set TAB = $C(9)
	
	do addcode(0, "")
	do addcode(1, LINES2)
	
	if (DINAM = "*") do {
		do addcode(0, "RECPROT()"_TAB_"// Record level protection")
	}
	else  do {
		type RecordDBTBL1D dbtbl1d = Db.getRecord("DBTBL1D", "%LIBS=""SYSDEV"",FID=:FID,DI=:DINAM")
		
		do addcode(0, DINAM_"()"_TAB_"// "_dbtbl1d.des)
	}
	
	do addcode(1, LINES2)
	do addcode(0, "")
	
	if (DINAM = "*"), (SORT("*").data() '> 0) do { quit 0
		do addcode(1, "quit 0"_TAB_"// No record level protection set up")
		do addcode(0, "")
	}
	
	set NEWLIST = $$NEWLIST(DINAM, "", .SORT(,,,), .SUBSLIST(,))
	
	do addcode(1, "type public String "_KEYLIST)
	if 'NEWLIST.isNull() do addcode(1, "type public String "_NEWLIST)
	do addcode(0, "")
	do addcode(1, "type Number vprot = 0")
	do addcode(0, "")
	
	do addcode(1, "// Check each group, stop if get no access (vprot = 2)")
	set GROUP = ""
	for  set GROUP = SORT(DINAM, GROUP).order() quit:GROUP.isNull()  do {
		set GROUPNO(GROUP) = QSEQ
		do addcode(1, "do g"_QSEQ_"(.vprot) if (vprot = 2) quit 2"_TAB_"// Group "_GROUP)
		set QSEQ = QSEQ + 1
	}
	do addcode(0, "")
	do addcode(1, "quit vprot")
	
	do addcode(0, "")
	
	// Build the group section (header, user class check, queries)
	set GROUP = ""
	for  set GROUP = SORT(DINAM, GROUP).order() quit:GROUP.isNull()  do { quit:ER
		
		type Number PROTOPT
		type String NEWLIST, PROTDESC, RM, RUCLS, UCLSWHR
		
		set PROTOPT = SORT(DINAM, GROUP).piece("|", 2)
		if PROTOPT = 2 set PROTDESC = "No access"
		else  set PROTDESC = "Read only"
		
		set RUCLS = SORT(DINAM, GROUP).piece("|", 3)
		
		do addcode(0, "")
		do addcode(0, "g"_GROUPNO(GROUP)_"(Number vprot)")
		do addcode(1, "// Group               "_GROUP_" - "_SORT(DINAM, GROUP).piece("|", 1))
		do addcode(1, "// Protection Option - "_PROTOPT_" ("_PROTDESC_")")
		do addcode(1, "// Userclass         - "_RUCLS)
		do addcode(1, "// Query:")
		
		set N = ""
		for  set N = SORT(DINAM, GROUP, "QUERY", N).order()  quit:N.isNull()  do {
			do addcode(1, "//         "_SORT(DINAM, GROUP, "QUERY", N))
		}
		
		set NEWLIST = $$NEWLIST(DINAM, GROUP, .SORT(,,,), .SUBSLIST(,))
		
		do addcode(0, "")
		if 'NEWLIST.isNull() do {
			do addcode(1, "type public String "_NEWLIST)
			do addcode(0, "")
		}
				
		// User class check - if doesn't pass, no need to check queries
		set ER = $$UCLS2WHR(RUCLS, .UCLSWHR, .RM)
		if ER write !, RM, ! quit
		
		/* If there is no where clause, then all user classes selected,
		   otherwise, convert to PSL and insert into code.
		   
		   Note - add NOT to WHERE clause, since we don't want to continue
		   checking the queries if the userclass is NOT in the selection
		   list.  Also, this forces UCQRYBLD to build the PSLQRY into a
		   single record.
		*/
		if 'UCLSWHR.isNull() do {
		
			type String INPUT(), PSLQRY()
	
			set SORT(DINAM, GROUP, "UCLSWHR") = UCLSWHR
			set INPUT("WHERE") = "NOT ("_UCLSWHR_")"
			
			do ^UCQRYBLD(.INPUT(), , , , .PSLQRY())
			if ER write !, RM, ! quit

			set PSLQRY(1) = PSLQRY(1).replace("%UCLS", "%UserClass")
			do addcode(1,"if "_PSLQRY(1)_" quit"_TAB_"// Userclass not included")
			do addcode(0, "")
		}
		
		/* Build and test queries.  First convert to WHERE clause, then
		   into PSLQRY code.  If there are no queries, then the restriction
		   applies to allow selected user classes.  Otherwise, the entire
		   set of queries must be true.  If they are, then set vprot = protection
		   option.
		*/
		if SORT(DINAM, GROUP, "PSLQRY", "").order().isNull() do {
			
			do addcode(1,"set vprot = "_PROTOPT_TAB_"// No queries")
		}
		else  do {
			
			type Boolean isFIRST = 1
		
			set N = ""
			for  set N = SORT(DINAM, GROUP, "PSLQRY", N).order() quit:N.isNull()  do {
				set CODE = "if "_SORT(DINAM, GROUP, "PSLQRY", N)
				if 'isFIRST set CODE = "if  "_CODE
				set isFIRST = 0
				do addcode(1, CODE)
			}
			
			do addcode(1, "if  set vprot = "_PROTOPT)
		}
		
		do addcode(1, "quit")
		do addcode(0, "")
	}
	
	quit ER
	
	
BLDQRYS(String FID,		// Table name
	String DINAM,		// Protected data item
	Number GROUP,		// Group number
	String SORT(,,,),	// Sort array			/MECH=REFARR:W
	Number SUBSLIST(,))	// Variable substitution list	/MECH=REFARR:RW
	
	/*
	Convert DQ query into WHERE clause and PSL query.
	Save in SORT and locate variables to map.
	*/
	
	type Boolean ER = 0	
	type Number SEQ
	type String DQQRY(), INPUT(), PSLQRY(), RM, WHERE
	
	set SEQ = 1
	
	type ResultSet rs = Db.select("QUERY,QRYDESC", "DBTBL14Q", "PLIBS='SYSDEV' AND FID=:FID AND DINAM=:DINAM AND GROUP=:GROUP AND QRYDESC IS NOT NULL", "QUERY ASC")
	
	//if rs.isEmpty() quit 0			// No queries
	
	while rs.next() do {
		set DQQRY(SEQ) = rs.getCol("QRYDESC")
		set SORT(DINAM, GROUP, "QUERY", SEQ) = DQQRY(SEQ)
		set SEQ = SEQ + 1
	}

	set WHERE = $$WHERE^SQLCONV(.DQQRY(), FID)
	
	set SORT(DINAM, GROUP, "WHERE") = WHERE		// Original where clause
	
	if WHERE.isNull() quit 0			// No queries
	
	// Convert to PSL code
	set INPUT("WHERE") = WHERE
	set INPUT("FROM") = FID
			
	do ^UCQRYBLD(.INPUT(), FID_"="_FID, , , .PSLQRY())
	if ER write !, RM, ! quit 1
			
	// Extract columns used in query and replace with variables.  Track by group, and
	// add to variable substitution list.
	set SEQ = ""
	for  set SEQ = PSLQRY(SEQ).order() quit:SEQ.isNull()  do {
		
		type Number ptr
		type String atom, atomuc, NEWQRY, QRY, TOK
		
		set QRY = PSLQRY(SEQ)
		
		set QRY = $$TOKEN^%ZS(QRY, .TOK, "'")
		set NEWQRY = ""
		set ptr = 0
		for  do { quit:(ptr = 0)
		
			// Retain space
			if QRY.extract(ptr + 1) = " " do { quit
				set NEWQRY = NEWQRY_" "
				set ptr = ptr + 1
			}
		
			set atom = $$ATOM^%ZS(QRY, .ptr, " %?+-=[],/\!&*#()<>'", , 1)
			set atomuc = atom.upperCase()
			if atomuc.isLike(FID_".%") do {
					
				type String COLUMN = atomuc.piece(".", 2)
			
				set SORT(DINAM, GROUP, "COLS", COLUMN) = ""
			
				do SUBSADD(COLUMN, .SUBSLIST(,))
			
				// Substitute variable name
				set atom = SUBSLIST("DI", COLUMN)
			}
		
			// Build new where clause
			set NEWQRY = NEWQRY_atom
		}
		
		set SORT(DINAM, GROUP, "PSLQRY", SEQ) = NEWQRY
	}
	
	quit 0
	
	
BLDSUBS(String OBJNAME,		// Object name
	String SUBSLIST(,))	// Substitution list data
	
	/*
	Build substitution code
	*/
	
	type String VAR = ""
	
	for  set VAR = SUBSLIST("VAR", VAR).order() quit:VAR.isNull()  do {
		do addcode(1, "set "_VAR_" = "_OBJNAME_"."_SUBSLIST("VAR", VAR).lowerCase())
	}
	
	do addcode(0, "")
	
	quit
	
	
BLDRPWHR(String SORT(,,,),	// Sort data array		/MECH=REFARR:R
       Number OPT)		// Protection option
       
       /*
       Build WHERE clause for RPWHERE sections.  Based on both restricted
       userclass WHERE and query WHERE clauses.
       
       For OPT = 1, include all.  For OPT = 2, only include no access
       protection option elements.
       */
       
	type Number GROUP
	type String TAB, WHERE, WHR, WHR1, WHR2
	
	set TAB = $C(9)
       
	set (GROUP, WHERE) = ""
	for  set GROUP = SORT("*", GROUP).order() quit:GROUP.isNull()  do {
       
		if ((OPT = 1) ! (SORT("*", GROUP).piece("|", 2) = 2)) do {

			set WHR1 = SORT("*", GROUP, "UCLSWHR").get()
			set WHR2 = SORT("*", GROUP, "WHERE").get()
		
			if WHR1.isNull(), WHR2.isNull() set WHR = ""
			else  if WHR1.isNull() set WHR = WHR2
			else  if WHR2.isNull() set WHR = WHR1
			else  set WHR = "("_WHR1_") AND ("_WHR2_")"
		
			if 'WHERE.isNull() set WHERE = WHERE_" OR "
			set WHERE = WHERE_"("_WHR_")"
		}
	}
	
	set WHERE = $$POP^%ZS(WHERE)
		
	if WHERE.isNull() do {
		do addcode(1, "quit """""_TAB_"// No protection")
	}
	else  do {
		
		set WHERE = "NOT ("_WHERE_")"
		
		do addcode(1,"type String RETURN = """"")
	
		do addcode(0, "")
		do addcode(1, "set RETURN = "_WHERE.extract(1, 100).addQuotes())
	
		for  set WHERE = WHERE.extract(101, WHERE.length()) quit: WHERE.isNull()  do {
			do addcode(1, "set RETURN = RETURN_"_WHERE.extract(1, 100).addQuotes())
		}
	
		do addcode(0, "")
		do addcode(1, "quit RETURN")
	}
	
	quit
	
	
INSTCODE(String FID,		// Table name
	 String OBJNAME,	// Object name
	 String KEYLIST)	// Key list
	 
	/*
	Generate code to instantiate object if it wasn't passed in.
	 
	This provides backward compatiblility for old screen calls.
	*/
	 
	type Number I
	type String CODE, KEY
	
	set CODE = "if '"_OBJNAME_".exists() set "_OBJNAME_" = Db.getRecord("""_FID_""","""

	for I = 1:1:KEYLIST.length(",") do {
		set KEY = KEYLIST.piece(",", I)
		set CODE = CODE_KEY_"=:"_KEY_","
	}
	
	set CODE = CODE.extract(1, CODE.length() - 1)_""")"
	
	quit CODE
	 
	 
NEWLIST(String DI, 		// Protected column name
	Number GROUP,		// Group (if null = all groups
	String SORT(,,,),	// Sort list data		/MECH=REFARR:R
	String SUBSLIST(,))	// Substitution list		/MECH=REFAFF:R
	
	/*
	Return list of variables to type for this column and group
	*/
	
	type String COL, LIST(), RETURN, VAR
	
	set COL = ""
	
	if GROUP.isNull() do {
		for  set GROUP = SORT(DI, GROUP).order() quit:GROUP.isNull()  do {
			for  set COL = SORT(DI, GROUP, "COLS", COL).order() quit:COL.isNull()  do {
				set LIST(SUBSLIST("DI", COL)) = ""
			}
		}
	}
	
	else  do {
		for  set COL = SORT(DI, GROUP, "COLS", COL).order() quit:COL.isNull()  do {
			set LIST(SUBSLIST("DI", COL)) = ""
		}
	}
	
	set (RETURN, VAR) = ""
	for  set VAR = LIST(VAR).order() quit:VAR.isNull()  set RETURN = RETURN_VAR_", "
	
	quit RETURN.extract(1, RETURN.length() - 2)

	
REQDCOLS(String DI,		// Protected column name
	 String FID,		// Table name
	 String SORT(,,,))	// Sort list data		/MECH=REFARR:R
	 
	 /*
	 Return list of required columns for this protected column
	 
	 RETURNS:
	 	. $$	Required column list
	 */
	 
	 type Number GROUP
	 type String COL, LIST(), RETURN
	 
	 if (DI '= "*") set LIST(DI) = ""
	 
	 set (COL, GROUP) = ""
	 for  set GROUP = SORT(DI, GROUP).order() quit:GROUP.isNull()  do {
	 	for  set COL = SORT(DI, GROUP, "COLS", COL).order()  quit:COL.isNull()  do {
	 		set LIST(COL) = ""
	 	}
	 }
	 
	 set RETURN = ""
	 for  set COL = LIST(COL).order() quit:COL.isNull()  set RETURN = RETURN_FID_"."_COL_","
	 
	 quit RETURN.extract(1, RETURN.length() - 1)
	 
	
SUBSADD(String DI,		// Data item name
	String SUBSLIST(,))	// Substitution list
	
	/*
	Add column to substitution list and give it a variable name
	*/
	
	if (DI '= "*"), 'SUBSLIST("DI", DI).exists() do {
		
		type String VAR
		
		set SUBSLIST = SUBSLIST + 1
		set VAR = "vp"_SUBSLIST
		set SUBSLIST("DI", DI) = VAR
		set SUBSLIST("VAR", VAR) = DI
	}
	
	quit
	
	
UCLS2WHR(String RUCLS,	// User class input [*]
	 String WHERE,	// Returned where clause	/MECH=REF:W
	 String RM)	// Error message, if an error	/MECH=REF:W

	/*
	Convert userclass logic into SQL WHERE statement

	ARGUMENT INFO:
		. RUCLS		User class restriction
				Valid formats:
				*          All Userclass
				A-C        From class A to C
				'A-C	   Not class A to C
				A,B,C      Userclass A or B or C
				'A,B,C     Not A or B or C
				'MGR       Not userclass MGR
				A*,B	   All starting with A, or B
	
	RETURNS:
		. $$ 		Error indicator		/TYP=L
	*/

	type Boolean ER = 0
	type Number N
	
	set (RM, WHERE) = ""
	
	for N = 1:1:RUCLS.length(",") do { quit:WHERE.isNull()
		
		type Boolean NOT = 0
		type String OPER, RIGHT, UCLS
		
		set UCLS = RUCLS.piece(",", N)
		
		if 'WHERE.isNull() set WHERE = WHERE_" OR "
		
		if (UCLS.extract(1) = "'") do {
			set NOT = 1
			set UCLS = UCLS.extract(2, UCLS.length())
		}
		
		if (UCLS = "*")	set WHERE = "" quit		// All user classes
		
		if ((UCLS ? 1A.AN) ! (UCLS ? 1A.AN."_".AN)) do {
			set OPER = "="
			set RIGHT = "'"_UCLS_"'"
		}
		
		else  if (UCLS ? 1A.E1"*") do {
			set OPER = "LIKE"
			set RIGHT = "'"_UCLS.piece("*", 1)_"%'"
		}
		
		else  if (UCLS.isLike("%-%")) do {
			type String FROM, TO
			
			set FROM = UCLS.piece("-", 1)
			set TO = UCLS.piece("-", 2)
			
			if '((FROM ? 1A.AN) ! (FROM ?1A.AN."_".AN)) set ER = 1
			if '((TO ? 1A.AN) ! (TO ?1A.AN."_".AN)) set ER = 1
			
			if 'ER do {
				set OPER = "BETWEEN"
				set RIGHT = "'"_FROM_"' AND '"_TO_"'"
			}
		}
			
		else  set ER = 1
		
		if ER do {
			set RM = "Invalid userclass syntax "_UCLS
			set WHERE = ""
		}
		
		if NOT set WHERE = WHERE_"NOT "
		set WHERE = WHERE_"(:%UCLS "_OPER_" "_RIGHT_")"
	}
	
	set WHERE = $$POP^%ZS(WHERE)		// Remove layer of parenthesis
	
	quit ER
	
	
VER(String fid)		// Table name

	/*
	Verify if any protection logic defined for this file
	*/

	type String pgm

	set pgm = $$PGM^UPID(fid)		// Get run-time routine name
	if pgm.isNull() quit 0			// Name not defined
	
	type ResultSet rs = Db.select("DINAM", "DBTBL14", "PLIBS='SYSDEV' AND FID=:fid")
	
	if 'rs.isEmpty() quit 1			// Protection definition
	
	do DEL^%ZRTNDEL(pgm)			// Delete old routine VP01xxx
	write !!, "Run-time protection routine ", pgm, " deleted", !
	
	set pgm = "VQ"_pgm.extract(3, 12)	// VQ01xxx
	do DEL^%ZRTNDEL(pgm)			// Delete routine (SQL version)
	W !!, "Run-time protection routine ", pgm, " deleted", !

	do MSG
	
	hang 5
	
	quit 0
	
	
MSG	//

	write !!, "***********************************************************************"
	write !!, "Use function DBSSPB to rebuild stored procedure run-time routines"
	write !, "Use function DBSPROTMC to recompile screen and report run-time routines"
	write !!, "***********************************************************************"
	write !
	
	quit
	
	
addcode(Number TABS,		// Number of tabs to add
	String CODE)		// Code to add to array
		
	/*
	Add new line to CODE array
	*/

	type Public String pslcode()
	
	type Number I, LINENO
	
	set LINENO = pslcode("").order(-1) + 1 		// Add to end
	
	if TABS for I = 1:1:TABS set CODE=$C(9)_CODE
	
	set pslcode(LINENO) = CODE

	quit
 #OPTION ResultClass ON
public String vSIG()	quit "61377^49746^Badrinath Giridharan^29850"	// Signature - LTD^TIME^USER^SIZE
