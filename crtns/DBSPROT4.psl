DBSPROT4(String FILES, String DINAM, String %MCODE(), String TYPE, Number VTABNO, String vobjlst)	
		 
	/*
	Generate data item Protection Code for Screens
	
	NOTE:  Has ability to generate M or PSL-based code.  Once all screens
	       are converted to PSL, this should be rewritten to remove the
	       non-PSL code generation.
		    
	ARGUMENTS:
		. FILES		Access files
		. DINAM		Data item name
		. %MCODE	Procedural code			/MECH=REFARR:W
		. TYPE		Format type [*]			/NOREQ
		. VTABNO	%TAB sequence number [*]	/NOREQ
		. vobjlst	PSL object list	[*]		/NOREQ/MECH=REFARR:R
		
	ARGUMENT NOTES:
	
		. TYPE		No longer used - provided for backward
				  compatibility only
		. VTABNO	Not required if DINAM = "*"
		. vobjlst	Only provided for PSL generation - the
				  existance of this parameter signals
				  to return PSL code.
		
	EXAMPLES:  
		1) check record protection for file DEP
	
		   do ^DBSPROT4("DEP","*",.C)
	                                 
		     return:  if no protection   C = " ;"
			      with protection    C = " D ^VP01DEP I VP=2 ..."
	
		2) check data item BAL for file DEP
	
		   do ^DBSPROT4("DEP","BAL",.C)
	
		     return:  if no protection   C = " D VN"
	                      with protection    C = " S VP=$G(VP("BAL"))"

	---- Revision History -------------------------------------------------
	08/01/06 - RussellDS - CR22447
		   Corrected logic that didn't consider protection for %O=0.
		   
		   Modified to pass only the file short name for the protected
		   table to the call to %EXT.
	
	12/19/05 - RussellDS - CR18400
		   Converted to PSL.
		   
		   Retained last M revision due to information provided.
		   
	03/21/05 - RussellDS - CR14908
		   Removed GOTO in generated code in ON section to avoid
		   PSL error.  Ideally, would reposition VPROT section, but
		   since this is managed by a couple of other routines, will
		   wait until all this code is rewritten to PSL.
	
		   Added object list parameter for PSL screens and modified
		   ON and ITEM sections to use it.
	
		   Modified calls to VP01nnnn protection routine to be
		   extrinsic functions to match new VP01nnnn code.
	
		   Modified ON section to call VP01nnnn at EXT instead of
		   at top.
	
		   Modified ITEM section to avoid calls to individual item
		   tags in VP01nnnn.  Now will call %EXT.  The method is a
		   bit hokey, but is backward compatible with the elements
		   that call this section.
	
		   Removed obsolete BPS reference in ON section.

	-----------------------------------------------------------------------
	*/

	type public Boolean %FLGPROT
	
	type Boolean isPSL
	type Number PROTSTAT
	type String FID, PGM, RM
	
	set FID = FILES.piece(",", 1)
	
	set isPSL = vobjlst("actual").exists()
	
	// Always return at least one line
	if isPSL set %MCODE(1) = " //"
	else  set %MCODE(1) = " ;"
		
	// Check protection status - if none, we're done
	do STATUS^UPID(FID, DINAM, .PROTSTAT) quit:(PROTSTAT = 0)
	
	// Get protection program name
	do ^UPID(FID, .PGM)
	
	if PGM.isNull() do { quit
		
		// Protection program name not set up for file ~p1
		if 'RM.exists() set RM = $$^MSG(2279, FID)
		
		write !, RM, !
	}

	// Handle single data item
	if (DINAM '= "*") do {
		
		type String code
		
		type SchemaTable tblrec = Db.getSchemaTable(FID)
		
		write !, " ["_FID_"]"_DINAM_" *** Data Item Protection *** "

		// Option 1 (modify mode only)  option 2 (create & modify)
		if (%FLGPROT = 1) do {
			
			if isPSL set code = " if %ProcessMode > 0"
			else  set code = " if %O>0"
		}
		else  set code = ""
	
		set code = code_" set VP("""_DINAM_""")="""""
		set code = code_" do %EXT^"_PGM_"("_tblrec.fileShortName_",.VP)"
		set code = code_" set VP=VP("""_DINAM_""") kill VP("""_DINAM_""")"
		set code = code_" if VP set VPTBL("_VTABNO_")=VP"
		
		set %MCODE(1) = code
	}
	
	// Record level protection
	else  do {
		
		type Number CNT
		type String code, LINES
		
		write !, " ["_FID_"] *** Record Level Protection *** "
		
		set CNT = 1
		
		set LINES = ""
		set LINES.piece("-", 68) = ""
		if isPSL set LINES = " //"_LINES
		else  set LINES = " ;"_LINES
		
		if isPSL set %MCODE(CNT) = " do VPROT("_vobjlst("actual")_") quit:ER  do V1("_vobjlst("actual")_") quit"
		else  set %MCODE(CNT) = " do VPROT quit:ER  goto V1"
		
		set CNT = CNT + 1
		set %MCODE(CNT) = LINES
		set CNT = CNT + 1
		
		if isPSL set %MCODE(CNT) = "VPROT("_vobjlst("formal")_") // Record level protection"
		else  set %MCODE(CNT) = "VPROT ; Record level protection"
		
		set CNT = CNT + 1
		set %MCODE(CNT) = LINES
		set CNT = CNT + 1

		set %MCODE(CNT) = " kill VPTBL set ER=1,VP=$$EXT^"_PGM_"("_vobjlst("actual").get()_") if VP set VFMQ=""Q"""
		// Record protected
		set %MCODE(CNT) = %MCODE(CNT)_",RM="_$$^MSG(2336).addQuotes()
		set CNT = CNT + 1

		if isPSL do {
			
			type literal String accept = " #ACCEPT DATE=03/22/05; PGM=Screen Compiler"
			
			set %MCODE(CNT) = accept
			set CNT = CNT + 1
			set %MCODE(CNT) = " if (VP = 2), (%ProcessMode <> 0) xecute KVAR quit  // No Access"
			set CNT = CNT + 1
			set %MCODE(CNT) = accept
			set CNT = CNT + 1
			set %MCODE(CNT) = " if (VP = 1), (%ProcessMode = 0) xecute KVAR quit  // Display Only"
			set CNT = CNT + 1
			set %MCODE(CNT) = accept
			set CNT = CNT + 1
			set %MCODE(CNT) = " if (VP = 1), (%ProcessMode = 1) do VLOD("_vobjlst("actual")_"), VPR("_vobjlst("actual")_"), VDA"
			set %MCODE(CNT) = %MCODE(CNT)_" set %ProcessMode = 2 do ^DBSPNT(), ^DBSCRT8A set %ProcessMode = 1 xecute KVAR set ER = 1 quit"
			set CNT = CNT + 1
		}
		else  do {
			
			set %MCODE(CNT) = " if VP=2,%O'=0 xecute KVAR quit  ; No Access"
			set CNT = CNT + 1
			set %MCODE(CNT) = " if VP=1,%O=0 xecute KVAR quit  ; Display Only"
			set CNT = CNT + 1
			set %MCODE(CNT) = " if VP=1,%O=1 do VLOD,VPR,VDA"
			set %MCODE(CNT) = %MCODE(CNT)_" set %O=2 do ^DBSPNT(),^DBSCRT8A set %O=1 xecute KVAR set ER=1 quit"
			set CNT = CNT + 1
		}
			
		set %MCODE(CNT) = " set ER=0 quit"
		set CNT = CNT + 1
		set %MCODE(CNT) = LINES
		set CNT = CNT + 1
		
		if isPSL do {
			
			set %MCODE(CNT) = " //"
			set CNT = CNT + 1
			set %MCODE(CNT) = "V1("_vobjlst("formal")_") //"
		}
		else  do {
			
			set %MCODE(CNT) = " ;"
			set CNT = CNT + 1
			set %MCODE(CNT) = "V1 ;"
		}
	}

	quit
 #OPTION ResultClass ON
public String vSIG()	quit "60541^55254^Dan Russell^6003"	// Signature - LTD^TIME^USER^SIZE
