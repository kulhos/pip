SCADAT
 	/*
 	 PROCEDURE ID:	SCADAT
 	     Original:	Rick Baldwin
		 Date:	
 	         Desc:	Date Utilities

	Library of Date utilities
	
	NOTE:  This top level call is required for backward compatibility,
		particularly for FMS
	
	KEYWORDS: Date and Time
	
	INPUTS:
		. %DT Input Julian Date  /TYP=N/REQ/MECH=VAR
		Input date in julian format to be returned in
		MM/DD/YY format
	
	RETURNS:
		. %DAT Date string  /TYP=T/MECH=VAR
		Delta date string returned in MM/DD/YY format
	
	RELATED:
		. $$DAT^%ZM() Date utility, with date mask
		. $$^SCAJD Date utility, returns converted format w/ Mask
	
	LIBRARY:
		. SCADAT Return date string in MM/DD/YY format
	  		 (Required for backward compatibility)
		. DSJD   Function converting date string to julian date
		. MNAM   Function returning month name for given date
		. DOW  	 Function returning day of week for given date
		. MON  	 Function returning Month portion of given date
		. DAY    Function returning Day portion of given date
		. YEAR   Function returning Year portion of given date
		. SDMON	 Function returning Month portion of system date
		. VMIN   Function validating date not less than min
		. VMAX   Function validating date not greater than max
		. VRNG   Function validating a date range
		. MIN  	 Function returning lesser of two dates
		. MAX  	 Function returning greater of two dates
		. BOMJD  Function returning Beginning of month of a date
		. EOMJD  Function returning End of month of a date
		. BOYJD  Function returning Beginning of year of a date
		. BOFY 	 Function returning Beginning of Financial year of a date
		. BOTY 	 Function returning Beginning of Tax year of a date
		. EOYJD  Function returning End of year of a date
		. EOFY 	 Function returning End of Financial year of a date
		. EOTY 	 Function returning End of Tax year of a date
		. NOD  	 Function returning number of days between dates
		. NODM   Function returning number of days in a month
		. NODY   Function returning number of days in a year
		. NOM  	 Function returning number of months between dates
		. NOY  	 Function returning number of years between dates
		. ADDMDS Function returning string = 'N' months added
		  	 to a given date
		. ADDMJD Function returning julian date of 'N' months
		  	 added to a given date
		. DDT  	 Function returning delta date text message in
		  	 format X years, Y months, Z days
		. DD  	 Function returning difference between 2 dates
		  	 in Delta-date string format MM/DD/YYYY
		. DDMATH Function returning a Julian date from a delta
		  	 date string being applied to a given date
	
	
	=======================================================================
			PROFILE Standard Date Utilities
	=======================================================================
	
	   Most of the following routines are extrinsic functions and the only
	   'side effect' variables are ER and RM.
	
	   In many of the functions there is an optional 'PURE' parameter.
	   If you are ABSOLUTELY CERTAIN that the date(s) you are passing
	   are in Julian format, use this flag.  It prevents unnecessary
	   calls to ^SCAJD and speeds calculations a great deal.  Call with
	   the pure flag set whenever possible.
	
	   Also note that for functions which need two date parameters (see
	   NOD below), if the PURE flag is set, neither date will be converted.
	   If one of the dates is not in Julian format you cannot use the
	   PURE flag.
	
	---- Revision History ------------------------------------------------
	06/08/06 - RussellDs - CR20967
		   Add SDMON function for computed IRA.MONTH to eliminate
		   use of system keyword in computed formula.
	
	03/31/06 - GIRIDHARANL - CR 20415
		   Modified the section DDT to ensure that the date returned was in 
		   the proper format of x years, y months, z days
		   
	11/07/05 - ALAGARSS - CR 16677
		   Modified the section DOW to assign the whole values of the column
		   DES of the table DBCTLDVFMCAL to X.	
		   
	10/10/05 - CARROLLJ - CR17494
		   Removed newing of arugument D in EOMJD section and removed date 
		   format argument passed to .toString().  All occurrences for full 
		   format only; partial formats must still be passed.
  
	10/05/05 - S.Krishnan
		   Converted all the DAT^%ZM function .toString() function.
		   also corrected the type casting warnings.
		   
	10/03/05 - CARROLLJ - CR17364
		   Modified revision history from CR16928 to correct typo.
		   
	08/11/05 - CARROLLJ - CR16928
		   Modified calls to DAT^%ZM in sections BOTY,BOFY,EOFY, 
		   and EOTY that use mask "MM/DD" to use a variable because the
		   current version of UCDATE cannot handle table.property.toString.

	08/23/01 - ANTONOVV - 43583
		Converted to PSL

	*/

	/* This top level call is required for backward compatibility,
	particularly for FMS */
	type public Date %DT,%DAT
	set %DAT=%DT.toString()
	quit 
	

public DSJD(%DS)
	/* Date String to Julian Date Conversion (nnnnn)

	KEYWORDS: Date and Time

	ARGUMENTS:
		. %DS Date String in non julian date format  /TYP=T/REQ/MECH=VAL

	RETURNS:
		. $$  Date, valid MUMPS julian format		/TYP=N
	*/

	new %JD,RM
	
	set ER=0
	if %DS["?" quit ""
	set %JD=$$^SCAJD(%DS)

	// Invalid date ~p1
	if %JD<0 set ER=1 set RM=$$^MSG(1308,%DS)

	quit %JD
	
	

public MNAM(Date D,PURE)
	/* Return Month Name for Date D

	KEYWORDS: Date and Time

	ARGUMENTS:
		. D  Date in julian or string format	/TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 or 1 indicator determining format of date field.
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$ String name of month of input date		/TYP=T
	*/

	new M,MSTR,TYPE
	set ER=0
	// Get month number
	set M=$$MON(D,$G(PURE))
	
	set TYPE="ML"
	type RecordDBCTLDVFMCAL dvfmcal=Db.getRecord("DBCTLDVFMCAL","TYPE",1)
	quit $P(dvfmcal.des,",",M)

	/* Note that MON, DAY, and YEAR functions put the desired piece at
	the front of the date string.  This should be more efficient
	than the traditional MM/DD/YY format.  */
	

public DOW(Date D,PURE)
	/* Return Day of the Week

	KEYWORDS: Date and Time

	ARGUMENTS:
		. D  Date in julian or string format	/TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format   /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 or 1 indicator determining format of date field.
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$ String name of day of week of input date	/TYP=T
	*/

	new TYPE,X
	set ER=0
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit ""
	
	set TYPE="DL"
	// List of days
	type RecordDBCTLDVFMCAL dvfmcal=Db.getRecord("DBCTLDVFMCAL","TYPE",1)
	set X=dvfmcal.des
	set D=D#7
	
	if D<3 set D=D+5
	else  set D=D-2
	quit $P(X,",",D)
	

public MON(Date D,PURE)
	/* Return Month Portion of Date D

	KEYWORDS: Date and Time

	ARGUMENTS:
		. D  Date in julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 or 1 indicator determining format of date field.
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$ Numeric month portion of input date  /TYP=N
	*/
	set ER=0
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit 0
	
	quit +(D.month())
	
public SDMON()
	/* Return Month portion of current system date from CUVAR
	
	   Used by computeds where CUVAR.TJD must be loaded
	*/
	
	type RecordCUVAR cuvar = Db.getRecord("CUVAR")
	
	quit $$MON(cuvar.tjd)

public DAY(Date D,PURE)
	/* Return Day Portion of Date D

	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  	Date in julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE	Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 or 1 indicator determining format of date field.
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$ Numeric day portion of input date		/TYP=N
	*/
	set ER=0
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit 0
	
	quit +(D.day())

public YEAR(Date D,PURE)
	/* Return Year Portion of Date D
	
	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  Date in julian or string format	/TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 or 1 indicator determining format of date field.
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$ Numeric year portion of input date  /TYP=N
	*/
	set ER=0
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit 0
	
	quit +(D.year())

public VMIN(DATE,Date MIN,PURE)
	/* Validate Date Not Less Than Minimum Value

	KEYWORDS:  Date and Time

	ARGUMENTS:
		. DATE  Date, julian or string format	/TYP=T/REQ/MECH=VAL

		. MIN Date, julian or string format	/TYP=T/REQ/MECH=VAL
			Value is used to compare DATE against to find
			true or false condition if DATE is below or above
			MIN

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  True or False (1 or 0) value	/TYP=N
			1 if given DATE falls above MIN date
			0 if given DATE falls below MIN date
	*/

	set ER=0
	// No maximum value needed
	quit $$VRNG(DATE,MIN,"",$G(PURE))
	

public VMAX(DATE,Date MAX,PURE)
	/* Validate Date Not Greater Than Maximum Value

	KEYWORDS:  Date and Time

	ARGUMENTS:
		. DATE  Date, julian or string format	/TYP=T/REQ/MECH=VAL

		. MAX Date, julian or string format	/TYP=T/REQ/MECH=VAL
			Value is used to compare DATE against to find
			true or false condition if DATE is below or above
			MAX

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  True or False (1 or 0) value	/TYP=N
			1 if given DATE falls below MAX date
			0 if given DATE falls above MAX date
	*/

	set ER=0
	// No minimum value needed
	quit $$VRNG(DATE,"",MAX,$G(PURE))
	

public VRNG(Date D,Date MIN,Date MAX,PURE)
	/* Validate Date Range, Inclusive

	KEYWORDS:  Date and Time

	ARGUMENTS:
		. DATE  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. MIN Date, julian or string format  /TYP=T/REQ/MECH=VAL
			Defines lower limit of date range

		. MAX Date, julian or string format  /TYP=T/REQ/MECH=VAL
			Defines upper limit of date range

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  True or False (1 or 0) value   /TYP=N
			1 if given DATE falls above MIN date
			0 if given DATE falls below MIN date
	*/
	set ER=0
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit 0
	if MIN'="",'$G(PURE) set MIN=$$^SCAJD(MIN) if ER quit 0
	if MAX'="",'$G(PURE) set MAX=$$^SCAJD(MAX) if ER quit 0
	
	// Minimum value is ~p1
	if MIN'="",D<MIN set ER=1 set RM=$$^MSG(1743,MIN.toString()) quit 0
	// Maximum value is ~p1
	if MAX'="",D>MAX set ER=1 set RM=$$^MSG(1697,MAX.toString()) quit 0
	// It's ok
	quit 1
	

public MIN(D1,D2,PURE)
	/* Return Lesser of D1 and D2, Julian Return

	KEYWORDS:  Date and Time

	ARGUMENTS:
	. D1  Date, julian or string format  /TYP=T/REQ/MECH=VAL

	. D2  Date, julian or string format  /TYP=T/REQ/MECH=VAL

	. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
		0 = Unknown format (Julian or string)
		1 = Known julian date format

	RETURNS:
		. $$  Value of lesser value of D1 or D2   /TYP=N
	*/

	set ER=0
	if '$G(PURE) set D1=$$^SCAJD(D1) if ER quit -1
	if '$G(PURE) set D2=$$^SCAJD(D2) if ER quit -1
	if D1<D2 quit D1
	quit D2
	

public MAX(D1,D2,PURE)
	/* Return Greater of D1 and D2, Julian Return

	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D1  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. D2  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of Greater value of D1 or D2   /TYP=N
	*/

	set ER=0
	if '$G(PURE) set D1=$$^SCAJD(D1) if ER quit -1
	if '$G(PURE) set D2=$$^SCAJD(D2) if ER quit -1
	if D1>D2 quit D1

	quit D2
	

public BOMJD(Date D,PURE)
	/* Beginning-Of-Month, Julian Return

	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of Julian date of beginning of month   /TYP=N
			of given date D.
	*/

	set ER=0
	
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit -1
	quit D-(D.day())+1

public EOMJD(Date D,PURE)
	/* End-Of-Month, Julian Return

	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of Julian date of end of month   /TYP=N
		of given date D.
	*/

	set ER=0
	
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit -1
	
	type Date EOM
	for EOM=D+(28-(D.day())):1 if (EOM.month())-((EOM+1).month()) quit
	quit EOM
	

public BOYJD(Date D,PURE)
	/* Beginning-Of-Year, Julian Return

	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of Julian date of beginning of year   /TYP=N
		 of given date D.
	*/

	set ER=0
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit -1

	// Return Julian
	quit $$^SCAJD("1/1/"_$$YEAR(D,1))
	

public BOFY(Date D,PURE)
	/* Beginning-Of-financial-Year, Julian Return

	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		 . $$  Value of Julian date of beginning of financial    /TYP=N
			year of given date D.
	*/

	new JD,MMDD,YEAR
	set ER=0
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit -1

	type Date FINYE
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set FINYE=cuvar.finye
	set MMDD=FINYE.toString("MM/DD/")

	set YEAR=$$YEAR(D,1)
	set JD=$$^SCAJD(MMDD_YEAR)
	if (D=JD)!(D<JD) set JD=$$^SCAJD(MMDD_(YEAR-1))

	quit JD+1
	

public BOTY(Date D,PURE)
	/* Beginning-Of-Tax-Year, Julian Return
	
	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of Julian date of beginning of tax    /TYP=N
		year of given date D.
	*/

	new JD,MMDD,YEAR
	
	set ER=0
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit -1

	type Date TAXYE
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set TAXYE=cuvar.taxye
	set MMDD=TAXYE.toString("MM/DD/")
	set YEAR=$$YEAR(D,1)
	set JD=$$^SCAJD(MMDD_YEAR) if (D=JD)!(D<JD) set JD=$$^SCAJD(MMDD_(YEAR-1))

	quit JD+1
	

public EOFY(Date D,PURE)
	/* End-Of-financial-Year, Julian Return
	
	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of Julian date of end of financial    /TYP=N
		 year of given date D.
	*/
	
	new JD,MMDD,YEAR
	
	set ER=0
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit -1
	
	type Date FINYE
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set FINYE=cuvar.finye
	set MMDD=FINYE.toString("MM/DD/")
 
	set YEAR=$$YEAR(D,1)
	set JD=$$^SCAJD(MMDD_YEAR) 
	if D>JD set JD=$$^SCAJD(MMDD_(YEAR+1))
	quit JD
	

public EOTY(Date D,PURE)
	/* End-Of-Tax-Year, Julian Return
	
	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of Julian date of end of tax    /TYP=N
		 year of given date D.
	*/

	new JD,MMDD,YEAR
	
	set ER=0
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit -1
	
	type Date TAXYE
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	set TAXYE=cuvar.taxye
	set MMDD=TAXYE.toString("MM/DD/") 

	set YEAR=$$YEAR(D,1)
	set JD=$$^SCAJD(MMDD_YEAR) if D>JD set JD=$$^SCAJD(MMDD_(YEAR+1))

	quit JD
	

public EOYJD(Date D,PURE)
	/* End-Of-Year, Julian Return
	
	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of Julian date of end of year   /TYP=N
		of given date D.
	*/

	set ER=0
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit -1
	// Return Julian
	quit $$^SCAJD("12/31/"_$$YEAR(D,1))
	

public NOD(D1,D2,PURE)
	/* Number of Days Between D1 and D2
	
	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D1  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. D2  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of number of days between dates   /TYP=N
		 D1 and D2.
	*/

	set ER=0
	if '$G(PURE) set D1=$$^SCAJD(D1) if ER quit 0
	if '$G(PURE) set D2=$$^SCAJD(D2) if ER quit 0
	// Check if wrong order
	if D1<D2 quit D2-D1

	quit D1-D2


public NODM(Date D,PURE)
	/* Number of Days in a given Month
	
	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of number of days in the month   /TYP=N
			of given date D.
	*/

	set ER=0
	// Check if valid format
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit 0

	quit $$EOMJD(D,1)-$$BOMJD(D,1)+1
	

public NODY(Date D,PURE)
	/* Number of Days in a Year
	
	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format
	
	RETURNS:
		. $$  Value of number of days in the year   /TYP=N
		of given date D.
	*/

	set ER=0
	// Check if valid format
	if '$G(PURE) set D=$$^SCAJD(D) if ER quit 0

	quit $$EOYJD(D,1)-$$BOYJD(D,1)+1
	

public NOM(D1,D2,FRACTION,PURE)
	/* Number of Months between D1 and D2
	
	KEYWORDS:  Date and Time

	ARGUMENTS:
		. D1  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. D2  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. FRACTION  Indicator to include  /TYP=L/NOREQ/MECH=VAL/DFT=0
			fractional portion of number of months between
			D1 and D2 in return value

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of number of months between dates   /TYP=N
		D1 and D2.
	*/

	new DD,MONS,DAYS,YEARS,FRAC
	
	set ER=0
	if '$G(PURE) set D1=$$^SCAJD(D1) if ER quit 0
	if '$G(PURE) set D2=$$^SCAJD(D2) if ER quit 0
	
	// Calculate the delta-date of D1 and D2
	set DD=$$DD(D1,D2,1)
	// Error converting?
	if ER quit 0
	// Remove negative
	if $E(DD)="-" set DD=$E(DD,2,$L(DD))
	// Months in the delta
	set MONS=$P(DD,"/",1)
	// Days...
	set DAYS=$P(DD,"/",2)
	// Years...
	set YEARS=$P(DD,"/",3)
	
	if YEARS set MONS=MONS+(YEARS*12)
	
	// Add fractional days only if needed...
	// No days left over?
	if 'DAYS quit MONS
	// No fractional part required?
	if '$G(FRACTION) quit MONS
	
	quit MONS+(DAYS/$$NOD($$DDMATH(D1,MONS,1),$$DDMATH(D1,MONS+1,1),1))
	

public NOY(D1,D2,FRACTION,PURE)
	/* Number of Years between D1 and D2
	
	KEYWORDS: Date and Time

	ARGUMENTS:
		. D1  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. D2  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. FRACTION  Indicator to include  /TYP=L/NOREQ/MECH=VAL/DFT=0
			fractional portion of number of years between
			D1 and D2 in return value

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Value of number of years between dates   /TYP=N
		D1 and D2.

	*/

	new DD,YEARS,MONS,DAYS,NOD
	
	set ER=0
	set PURE=$G(PURE)
	// Get the delta-date of D1 and D2
	set DD=$$DD(D1,D2,PURE)
	// Error converting
	if ER quit 0
	
	set MONS=$P(DD,"/",1)
	set DAYS=$P(DD,"/",2)
	// Years in the delta
	set YEARS=$P(DD,"/",3)
	
	// No days left over?
	if 'DAYS,'MONS quit YEARS
	// Don't care about fractional part?
	if '$G(FRACTION) quit YEARS
	set DAYS=$$NOD($$DDMATH(D1,"//"_YEARS,PURE),D2,PURE)
	set NOD=$$NOD($$DDMATH(D1,"//"_YEARS,PURE),$$DDMATH(D1,"//"_(YEARS+1),PURE),PURE)

	quit YEARS+(DAYS/NOD)
	

public ADDMDS(Date D,N,PURE)
	/* Add N Months to D, String Return

	KEYWORDS: Date and Time

	AGRUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. N  Number of months to be added to /TYP=N/REQ/MECH=VAL
			given date D.

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  String value of date found by adding N   /TYP=T
		months to input Date D, format is MM/DD/YY
	*/

	type Date JD
	set ER=0
	set JD=$$ADDMJD(D,N,$G(PURE)) if ER quit ""

	quit JD.toString()
	

public ADDMJD(Date D,N,PURE)
	/* Add N Months to D, Julian Return
	Note: N can be negative

	KEYWORDS: Date and Time

	AGRUMENTS:
		. D  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. N  Number of months to be added to /TYP=N/REQ/MECH=VAL
			given date D.

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Julian Date value found by adding N   /TYP=N
		months to input Date D
	*/

	set ER=0
	quit $$DDMATH(D,N,$G(PURE))
	

public DDT(DD)
	/* Delta Date Text Message

	KEYWORDS: Date and Time

	AGRUMENTS:
		. DD  Date, in string format MM/DD/YY  /TYP=T/REQ/MECH=VAL

	RETURNS:
		. $$  String value of date in 'message'   /TYP=T
			format, X years, Y months, Z days
	*/

	type String YEARS,YRS,MONS,MNS,DAYS,DYS,SIGN,DDT
	
	set ER=0
	
	// Check if negative
	if $E(DD)="-" set SIGN=1 set DD=$E(DD,2,$L(DD))
	else  set SIGN=""
	set YEARS=+$P(DD,"/",3)
	set MONS=+$P(DD,"/",1)
	set DAYS=+$P(DD,"/",2)
	set DDT=""
	
	if YEARS=0 set YEARS=""
	// ~p1 years
	else  set YRS=$$^MSG(4732,YEARS) set:YEARS>1 YRS=$$^MSG(5701,YEARS)
	if MONS=0 set MONS=""
	// ~p1 months
	else  set MNS=$$^MSG(4731,MONS) set:MONS>1 MNS=$$^MSG(5702,MONS)
	if DAYS=0 set DAYS=""
	// ~p1 days
	else  set DYS=$$^MSG(4730,DAYS) set:DAYS>1 DYS=$$^MSG(5703,DAYS)
	
	set DDT=YRS
	if DDT="" set DDT=MNS
	else  set:MNS'="" DDT=DDT_", "_MNS
	if DDT="" set DDT=DYS
	else  set:DYS'="" DDT=DDT_", "_DYS
	
	quit DDT
	

public DD(X,Y,PURE)
	/* Delta Date String
	Compute the difference between 2 dates in years, months, and days,
	and return a Delta-date string, format MM/DD/YYYY.

	KEYWORDS: Date and Time

	AGRUMENTS:
		. X  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. Y  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  String value of difference between   /TYP=T
			dates X and Y in years, months, and days,
			format is MM/DD/YYYY
	*/

	new SIGN,T,EOMX,EOMY,YEARS,MONS,DAYS,DAYY,DAYX
	type Date XJD,YJD
	set ER=0
	
	// Convert to Julian
	if '$G(PURE) set XJD=$$^SCAJD(X) if ER quit ""
	if '$G(PURE) set YJD=$$^SCAJD(Y) if ER quit ""

	if $G(PURE) set XJD=X set YJD=Y
	
	// Reverse order?
	if XJD>YJD set SIGN="-" set T=XJD set XJD=YJD set YJD=T
	else  set SIGN=""
	// End-of-month?
	set EOMX=(XJD=$$EOMJD(XJD,1))
	set EOMY=(YJD=$$EOMJD(YJD,1))
	// Back to strings
	set X=XJD.toString()
	set Y=YJD.toString()
	set YEARS=$$YEAR(YJD,1)-$$YEAR(XJD,1)
	set MONS=$$MON(YJD,1)-$$MON(XJD,1)
	
	if MONS<0,YEARS>0 set YEARS=YEARS-1 set MONS=MONS+12
	// Both end-of-months?
	if EOMX,EOMY set DAYS=0
	else  do {
		set DAYY=$$DAY(YJD,1)
		set DAYX=$$DAY(XJD,1)
		if DAYY'<DAYX set DAYS=DAYY-DAYX quit 
	
		set MONS=MONS-1
		if MONS<0,YEARS>0 set YEARS=YEARS-1 set MONS=MONS+12
		set DAYS=$$NOD($$DDMATH(XJD,MONS_"//"_YEARS,1),YJD,1)
		}
	
	set D=MONS_"/"_DAYS_"/"_YEARS
	// Return the sign to indicate negative delta-date
	quit SIGN_D
	

public DDMATH(DATE,DD,PURE)
	/* Date Math: Julian Return
	Apply a Delta-Date string to the input date, return Julian result

	KEYWORDS: Date and Time

	AGRUMENTS:
		. DATE  Date, julian or string format  /TYP=T/REQ/MECH=VAL

		. DD  Date, delta string format  /TYP=T/REQ/MECH=VAL

		. PURE  Indicator for date format  /TYP=L/NOREQ/MECH=VAL/DFT=0
			0 = Unknown format (Julian or string)
			1 = Known julian date format

	RETURNS:
		. $$  Julian Date value found by applying delta   /TYP=N
		date DD to DATE
	*/

	new MODE,MONS,DAYS,YEARS,EOM,M,D,Y,NODM
	
	// Problem converting
	if '$G(PURE) set DATE=$$^SCAJD(DATE) if ER quit -1	
	
	// Strip off negative sign
	if $E(DD)="-" set MODE=-1 set DD=$E(DD,2,$L(DD))
	else  set MODE=1
	
	set MONS=+$P(DD,"/",1)
	set DAYS=+$P(DD,"/",2)
	set YEARS=+$P(DD,"/",3)
	// Add days to the Julian number directly
	set DATE=DATE+(MODE*DAYS)
	// Is it the end of a month?
	set EOM=(DATE=$$EOMJD(DATE,1))
	set M=$$MON(DATE,1)
	set D=$$DAY(DATE,1)
	set Y=$$YEAR(DATE,1)
	// Determine year
	set Y=Y+(MODE*YEARS)
	// Determine month
	set M=M+(MODE*MONS)
	
	if MODE>0 for  quit:M'>12  set Y=Y+1 set M=M-12
	if MODE<0 for  quit:M'<1  set Y=Y-1 set M=M+12
	
	// Correct days down to the maximum number of days in the month.
	set NODM=$$NODM(M_"/1/"_Y) if D>NODM set D=NODM

	// Revert to Julian format
	quit $$^SCAJD(M_"/"_D_"/"_Y)


TEST(beg,end,io) // Test SCADAT


	set x=$$FILE^%ZOPEN(io,"write/new",2,1024) if 'x quit 
	set x=$h set t1=x*1E5+$P(x,",",2)
	
	use io
	for jd=beg:1:end do {
		write !,jd
		write $C(9),$$MON^SCADAT(jd,1)
		write $C(9),$$DAY^SCADAT(jd,1)
		write $C(9),$$YEAR^SCADAT(jd,1)
	
		write $C(9),$$BOMJD^SCADAT(jd,1)
		write $C(9),$$EOMJD^SCADAT(jd,1)
	
		write $C(9),$$BOTY^SCADAT(jd,1)
		write $C(9),$$EOTY^SCADAT(jd,1)
	
		write $C(9),$$BOFY^SCADAT(jd,1)
		write $C(9),$$EOFY^SCADAT(jd,1)
		}
	
	set x=$h set t2=x*1E5+$P(x,",",2)
	// I18N=OFF
	write !,"Elapsed time=",t2-t1
	// I18N=ON
	do CLOSE^SCAIO
	quit 
 #OPTION ResultClass ON
public String vSIG()	quit "60425^3222^Dan Russell^25394"	// Signature - LTD^TIME^USER^SIZE
