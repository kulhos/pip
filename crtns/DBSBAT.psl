DBSBAT	
		 
	/*
	Batch Procedure Definition
	
	LIBRARY: 
		. CREATE   - Create batch definition 
		. MODIFY   - Modify batch definition 
		. DELETE   - Delete batch definition 
		. COPY     - Copy batch definition 
		. BUILD    - Build run-time routine
		. BUILDALL - Mass recompile batch routines

	---- Revision History -------------------------------------------------
	10/10/2007 - RussellDS - CR29695
		Eliminate use of setMode(3).  Being obsoleted in PSL.
		
	04/25/06 - RussellDS - CR20967
		   Converted to PSL.
	
	10/03/07 - Pete Chenard - CR29499
		   Modified exec section to not call the .save() method unless
		   the batch header or code was actually modified.  This prevents
		   the last date and user ID from being updated if the user
		   quits from the function.

	-----------------------------------------------------------------------
	*/
	
	quit			// No entry from top


public CREATE

	/*
	Create a new batch definition (called by function DBSBATC)
	*/

	do exec(0)

	quit
	
	
public MODIFY

	/*
	Modify a batch definition (called by function DBSBATM)
	*/

	do exec(1)

	quit
	
	
public DELETE

	/*
	Delete a batch definition (called by DBSBATD)
	*/

	do exec(3)

	quit
	
	
public COPY

	/*
	Copy definition (Called by function DBSBATCO)
	*/

	type Number %FRAME, OLNTB
	type String %READ, %TAB(), BCHFROM, BCHTO, VFMQ

	set %TAB("BCHFROM") = "/DES=From Batch Name/LE=12/TYP=U/TBL=[DBTBL33]"
	set %TAB("BCHTO") = "/DES=To Batch Name/LE=12/TYP=U/TBL=[DBTBL33]:NOVAL/XPP=D pp^DBSBAT"
	set %READ = "@@%FN,,BCHFROM/REQ,BCHTO/REQ,"
	set %FRAME = 2
	
	do ^UTLREAD quit:(VFMQ = "Q")
	
	do Runtime.start("CS")
	
	// Copy header
	type RecordDBTBL33 bchfrom = Db.getRecord("DBTBL33", "%LIBS='SYSDEV',BCHID=:BCHFROM")
	type RecordDBTBL33 bchto = bchfrom.copy()
	
	set bchto.bchid = BCHTO
	set bchto.pgm = ""			// Remove program name
	
	do bchto.setMode(0)
	
	do bchto.save()
	
	// Copy code
	type DbSet ds = Db.selectDbSet("DBTBL33D", "%LIBS='SYSDEV' AND BCHID=:BCHFROM")
	
	while ds.next() do {
		
		type RecordDBTBL33D codefrom = ds.getRecord("DBTBL33D")
		type RecordDBTBL33D codeto = codefrom.copy()
		
		set codeto.bchid = BCHTO
		
		do codeto.setMode(0)
		do codeto.save()
	}
	
	do Runtime.commit()
		
	quit


public BUILD

	/*
	Build run-time routine (Called by function DBSBATB)
	*/
	
	quit:'$$LIST^DBSGETID("DBTBL33")		// Select names
	
	type ResultSet rs = Db.select("ELEMENT", "TMPDQ", "PID=:%ProcessID", "ELEMENT ASC")
	
	while rs.next() do COMPILE(rs.getCol("ELEMENT"))
	
	do Db.delete("TMPDQ","PID = :%ProcessID")
	
	quit


public BUILDALL

	/*
	Build run-time routines (called by BATCH.COM)
	*/

	type ResultSet rs = Db.select("BCHID", "DBTBL33", "%LIBS='SYSDEV'", "BCHID ASC")
	
	while rs.next() do COMPILE(rs.getCol("BCHID"))
	
	quit


COMPILE(String BCHID)

	/*
	Compile procedure run-time routine 
	*/
	
	write !, BCHID, ?15
	
	do COMPILE^DBSBCH(BCHID)

	quit
	
	
exec(Number %ProcessMode)

	type public Boolean ER
	type public String RM

	type Boolean zproc
	type String %READ, %TAB(), BCHID, DBTBL(,,), VFMQ

	if (%ProcessMode = 0) set %TAB("BCHID") = "[DBTBL33]BCHID/TBL=[DBTBL33]:NOVAL/XPP=D pp^DBSBAT"
	else  set %TAB("BCHID") = "[DBTBL33]BCHID/TBL=[DBTBL33]"

	set %READ = "@@%FN/CEN/REV,,BCHID/REQ"
	
	do ^UTLREAD quit:(VFMQ = "Q")

	set DBTBL("SYSDEV", 33, BCHID) = ""	// Avoid lock warning
	lock +DBTBL("SYSDEV",33,BCHID):2
	else  do { quit
		
		set ER = 1
		// ~p1 record locked by another user
		set RM=$$^MSG(7354, "Batch")
	}
	
	type RecordDBTBL33 fDBTBL33 = Db.getRecord("DBTBL33", "%LIBS='SYSDEV',BCHID=:BCHID", 1)
	
	// Set default values for create
	if (fDBTBL33.getMode() = 0) do {
		
		set fDBTBL33.mglobal = 0
		set fDBTBL33.msgbufs = 100
		set fDBTBL33.maxsize = 32000
		set fDBTBL33.nonrand = 0
		set fDBTBL33.schtimr = 10
		set fDBTBL33.thrtimr = 10
	}
	
	do DRV^USID(%ProcessMode, "DBTBL33L", .fDBTBL33)
	
	if (VFMQ = "Q") do { quit
		
		lock -DBTBL("SYSDEV",33,BCHID)
	}
	
	do Runtime.start("CS")
	
	if (%ProcessMode = 3) do {
		
		type String pgm = fDBTBL33.pgm
		
		if 'pgm.isNull() do DEL^%ZRTNDEL(pgm)	// Delete routine
		
		do Db.delete("DBTBL33", "%LIBS='SYSDEV' AND BCHID=:fDBTBL33.bchid")
	}
	
	else  if fDBTBL33.isChanged() do fDBTBL33.save()
	
	// Edit code
	
	if zproc do {
		
		type Number seq
		type String buf(), sec
		
		set seq = 1
		for sec="REVHIST", "OPEN", "SCHINIT", "SCHEXEC", "SCHPOST", "SCHEXIT", "THRINIT", "THREXEC", "EXEC", "THREXIT" do {
			
			set buf(seq) = "---------- "_sec.justify(8, -1)_"------ Section marker"
			set seq = seq + 1
			set buf(seq) = ""
			set seq = seq + 1
			
			type DbSet ds = Db.selectDbSet("DBTBL33D", "%LIBS='SYSDEV' AND BCHID=:BCHID AND LABEL=:sec", "SEQ ASC")
			
			while ds.next() do {
				
				type RecordDBTBL33D dbtbl33d = ds.getRecord("DBTBL33D")
				
				set buf(seq) = dbtbl33d.code
				set seq = seq + 1
			}
		}
			
		do ^DBSWRITE("buf")
		
		if (VFMQ '= "Q") do {
		
			type Boolean isNewSec, isSecTop
			type Number secseq
			type String x
		
			do Db.delete("DBTBL33D", "%LIBS='SYSDEV' AND BCHID=:BCHID")
			
			set isSecTop = 0
			set (sec, seq) = ""
			for  set seq = buf(seq).order() quit:seq.isNull()  do {
				
				set isNewSec = 0
				set x = buf(seq)
				
				// See if section name, set up new section flags
				if x.extract(1, 11) = "---------- " do {
					
					type String tag
					
					set tag = x.extract(12, 20).piece(" ", 1)
					
					if 'tag.isNull() do {
					
						set sec = tag
						set secseq = 1
						set isNewSec = 1
						set isSecTop = 1
					}
				}
				
				if 'isNewSec, 'sec.isNull() do {
				
					// Ignore blank lines at section top
					if x.isNull(), isSecTop quit
					
					set isSecTop = 0
					
					type RecordDBTBL33D dbtbl33d = Class.new("RecordDBTBL33D", "%LIBS='SYSDEV',BCHID=:BCHID,LABEL=:sec,SEQ=:secseq")
					
					set dbtbl33d.code = x
					
					do dbtbl33d.save()
					
					set secseq = secseq + 1
				}
			}
		}
		
		quit:VFMQ="Q"
		set fDBTBL33.time = %CurrentTime		
		do fDBTBL33.setMode(1)
		do fDBTBL33.save()
	}
	
	do Runtime.commit()
	
	lock -DBTBL("SYSDEV",33,BCHID)
	
	quit
					

pp	// UTLREAD post processor to check duplicate name

	type public Boolean ER
	type public String RM, X
	
	quit:X.isNull()
	
	if Db.isDefined("DBTBL33", "%LIBS='SYSDEV' AND BCHID=:X") do {
		
		set ER = 1
		// Already exists
		set RM = $$^MSG(253)
	}
	
	quit
 #OPTION ResultClass ON
public String vSIG()	quit "60913^34303^Dan Russell^6014"	// Signature - LTD^TIME^USER^SIZE
