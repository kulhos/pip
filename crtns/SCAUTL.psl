	/*
	--------------------- Revision History --------------------------
	
	04/04/07 - RussellDS - CR25675
		   Added BYPASS to z* commands
	
	01/24/07 - RussellDS - CRs 24902 / 24903 / 24974
		   Removed header comment about needing to release the .m
		   file for bootstrapping.  That is no longer needed.
		   
	08/08/06 - Pete Chenard - CR 22561
		Added PSL upgrade comments.
		Cleaned up a few warnings.
		
	07/25/06 - Pete Chenard - CR 20048
		Corrected .lower and .upper calls to the correct names
		.lowerCase and .upperCase.
		
	05/17/06 - Allan Mattson - CR20048
	       Added functions $$UPPER and $$LOWER to support Unicode
	       case conversions (replaces functions $$UPPER and
	       $$LOWER in routine %ZFUNC).
	       
	       Deleted pre-2005 revision history.

	01/02/06 - chhabris - CR18749
		   Modified naked section to replace variable $ZVN to
		   $ZVERSION.

	10/04/05 - Alagarss - 16677
		   Removed deprecated feature Db.nextkey and replaced 
		   with ResultSet.next.


	Procedure ID:  SCAUTL

	Description:

	This procedure definition is compiled into run-time program SCAUTL.
	It is a library of utilities that are used for non-application
	specific tasks.  Note that, in some cases, the utilities may be
	dependent upon a particular version of GT.M.  

	Library:

		TRACE - Utility to trace M-code
	*/

	// I18N=QUIT

	quit

NOISO	// Public; Specify NoIsolation

	/*
	Note:  The code in this subroutine has been moved into SCADRV0.
	NOISO^SCAUTL has been preserved as ^%ZJOB still calls into this
	label (at least temporarily).
	*/

	do NOISO^SCADRV0
	quit


TRACE(beg,max,del,zsh,dev,expr,varlist) // Trace M code

	/*
	This subroutine is used to trace the code execution path
	of an M process starting with the line specified by
	paramater 'beg'.  The trace will continue until the
	number of lines reaches the specified maximum, 'max',
	or until the program call stack ($zlevel) is less
	than what it was when the trace began.

	ARGUMENTS
	     . beg	Begin trace		/TYP=T/REQ/MECH=VAL

			The program location the trace is activated.
			(format = tag^pgm)

	     . max	Maximum line count	/TYP=N/NOREQ/MECH=VAL
						/DFT='no max'

			The maximum number of program lines that will
			be included in the trace once it is activated.

	     . del	Delay count		/TYP=N/NOREQ/MECH=VAL
						/DFT=1

			The number of times that the execution passes
			through the start point before the trace is
			activated.

	     . zsh	ZSHOW code		/TYP=T/NOREQ/MECH=VAL
						/DFT="*" (All)

			The code that determines the type of info
			that is display by the GT.M command ZSHOW.
			Refer to the GT.M Programmer's Guide for
			a description of each of these codes.

	     . dev	Output device		/TYP=T/NOREQ/MECH=VAL
						/DFT=ztrace_$j.dat

			The device the trace information is directed.

	     . expr	M expression		/TYP=T/NOREQ/MECH=VAL

			A truth-valued M expression that controls
			whether or not GT.M executes the [break]
			command.

	     . varlist	Variable list		/TYP=T/NOREQ/MECH=VAL

			A comma-separated list of named local variables
			to display when their values change during
			program execution.

	EXAMPLE:

		D TRACE^SCAUTL("MSG+1^MSG",500,,"S",,"I $G(msgid)=1300")

		The above example will output the M invocation stack and
		the first 500 lines of code that are executed beginning
		with line MSG+1^MSG once the condition specified in the
		6th parameter is satisfied.  (Note that the output will
		be directed to 'scau$spool:mtrace_$j.dat' as an
		output device is not specified.)

	*/

	type String arg,tag

	set beg=beg.get()
	set max=max.get()
	set del=del.get()
	set zsh=zsh.get()
	set dev=dev.get()
	set expr=expr.get()
	set varlist=varlist.get()

	if beg.isNull() quit
	if beg.piece("^",1).isNull() set beg.piece("^",1)=beg.piece("^",2)

	set tag="$T("_beg_")=""""" if @tag quit

	// Defaults
	if 'del set del=1
	if zsh.isNull() set zsh="*"
	if expr'="" s expr=expr_" "

	if dev.isNull() set dev=$$FILE^%TRNLNM("mtrace_"_%ProcessID_".dat","SCAU$SPOOL")
	if '$$FILE^%ZOPEN(dev,"WRITE/NEWV",2,1024) quit
	
	do Db.fastDelete("TMPTRACE","PID=:%ProcessID")
	do Db.fastDelete("TMPTRACEV","PID=:%ProcessID")

	type RecordTMPTRACE tmptrc=Class.new("RecordTMPTRACE")

	set tmptrc.pid=%ProcessID
	set tmptrc.pos=beg
	set tmptrc.maxlines=max
	set tmptrc.delay=del
	set tmptrc.mzshow=zsh
	set tmptrc.iodev=dev

	if varlist'="" do {
		type String str,var
		
		set tmptrc.varlist=varlist

		set str=varlist
		for  set var=$$var(.str) quit:var.isNull()  do {

			type RecordTMPTRACEV tmptrcv=Class.new("RecordTMPTRACEV")

			set tmptrcv.pid=%ProcessID
			set tmptrcv.var=var
			set tmptrcv.val="<Unknown>"

			do tmptrcv.bypassSave()
			}
		}

	do tmptrc.bypassSave()

	#ACCEPT Date=04/04/07; Pgm=RussellDS; CR=25675; Group=BYPASS
	#BYPASS
	set $zstep=" quit:$$trace^SCAUTL($zpos)=0  zstep into"
	set arg=$$QADD^%ZS(expr_"zbreak -"_beg_$zstep)
	zbreak @(beg_":"_arg_":"_del)
	#ENDBYPASS
	
	quit


trace(%Ztag)	// Execute trace

	type Number %Zcnt,%Zmax,%Zzlv
	type String %Z,%Zdev,%Zpos,%Zref,%Zvar,%Zzio,%Zzsh

	set %Zzio=$I
	set %Zref=$REFERENCE

	catch Error {
		do ZT^SCAUTL(%Zzio,%Zref)
		}

	type RecordTMPTRACE tmptrc=Db.getRecord("TMPTRACE","PID=:%ProcessID")

	set %Zcnt=tmptrc.cnt
	set %Zdev=tmptrc.iodev
	set %Zmax=tmptrc.maxlines
	set %Zpos=tmptrc.pos
	set %Zvar=tmptrc.varlist
	set %Zzlv=tmptrc.mzlevel
	set %Zzsh=tmptrc.mzshow

	set %Zcnt=%Zcnt+1
	if $$zlevel<%Zzlv set $zstep="" do exit(.tmptrc),naked(%Zref) quit 0
	if %Zmax,%Zcnt>%Zmax set $zstep="" do exit(.tmptrc),naked(%Zref) quit 0

	if %Zvar'="" do varlist(.%Zvar)
	use %Zdev do output(%Zcnt,%Zpos,%Zvar,%Zzsh) use %Zzio

	set tmptrc.cnt=%Zcnt
	set tmptrc.pos=%Ztag
	if %Zzlv.isNull() set tmptrc.mzlevel=$$zlevel

	do tmptrc.bypassSave()

	do naked(%Zref)
	quit 1


output(%Zcnt,%Zpos,%Zvar,%Zzsh)	// Print trace information to output device

	if %Zcnt=1 do zshow(%Zzsh)

	#ACCEPT Date=04/04/07; Pgm=RussellDS; CR=25675; Group=BYPASS
	#BYPASS
	write !,%Zcnt,$C(9),%Zpos,$C(9) zprint @%Zpos
	#ENDBYPASS

	if %Zvar'="" do {
		type String %Z
		
		set %Z=""
		for  set %Z=%Zvar(%Z).order() quit:%Z.isNull()  write $C(9),%Zvar(%Z),!
		}
	quit


zlevel()	// Return $zlevel

	type Number zlevel

	set zlevel="set zlevel=$zlevel"
	#ACCEPT Date=08/08/2006;PGM=Pete Chenard;CR=UNKNOWN;GROUP=XECUTE
	xecute zlevel
	quit zlevel-2


zshow(%Zzsh)	// ZSHOW information

	/*
	The #ACCEPT is used to avoid compiler 'Unscoped variable' warnings.
	The variables are typed below so that they are excluded from the
	variables displayed by the 'zshow' command.
	*/
	
	#ACCEPT Date=07/15/2003;PGM=Allan Mattson;CR=UNKNOWN
	type Number %Zcnt,%Zmax

	#ACCEPT Date=07/15/2003;PGM=Allan Mattson;CR=UNKNOWN
	type String %Z,%Zdev,%Zpos,%Zvar,%Zzio,%Zzlv

	#ACCEPT Date=04/04/07; Pgm=RussellDS; CR=25675; Group=BYPASS
	#BYPASS
	write ! zshow %Zzsh
	#ENDBYPASS
	
	quit


varlist(%ZLIST)	// Display value of local variables

	type String %ZVAL,%ZVAR

	set %ZVAR=""

	type ResultSet rstmp=Db.select("VAR","TMPTRACEV","PID=:%ProcessID")

	while rstmp.next()  do {
	
		set %ZVAR=rstmp.getCol("VAR")
	
		type RecordTMPTRACEV tmptrcv=Db.getRecord("TMPTRACEV","PID=:%ProcessID,VAR=:%ZVAR")

		set %ZVAL=@%ZVAR.get("<Undefined>")
		if %ZVAL=tmptrcv.val quit
		set tmptrcv.val=%ZVAL
		do tmptrcv.bypassSave()
		set %ZLIST(%ZVAR)="["_%ZVAR_"="_%ZVAL_"]"
		}
	quit


var(str)	//

	type String v

	set v=str.piece(",",1)

	if v["(" do {
		type Number x=0
		for  set x=str.find(")",x) quit:x=0  set v=str.extract(1,x-1) if v.length("""")#2 quit
		}

	set str=str.extract(str.find(v)+1,str.length())
	quit v


exit(RecordTMPTRACE tmptrc) // Exit trace

	type String dev,zsh

	set dev=tmptrc.iodev
	set zsh=tmptrc.mzshow

	do Db.fastDelete("TMPTRACE","PID=:%ProcessID")
	do Db.fastDelete("TMPTRACEV","PID=:%ProcessID")

	use dev do zshow(zsh)
	close dev
	quit


naked(gblref)	// Re-set naked reference

	if gblref.isNull() quit
	if $ZVERSION.piece("GT.M V",2)<4.3 quit

	#ACCEPT Date=08/08/2006;PGM=Pete Chenard; CR=UNKNOWN; GROUP=BYPASS
	#BYPASS
	if $D(@$REFERENCE)
	#ENDBYPASS
	quit


ZT(%Zzio,%Zref)	// Error trap

	do naked(%Zref)
	set $zstep=""
	use %Zzio
	quit


public UPPER(String str)	// Convert string to upper case
	/*
	This function provides an upper case conversion of a string.
	Called by various M routines that have not been converted to
	PSL.  This function replaces the call to $$UPPER^%ZFUNC.

	ARGUMENTS:
	     . str	Character string

	RETURNS:
		$$		Upper case string
	*/

	quit str.upperCase()


public LOWER(String str)	// Convert string to lower case
	/*
	This function provides an lower case conversion of a string.
	Called by various M routines that have not been converted to
	PSL.  This function replaces the call to $$LOWER^%ZFUNC.
	ARGUMENTS:
	     . str	Character string

	RETURNS:
		$$		Lower case string
	*/

	quit str.lowerCase()
 #OPTION ResultClass ON
public String vSIG()	quit "60739^33854^Dan Russell^8435"	// Signature - LTD^TIME^USER^SIZE
