	;-----------------------------------------------------------------------
	; NAME: UCOPTS_3DEV.ini
	;
	; ORIG:	RussellDS - 05/12/2004
	; DESC:	PSL Compiler Environment Options Specification File
	; DEST: Development environment at PSL code compliance level 3

	; **********************************************************************
	; ****         DO NOT DELETE THIS FILE; IT IS NEEDED BY PSL         ****
	; **********************************************************************

	;---- Comments ---------------------------------------------------------
	; This file is derived from UCOPTS.ini to contain the settings that
	; apply to a Development environment at PSL code compliance level 3.
	;
	; To use this file on a permanent basis, pull it from StarTeam into the
	; application's root directory, and rename the file to UCOPTS.ini, then
	; re-create UCOPTS.m as described below.
	;
	; To use the file as a temporary override, e.g. to validate that a PSL
	; source module meets the requirements of this type of environment at
	; this code compliance level, pull it from StarTeam, and point the
	; environment variable $SCAU_UCOPTS to this file.
	;
	; This file defines PSL compiler options for a particular environment.
	;
	; The PSL bootstrap proces, that will be called by the Profile
	; installation utilities, expects this file in the application's "top"
	; directory, as specified by the environment variable SCAU_DIR.
	; The bootstrap process will read and interpret this file to create the 
	; M routine UCOPTS. The UCOPTS routine will contain two entry points:
	;
	; void ^UCOPTS( String Options())
	;	This entrypoint defines the PSL compiler options for a
	;	particular environment. It is called by UCINIT^UCDTAUTL.
	;	Options that are not set up here are given default values by the
	;	caller.
	;
	; Primitive $$getPslValue^UCOPTS( String name)
	;	This function will return the value of the specified PSL
	;	property that is in effect in this environemnt.
	;	This function is called from several places in the PSL compiler,
	;	the SQL engine, and other code-generating Framework routines.
	;
	; If the options for a specific environment, e.g., a customer site, need
	; to be customized, then perform the following steps:
	; 1) modify THIS file
	; 2) call bootUCOPTS^UCGMCU() to create a new UCOPTS routine
	; 3) re-compile the application
	;
	; Although the proces that interprets the settings will deal with
	; character case mismatches, it is strongly recommended to adhere to the
	; exact spelling provided in this file.

	;---- Revision History -------------------------------------------------
	; 01/03/08 - Frans S.C. Witte - CR: 27800
	;	* Added #PSL Version and its description
	;	* Removed #OPTION AllowGOTO
	;	* Removed old history
	;
	; 08/31/06 - Frans S.C. Witte - CRs: 22720 / 22274
	;	Added standard setting for #OPTION ResultClass
	;
	; 04/28/06 - Frans S.C. Witte - CRs: 21394 / 21395
	;	Turned UCOPTS.proc into file UCOPTS.ini to be used to generate
	;	UCOPTS.m, and added support for INFO settings.

	; **********************************************************************
	; *                            PSL settings                            *
	; **********************************************************************
	;
	; The PSL compiler relies on the certain environment settings in order
	; to produce correct and consistent code. These settings are defined by
	; the #PSL compiler command.
	;
	; Because the values of these settings are essential for the PSL
	; compiler, the generated UCOPTS routine will contain code that returns
	; a value for every #PSL setting described below, even if the UCOPTS.ini
	; file does not contain an explicit value.
	;
	; The PSL compiler expects the following PSL settings:

	;---- BooleanMask
	; This setting is reserved to define the default mask for the future
	; extensions Boolean.toString() and String.toBoolean().
	;
	; The special value "" indicates that the mask will be supplied by:
	;	SELECT MSK FROM DBCTLDVFM WHERE TYP='L'
	; at compile time.
	;
	; resultClass = String, defaultValue = ""
	;
	; Recommended settings:
	; - All Profile environments: ""
	;
	#PSL BooleanMask ""

	;---- CompileSummary
	; This setting specifies if the compiler shall provide a summary of the
	; number of errors, warnings, and informational messages at the end of
	; the compilation.
	;
	; resultClass = Boolean, defaultValue = true
	;
	; Recommended settings:
	; - All environments: true
	;
	#PSL CompileSummary true

	;---- DateMask
	; This setting defines the default mask for Date.toString() and
	; String.toDate(). Please consult the PSL Help for the layout of
	; a date mask.
	;
	; The special value "" indicates that the mask will be supplied by:
	;	SELECT MSK FROM DBCTLDVFM WHERE TYP='D'
	; at compile time.
	;
	; resultClass = String, defaultValue = ""
	;
	; Recommended settings:
	; - All Profile environments: ""
	;
	#PSL DateMask ""

	;---- TimeMask
	; This setting defines the default mask for Time.toString(). Please
	; consult the PSL Help for the layout of a time mask.
	;
	; The special value "" indicates that the mask will be supplied by:
	;	SELECT MSK FROM DBCTLDVFM WHERE TYP='T'
	; at compile time.
	;
	; resultClass = String, defaultValue = ""
	;
	; Recommended settings:
	; - All Profile environments: ""
	;
	#PSL TimeMask ""

	;---- Version
	; The PSL compiler expects source code to match a certain code
	; compliance level, and is capable to compile PSL source code that
	; matches a lower code compliance level than the PSL compiler itself.
	; The code compliance level is a (PSL) Number between 2.6 and the
	; current PSL compiler version (inclusive).
	; Please refer to the PSL Help for a detailed list of PSL Versions.
	;
	; You can use a PSL V3.0 compiler to compile Profile V6.4 source code by
	; setting the PSL Version to 2.6, and change a number of the #WARN and
	; #OPTION settings (see the recommended settings of the individual
	; entries). Code compliance level 2.6 is a virtual compliance level, not
	; associated with any Profile release, specifically intended for this
	; purpose.
	; Note however that the SQL engine per Framework V2.7 will reject a
	; number of DQ constructs that were replaced during the migration to
	; Profile V7.0 and are no longer supported (such as [TABLE]COLUMN). This
	; is likely to result in PSL compile errors for certain occurrences of
	; the methods of the Db class.
	;
	; Never use Framework V3.0 to compile source code of Profile V6.3 or
	; lower. It generates code that is substantially different from the code
	; generated by the PSL compiler embedded in that Profile version. It is
	; very unlikely that the M routines of that Profile version can interact
	; with the code generated be the Framework V.30 compiler, even if the
	; code compliance level is set to 2.6.
	;
	; Recommended Settings:
	; - Profile Version 6.4: 2.6
	; - Profile Version 7.0: 2.7
	; - Profile Version 7.1: 2.7
	; - Profile Version 7.2: 2.7
	; - Profile Framework: 3
	;
	#PSL Version 3

	; **********************************************************************
	; *                          WARN settings                             *
	; **********************************************************************
	;
	; The PSL compiler can supply warnings about potential problems in the
	; source code. Every possible warning is categorized in a group. All
	; warnings of a group can be turned on or off.
	; Turning on a warning group will cause the compiler to print an
	; appropriate warning messages if it encounters a condition in the
	; specified group.
	;
	; Note that individual procedures, or sections of procedure code, can turn
	; individual warning options on or off.
	;
	; The PSL compiler recognizes the following warning groups:

	;---- ACCESS
	; Subroutine not accessible by external routine
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for Version 6.4: OFF
	; - Development environments for Version 7.0 and higher: ON
	;
	#WARN ACCESS ON

	;---- BYPASS
	; #BYPASS compiler command encountered
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN BYPASS ON

	;---- DATABASE
	; Method is not database independent
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN DATABASE ON

	;---- DEAD
	; Dead code
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN DEAD ON

	;---- DEPRECATED
	; Deprecated feature detected
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for Version 6.4: OFF
	; - Development environments for Version 7.0 and higher: ON
	;
	#WARN DEPRECATED ON

	;---- DYNAMIC
	; Dynamic SQL statement or other dynamic construct
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN DYNAMIC ON

	;---- FUNCTION
	; Extrinsic function replaced	
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments with code compliance level 2.6 or 2.7: OFF
	; - Development environments with code compliance level 3: ON
	;
	#WARN FUNCTION ON

	;---- GLOBAL
	; M Global Reference
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN GLOBAL ON

	;---- LENGTH
	; Indicates that a maximum length is exceeded.
	; This will be reported for names of labels and names of routines.
	; Note that exceeding the maximum length of a local variable name is
	; considered an error if the subroutine contains another name that
	; cannot be distinguished at the target language level.
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN LENGTH ON

	;---- MISMATCH
	; Parameter type mismatch in function or subroutine
	; call, or datatype mismatch in assignment
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN MISMATCH ON

	;---- PRECEDENCE
	; Ambiguous operator precedence
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN PRECEDENCE ON

	;---- READ
	; Restricted command (READ)
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments with code compliance level 2.6 or 2.7: OFF
	; - Development environments with code compliance level 3: ON
	;
	#WARN READ ON

	;---- RECEXISTS
	; Possible runtime error RECEXISTS
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN RECEXISTS ON

	;---- SCOPE
	; Scope of variable is not defined
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for Version 6.4: OFF
	; - Development environments for Version 7.0 and higher: ON
	;
	#WARN SCOPE ON

	;---- SYNTAX
	; A syntax error has been corrected by the compiler
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN SYNTAX ON

	;---- SYSVAR
	; Assigning system variable
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN SYSVAR ON

	;---- XECUTE
	; Restricted command - runtime Xecute
	;
	; Recommended settings:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#WARN XECUTE ON

	; **********************************************************************
	; *                          INFO settings                             *
	; **********************************************************************
	;
	; The PSL compiler can supply information messages about the code that
	; it will generate. Like warnings, all informational messages are
	; categorized in groups. All messages of a group can be turned on or
	; off.
	; Turning on an information group will cause the compiler to print an
	; appropriate information message if it encounters a condition in the
	; specified group.
	;
	; Note that individual procedures, or sections of procedure code, can
	; turn individual info options on or off.
	;
	; The INFO groups that are recognized by the PSL compiler  are the same
	; as the WARN groups listed above.
	;
	; Recommended settings for all INFO groups:
	; - Production environments for all versions: OFF
	; - Development environments for all versions: ON
	;
	#INFO * ON

	; **********************************************************************
	; *                         OPTIMIZE settings                          *
	; **********************************************************************
	;
	; Indicates to PSL whether to optimize code or not.
	;
	; Note that individual procedures can turn this on or off.
	;
	; Options are:

	;---- FUNCTIONS
	; replace extrinsic or intrinsic functions by methods
	;
	; Recommended settings:
	; - Production environments for all versions: ON
	; - Development environments for all versions: ON
	;
	#OPTIMIZE FUNCTIONS ON

	;---- OBJECTS
	; Optimize access to objects by replacing vobj(,) entries by individual
	; local variables. This option applies to instances of class ResultSet,
	; and to all non-abstract descendants of class Record
	;
	; Recommended settings:
	; - Production environments for all versions: ON
	; - Development environments for all versions: ON
	;
	#OPTIMIZE OBJECTS ON
	;

	; **********************************************************************
	; *                          Options settings                          *
	; **********************************************************************
	;
	; In addition to WARN and OPTIMIZE options, the PSL compiler supports a
	; number of miscelaneous options.
	; Unlike WARN and OPTIMIZE settings, the spelling of #OPTION values is
	; case sensitive.
	;
	; Note that individual procedures can turn this on or off.
	;
	; Options are:
	;
	;---- AutoPublicERRM
	;
	; Indicates that ER and RM should be considered automatically
	; "type public". Prevents warnings regarding their undeclared use in
	; earlier versions.
	;
	; Recommended settings:
	; - Production environments for Version 6.4: ON
	; - Production environments for Version 7.0 and higher: OFF
	; - Development environments for Version 6.4: ON
	; - Development environments for Version 7.0 and higher: OFF
	;
	#OPTION AutoPublicERRM OFF
	;
	;---- $GetEFD
	;
	; Indicates whether to convert %EffectiveDate references to $G(%EffectiveDate),
	; and EFD references to $G(EFD).
	;
	; Recommended settings:
	; - Production environments for Version 6.4: ON
	; - Production environments for Version 7.0 and higher: OFF
	; - Development environments for Version 6.4: ON
	; - Development environments for Version 7.0 and higher: OFF
	;
	#OPTION $GetEFD OFF
	;
	;---- ResultClass
	;
	; Indicates whether PSL label declarations will specify the class of the
	; result returned by the function (or void if the label does not return
	; a value). The resultclass is specified after the optional access
	; keyword and before the name of the label.
	; PSL source code that specifies the ResultClass is syntactically
	; incompatible with PSL source code that does not specify the
	; ResultClass, so this option must be turned ON or OFF on a PSL source
	; code function basis.
	;
	; Note that this setting is ignored and ON for Class Definition Modules.
	;
	; Recommended settings:
	; - Production environments for Version 6.4: OFF
	; - Production environments for Version 7.0 and higher: OFF
	; - Development environments for Version 6.4: OFF
	; - Development environments for Version 7.0 and higher: OFF
	;
	#OPTION ResultClass OFF

	; **********************************************************************
	; *                         PSL Property Value                         *
	; **********************************************************************
	;
	; The PSL compiler uses a number of adjustable constants that are
	; formally defined as properties of class PSL.
	; Function $$getPslValue^UCOPTS() is used to retrieve the property
	; values that apply for the current environment.
	;
	; The PSL compiler distinguishes multiple classes of property values.
	; Values that are immutable for a given environment are not listed in
	; this file. They will be included automatically in the generated UCOPTS
	; routine.
	;
	;---- PSL.batchCommitCount
	; For Oracle and other non-M databases, the logic that is generated
	; for the Runtime.commit() method when transactionID="BA" provides
	; the ability to delay commits to the underlying database until a
	; specific number have been accumulated. This provides for improved
	; performance.
	;
	#DEFINE batchCommitCount 500

	;---- PSL.maxCacheSize
	; This value indicates the maximum number of entries in a class Cache
	; structure. When a Cache.getRecord or an implied incremental load will
	; increase the number of nodes above  this limits, the cache will be
	; purged before the node is loaded.
	;
	#DEFINE maxCacheSize 100

	;---- PSL.maxDataLength
	; This value indicates the maximum length of that will be used when
	; storing data in MDB tables. In particular, this value is used to
	; split large data such as column values of type Memo and Blob.
	; Please make sure that the value does not exceed limits imposed by the
	; definition of the GT.M region that will store the data.
	;
	; If the environment is set up for UTF-8 encoded Unicode characters,
	; please be aware of the fact that this value specifies the number of
	; characters that are allowed in a data string. The actual number of
	; bytes needed to store the string will be greater than the number of
	; characters if the string does contain non-ASCII characters.
	;
	#DEFINE maxDataLength 450
